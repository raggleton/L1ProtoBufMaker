import FWCore.ParameterSet.Config as cms

process = cms.Process("L1PROTOBUF")

process.source = cms.Source("PoolSource",
    secondaryFileNames = cms.untracked.vstring(),
    fileNames = cms.untracked.vstring('/store/mc/Summer12/Neutrino_Pt2to20_gun/GEN-SIM-DIGI-RAW/UpgradeL1TDR-PU35_POSTLS161_V12-v2/00000/168A4B24-C53C-E211-A370-003048C68AA6.root')
)
process.BeamHaloSummary = cms.EDProducer("BeamHaloSummaryProducer",
    l_HcalPhiWedgeConfidence = cms.double(0.7),
    t_EcalSuperClusterSize = cms.int32(3),
    l_EcalSuperClusterEnergy = cms.double(10.0),
    l_EcalPhiWedgeConfidence = cms.double(0.7),
    t_EcalPhiWedgeEnergy = cms.double(20.0),
    t_EcalPhiWedgeConfidence = cms.double(0.9),
    l_HcalPhiWedgeEnergy = cms.double(20.0),
    t_EcalShowerShapesRoundness = cms.double(0.23),
    l_HcalPhiWedgeConstituents = cms.int32(6),
    EcalHaloDataLabel = cms.InputTag("EcalHaloData"),
    l_EcalShowerShapesRoundness = cms.double(0.41),
    l_EcalSuperClusterSize = cms.int32(3),
    t_HcalPhiWedgeEnergy = cms.double(25.0),
    t_HcalPhiWedgeConfidence = cms.double(0.9),
    t_EcalShowerShapesAngle = cms.double(0.51),
    t_EcalPhiWedgeConstituents = cms.int32(8),
    l_EcalPhiWedgeEnergy = cms.double(10.0),
    GlobalHaloDataLabel = cms.InputTag("GlobalHaloData"),
    l_HcalPhiWedgeToF = cms.double(-100.0),
    t_HcalPhiWedgeToF = cms.double(-100.0),
    t_HcalPhiWedgeConstituents = cms.int32(8),
    HcalHaloDataLabel = cms.InputTag("HcalHaloData"),
    t_EcalPhiWedgeToF = cms.double(-200.0),
    l_EcalPhiWedgeConstituents = cms.int32(6),
    t_EcalSuperClusterEnergy = cms.double(10.0),
    l_EcalPhiWedgeToF = cms.double(-200.0),
    l_EcalShowerShapesAngle = cms.double(0.51),
    CSCHaloDataLabel = cms.InputTag("CSCHaloData")
)


process.CSCHaloData = cms.EDProducer("CSCHaloDataProducer",
    ExpectedBX = cms.int32(6),
    RecHitTime0 = cms.double(0.0),
    MinOuterMomentumTheta = cms.double(0.1),
    SALabel = cms.InputTag("standAloneMuons"),
    MatchingDPhiThreshold = cms.double(0.18),
    MaxOuterMomentumTheta = cms.double(3.0),
    DphiParam = cms.double(1.0),
    RecHitTimeWindow = cms.double(25.0),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite'),
        RPCLayers = cms.bool(True)
    ),
    DetaParam = cms.double(0.1),
    InnerRMinParam = cms.double(0.0),
    MaxFreeInverseBeta = cms.double(0.0),
    MaxDtMuonSegment = cms.double(-10.0),
    MuonLabel = cms.InputTag("muons"),
    MatchParameters = cms.PSet(
        DTsegments = cms.InputTag("dt4DSegments"),
        CSCsegments = cms.InputTag("cscSegments"),
        DTradius = cms.double(0.01),
        TightMatchDT = cms.bool(False),
        TightMatchCSC = cms.bool(True)
    ),
    MaxSegmentPhiDiff = cms.double(0.35),
    CSCSegmentLabel = cms.InputTag("cscSegments"),
    InnerRMaxParam = cms.double(99999.0),
    MaxSegmentRDiff = cms.double(10.0),
    L1MuGMTReadoutLabel = cms.InputTag("gtDigis"),
    MaxSegmentTheta = cms.double(0.7),
    HLTResultLabel = cms.InputTag("TriggerResults","","HLT"),
    HLTBitLabel = cms.VInputTag(cms.InputTag("HLT_CSCBeamHalo"), cms.InputTag("HLT_CSCBeamHaloOverlapRing1"), cms.InputTag("HLT_CSCBeamHaloOverlapRing2"), cms.InputTag("HLT_CSCBeamHaloRing2or3")),
    NormChi2Param = cms.double(8.0),
    ALCTDigiLabel = cms.InputTag("muonCSCDigis","MuonCSCALCTDigi"),
    OuterRMaxParam = cms.double(99999.0),
    MatchingDEtaThreshold = cms.double(0.4),
    OuterRMinParam = cms.double(0.0),
    MatchingDWireThreshold = cms.int32(5),
    CosmicMuonLabel = cms.InputTag("muonsFromCosmics"),
    CSCRecHitLabel = cms.InputTag("csc2DRecHits")
)


process.CastorTowerReco = cms.EDProducer("CastorTowerProducer",
    mintime = cms.untracked.double(-99999.0),
    towercut = cms.untracked.double(0.65),
    maxtime = cms.untracked.double(99999.0),
    inputprocess = cms.untracked.string('castorreco')
)


process.CkfElectronCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("globalMixedSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryBuilder = cms.string('CkfElectronTrajectoryBuilder')
)


process.CosmicMuonSeed = cms.EDProducer("CosmicMuonSeedGenerator",
    DTRecSegmentLabel = cms.InputTag("dt4DCosmicSegments"),
    CSCRecSegmentLabel = cms.InputTag("cscSegments"),
    EnableDTMeasurement = cms.bool(True),
    MaxCSCChi2 = cms.double(300.0),
    MaxDTChi2 = cms.double(300.0),
    MaxSeeds = cms.int32(1000),
    EnableCSCMeasurement = cms.bool(True)
)


process.EcalHaloData = cms.EDProducer("EcalHaloDataProducer",
    ESRecHitLabel = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    ESRecHitEnergyThresholdParam = cms.double(0.3),
    AngleCutParam = cms.double(0.51),
    EBRecHitEnergyThresholdParam = cms.double(0.3),
    RoundnessCutParam = cms.double(0.41),
    EERecHitEnergyThresholdParam = cms.double(0.3),
    NHitsEcalThresholdParam = cms.int32(4),
    SuperClusterLabel = cms.InputTag("correctedHybridSuperClusters"),
    EERecHitLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    PhotonLabel = cms.InputTag("photons"),
    SumEcalEnergyThresholdParam = cms.double(10.0),
    EBRecHitLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB")
)


process.GlobalHaloData = cms.EDProducer("GlobalHaloDataProducer",
    EcalMaxMatchingRadiusParam = cms.double(330.0),
    EcalMinMatchingRadiusParam = cms.double(110.0),
    HcalHaloDataLabel = cms.InputTag("HcalHaloData"),
    HcalMinMatchingRadiusParam = cms.double(110.0),
    CSCSegmentLabel = cms.InputTag("CSCSegments"),
    metLabel = cms.InputTag("met"),
    EcalHaloDataLabel = cms.InputTag("EcalHaloData"),
    calotowerLabel = cms.InputTag("towerMaker"),
    CaloTowerEtThresholdParam = cms.double(0.3),
    HcalMaxMatchingRadiusParam = cms.double(490.0),
    CSCRecHitLabel = cms.InputTag("csc2DRecHits"),
    CSCHaloDataLabel = cms.InputTag("CSCHaloData")
)


process.GsfGlobalElectronTest = cms.EDProducer("GsfTrackProducer",
    src = cms.InputTag("CkfElectronCandidates"),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string(''),
    Fitter = cms.string('GsfElectronFittingSmoother'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    GeometricInnerState = cms.bool(False),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(False),
    TTRHBuilder = cms.string('WithTrackAngle'),
    AlgorithmName = cms.string('gsf'),
    Propagator = cms.string('fwdElectronPropagator')
)


process.HcalHaloData = cms.EDProducer("HcalHaloDataProducer",
    SumHcalEnergyThresholdParam = cms.double(18),
    NHitsHcalThresholdParam = cms.int32(4),
    HcalMinMatchingRadiusParam = cms.double(110.0),
    HORecHitLabel = cms.InputTag("horeco"),
    HBHERecHitLabel = cms.InputTag("hbhereco"),
    HERecHitEnergyThresholdParam = cms.double(0.5),
    HcalMaxMatchingRadiusParam = cms.double(490.0),
    HFRecHitLabel = cms.InputTag("hfreco"),
    HBRecHitEnergyThresholdParam = cms.double(0.5)
)


process.JPTAntiKt5JetExtender = cms.EDProducer("JetExtender",
    jets = cms.InputTag("ak5CaloJets"),
    jet2TracksAtCALO = cms.InputTag("JPTAntiKt5JetTracksAssociatorAtCaloFace"),
    jet2TracksAtVX = cms.InputTag("JPTAntiKt5JetTracksAssociatorAtVertex"),
    coneSize = cms.double(0.5)
)


process.JPTAntiKt5JetTracksAssociatorAtCaloFace = cms.EDProducer("JetTracksAssociatorAtCaloFace",
    trackQuality = cms.string('goodIterative'),
    jets = cms.InputTag("TCTauJetPlusTrackZSPCorJetAntiKt5"),
    tracks = cms.InputTag("generalTracks"),
    coneSize = cms.double(0.5),
    extrapolations = cms.InputTag("trackExtrapolator")
)


process.JPTAntiKt5JetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    jets = cms.InputTag("TCTauJetPlusTrackZSPCorJetAntiKt5"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices")
)


process.JPTCaloRecoTauProducer = cms.EDProducer("CaloRecoTauProducer",
    LeadTrack_minPt = cms.double(0.5),
    MatchingConeSize_min = cms.double(0.0),
    ECALSignalConeSizeFormula = cms.string('0.15'),
    TrackerIsolConeMetric = cms.string('DR'),
    TrackerSignalConeMetric = cms.string('DR'),
    EBRecHitsSource = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    IsolationTrack_minPt = cms.double(1.0),
    ECALSignalConeSize_min = cms.double(0.0),
    ECALRecHit_minEt = cms.double(0.5),
    MatchingConeMetric = cms.string('DR'),
    TrackerSignalConeSizeFormula = cms.string('0.07'),
    MatchingConeSizeFormula = cms.string('0.10'),
    TrackerIsolConeSize_min = cms.double(0.0),
    TrackerIsolConeSize_max = cms.double(0.6),
    TrackerSignalConeSize_max = cms.double(0.6),
    PVProducer = cms.InputTag("offlinePrimaryVertices"),
    ESRecHitsSource = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    TrackerSignalConeSize_min = cms.double(0.0),
    JetPtMin = cms.double(0.0),
    AreaMetric_recoElements_maxabsEta = cms.double(2.5),
    ECALIsolConeMetric = cms.string('DR'),
    ECALIsolConeSizeFormula = cms.string('0.50'),
    ECALIsolConeSize_max = cms.double(0.6),
    EERecHitsSource = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    IsolationTrack_minHits = cms.uint32(0),
    ECALSignalConeMetric = cms.string('DR'),
    TrackLeadTrack_maxDZ = cms.double(1.0),
    Track_minPt = cms.double(0.5),
    TrackerIsolConeSizeFormula = cms.string('0.50'),
    ECALSignalConeSize_max = cms.double(0.6),
    ECALIsolConeSize_min = cms.double(0.0),
    UseTrackLeadTrackDZconstraint = cms.bool(True),
    smearedPVsigmaY = cms.double(0.0015),
    smearedPVsigmaX = cms.double(0.0015),
    smearedPVsigmaZ = cms.double(0.005),
    CaloRecoTauTagInfoProducer = cms.InputTag("caloRecoTauTagInfoProducer"),
    MatchingConeSize_max = cms.double(0.6)
)


process.JPTeidTight = cms.EDProducer("EleIdCutBasedExtProducer",
    electronQuality = cms.string('tight'),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628),
        cutmishits = cms.vdouble(5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043),
        cutdeta = cms.vdouble(0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128),
        cuteopin = cms.vdouble(0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09),
        cutip = cms.vdouble(0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9),
        cutisotk = cms.vdouble(6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347),
        cutsee = cms.vdouble(0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333),
        cutdphi = cms.vdouble(0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358),
        cutisoecal = cms.vdouble(20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4)
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092),
        hOverE = cms.vdouble(0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0),
        sigmaEtaEta = cms.vdouble(0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0),
        deltaEtaIn = cms.vdouble(0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0),
        eSeedOverPin = cms.vdouble(0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0)
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167),
        hOverE = cms.vdouble(0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0),
        sigmaEtaEta = cms.vdouble(0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0),
        deltaEtaIn = cms.vdouble(0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0),
        eSeedOverPin = cms.vdouble(0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0)
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    electronIDType = cms.string('classbased'),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    electronVersion = cms.string(''),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS"),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092),
        hOverE = cms.vdouble(0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0),
        sigmaEtaEta = cms.vdouble(0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0),
        deltaEtaIn = cms.vdouble(0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0),
        eSeedOverPin = cms.vdouble(0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0)
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08),
        hOverE = cms.vdouble(0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0),
        sigmaEtaEta = cms.vdouble(0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0),
        deltaEtaIn = cms.vdouble(0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0),
        eSeedOverPin = cms.vdouble(0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0)
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288),
        cutmishits = cms.vdouble(5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131),
        cutdeta = cms.vdouble(0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127),
        cuteopin = cms.vdouble(0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789),
        cutip = cms.vdouble(0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89),
        cutisotk = cms.vdouble(24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0),
        cutsee = cms.vdouble(0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327),
        cutdphi = cms.vdouble(0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515),
        cutisoecal = cms.vdouble(33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7)
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    src = cms.InputTag("gsfElectrons"),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    algorithm = cms.string('eIDCB'),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    additionalCategories = cms.bool(True),
    etBinning = cms.bool(True)
)


process.JetPlusTrackZSPCorJetAntiKt5 = cms.EDProducer("JetPlusTrackProducer",
    VectorialCorrection = cms.bool(True),
    ElectronIds = cms.InputTag("JPTeidTight"),
    UseMuons = cms.bool(True),
    Muons = cms.InputTag("muons"),
    UseTrackQuality = cms.bool(True),
    JetTracksAssociationAtVertex = cms.InputTag("ak5JetTracksAssociatorAtVertex"),
    LeakageMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_362_TrackLeakage.txt'),
    UseOutOfConeTracks = cms.bool(True),
    UseInConeTracks = cms.bool(True),
    UseOutOfVertexTracks = cms.bool(True),
    UseResponseInVecCorr = cms.bool(False),
    ResponseMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_3110_response.txt'),
    EfficiencyMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_362_TrackNonEff.txt'),
    UsePions = cms.bool(True),
    Electrons = cms.InputTag("gsfElectrons"),
    JetSplitMerge = cms.int32(2),
    DzVertexCut = cms.double(0.2),
    MaxJetEta = cms.double(3.0),
    Verbose = cms.bool(True),
    UseElectrons = cms.bool(True),
    JetTracksAssociationAtCaloFace = cms.InputTag("ak5JetTracksAssociatorAtCaloFace"),
    PtErrorQuality = cms.double(0.05),
    TrackQuality = cms.string('highPurity'),
    UseEfficiency = cms.bool(True),
    src = cms.InputTag("ak5CaloJets"),
    PU = cms.int32(-1),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    FixedPU = cms.int32(0),
    alias = cms.untracked.string('JetPlusTrackZSPCorJetAntiKt5'),
    tagName = cms.vstring('ZSP_CMSSW390_Akt_05_PU0'),
    tagNameOffset = cms.vstring(),
    UseZSP = cms.bool(False)
)


process.JetPlusTrackZSPCorJetIcone5 = cms.EDProducer("JetPlusTrackProducer",
    VectorialCorrection = cms.bool(True),
    ElectronIds = cms.InputTag("JPTeidTight"),
    UseMuons = cms.bool(True),
    Muons = cms.InputTag("muons"),
    UseTrackQuality = cms.bool(True),
    JetTracksAssociationAtVertex = cms.InputTag("iterativeCone5JetTracksAssociatorAtVertex"),
    LeakageMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_362_TrackLeakage.txt'),
    UseOutOfConeTracks = cms.bool(True),
    UseInConeTracks = cms.bool(True),
    UseOutOfVertexTracks = cms.bool(True),
    UseResponseInVecCorr = cms.bool(False),
    ResponseMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_3110_response.txt'),
    EfficiencyMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_362_TrackNonEff.txt'),
    UsePions = cms.bool(True),
    Electrons = cms.InputTag("gsfElectrons"),
    JetSplitMerge = cms.int32(0),
    DzVertexCut = cms.double(0.2),
    MaxJetEta = cms.double(3.0),
    Verbose = cms.bool(True),
    UseElectrons = cms.bool(True),
    JetTracksAssociationAtCaloFace = cms.InputTag("iterativeCone5JetTracksAssociatorAtCaloFace"),
    PtErrorQuality = cms.double(0.05),
    TrackQuality = cms.string('highPurity'),
    UseEfficiency = cms.bool(True),
    src = cms.InputTag("iterativeCone5CaloJets"),
    PU = cms.int32(-1),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    FixedPU = cms.int32(0),
    alias = cms.untracked.string('JetPlusTrackZSPCorJetIcone5'),
    tagName = cms.vstring('ZSP_CMSSW390_Akt_05_PU0'),
    tagNameOffset = cms.vstring(),
    UseZSP = cms.bool(False)
)


process.JetPlusTrackZSPCorJetSiscone5 = cms.EDProducer("JetPlusTrackProducer",
    VectorialCorrection = cms.bool(True),
    ElectronIds = cms.InputTag("JPTeidTight"),
    UseMuons = cms.bool(True),
    Muons = cms.InputTag("muons"),
    UseTrackQuality = cms.bool(True),
    JetTracksAssociationAtVertex = cms.InputTag("sisCone5JetTracksAssociatorAtVertex"),
    LeakageMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_362_TrackLeakage.txt'),
    UseOutOfConeTracks = cms.bool(True),
    UseInConeTracks = cms.bool(True),
    UseOutOfVertexTracks = cms.bool(True),
    UseResponseInVecCorr = cms.bool(False),
    ResponseMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_3110_response.txt'),
    EfficiencyMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_362_TrackNonEff.txt'),
    UsePions = cms.bool(True),
    Electrons = cms.InputTag("gsfElectrons"),
    JetSplitMerge = cms.int32(1),
    DzVertexCut = cms.double(0.2),
    MaxJetEta = cms.double(3.0),
    Verbose = cms.bool(True),
    UseElectrons = cms.bool(True),
    JetTracksAssociationAtCaloFace = cms.InputTag("sisCone5JetTracksAssociatorAtCaloFace"),
    PtErrorQuality = cms.double(0.05),
    TrackQuality = cms.string('highPurity'),
    UseEfficiency = cms.bool(True),
    src = cms.InputTag("ak5CaloJets"),
    PU = cms.int32(-1),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    FixedPU = cms.int32(0),
    alias = cms.untracked.string('JetPlusTrackZSPCorJetSiscone5'),
    tagName = cms.vstring('ZSP_CMSSW390_Akt_05_PU0'),
    tagNameOffset = cms.vstring(),
    UseZSP = cms.bool(False)
)


process.MEtoEDMConverter = cms.EDProducer("MEtoEDMConverter",
    deleteAfterCopy = cms.untracked.bool(True),
    Verbosity = cms.untracked.int32(0),
    Frequency = cms.untracked.int32(50),
    Name = cms.untracked.string('MEtoEDMConverter'),
    MEPathToSave = cms.untracked.string('')
)


process.MuonSeed = cms.EDProducer("MuonSeedProducer",
    SMB_21 = cms.vdouble(1.043, -0.124, 0.0, 0.183, 0.0, 
        0.0),
    SMB_20 = cms.vdouble(1.011, -0.052, 0.0, 0.188, 0.0, 
        0.0),
    SMB_22 = cms.vdouble(1.474, -0.758, 0.0, 0.185, 0.0, 
        0.0),
    OL_2213 = cms.vdouble(0.117, 0.0, 0.0, 0.044, 0.0, 
        0.0),
    SME_11 = cms.vdouble(3.295, -1.527, 0.112, 0.378, 0.02, 
        0.0),
    SME_13 = cms.vdouble(-1.286, 1.711, 0.0, 0.356, 0.0, 
        0.0),
    SME_12 = cms.vdouble(0.102, 0.599, 0.0, 0.38, 0.0, 
        0.0),
    SME_32 = cms.vdouble(-0.901, 1.333, -0.47, 0.41, 0.073, 
        0.0),
    SME_31 = cms.vdouble(-1.594, 1.482, -0.317, 0.487, 0.097, 
        0.0),
    OL_1213 = cms.vdouble(0.96, -0.737, 0.0, 0.052, 0.0, 
        0.0),
    DT_13 = cms.vdouble(0.315, 0.068, -0.127, 0.051, -0.002, 
        0.0),
    DT_12 = cms.vdouble(0.183, 0.054, -0.087, 0.028, 0.002, 
        0.0),
    DT_14 = cms.vdouble(0.359, 0.052, -0.107, 0.072, -0.004, 
        0.0),
    OL_1232 = cms.vdouble(0.184, 0.0, 0.0, 0.066, 0.0, 
        0.0),
    CSC_23 = cms.vdouble(-0.081, 0.113, -0.029, 0.015, 0.008, 
        0.0),
    CSC_24 = cms.vdouble(0.004, 0.021, -0.002, 0.053, 0.0, 
        0.0),
    CSC_03 = cms.vdouble(0.787, -0.338, 0.029, 0.101, -0.008, 
        0.0),
    CSC_01 = cms.vdouble(0.166, 0.0, 0.0, 0.031, 0.0, 
        0.0),
    SMB_32 = cms.vdouble(0.67, -0.327, 0.0, 0.22, 0.0, 
        0.0),
    SMB_30 = cms.vdouble(0.505, -0.022, 0.0, 0.215, 0.0, 
        0.0),
    SMB_31 = cms.vdouble(0.549, -0.145, 0.0, 0.207, 0.0, 
        0.0),
    SMB_10 = cms.vdouble(1.387, -0.038, 0.0, 0.19, 0.0, 
        0.0),
    SMB_11 = cms.vdouble(1.247, 0.72, -0.802, 0.229, -0.075, 
        0.0),
    SMB_12 = cms.vdouble(2.128, -0.956, 0.0, 0.199, 0.0, 
        0.0),
    DT_23 = cms.vdouble(0.13, 0.023, -0.057, 0.028, 0.004, 
        0.0),
    DT_24 = cms.vdouble(0.176, 0.014, -0.051, 0.051, 0.003, 
        0.0),
    SME_21 = cms.vdouble(-0.529, 1.194, -0.358, 0.472, 0.086, 
        0.0),
    SME_22 = cms.vdouble(-1.207, 1.491, -0.251, 0.189, 0.243, 
        0.0),
    CSC_34 = cms.vdouble(0.062, -0.067, 0.019, 0.021, 0.003, 
        0.0),
    CSC_02 = cms.vdouble(0.612, -0.207, -0.0, 0.067, -0.001, 
        0.0),
    SME_42 = cms.vdouble(-0.003, 0.005, 0.005, 0.608, 0.076, 
        0.0),
    SME_41 = cms.vdouble(-0.003, 0.005, 0.005, 0.608, 0.076, 
        0.0),
    OL_2222 = cms.vdouble(0.107, 0.0, 0.0, 0.04, 0.0, 
        0.0),
    DT_34 = cms.vdouble(0.044, 0.004, -0.013, 0.029, 0.003, 
        0.0),
    CSC_14 = cms.vdouble(0.606, -0.181, -0.002, 0.111, -0.003, 
        0.0),
    OL_1222 = cms.vdouble(0.848, -0.591, 0.0, 0.062, 0.0, 
        0.0),
    CSC_13 = cms.vdouble(0.901, -1.302, 0.533, 0.045, 0.005, 
        0.0),
    CSC_12 = cms.vdouble(-0.161, 0.254, -0.047, 0.042, -0.007, 
        0.0),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    DT_34_1_scale = cms.vdouble(-13.783765, 0.0),
    DT_24_1_scale = cms.vdouble(-7.490909, 0.0),
    CSC_34_1_scale = cms.vdouble(-11.520507, 0.0),
    SME_13_0_scale = cms.vdouble(0.104905, 0.0),
    SMB_22_0_scale = cms.vdouble(1.346681, 0.0),
    DT_24_2_scale = cms.vdouble(-6.63094, 0.0),
    OL_2213_0_scale = cms.vdouble(-7.239789, 0.0),
    OL_1232_0_scale = cms.vdouble(-5.964634, 0.0),
    SMB_32_0_scale = cms.vdouble(-3.054156, 0.0),
    DT_34_2_scale = cms.vdouble(-11.901897, 0.0),
    CSC_13_2_scale = cms.vdouble(-6.077936, 0.0),
    OL_1213_0_scale = cms.vdouble(-4.488158, 0.0),
    CSC_12_3_scale = cms.vdouble(-1.63622, 0.0),
    OL_1222_0_scale = cms.vdouble(-5.810449, 0.0),
    SME_11_0_scale = cms.vdouble(1.325085, 0.0),
    CSC_13_3_scale = cms.vdouble(-1.701268, 0.0),
    SME_21_0_scale = cms.vdouble(-0.040862, 0.0),
    SMB_20_0_scale = cms.vdouble(1.486168, 0.0),
    DT_23_1_scale = cms.vdouble(-5.320346, 0.0),
    SMB_10_0_scale = cms.vdouble(2.448566, 0.0),
    CSC_14_3_scale = cms.vdouble(-1.969563, 0.0),
    DT_14_2_scale = cms.vdouble(-4.808546, 0.0),
    SMB_31_0_scale = cms.vdouble(-3.323768, 0.0),
    CSC_24_1_scale = cms.vdouble(-6.055701, 0.0),
    CSC_01_1_scale = cms.vdouble(-1.915329, 0.0),
    DT_12_1_scale = cms.vdouble(-3.692398, 0.0),
    SMB_21_0_scale = cms.vdouble(1.58384, 0.0),
    DT_23_2_scale = cms.vdouble(-5.117625, 0.0),
    SMB_12_0_scale = cms.vdouble(2.283221, 0.0),
    SME_12_0_scale = cms.vdouble(2.279181, 0.0),
    CSC_12_1_scale = cms.vdouble(-6.434242, 0.0),
    DT_14_1_scale = cms.vdouble(-5.644816, 0.0),
    SMB_11_0_scale = cms.vdouble(2.56363, 0.0),
    SME_22_0_scale = cms.vdouble(-3.457901, 0.0),
    SMB_30_0_scale = cms.vdouble(-3.629838, 0.0),
    DT_13_1_scale = cms.vdouble(-4.520923, 0.0),
    CSC_23_2_scale = cms.vdouble(-6.079917, 0.0),
    DT_12_2_scale = cms.vdouble(-3.518165, 0.0),
    DT_13_2_scale = cms.vdouble(-4.257687, 0.0),
    CSC_12_2_scale = cms.vdouble(-1.63622, 0.0),
    CSC_23_1_scale = cms.vdouble(-19.084285, 0.0),
    OL_2222_0_scale = cms.vdouble(-7.667231, 0.0),
    minimumSeedPt = cms.double(5.0),
    minCSCHitsPerSegment = cms.int32(4),
    maxDeltaPhiDT = cms.double(0.3),
    defaultSeedPt = cms.double(25.0),
    EnableCSCMeasurement = cms.bool(True),
    maxDeltaPhiOverlap = cms.double(0.25),
    minDTHitsPerSegment = cms.int32(2),
    CSCSegmentLabel = cms.InputTag("cscSegments"),
    maxEtaResolutionCSC = cms.double(0.06),
    maxPhiResolutionCSC = cms.double(0.03),
    maxDeltaEtaOverlap = cms.double(0.08),
    EnableDTMeasurement = cms.bool(True),
    DTSegmentLabel = cms.InputTag("dt4DSegments"),
    SeedPtSystematics = cms.double(0.1),
    maximumSeedPt = cms.double(3000.0),
    maxEtaResolutionDT = cms.double(0.02),
    maxDeltaEtaCSC = cms.double(0.2),
    maxDeltaPhiCSC = cms.double(0.5),
    maxDeltaEtaDT = cms.double(0.3),
    DebugMuonSeed = cms.bool(False),
    maxPhiResolutionDT = cms.double(0.03)
)


process.PhotonIDProd = cms.EDProducer("PhotonIDProducer",
    LoosePhotonHollowNTrkEB = cms.int32(999999999),
    LoosePhotonEcalIsoRelativeCutSlopeEB = cms.double(0.006),
    LoosePhotonEcalIsoRelativeCutSlopeEE = cms.double(0.006),
    LoosePhotonHollowNTrkEE = cms.int32(999999999),
    DoHcalTowerIsolationCut = cms.bool(True),
    LooseEMSolidTrkSlopeEB = cms.double(0.0),
    LooseEMSolidTrkSlopeEE = cms.double(0.0),
    LooseEMHollowTrkSlopeEE = cms.double(0.0),
    LooseEMHollowTrkSlopeEB = cms.double(0.0),
    DoSolidConeTrackIsolationCut = cms.bool(False),
    LooseEMHcalTowerIsoOffsetEB = cms.double(2.2),
    LooseEMHcalTowerIsoOffsetEE = cms.double(2.2),
    LoosePhotonEtaWidthEB = cms.double(999999999),
    LooseEMSolidTrkEB = cms.double(999999999),
    LooseEMEcalIsoRelativeCutOffsetEB = cms.double(4.2),
    LooseEMEcalIsoRelativeCutOffsetEE = cms.double(4.2),
    LooseEMSolidTrkEE = cms.double(999999999),
    LoosePhotonEtaWidthEE = cms.double(999999999),
    DoSolidConeNTrkCut = cms.bool(False),
    TightPhotonSolidTrkEB = cms.double(999999999),
    TightPhotonSolidTrkEE = cms.double(999999999),
    LoosePhotonHcalTowerIsoOffsetEB = cms.double(2.2),
    LoosePhotonSolidTrkEB = cms.double(999999999),
    LoosePhotonSolidTrkEE = cms.double(999999999),
    LoosePhotonHcalTowerIsoOffsetEE = cms.double(2.2),
    TightPhotonHollowNTrkEB = cms.int32(999999999),
    TightPhotonHollowNTrkEE = cms.int32(999999999),
    DoHadOverEMCut = cms.bool(True),
    photonCutBasedIDTightLabel = cms.string('PhotonCutBasedIDTight'),
    LoosePhotonHcalTowerIsoSlopeEB = cms.double(0.0025),
    LoosePhotonEcalIsoRelativeCutOffsetEB = cms.double(4.2),
    LoosePhotonEcalIsoRelativeCutOffsetEE = cms.double(4.2),
    LoosePhotonHcalTowerIsoSlopeEE = cms.double(0.0025),
    photonLabel = cms.string(''),
    TightPhotonSolidTrkOffsetEB = cms.double(999999999),
    TightPhotonSolidTrkOffsetEE = cms.double(999999999),
    TightPhotonSolidTrkSlopeEE = cms.double(0.0),
    TightPhotonSolidTrkSlopeEB = cms.double(0.0),
    TightPhotonEcalIsoRelativeCutOffsetEB = cms.double(4.2),
    DoHollowConeNTrkCut = cms.bool(False),
    doCutBased = cms.bool(True),
    TightPhotonEcalIsoRelativeCutOffsetEE = cms.double(4.2),
    LoosePhotonR9CutEE = cms.double(0.0),
    LoosePhotonR9CutEB = cms.double(0.0),
    RequireFiducial = cms.bool(False),
    TightPhotonHadOverEMEE = cms.double(0.05),
    LooseEMHollowNTrkEB = cms.int32(999999999),
    DoEcalRecHitIsolationCut = cms.bool(True),
    LooseEMHollowTrkOffsetEB = cms.double(999999999),
    LooseEMHollowTrkOffsetEE = cms.double(999999999),
    LooseEMHollowNTrkEE = cms.int32(999999999),
    LooseEMR9CutEE = cms.double(0.0),
    LooseEMR9CutEB = cms.double(0.0),
    LooseEMHadOverEMEE = cms.double(0.05),
    LooseEMHadOverEMEB = cms.double(0.05),
    photonCutBasedIDLooseEMLabel = cms.string('PhotonCutBasedIDLooseEM'),
    TightPhotonHcalTowerIsoSlopeEE = cms.double(0.0025),
    TightPhotonHcalTowerIsoSlopeEB = cms.double(0.0025),
    TightPhotonSolidNTrkEE = cms.int32(999999999),
    TightPhotonSolidNTrkEB = cms.int32(999999999),
    TightPhotonHollowTrkOffsetEB = cms.double(2.0),
    TightPhotonHollowTrkOffsetEE = cms.double(2.0),
    TightPhotonHollowTrkSlopeEB = cms.double(0.001),
    TightPhotonHollowTrkSlopeEE = cms.double(0.001),
    DoR9Cut = cms.bool(False),
    LoosePhotonSolidTrkSlopeEB = cms.double(0.0),
    LoosePhotonSolidTrkSlopeEE = cms.double(0.0),
    TightPhotonEtaWidthEB = cms.double(0.013),
    TightPhotonEtaWidthEE = cms.double(0.03),
    DoHollowConeTrackIsolationCut = cms.bool(True),
    LooseEMHcalTowerIsoSlopeEB = cms.double(0.0025),
    LooseEMHcalTowerIsoSlopeEE = cms.double(0.0025),
    LoosePhotonHollowTrkSlopeEE = cms.double(0.001),
    LoosePhotonHollowTrkSlopeEB = cms.double(0.001),
    TightPhotonHadOverEMEB = cms.double(0.05),
    DoEtaWidthCut = cms.bool(True),
    photonCutBasedIDLooseLabel = cms.string('PhotonCutBasedIDLoose'),
    LooseEMEcalIsoRelativeCutSlopeEB = cms.double(0.006),
    LooseEMEcalIsoRelativeCutSlopeEE = cms.double(0.006),
    TightPhotonR9CutEE = cms.double(0.0),
    TightPhotonR9CutEB = cms.double(0.0),
    DoEcalIsoRelativeCut = cms.bool(True),
    photonProducer = cms.string('photons'),
    LooseEMSolidNTrkEE = cms.int32(999999999),
    TightPhotonEcalIsoRelativeCutSlopeEE = cms.double(0.006),
    TightPhotonEcalIsoRelativeCutSlopeEB = cms.double(0.006),
    LooseEMSolidNTrkEB = cms.int32(999999999),
    LooseEMEtaWidthEB = cms.double(999999999),
    LooseEMEtaWidthEE = cms.double(999999999),
    TightPhotonHcalTowerIsoOffsetEB = cms.double(2.2),
    TightPhotonHcalTowerIsoOffsetEE = cms.double(2.2),
    LoosePhotonHollowTrkOffsetEB = cms.double(3.5),
    LoosePhotonHadOverEMEE = cms.double(0.05),
    LoosePhotonHadOverEMEB = cms.double(0.05),
    LoosePhotonHollowTrkOffsetEE = cms.double(3.5),
    LooseEMSolidTrkOffsetEB = cms.double(999999999),
    LooseEMSolidTrkOffsetEE = cms.double(999999999),
    LoosePhotonSolidTrkOffsetEB = cms.double(999999999),
    LoosePhotonSolidNTrkEE = cms.int32(999999999),
    LoosePhotonSolidNTrkEB = cms.int32(999999999),
    LoosePhotonSolidTrkOffsetEE = cms.double(999999999)
)


process.SETMuonSeed = cms.EDProducer("SETMuonSeedProducer",
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    SETTrajBuilderParameters = cms.PSet(
        SMB_21 = cms.vdouble(0.918425, -0.141199, 0.0, 0.254515, -0.111848, 
            0.0),
        SMB_20 = cms.vdouble(0.861314, -0.16233, 0.0, 0.248879, -0.113879, 
            0.0),
        SMB_22 = cms.vdouble(1.308565, -0.701634, 0.0, -0.302861, 0.675785, 
            0.0),
        OL_2213 = cms.vdouble(0.563218, -0.493991, 0.0, 0.943776, -0.591751, 
            0.0),
        SME_11 = cms.vdouble(2.39479, -0.888663, 0.0, -4.604546, 3.623464, 
            0.0),
        SME_13 = cms.vdouble(0.398851, 0.028176, 0.0, 0.567015, 2.623232, 
            0.0),
        SMB_31 = cms.vdouble(0.398661, -0.024853, 0.0, 0.863324, -0.413048, 
            0.0),
        SME_32 = cms.vdouble(-0.021912, -0.008995, 0.0, -49.779764, 30.780972, 
            0.0),
        SME_31 = cms.vdouble(-0.588188, 0.316961, 0.0, -95.261732, 45.444051, 
            0.0),
        OL_1213 = cms.vdouble(0.960544, -0.75644, 0.0, 0.1636, 0.114178, 
            0.0),
        DT_13 = cms.vdouble(0.298842, 0.076531, -0.14293, 0.219923, -0.145026, 
            0.155638),
        DT_12 = cms.vdouble(0.176182, 0.058535, -0.090549, 0.202363, -0.203126, 
            0.222219),
        DT_14 = cms.vdouble(0.388423, 0.068698, -0.145925, 0.159515, 0.124299, 
            -0.133269),
        OL_1232 = cms.vdouble(0.162626, 0.000843, 0.0, 0.396271, 0.002791, 
            0.0),
        CSC_23 = cms.vdouble(-0.095236, 0.122061, -0.029852, -11.396689, 15.933598, 
            -4.267065),
        CSC_24 = cms.vdouble(-0.049769, 0.063087, -0.011029, -13.765978, 16.296143, 
            -4.241835),
        CSC_03 = cms.vdouble(0.498992, -0.086235, -0.025772, 2.761006, -2.667607, 
            0.72802),
        CSC_01 = cms.vdouble(0.155906, -0.000406, 0.0, 0.194022, -0.010181, 
            0.0),
        SMB_32 = cms.vdouble(0.421649, -0.111654, 0.0, -0.044613, 1.134858, 
            0.0),
        SMB_30 = cms.vdouble(0.399628, 0.014922, 0.0, 0.665622, 0.358439, 
            0.0),
        OL_2222 = cms.vdouble(0.087587, 0.005729, 0.0, 0.535169, -0.087675, 
            0.0),
        SMB_10 = cms.vdouble(1.160532, 0.148991, 0.0, 0.182785, -0.093776, 
            0.0),
        SMB_11 = cms.vdouble(1.289468, -0.139653, 0.0, 0.137191, 0.01217, 
            0.0),
        SMB_12 = cms.vdouble(1.923091, -0.913204, 0.0, 0.161556, 0.020215, 
            0.0),
        DT_23 = cms.vdouble(0.120647, 0.034743, -0.070855, 0.302427, -0.21417, 
            0.261012),
        DT_24 = cms.vdouble(0.189527, 0.037328, -0.088523, 0.251936, 0.032411, 
            0.010984),
        SME_21 = cms.vdouble(0.64895, -0.148762, 0.0, -5.07676, 6.284227, 
            0.0),
        SME_22 = cms.vdouble(-0.624708, 0.641043, 0.0, 32.581295, -19.604264, 
            0.0),
        CSC_34 = cms.vdouble(0.144321, -0.142283, 0.035636, 190.260708, -180.888643, 
            43.430395),
        CSC_02 = cms.vdouble(0.600235, -0.205683, 0.001113, 0.655625, -0.682129, 
            0.253916),
        SME_42 = cms.vdouble(-0.021912, -0.008995, 0.0, -49.779764, 30.780972, 
            0.0),
        SME_41 = cms.vdouble(-0.187116, 0.076415, 0.0, -58.552583, 27.933864, 
            0.0),
        SME_12 = cms.vdouble(-0.277294, 0.7616, 0.0, -0.243326, 1.446792, 
            0.0),
        DT_34 = cms.vdouble(0.049146, -0.003494, -0.010099, 0.672095, 0.36459, 
            -0.304346),
        CSC_14 = cms.vdouble(0.952517, -0.532733, 0.084601, 1.615881, -1.630744, 
            0.514139),
        OL_1222 = cms.vdouble(0.215915, 0.002556, 0.0, 0.313596, -0.021465, 
            0.0),
        CSC_13 = cms.vdouble(1.22495, -1.792358, 0.711378, 5.271848, -6.280625, 
            2.0142),
        CSC_12 = cms.vdouble(-0.363549, 0.569552, -0.173186, 7.777069, -10.203618, 
            3.478874),
        DT_34_1_scale = cms.vdouble(-13.783765, 0.0),
        DT_24_1_scale = cms.vdouble(-7.490909, 0.0),
        CSC_34_1_scale = cms.vdouble(-11.520507, 0.0),
        SME_13_0_scale = cms.vdouble(0.104905, 0.0),
        SMB_22_0_scale = cms.vdouble(1.346681, 0.0),
        DT_24_2_scale = cms.vdouble(-6.63094, 0.0),
        OL_2213_0_scale = cms.vdouble(-7.239789, 0.0),
        OL_1232_0_scale = cms.vdouble(-5.964634, 0.0),
        SMB_32_0_scale = cms.vdouble(-3.054156, 0.0),
        DT_34_2_scale = cms.vdouble(-11.901897, 0.0),
        CSC_13_2_scale = cms.vdouble(-6.077936, 0.0),
        OL_1213_0_scale = cms.vdouble(-4.488158, 0.0),
        CSC_12_3_scale = cms.vdouble(-1.63622, 0.0),
        OL_1222_0_scale = cms.vdouble(-5.810449, 0.0),
        SME_11_0_scale = cms.vdouble(1.325085, 0.0),
        CSC_13_3_scale = cms.vdouble(-1.701268, 0.0),
        SME_21_0_scale = cms.vdouble(-0.040862, 0.0),
        SMB_20_0_scale = cms.vdouble(1.486168, 0.0),
        DT_23_1_scale = cms.vdouble(-5.320346, 0.0),
        SMB_10_0_scale = cms.vdouble(2.448566, 0.0),
        CSC_14_3_scale = cms.vdouble(-1.969563, 0.0),
        DT_14_2_scale = cms.vdouble(-4.808546, 0.0),
        SMB_31_0_scale = cms.vdouble(-3.323768, 0.0),
        CSC_24_1_scale = cms.vdouble(-6.055701, 0.0),
        CSC_01_1_scale = cms.vdouble(-1.915329, 0.0),
        DT_12_1_scale = cms.vdouble(-3.692398, 0.0),
        SMB_21_0_scale = cms.vdouble(1.58384, 0.0),
        DT_23_2_scale = cms.vdouble(-5.117625, 0.0),
        SMB_12_0_scale = cms.vdouble(2.283221, 0.0),
        SME_12_0_scale = cms.vdouble(2.279181, 0.0),
        CSC_12_1_scale = cms.vdouble(-6.434242, 0.0),
        DT_14_1_scale = cms.vdouble(-5.644816, 0.0),
        SMB_11_0_scale = cms.vdouble(2.56363, 0.0),
        SME_22_0_scale = cms.vdouble(-3.457901, 0.0),
        SMB_30_0_scale = cms.vdouble(-3.629838, 0.0),
        DT_13_1_scale = cms.vdouble(-4.520923, 0.0),
        CSC_23_2_scale = cms.vdouble(-6.079917, 0.0),
        DT_12_2_scale = cms.vdouble(-3.518165, 0.0),
        DT_13_2_scale = cms.vdouble(-4.257687, 0.0),
        CSC_12_2_scale = cms.vdouble(-1.63622, 0.0),
        CSC_23_1_scale = cms.vdouble(-19.084285, 0.0),
        OL_2222_0_scale = cms.vdouble(-7.667231, 0.0),
        scaleDT = cms.bool(True),
        Apply_prePruning = cms.bool(True),
        UseSegmentsInTrajectory = cms.bool(False),
        FilterParameters = cms.PSet(
            OutsideChamberErrorScale = cms.double(1.0),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            MinLocalSegmentAngle = cms.double(0.09),
            EnableRPCMeasurement = cms.bool(True),
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            EnableDTMeasurement = cms.bool(True),
            maxActiveChambers = cms.int32(100),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            EnableCSCMeasurement = cms.bool(True)
        )
    ),
    beamSpotTag = cms.InputTag("offlineBeamSpot")
)


process.TCTauJetPlusTrackZSPCorJetAntiKt5 = cms.EDProducer("JetPlusTrackProducer",
    VectorialCorrection = cms.bool(True),
    ElectronIds = cms.InputTag("JPTeidTight"),
    UseMuons = cms.bool(True),
    Muons = cms.InputTag("muons"),
    UseTrackQuality = cms.bool(True),
    JetTracksAssociationAtVertex = cms.InputTag("ak5JetTracksAssociatorAtVertex"),
    LeakageMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_362_TrackLeakage.txt'),
    UseOutOfConeTracks = cms.bool(True),
    UseInConeTracks = cms.bool(True),
    UseOutOfVertexTracks = cms.bool(True),
    UseResponseInVecCorr = cms.bool(False),
    ResponseMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_362_resptowers.txt'),
    EfficiencyMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_362_TrackNonEff.txt'),
    UsePions = cms.bool(True),
    Electrons = cms.InputTag("gsfElectrons"),
    JetSplitMerge = cms.int32(2),
    DzVertexCut = cms.double(0.2),
    MaxJetEta = cms.double(3.0),
    Verbose = cms.bool(True),
    UseElectrons = cms.bool(True),
    JetTracksAssociationAtCaloFace = cms.InputTag("ak5JetTracksAssociatorAtCaloFace"),
    PtErrorQuality = cms.double(0.05),
    TrackQuality = cms.string('highPurity'),
    UseEfficiency = cms.bool(False),
    src = cms.InputTag("ak5CaloJets"),
    PU = cms.int32(-1),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    FixedPU = cms.int32(0),
    alias = cms.untracked.string('JetPlusTrackZSPCorJetAntiKt5'),
    tagName = cms.vstring('ZSP_CMSSW390_Akt_05_PU0'),
    tagNameOffset = cms.vstring(),
    UseZSP = cms.bool(False)
)


process.TauDecayModeCutMutliplexerPrototype = cms.EDProducer("RecoTauDecayModeCutMultiplexer",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(2),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            nCharged = cms.uint32(3)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            nCharged = cms.uint32(3)
        )),
    toMultiplex = cms.InputTag("shrinkingConePFTauDiscriminationByTaNC"),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer")
)


process.TrackProducer = cms.EDProducer("TrackProducer",
    src = cms.InputTag("ckfTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    GeometricInnerState = cms.bool(False),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    AlgorithmName = cms.string('undefAlgorithm'),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.UCT2015Producer = cms.EDProducer("UCT2015Producer",
    jetSeed = cms.uint32(5),
    maxGctEtaForSums = cms.uint32(17),
    relativeIsolationCut = cms.double(1.0),
    regionLSB = cms.double(0.5),
    egtSeed = cms.uint32(5),
    relativeJetIsolationCut = cms.double(1.0),
    minGctEtaForSums = cms.uint32(4),
    puCorrect = cms.bool(True),
    eicIsolationThreshold = cms.double(3.0),
    puETMax = cms.uint32(7),
    regionETCutForMET = cms.uint32(0),
    egammaLSB = cms.double(1.0),
    useUICrho = cms.bool(True),
    regionETCutForHT = cms.uint32(5),
    puCorrectSums = cms.bool(False),
    useHI = cms.bool(False),
    switchOffTauIso = cms.double(60.0)
)


process.ak5CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(5.0),
    doAreaDiskApprox = cms.bool(False),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('AntiKt'),
    rParam = cms.double(0.5)
)


process.ak5CaloJetsPUCorr = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0)
)


process.ak5JetExtender = cms.EDProducer("JetExtender",
    jets = cms.InputTag("ak5CaloJets"),
    jet2TracksAtCALO = cms.InputTag("ak5JetTracksAssociatorAtCaloFace"),
    jet2TracksAtVX = cms.InputTag("ak5JetTracksAssociatorAtVertex"),
    coneSize = cms.double(0.5)
)


process.ak5JetID = cms.EDProducer("JetIDProducer",
    eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheRecHitsColl = cms.InputTag("hbhereco"),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    hoRecHitsColl = cms.InputTag("horeco"),
    ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    hfRecHitsColl = cms.InputTag("hfreco"),
    useRecHits = cms.bool(True),
    src = cms.InputTag("ak5CaloJets")
)


process.ak5JetTracksAssociatorAtCaloFace = cms.EDProducer("JetTracksAssociatorAtCaloFace",
    trackQuality = cms.string('goodIterative'),
    tracks = cms.InputTag("generalTracks"),
    coneSize = cms.double(0.5),
    extrapolations = cms.InputTag("trackExtrapolator"),
    jets = cms.InputTag("ak5CaloJets")
)


process.ak5JetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    jets = cms.InputTag("ak5CaloJets")
)


process.ak5JetTracksAssociatorExplicit = cms.EDProducer("JetTracksAssociatorExplicit",
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    jets = cms.InputTag("ak5PFJets")
)


process.ak5PFJetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    jets = cms.InputTag("ak5PFJets"),
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices")
)


process.ak5PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doOutputJets = cms.bool(True),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    doAreaFastjet = cms.bool(True),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    jetPtMin = cms.double(3.0),
    jetType = cms.string('PFJet'),
    src = cms.InputTag("particleFlow"),
    doPUOffsetCorr = cms.bool(False),
    radiusPU = cms.double(0.5),
    doAreaDiskApprox = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('AntiKt'),
    rParam = cms.double(0.5)
)


process.ak5PFJetsCHS = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("pfNoPileUpJME"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak5PFJetsFiltered = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    useExplicitGhosts = cms.bool(True),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    jetPtMin = cms.double(3.0),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    jetCollInstanceName = cms.string('SubJets'),
    useFiltering = cms.bool(True),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    rFilt = cms.double(0.3),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    nFilt = cms.int32(3),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("particleFlow"),
    writeCompound = cms.bool(True),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak5PFJetsLegacyHPSPiZeros = cms.EDProducer("RecoTauPiZeroProducer",
    massHypothesis = cms.double(0.136),
    ranking = cms.VPSet(cms.PSet(
        selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
        selection = cms.string('algoIs("kStrips")'),
        name = cms.string('InStrip'),
        plugin = cms.string('RecoTauPiZeroStringQuality'),
        selectionFailValue = cms.double(1000)
    )),
    jetRegionSrc = cms.InputTag("recoTauAK5PFJets08Region"),
    outputSelection = cms.string('pt > 0'),
    jetSrc = cms.InputTag("ak5PFJets"),
    builders = cms.VPSet(cms.PSet(
        name = cms.string('s'),
        stripPhiAssociationDistance = cms.double(0.2),
        plugin = cms.string('RecoTauPiZeroStripPlugin2'),
        minGammaEtStripAdd = cms.double(0.0),
        minGammaEtStripSeed = cms.double(0.5),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        maxStripBuildIterations = cms.int32(-1),
        updateStripAfterEachDaughter = cms.bool(False),
        makeCombinatoricStrips = cms.bool(False),
        applyElecTrackQcuts = cms.bool(False),
        stripCandidatesParticleIds = cms.vint32(2, 4),
        minStripEt = cms.double(1.0),
        stripEtaAssociationDistance = cms.double(0.05)
    ))
)


process.ak5PFJetsLegacyTaNCPiZeros = cms.EDProducer("RecoTauPiZeroProducer",
    massHypothesis = cms.double(0.136),
    ranking = cms.VPSet(cms.PSet(
        selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
        selection = cms.string('mass() < 0.2'),
        name = cms.string('PFTDM'),
        plugin = cms.string('RecoTauPiZeroStringQuality'),
        selectionFailValue = cms.double(1000)
    )),
    jetRegionSrc = cms.InputTag("recoTauAK5PFJets08Region"),
    outputSelection = cms.string('pt > 1.5'),
    jetSrc = cms.InputTag("ak5PFJets"),
    builders = cms.VPSet(cms.PSet(
        plugin = cms.string('RecoTauPiZeroTrivialPlugin'),
        name = cms.string('1'),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        )
    ), 
        cms.PSet(
            maxMass = cms.double(-1.0),
            plugin = cms.string('RecoTauPiZeroCombinatoricPlugin'),
            minMass = cms.double(0.0),
            qualityCuts = cms.PSet(
                isolationQualityCuts = cms.PSet(
                    minTrackHits = cms.uint32(8),
                    minTrackVertexWeight = cms.double(-1),
                    minTrackPt = cms.double(1.0),
                    maxTrackChi2 = cms.double(100.0),
                    minTrackPixelHits = cms.uint32(0),
                    minGammaEt = cms.double(1.5),
                    maxDeltaZ = cms.double(0.2),
                    maxTransverseImpactParameter = cms.double(0.03)
                ),
                pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
                primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
                signalQualityCuts = cms.PSet(
                    minTrackHits = cms.uint32(3),
                    minTrackVertexWeight = cms.double(-1),
                    minTrackPt = cms.double(0.5),
                    maxTrackChi2 = cms.double(100.0),
                    minTrackPixelHits = cms.uint32(0),
                    minGammaEt = cms.double(0.5),
                    maxDeltaZ = cms.double(0.2),
                    maxTransverseImpactParameter = cms.double(0.03)
                )
            ),
            choose = cms.uint32(2),
            maxInputGammas = cms.uint32(10),
            name = cms.string('2')
        ))
)


process.ak5PFJetsMassDropFiltered = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    useMassDropTagger = cms.bool(True),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    useExplicitGhosts = cms.bool(True),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    muCut = cms.double(0.667),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    jetCollInstanceName = cms.string('SubJets'),
    useFiltering = cms.bool(True),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    rFilt = cms.double(0.3),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    nFilt = cms.int32(3),
    yCut = cms.double(0.08),
    maxProblematicHcalCells = cms.uint32(9999999),
    writeCompound = cms.bool(True),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("particleFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak5PFJetsPruned = cms.EDProducer("FastjetJetProducer",
    nFilt = cms.int32(2),
    zcut = cms.double(0.1),
    rcut_factor = cms.double(0.5),
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    useExplicitGhosts = cms.bool(True),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    jetPtMin = cms.double(3.0),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    jetCollInstanceName = cms.string('SubJets'),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    usePruning = cms.bool(True),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("particleFlow"),
    writeCompound = cms.bool(True),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak5PFJetsRecoTauPiZeros = cms.EDProducer("RecoTauPiZeroProducer",
    massHypothesis = cms.double(0.136),
    ranking = cms.VPSet(cms.PSet(
        selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
        selection = cms.string('abs(eta()) < 1.5 & abs(mass() - 0.13579) < 0.05'),
        name = cms.string('nearPiZeroMass'),
        plugin = cms.string('RecoTauPiZeroStringQuality'),
        selectionFailValue = cms.double(1000)
    ), 
        cms.PSet(
            selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
            selection = cms.string('abs(eta()) > 1.5 & mass() < 0.2'),
            name = cms.string('nearPiZeroMass'),
            plugin = cms.string('RecoTauPiZeroStringQuality'),
            selectionFailValue = cms.double(1000)
        ), 
        cms.PSet(
            selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
            selection = cms.string('algoIs("kStrips")'),
            name = cms.string('InStrip'),
            plugin = cms.string('RecoTauPiZeroStringQuality'),
            selectionFailValue = cms.double(1000)
        )),
    jetRegionSrc = cms.InputTag("recoTauAK5PFJets08Region"),
    outputSelection = cms.string('pt > 1.5'),
    jetSrc = cms.InputTag("ak5PFJets"),
    builders = cms.VPSet(cms.PSet(
        maxMass = cms.double(-1.0),
        plugin = cms.string('RecoTauPiZeroCombinatoricPlugin'),
        minMass = cms.double(0.0),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        choose = cms.uint32(2),
        maxInputGammas = cms.uint32(10),
        name = cms.string('2')
    ), 
        cms.PSet(
            name = cms.string('s'),
            stripPhiAssociationDistance = cms.double(0.2),
            plugin = cms.string('RecoTauPiZeroStripPlugin2'),
            minGammaEtStripAdd = cms.double(0.0),
            minGammaEtStripSeed = cms.double(0.5),
            qualityCuts = cms.PSet(
                isolationQualityCuts = cms.PSet(
                    minTrackHits = cms.uint32(8),
                    minTrackVertexWeight = cms.double(-1),
                    minTrackPt = cms.double(1.0),
                    maxTrackChi2 = cms.double(100.0),
                    minTrackPixelHits = cms.uint32(0),
                    minGammaEt = cms.double(1.5),
                    maxDeltaZ = cms.double(0.2),
                    maxTransverseImpactParameter = cms.double(0.03)
                ),
                pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
                primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
                signalQualityCuts = cms.PSet(
                    minTrackHits = cms.uint32(3),
                    minTrackVertexWeight = cms.double(-1),
                    minTrackPt = cms.double(0.5),
                    maxTrackChi2 = cms.double(100.0),
                    minTrackPixelHits = cms.uint32(0),
                    minGammaEt = cms.double(0.5),
                    maxDeltaZ = cms.double(0.2),
                    maxTransverseImpactParameter = cms.double(0.03)
                )
            ),
            maxStripBuildIterations = cms.int32(-1),
            updateStripAfterEachDaughter = cms.bool(False),
            makeCombinatoricStrips = cms.bool(False),
            applyElecTrackQcuts = cms.bool(False),
            stripCandidatesParticleIds = cms.vint32(2, 4),
            minStripEt = cms.double(1.0),
            stripEtaAssociationDistance = cms.double(0.05)
        ))
)


process.ak5PFJetsTrimmed = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    useExplicitGhosts = cms.bool(True),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    useTrimming = cms.bool(True),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    trimPtFracMin = cms.double(0.03),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    rFilt = cms.double(0.2),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("particleFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak5TrackJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    doAreaDiskApprox = cms.bool(False),
    jetType = cms.string('TrackJet'),
    MinVtxNdof = cms.int32(5),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    MaxVtxZ = cms.double(15.0),
    UseOnlyVertexTracks = cms.bool(False),
    UseOnlyOnePV = cms.bool(False),
    DzTrVtxMax = cms.double(1),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("trackRefsForJets"),
    jetPtMin = cms.double(3.0),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    DxyTrVtxMax = cms.double(0.2),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('AntiKt'),
    rParam = cms.double(0.5)
)


process.ak7BasicJets = cms.EDProducer("FastjetJetProducer",
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    Active_Area_Repeats = cms.int32(1),
    src = cms.InputTag("CastorTowerReco"),
    doAreaFastjet = cms.bool(False),
    doPVCorrection = cms.bool(True),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    rParam = cms.double(0.7),
    doPUOffsetCorr = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    radiusPU = cms.double(0.5),
    jetPtMin = cms.double(0.0),
    inputEtMin = cms.double(0.0),
    jetType = cms.string('BasicJet'),
    GhostArea = cms.double(0.01),
    inputEMin = cms.double(0.0)
)


process.ak7CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak7CaloJetsPUCorr = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0)
)


process.ak7CastorJetID = cms.EDProducer("CastorJetIDProducer",
    src = cms.InputTag("ak7BasicJets")
)


process.ak7JetExtender = cms.EDProducer("JetExtender",
    jets = cms.InputTag("ak7CaloJets"),
    jet2TracksAtCALO = cms.InputTag("ak7JetTracksAssociatorAtCaloFace"),
    jet2TracksAtVX = cms.InputTag("ak7JetTracksAssociatorAtVertex"),
    coneSize = cms.double(0.7)
)


process.ak7JetID = cms.EDProducer("JetIDProducer",
    eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheRecHitsColl = cms.InputTag("hbhereco"),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    hoRecHitsColl = cms.InputTag("horeco"),
    ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    hfRecHitsColl = cms.InputTag("hfreco"),
    useRecHits = cms.bool(True),
    src = cms.InputTag("ak7CaloJets")
)


process.ak7JetTracksAssociatorAtCaloFace = cms.EDProducer("JetTracksAssociatorAtCaloFace",
    trackQuality = cms.string('goodIterative'),
    tracks = cms.InputTag("generalTracks"),
    coneSize = cms.double(0.5),
    extrapolations = cms.InputTag("trackExtrapolator"),
    jets = cms.InputTag("ak7CaloJets")
)


process.ak7JetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    jets = cms.InputTag("ak7CaloJets")
)


process.ak7PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("particleFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ak7TrackJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('TrackJet'),
    MinVtxNdof = cms.int32(5),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    MaxVtxZ = cms.double(15.0),
    rParam = cms.double(0.7),
    UseOnlyVertexTracks = cms.bool(False),
    UseOnlyOnePV = cms.bool(False),
    DzTrVtxMax = cms.double(1),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("trackRefsForJets"),
    jetPtMin = cms.double(3.0),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    DxyTrVtxMax = cms.double(0.2),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.allConversions = cms.EDProducer("ConversionProducer",
    bypassPreselGsf = cms.bool(True),
    AllowD0 = cms.bool(True),
    dEtaTrackBC = cms.double(0.2),
    convertedPhotonCollection = cms.string(''),
    AllowRightBC = cms.bool(False),
    bcBarrelCollection = cms.InputTag("hybridSuperClusters","hybridBarrelBasicClusters"),
    scEndcapProducer = cms.InputTag("correctedMulti5x5SuperClustersWithPreshower"),
    MaxChi2Right = cms.double(10.0),
    primaryVertexProducer = cms.string('offlinePrimaryVerticesWithBS'),
    vtxChi2 = cms.double(0.0005),
    maxTrackRho = cms.double(120.0),
    d0 = cms.double(0.0),
    dPhiTrackBC = cms.double(1.0),
    bypassPreselEcal = cms.bool(False),
    dPhicutForSCmatching = cms.double(0.05),
    AllowOppCharge = cms.bool(True),
    bcEndcapCollection = cms.InputTag("multi5x5SuperClusters","multi5x5EndcapBasicClusters"),
    deltaEta = cms.double(0.4),
    maxDelta = cms.double(0.01),
    HalfwayEta = cms.double(0.1),
    AllowDeltaPhi = cms.bool(False),
    maxTrackZ = cms.double(300.0),
    maxNumOfTrackInPU = cms.int32(999999),
    AllowSingleLeg = cms.bool(False),
    MinApproachHigh = cms.double(1.0),
    EnergyTotalBC = cms.double(0.3),
    dEtacutForSCmatching = cms.double(0.03),
    DeltaPhi = cms.double(0.2),
    scBarrelProducer = cms.InputTag("correctedHybridSuperClusters"),
    dz = cms.double(5.0),
    maxNbrOfIterations = cms.int32(40),
    AllowDeltaCot = cms.bool(True),
    EnergyBC = cms.double(0.3),
    MinHitsLeft = cms.int32(4),
    DeltaCotTheta = cms.double(0.1),
    minChiSqImprovement = cms.double(50.0),
    src = cms.InputTag("gsfGeneralInOutOutInConversionTrackMerger"),
    AllowVertex = cms.bool(True),
    UsePvtx = cms.bool(True),
    bypassPreselEcalEcal = cms.bool(True),
    minSCEt = cms.double(10.0),
    AllowTrackBC = cms.bool(False),
    rCut = cms.double(2.0),
    MinApproachLow = cms.double(-0.25),
    maxReducedChiSq = cms.double(225.0),
    MaxChi2Left = cms.double(10.0),
    AlgorithmName = cms.string('mixed'),
    MinHitsRight = cms.int32(2),
    AllowMinApproach = cms.bool(True)
)


process.ancientMuonSeed = cms.EDProducer("MuonSeedGenerator",
    SMB_21 = cms.vdouble(1.043, -0.124, 0.0, 0.183, 0.0, 
        0.0),
    SMB_20 = cms.vdouble(1.011, -0.052, 0.0, 0.188, 0.0, 
        0.0),
    SMB_22 = cms.vdouble(1.474, -0.758, 0.0, 0.185, 0.0, 
        0.0),
    OL_2213 = cms.vdouble(0.117, 0.0, 0.0, 0.044, 0.0, 
        0.0),
    SME_11 = cms.vdouble(3.295, -1.527, 0.112, 0.378, 0.02, 
        0.0),
    SME_13 = cms.vdouble(-1.286, 1.711, 0.0, 0.356, 0.0, 
        0.0),
    SME_12 = cms.vdouble(0.102, 0.599, 0.0, 0.38, 0.0, 
        0.0),
    SME_32 = cms.vdouble(-0.901, 1.333, -0.47, 0.41, 0.073, 
        0.0),
    SME_31 = cms.vdouble(-1.594, 1.482, -0.317, 0.487, 0.097, 
        0.0),
    OL_1213 = cms.vdouble(0.96, -0.737, 0.0, 0.052, 0.0, 
        0.0),
    DT_13 = cms.vdouble(0.315, 0.068, -0.127, 0.051, -0.002, 
        0.0),
    DT_12 = cms.vdouble(0.183, 0.054, -0.087, 0.028, 0.002, 
        0.0),
    DT_14 = cms.vdouble(0.359, 0.052, -0.107, 0.072, -0.004, 
        0.0),
    OL_1232 = cms.vdouble(0.184, 0.0, 0.0, 0.066, 0.0, 
        0.0),
    CSC_23 = cms.vdouble(-0.081, 0.113, -0.029, 0.015, 0.008, 
        0.0),
    CSC_24 = cms.vdouble(0.004, 0.021, -0.002, 0.053, 0.0, 
        0.0),
    CSC_03 = cms.vdouble(0.787, -0.338, 0.029, 0.101, -0.008, 
        0.0),
    CSC_01 = cms.vdouble(0.166, 0.0, 0.0, 0.031, 0.0, 
        0.0),
    SMB_32 = cms.vdouble(0.67, -0.327, 0.0, 0.22, 0.0, 
        0.0),
    SMB_30 = cms.vdouble(0.505, -0.022, 0.0, 0.215, 0.0, 
        0.0),
    SMB_31 = cms.vdouble(0.549, -0.145, 0.0, 0.207, 0.0, 
        0.0),
    SMB_10 = cms.vdouble(1.387, -0.038, 0.0, 0.19, 0.0, 
        0.0),
    SMB_11 = cms.vdouble(1.247, 0.72, -0.802, 0.229, -0.075, 
        0.0),
    SMB_12 = cms.vdouble(2.128, -0.956, 0.0, 0.199, 0.0, 
        0.0),
    DT_23 = cms.vdouble(0.13, 0.023, -0.057, 0.028, 0.004, 
        0.0),
    DT_24 = cms.vdouble(0.176, 0.014, -0.051, 0.051, 0.003, 
        0.0),
    SME_21 = cms.vdouble(-0.529, 1.194, -0.358, 0.472, 0.086, 
        0.0),
    SME_22 = cms.vdouble(-1.207, 1.491, -0.251, 0.189, 0.243, 
        0.0),
    CSC_34 = cms.vdouble(0.062, -0.067, 0.019, 0.021, 0.003, 
        0.0),
    CSC_02 = cms.vdouble(0.612, -0.207, -0.0, 0.067, -0.001, 
        0.0),
    SME_42 = cms.vdouble(-0.003, 0.005, 0.005, 0.608, 0.076, 
        0.0),
    SME_41 = cms.vdouble(-0.003, 0.005, 0.005, 0.608, 0.076, 
        0.0),
    OL_2222 = cms.vdouble(0.107, 0.0, 0.0, 0.04, 0.0, 
        0.0),
    DT_34 = cms.vdouble(0.044, 0.004, -0.013, 0.029, 0.003, 
        0.0),
    CSC_14 = cms.vdouble(0.606, -0.181, -0.002, 0.111, -0.003, 
        0.0),
    OL_1222 = cms.vdouble(0.848, -0.591, 0.0, 0.062, 0.0, 
        0.0),
    CSC_13 = cms.vdouble(0.901, -1.302, 0.533, 0.045, 0.005, 
        0.0),
    CSC_12 = cms.vdouble(-0.161, 0.254, -0.047, 0.042, -0.007, 
        0.0),
    DT_34_1_scale = cms.vdouble(-13.783765, 0.0),
    DT_24_1_scale = cms.vdouble(-7.490909, 0.0),
    CSC_34_1_scale = cms.vdouble(-11.520507, 0.0),
    SME_13_0_scale = cms.vdouble(0.104905, 0.0),
    SMB_22_0_scale = cms.vdouble(1.346681, 0.0),
    DT_24_2_scale = cms.vdouble(-6.63094, 0.0),
    OL_2213_0_scale = cms.vdouble(-7.239789, 0.0),
    OL_1232_0_scale = cms.vdouble(-5.964634, 0.0),
    SMB_32_0_scale = cms.vdouble(-3.054156, 0.0),
    DT_34_2_scale = cms.vdouble(-11.901897, 0.0),
    CSC_13_2_scale = cms.vdouble(-6.077936, 0.0),
    OL_1213_0_scale = cms.vdouble(-4.488158, 0.0),
    CSC_12_3_scale = cms.vdouble(-1.63622, 0.0),
    OL_1222_0_scale = cms.vdouble(-5.810449, 0.0),
    SME_11_0_scale = cms.vdouble(1.325085, 0.0),
    CSC_13_3_scale = cms.vdouble(-1.701268, 0.0),
    SME_21_0_scale = cms.vdouble(-0.040862, 0.0),
    SMB_20_0_scale = cms.vdouble(1.486168, 0.0),
    DT_23_1_scale = cms.vdouble(-5.320346, 0.0),
    SMB_10_0_scale = cms.vdouble(2.448566, 0.0),
    CSC_14_3_scale = cms.vdouble(-1.969563, 0.0),
    DT_14_2_scale = cms.vdouble(-4.808546, 0.0),
    SMB_31_0_scale = cms.vdouble(-3.323768, 0.0),
    CSC_24_1_scale = cms.vdouble(-6.055701, 0.0),
    CSC_01_1_scale = cms.vdouble(-1.915329, 0.0),
    DT_12_1_scale = cms.vdouble(-3.692398, 0.0),
    SMB_21_0_scale = cms.vdouble(1.58384, 0.0),
    DT_23_2_scale = cms.vdouble(-5.117625, 0.0),
    SMB_12_0_scale = cms.vdouble(2.283221, 0.0),
    SME_12_0_scale = cms.vdouble(2.279181, 0.0),
    CSC_12_1_scale = cms.vdouble(-6.434242, 0.0),
    DT_14_1_scale = cms.vdouble(-5.644816, 0.0),
    SMB_11_0_scale = cms.vdouble(2.56363, 0.0),
    SME_22_0_scale = cms.vdouble(-3.457901, 0.0),
    SMB_30_0_scale = cms.vdouble(-3.629838, 0.0),
    DT_13_1_scale = cms.vdouble(-4.520923, 0.0),
    CSC_23_2_scale = cms.vdouble(-6.079917, 0.0),
    DT_12_2_scale = cms.vdouble(-3.518165, 0.0),
    DT_13_2_scale = cms.vdouble(-4.257687, 0.0),
    CSC_12_2_scale = cms.vdouble(-1.63622, 0.0),
    CSC_23_1_scale = cms.vdouble(-19.084285, 0.0),
    OL_2222_0_scale = cms.vdouble(-7.667231, 0.0),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    crackWindow = cms.double(0.04),
    crackEtas = cms.vdouble(0.2, 1.6, 1.7),
    CSCRecSegmentLabel = cms.InputTag("cscSegments"),
    scaleDT = cms.bool(True),
    EnableDTMeasurement = cms.bool(True),
    DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
    EnableCSCMeasurement = cms.bool(True)
)


process.beamhaloTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("beamhaloTrackerSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('BeamHaloPropagatorAlong'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('BeamHaloPropagatorOpposite')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    NavigationSchool = cms.string('BeamHaloNavigationSchool'),
    TrajectoryBuilder = cms.string('CkfTrajectoryBuilderBH')
)


process.beamhaloTrackerSeeds = cms.EDProducer("CtfSpecialSeedGenerator",
    ErrorRescaling = cms.double(50.0),
    OrderedHitsFactoryPSets = cms.VPSet(cms.PSet(
        ComponentName = cms.string('BeamHaloPairGenerator'),
        maxTheta = cms.double(0.1),
        NavigationDirection = cms.string('outsideIn'),
        LayerPSet = cms.PSet(
            TEC4 = cms.PSet(
                minRing = cms.int32(1),
                matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                useRingSlector = cms.bool(True),
                TTRHBuilder = cms.string('WithTrackAngle'),
                rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
                maxRing = cms.int32(2)
            ),
            TEC5 = cms.PSet(
                minRing = cms.int32(1),
                matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                useRingSlector = cms.bool(True),
                TTRHBuilder = cms.string('WithTrackAngle'),
                rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
                maxRing = cms.int32(2)
            ),
            TEC6 = cms.PSet(
                minRing = cms.int32(1),
                matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                useRingSlector = cms.bool(True),
                TTRHBuilder = cms.string('WithTrackAngle'),
                rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
                maxRing = cms.int32(2)
            ),
            TEC = cms.PSet(
                minRing = cms.int32(5),
                matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                useRingSlector = cms.bool(False),
                TTRHBuilder = cms.string('WithTrackAngle'),
                rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
                maxRing = cms.int32(7)
            ),
            TEC1 = cms.PSet(
                minRing = cms.int32(1),
                matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                useRingSlector = cms.bool(True),
                TTRHBuilder = cms.string('WithTrackAngle'),
                rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
                maxRing = cms.int32(2)
            ),
            TEC2 = cms.PSet(
                minRing = cms.int32(1),
                matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                useRingSlector = cms.bool(True),
                TTRHBuilder = cms.string('WithTrackAngle'),
                rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
                maxRing = cms.int32(2)
            ),
            TEC3 = cms.PSet(
                minRing = cms.int32(1),
                matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                useRingSlector = cms.bool(True),
                TTRHBuilder = cms.string('WithTrackAngle'),
                rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
                maxRing = cms.int32(2)
            ),
            FPix = cms.PSet(
                hitErrorRZ = cms.double(0.0036),
                hitErrorRPhi = cms.double(0.0051),
                TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
                HitProducer = cms.string('siPixelRecHits'),
                useErrorsFromParam = cms.bool(True)
            ),
            TID = cms.PSet(
                matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                useRingSlector = cms.bool(False),
                TTRHBuilder = cms.string('WithTrackAngle'),
                rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
            ),
            layerList = cms.vstring('FPix1_pos+FPix2_pos', 
                'FPix1_neg+FPix2_neg', 
                'TID2_pos+TID3_pos', 
                'TID2_neg+TID3_neg', 
                'TEC1_neg+TEC2_neg', 
                'TEC1_pos+TEC2_pos', 
                'TEC2_neg+TEC3_neg', 
                'TEC2_pos+TEC3_pos', 
                'TEC3_neg+TEC4_neg', 
                'TEC3_pos+TEC4_pos', 
                'TEC4_neg+TEC5_neg', 
                'TEC4_pos+TEC5_pos', 
                'TEC5_neg+TEC6_neg', 
                'TEC5_pos+TEC6_pos', 
                'TEC7_neg+TEC8_neg', 
                'TEC7_pos+TEC8_pos', 
                'TEC8_neg+TEC9_neg', 
                'TEC8_pos+TEC9_pos')
        ),
        PropagationDirection = cms.string('alongMomentum')
    ), 
        cms.PSet(
            ComponentName = cms.string('BeamHaloPairGenerator'),
            maxTheta = cms.double(0.1),
            NavigationDirection = cms.string('outsideIn'),
            LayerPSet = cms.PSet(
                TEC4 = cms.PSet(
                    minRing = cms.int32(1),
                    matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                    useRingSlector = cms.bool(True),
                    TTRHBuilder = cms.string('WithTrackAngle'),
                    rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
                    maxRing = cms.int32(2)
                ),
                TEC5 = cms.PSet(
                    minRing = cms.int32(1),
                    matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                    useRingSlector = cms.bool(True),
                    TTRHBuilder = cms.string('WithTrackAngle'),
                    rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
                    maxRing = cms.int32(2)
                ),
                TEC6 = cms.PSet(
                    minRing = cms.int32(1),
                    matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                    useRingSlector = cms.bool(True),
                    TTRHBuilder = cms.string('WithTrackAngle'),
                    rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
                    maxRing = cms.int32(2)
                ),
                TEC = cms.PSet(
                    minRing = cms.int32(5),
                    matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                    useRingSlector = cms.bool(False),
                    TTRHBuilder = cms.string('WithTrackAngle'),
                    rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
                    maxRing = cms.int32(7)
                ),
                TEC1 = cms.PSet(
                    minRing = cms.int32(1),
                    matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                    useRingSlector = cms.bool(True),
                    TTRHBuilder = cms.string('WithTrackAngle'),
                    rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
                    maxRing = cms.int32(2)
                ),
                TEC2 = cms.PSet(
                    minRing = cms.int32(1),
                    matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                    useRingSlector = cms.bool(True),
                    TTRHBuilder = cms.string('WithTrackAngle'),
                    rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
                    maxRing = cms.int32(2)
                ),
                TEC3 = cms.PSet(
                    minRing = cms.int32(1),
                    matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                    useRingSlector = cms.bool(True),
                    TTRHBuilder = cms.string('WithTrackAngle'),
                    rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
                    maxRing = cms.int32(2)
                ),
                FPix = cms.PSet(
                    hitErrorRZ = cms.double(0.0036),
                    hitErrorRPhi = cms.double(0.0051),
                    TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
                    HitProducer = cms.string('siPixelRecHits'),
                    useErrorsFromParam = cms.bool(True)
                ),
                TID = cms.PSet(
                    matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
                    useRingSlector = cms.bool(False),
                    TTRHBuilder = cms.string('WithTrackAngle'),
                    rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
                ),
                layerList = cms.vstring('FPix1_pos+FPix2_pos', 
                    'FPix1_neg+FPix2_neg', 
                    'TID2_pos+TID3_pos', 
                    'TID2_neg+TID3_neg', 
                    'TEC1_neg+TEC2_neg', 
                    'TEC1_pos+TEC2_pos', 
                    'TEC2_neg+TEC3_neg', 
                    'TEC2_pos+TEC3_pos', 
                    'TEC3_neg+TEC4_neg', 
                    'TEC3_pos+TEC4_pos', 
                    'TEC4_neg+TEC5_neg', 
                    'TEC4_pos+TEC5_pos', 
                    'TEC5_neg+TEC6_neg', 
                    'TEC5_pos+TEC6_pos', 
                    'TEC7_neg+TEC8_neg', 
                    'TEC7_pos+TEC8_pos', 
                    'TEC8_neg+TEC9_neg', 
                    'TEC8_pos+TEC9_pos')
            ),
            PropagationDirection = cms.string('oppositeToMomentum')
        )),
    Charges = cms.vint32(-1, 1),
    PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
    MaxNumberOfCosmicClusters = cms.uint32(10000),
    UseScintillatorsConstraint = cms.bool(False),
    SetMomentum = cms.bool(True),
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            originHalfLength = cms.double(21.2),
            originZPos = cms.double(0.0),
            originYPos = cms.double(0.0),
            ptMin = cms.double(0.9),
            originXPos = cms.double(0.0),
            originRadius = cms.double(0.2)
        ),
        ComponentName = cms.string('GlobalRegionProducer')
    ),
    SeedsFromNegativeY = cms.bool(False),
    TTRHBuilder = cms.string('WithTrackAngle'),
    doClusterCheck = cms.bool(True),
    SeedsFromPositiveY = cms.bool(False),
    MaxNumberOfPixelClusters = cms.uint32(10000),
    SeedMomentum = cms.double(15.0),
    maxSeeds = cms.int32(10000),
    CheckHitsAreOnDifferentLayers = cms.bool(False),
    ClusterCollectionLabel = cms.InputTag("siStripClusters"),
    requireBOFF = cms.bool(False)
)


process.beamhaloTracks = cms.EDProducer("TrackProducer",
    src = cms.InputTag("beamhaloTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('KFFittingSmootherBH'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    AlgorithmName = cms.string('beamhalo'),
    alias = cms.untracked.string('beamhaloTracks'),
    NavigationSchool = cms.string('BeamHaloNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    GeometricInnerState = cms.bool(True),
    Propagator = cms.string('BeamHaloPropagatorAlong')
)


process.ca4CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    doAreaDiskApprox = cms.bool(False),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('CambridgeAachen'),
    rParam = cms.double(0.4)
)


process.ca4CaloJetsPUCorr = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('CambridgeAachen'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.4),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0)
)


process.ca4JetID = cms.EDProducer("JetIDProducer",
    eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheRecHitsColl = cms.InputTag("hbhereco"),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    hoRecHitsColl = cms.InputTag("horeco"),
    ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    hfRecHitsColl = cms.InputTag("hfreco"),
    useRecHits = cms.bool(True),
    src = cms.InputTag("ca4CaloJets")
)


process.ca4PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doOutputJets = cms.bool(True),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    doAreaFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    jetPtMin = cms.double(3.0),
    jetType = cms.string('PFJet'),
    src = cms.InputTag("particleFlow"),
    doPUOffsetCorr = cms.bool(False),
    radiusPU = cms.double(0.5),
    doAreaDiskApprox = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('CambridgeAachen'),
    rParam = cms.double(0.4)
)


process.ca4TrackJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    doAreaDiskApprox = cms.bool(False),
    jetType = cms.string('TrackJet'),
    MinVtxNdof = cms.int32(5),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    MaxVtxZ = cms.double(15.0),
    UseOnlyVertexTracks = cms.bool(False),
    UseOnlyOnePV = cms.bool(False),
    DzTrVtxMax = cms.double(1),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("trackRefsForJets"),
    jetPtMin = cms.double(3.0),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    DxyTrVtxMax = cms.double(0.2),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('CambridgeAachen'),
    rParam = cms.double(0.4)
)


process.ca6CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('CambridgeAachen'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ca6CaloJetsPUCorr = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('CambridgeAachen'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0)
)


process.ca6JetID = cms.EDProducer("JetIDProducer",
    eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheRecHitsColl = cms.InputTag("hbhereco"),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    hoRecHitsColl = cms.InputTag("horeco"),
    ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    hfRecHitsColl = cms.InputTag("hfreco"),
    useRecHits = cms.bool(True),
    src = cms.InputTag("ca6CaloJets")
)


process.ca6PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('CambridgeAachen'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("particleFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.ca6TrackJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('TrackJet'),
    MinVtxNdof = cms.int32(5),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('CambridgeAachen'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    MaxVtxZ = cms.double(15.0),
    rParam = cms.double(0.6),
    UseOnlyVertexTracks = cms.bool(False),
    UseOnlyOnePV = cms.bool(False),
    DzTrVtxMax = cms.double(1),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("trackRefsForJets"),
    jetPtMin = cms.double(3.0),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    DxyTrVtxMax = cms.double(0.2),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.caloRecoTauDiscriminationAgainstElectron = cms.EDProducer("CaloRecoTauDiscriminationAgainstElectron",
    CaloTauProducer = cms.InputTag("caloRecoTauProducer"),
    leadTrack_HCAL3x3hitsEtSumOverPt_minvalue = cms.double(0.1),
    maxleadTrackHCAL3x3hottesthitDEta = cms.double(0.1),
    ApplyCut_maxleadTrackHCAL3x3hottesthitDEta = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("caloRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    ApplyCut_leadTrackavoidsECALcrack = cms.bool(True)
)


process.caloRecoTauDiscriminationAgainstMuon = cms.EDProducer("CaloRecoTauDiscriminationAgainstMuon",
    CaloTauProducer = cms.InputTag("caloRecoTauProducer"),
    muonSource = cms.InputTag("muons"),
    segmCompCoefficient = cms.double(0.5),
    muonCompCut = cms.double(0.0),
    dRmatch = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("caloRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    discriminatorOption = cms.string('noSegMatch'),
    caloCompCoefficient = cms.double(0.5)
)


process.caloRecoTauDiscriminationByECALIsolation = cms.EDProducer("CaloRecoTauDiscriminationByIsolation",
    ECALisolAnnulus_maximumSumEtCut = cms.double(1.5),
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    TrackerIsolAnnulus_maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("caloRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    CaloTauProducer = cms.InputTag("caloRecoTauProducer")
)


process.caloRecoTauDiscriminationByIsolation = cms.EDProducer("CaloRecoTauDiscriminationByIsolation",
    ECALisolAnnulus_maximumSumEtCut = cms.double(1.5),
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    TrackerIsolAnnulus_maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("caloRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    CaloTauProducer = cms.InputTag("caloRecoTauProducer")
)


process.caloRecoTauDiscriminationByLeadingTrackFinding = cms.EDProducer("CaloRecoTauDiscriminationByLeadingTrackPtCut",
    MinPtLeadingTrack = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    CaloTauProducer = cms.InputTag("caloRecoTauProducer")
)


process.caloRecoTauDiscriminationByLeadingTrackPtCut = cms.EDProducer("CaloRecoTauDiscriminationByLeadingTrackPtCut",
    MinPtLeadingTrack = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("caloRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    CaloTauProducer = cms.InputTag("caloRecoTauProducer")
)


process.caloRecoTauDiscriminationByTrackIsolation = cms.EDProducer("CaloRecoTauDiscriminationByIsolation",
    ECALisolAnnulus_maximumSumEtCut = cms.double(1.5),
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    TrackerIsolAnnulus_maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("caloRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    CaloTauProducer = cms.InputTag("caloRecoTauProducer")
)


process.caloRecoTauProducer = cms.EDProducer("TCRecoTauProducer",
    tkminTrackerHitsn = cms.int32(5),
    PVProducer = cms.InputTag("offlinePrimaryVertices"),
    EtCaloOverTrackMin = cms.double(-0.9),
    EERecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    tkmaxChi2 = cms.double(100.0),
    EtHcalOverTrackMin = cms.double(-0.3),
    CaloRecoTauProducer = cms.InputTag("JPTCaloRecoTauProducer"),
    EBRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    tkminPixelHitsn = cms.int32(0),
    MatchingConeSize = cms.double(0.1),
    TrackCollection = cms.InputTag("generalTracks"),
    HBHERecHitCollection = cms.InputTag("hbhereco"),
    EtCaloOverTrackMax = cms.double(0.0),
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(9999.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.2),
        useMuon = cms.bool(True),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    ),
    SignalConeSize = cms.double(0.2),
    EcalConeSize = cms.double(0.5),
    Track_minPt = cms.double(1.0),
    EtHcalOverTrackMax = cms.double(1.0),
    HFRecHitCollection = cms.InputTag("hfreco"),
    DropRejectedJets = cms.untracked.bool(False),
    HORecHitCollection = cms.InputTag("horeco"),
    DropCaloJets = cms.untracked.bool(False),
    tkmaxipt = cms.double(0.1)
)


process.caloRecoTauTagInfoProducer = cms.EDProducer("CaloRecoTauTagInfoProducer",
    tkminTrackerHitsn = cms.int32(3),
    tkminPixelHitsn = cms.int32(0),
    ECALBasicClusterpropagTrack_matchingDRConeSize = cms.double(0.015),
    PVProducer = cms.InputTag("offlinePrimaryVertices"),
    tkminPt = cms.double(0.5),
    BarrelBasicClustersSource = cms.InputTag("hybridSuperClusters","hybridBarrelBasicClusters"),
    UsePVconstraint = cms.bool(True),
    tkmaxChi2 = cms.double(100.0),
    EndcapBasicClustersSource = cms.InputTag("multi5x5SuperClusters","multi5x5EndcapBasicClusters"),
    smearedPVsigmaY = cms.double(0.0015),
    smearedPVsigmaX = cms.double(0.0015),
    ECALBasicClusterminE = cms.double(1.0),
    smearedPVsigmaZ = cms.double(0.005),
    tkQuality = cms.string('highPurity'),
    tkPVmaxDZ = cms.double(1.0),
    UseTrackQuality = cms.bool(True),
    ECALBasicClustersAroundCaloJet_DRConeSize = cms.double(0.5),
    tkmaxipt = cms.double(0.1),
    CaloJetTracksAssociatorProducer = cms.InputTag("JPTAntiKt5JetTracksAssociatorAtVertex")
)


process.calomuons = cms.EDProducer("CaloMuonProducer",
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(9999.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.2),
        useMuon = cms.bool(True),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    ),
    MuonCaloCompatibility = cms.PSet(
        allSiPMHO = cms.bool(False),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    inputMuons = cms.InputTag("muons1stStep"),
    inputTracks = cms.InputTag("generalTracks"),
    minCaloCompatibility = cms.double(0.6),
    inputCollection = cms.InputTag("muons1stStep"),
    minPt = cms.double(1.0)
)


process.calotowermaker = cms.EDProducer("CaloTowersCreator",
    EBSumThreshold = cms.double(0.2),
    MomHBDepth = cms.double(0.2),
    UseEtEBTreshold = cms.bool(False),
    hfInput = cms.InputTag("hfreco"),
    AllowMissingInputs = cms.bool(False),
    MomEEDepth = cms.double(0.0),
    EESumThreshold = cms.double(0.45),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF1Weight = cms.double(1.0),
    HBThreshold = cms.double(0.7),
    EcalSeveritiesToBeUsedInBadTowers = cms.vstring(),
    UseEcalRecoveredHits = cms.bool(False),
    MomConstrMethod = cms.int32(1),
    MomHEDepth = cms.double(0.4),
    HcalThreshold = cms.double(-1000.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    UseSymEBTreshold = cms.bool(True),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEWeight = cms.double(1.0),
    UseHO = cms.bool(True),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HESWeight = cms.double(1.0),
    HcalAcceptSeverityLevelForRejectedHit = cms.uint32(9999),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOThresholdPlus1 = cms.double(3.5),
    EBWeight = cms.double(1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOWeight = cms.double(1.0),
    EBThreshold = cms.double(0.07),
    hbheInput = cms.InputTag("hbhereco"),
    HF2Weight = cms.double(1.0),
    HF2Threshold = cms.double(0.85),
    HcalAcceptSeverityLevel = cms.uint32(9),
    EEThreshold = cms.double(0.3),
    HESThreshold = cms.double(0.8),
    HOThresholdPlus2 = cms.double(3.5),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    hoInput = cms.InputTag("horeco"),
    HF1Threshold = cms.double(0.5),
    HOThresholdMinus1 = cms.double(3.5),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    UseRejectedRecoveredEcalHits = cms.bool(False),
    UseEtEETreshold = cms.bool(False),
    HEDWeight = cms.double(1.0),
    EcalRecHitSeveritiesToBeExcluded = cms.vstring('kTime', 
        'kWeird', 
        'kBad'),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    UseSymEETreshold = cms.bool(True),
    HEDThreshold = cms.double(0.8),
    UseRejectedHitsOnly = cms.bool(False),
    EcutTower = cms.double(-1000.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    UseHcalRecoveredHits = cms.bool(True),
    HOThresholdMinus2 = cms.double(3.5),
    HOThreshold0 = cms.double(1.1),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    UseRejectedRecoveredHcalHits = cms.bool(True),
    MomEBDepth = cms.double(0.3),
    HBWeight = cms.double(1.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0)
)


process.castorDigis = cms.EDProducer("CastorRawToDigi",
    CastorFirstFED = cms.untracked.int32(690),
    FilterDataQuality = cms.bool(True),
    silent = cms.untracked.bool(False),
    lastSample = cms.int32(9),
    InputLabel = cms.InputTag("rawDataCollector"),
    ComplainEmptyData = cms.untracked.bool(False),
    FEDs = cms.untracked.vint32(690, 691, 692),
    UnpackTTP = cms.untracked.bool(True),
    ExceptionEmptyData = cms.untracked.bool(False),
    firstSample = cms.int32(0)
)


process.castorreco = cms.EDProducer("CastorSimpleReconstructor",
    firstSample = cms.int32(4),
    correctionPhaseNS = cms.double(0.0),
    doSaturationCorr = cms.bool(True),
    digiLabel = cms.InputTag("castorDigis"),
    tsFromDB = cms.bool(True),
    samplesToAdd = cms.int32(2),
    Subdetector = cms.string('CASTOR'),
    maxADCvalue = cms.int32(127),
    setSaturationFlag = cms.bool(True),
    correctForPhaseContainment = cms.bool(False),
    correctForTimeslew = cms.bool(False)
)


process.ckfInOutTracksFromConversions = cms.EDProducer("TrackProducerWithSCAssociation",
    src = cms.InputTag("conversionTrackCandidates","inOutTracksFromConversions"),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string('conversionTrackCandidates'),
    Fitter = cms.string('KFFittingSmootherForInOut'),
    ComponentName = cms.string('ckfInOutTracksFromConversions'),
    MeasurementTracker = cms.string(''),
    trackCandidateSCAssociationCollection = cms.string('inOutTrackCandidateSCAssociationCollection'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    AlgorithmName = cms.string('inOutEcalSeededConv'),
    Propagator = cms.string('alongMomElePropagator'),
    recoTrackSCAssociationCollection = cms.string('inOutTrackSCAssociationCollection')
)


process.ckfOutInTracksFromConversions = cms.EDProducer("TrackProducerWithSCAssociation",
    src = cms.InputTag("conversionTrackCandidates","outInTracksFromConversions"),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string('conversionTrackCandidates'),
    Fitter = cms.string('KFFitterForOutIn'),
    ComponentName = cms.string('ckfOutInTracksFromConversions'),
    MeasurementTracker = cms.string(''),
    trackCandidateSCAssociationCollection = cms.string('outInTrackCandidateSCAssociationCollection'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    AlgorithmName = cms.string('outInEcalSeededConv'),
    Propagator = cms.string('alongMomElePropagator'),
    recoTrackSCAssociationCollection = cms.string('outInTrackSCAssociationCollection')
)


process.ckfTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("globalMixedSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder')
)


process.ckfTrackCandidatesCombinedSeeds = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("globalCombinedSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder')
)


process.ckfTrackCandidatesNoOverlaps = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("globalMixedSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryBuilder = cms.string('CkfTrajectoryBuilder')
)


process.ckfTrackCandidatesP5 = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("combinatorialcosmicseedfinderP5"),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    NavigationSchool = cms.string('CosmicNavigationSchool'),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilderP5')
)


process.ckfTrackCandidatesPixelLess = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("globalPixelLessSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilder')
)


process.cleanedHybridSuperClusters = cms.EDProducer("HybridClusterProducer",
    eThreshA = cms.double(0.003),
    basicclusterCollection = cms.string('hybridBarrelBasicClusters'),
    clustershapecollection = cms.string(''),
    ethresh = cms.double(0.1),
    ewing = cms.double(0.0),
    RecHitSeverityToBeExcluded = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    dynamicPhiRoad = cms.bool(False),
    HybridBarrelSeedThr = cms.double(1.0),
    posCalcParameters = cms.PSet(
        T0_barl = cms.double(7.4),
        LogWeighted = cms.bool(True),
        T0_endc = cms.double(3.1),
        T0_endcPresh = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    eThreshB = cms.double(0.1),
    RecHitFlagToBeExcluded = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    useEtForXi = cms.bool(True),
    step = cms.int32(17),
    eseed = cms.double(0.35),
    xi = cms.double(0.0),
    shapeAssociation = cms.string('hybridShapeAssoc'),
    superclusterCollection = cms.string(''),
    dynamicEThresh = cms.bool(False),
    ecalhitcollection = cms.string('EcalRecHitsEB'),
    excludeFlagged = cms.bool(True),
    ecalhitproducer = cms.string('ecalRecHit')
)


process.clusterSummaryProducer = cms.EDProducer("ClusterSummaryProducer",
    verbose = cms.bool(False),
    doPixels = cms.bool(True),
    stripModule = cms.string('TOB,TIB,TID,TEC,TRACKER'),
    doStrips = cms.bool(True),
    stripVariables = cms.string('cHits,cSize,cCharge'),
    pixelClusters = cms.InputTag("siPixelClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    pixelModule = cms.string('BPIX,FPIX,PIXEL'),
    pixelVariables = cms.string('pHits,pSize,pCharge')
)


process.combinatoricRecoTaus = cms.EDProducer("RecoTauProducer",
    piZeroSrc = cms.InputTag("ak5PFJetsLegacyHPSPiZeros"),
    modifiers = cms.VPSet(cms.PSet(
        plugin = cms.string('RecoTauImpactParameterSignificancePlugin'),
        name = cms.string('sipt'),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        )
    ), 
        cms.PSet(
            ElectronPreIDProducer = cms.InputTag("elecpreid"),
            name = cms.string('elec_rej'),
            plugin = cms.string('RecoTauElectronRejectionPlugin'),
            DataType = cms.string('AOD'),
            maximumForElectrionPreIDOutput = cms.double(-0.1),
            EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
            EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
            EcalStripSumE_minClusEnergy = cms.double(0.1),
            ElecPreIDLeadTkMatch_maxDR = cms.double(0.01),
            EcalStripSumE_deltaEta = cms.double(0.03)
        ), 
        cms.PSet(
            lev1EtaWindow = cms.double(0.1),
            corrLevel = cms.uint32(3),
            lev1PhiWindow = cms.double(0.5),
            qualityCuts = cms.PSet(
                isolationQualityCuts = cms.PSet(
                    minTrackHits = cms.uint32(8),
                    minTrackVertexWeight = cms.double(-1),
                    minTrackPt = cms.double(1.0),
                    maxTrackChi2 = cms.double(100.0),
                    minTrackPixelHits = cms.uint32(0),
                    minGammaEt = cms.double(1.5),
                    maxDeltaZ = cms.double(0.2),
                    maxTransverseImpactParameter = cms.double(0.03)
                ),
                pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
                primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
                signalQualityCuts = cms.PSet(
                    minTrackHits = cms.uint32(3),
                    minTrackVertexWeight = cms.double(-1),
                    minTrackPt = cms.double(0.5),
                    maxTrackChi2 = cms.double(100.0),
                    minTrackPixelHits = cms.uint32(0),
                    minGammaEt = cms.double(0.5),
                    maxDeltaZ = cms.double(0.2),
                    maxTransverseImpactParameter = cms.double(0.03)
                )
            ),
            name = cms.string('tau_en_recovery'),
            plugin = cms.string('RecoTauEnergyRecoveryPlugin')
        ), 
        cms.PSet(
            pfTauTagInfoSrc = cms.InputTag("pfRecoTauTagInfoProducer"),
            name = cms.string('TTIworkaround'),
            plugin = cms.string('RecoTauTagInfoWorkaroundModifer')
        )),
    jetRegionSrc = cms.InputTag("recoTauAK5PFJets08Region"),
    jetSrc = cms.InputTag("ak5PFJets"),
    builders = cms.VPSet(cms.PSet(
        usePFLeptons = cms.bool(True),
        name = cms.string('combinatoric'),
        plugin = cms.string('RecoTauBuilderCombinatoricPlugin'),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        decayModes = cms.VPSet(cms.PSet(
            nPiZeros = cms.uint32(0),
            nCharged = cms.uint32(1),
            maxPiZeros = cms.uint32(0),
            maxTracks = cms.uint32(6)
        ), 
            cms.PSet(
                nPiZeros = cms.uint32(1),
                nCharged = cms.uint32(1),
                maxPiZeros = cms.uint32(6),
                maxTracks = cms.uint32(6)
            ), 
            cms.PSet(
                nPiZeros = cms.uint32(2),
                nCharged = cms.uint32(1),
                maxPiZeros = cms.uint32(5),
                maxTracks = cms.uint32(6)
            ), 
            cms.PSet(
                nPiZeros = cms.uint32(0),
                nCharged = cms.uint32(3),
                maxPiZeros = cms.uint32(0),
                maxTracks = cms.uint32(6)
            )),
        isolationConeSize = cms.double(0.5),
        pfCandSrc = cms.InputTag("particleFlow")
    )),
    buildNullTaus = cms.bool(True)
)


process.combinatoricRecoTausDiscriminationByLeadingPionPtCut = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    UseOnlyChargedHadrons = cms.bool(False),
    PFTauProducer = cms.InputTag("combinatoricRecoTaus")
)


process.combinatoricRecoTausDiscriminationByTanc = cms.EDProducer("RecoTauMVADiscriminator",
    discriminantOptions = cms.PSet(
        BinnedMaskedHcalIsolation = cms.PSet(
            vtxSource = cms.InputTag("recoTauPileUpVertices"),
            mask = cms.PSet(
                finalHcalCone = cms.double(0.08),
                ecalCone = cms.double(0.15),
                hcalCone = cms.double(0.3),
                maxSigmas = cms.double(2)
            ),
            binning = cms.VPSet(cms.PSet(
                binLowEdges = cms.vdouble(1.0, 1.79, 4.03),
                nPUVtx = cms.int32(0)
            ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.15, 1.8, 4.03),
                    nPUVtx = cms.int32(1)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.22, 1.81, 4.03),
                    nPUVtx = cms.int32(2)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.27, 1.83, 4.03),
                    nPUVtx = cms.int32(3)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.31, 1.84, 4.03),
                    nPUVtx = cms.int32(4)
                )),
            defaultBinning = cms.vdouble(1.31, 1.84, 4.03),
            plugin = cms.string('RecoTauDiscriminationBinnedMaskedHCALIsolation')
        ),
        InvariantOpeningAngle = cms.PSet(
            defaultRMS = cms.string('max(0.3/max(pt, 1.0), 0.005)'),
            plugin = cms.string('RecoTauDiscriminantInvariantWidth'),
            decayModes = cms.VPSet(cms.PSet(
                nPiZeros = cms.uint32(1),
                rms = cms.string('2.7e-3 + 0.23/max(pt, 1.0)'),
                nCharged = cms.uint32(1),
                mean = cms.string('5.0e-3 + 0.43/max(pt, 1.0)')
            ), 
                cms.PSet(
                    nPiZeros = cms.uint32(2),
                    rms = cms.string('7.5e-3 + 0.3/max(pt, 1.0)'),
                    nCharged = cms.uint32(1),
                    mean = cms.string('4.7e-3 + 0.9/max(pt, 1.0)')
                ), 
                cms.PSet(
                    nPiZeros = cms.uint32(0),
                    rms = cms.string('0.38/max(pt, 1.0)'),
                    nCharged = cms.uint32(3),
                    mean = cms.string('0.87/max(pt, 1.0)')
                )),
            defaultMean = cms.string('max(0.87/max(pt, 1.0), 0.005)')
        ),
        BinnedMaskedEcalIsolation = cms.PSet(
            vtxSource = cms.InputTag("recoTauPileUpVertices"),
            mask = cms.PSet(
                finalHcalCone = cms.double(0.08),
                ecalCone = cms.double(0.15),
                hcalCone = cms.double(0.3),
                maxSigmas = cms.double(2)
            ),
            binning = cms.VPSet(cms.PSet(
                binLowEdges = cms.vdouble(0.5, 0.88, 2.53),
                nPUVtx = cms.int32(0)
            ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.65, 0.98, 2.53),
                    nPUVtx = cms.int32(1)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.74, 1.05, 2.54),
                    nPUVtx = cms.int32(2)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.8, 1.11, 2.54),
                    nPUVtx = cms.int32(3)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.86, 1.15, 2.54),
                    nPUVtx = cms.int32(4)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.9, 1.19, 2.55),
                    nPUVtx = cms.int32(5)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.94, 1.22, 2.55),
                    nPUVtx = cms.int32(6)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.97, 1.25, 2.55),
                    nPUVtx = cms.int32(7)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.0, 1.27, 2.56),
                    nPUVtx = cms.int32(8)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.03, 1.3, 2.56),
                    nPUVtx = cms.int32(9)
                )),
            defaultBinning = cms.vdouble(1.03, 1.3, 2.56),
            plugin = cms.string('RecoTauDiscriminationBinnedMaskedECALIsolation')
        ),
        FlightPathSignificance = cms.PSet(
            plugin = cms.string('RecoTauDiscriminantFromDiscriminator'),
            discSrc = cms.InputTag("hpsTancTausDiscriminationByFlightPath"),
            maxValue = cms.double(25),
            minValue = cms.double(-25)
        ),
        BinnedTrackIsolation = cms.PSet(
            vtxSource = cms.InputTag("recoTauPileUpVertices"),
            binning = cms.VPSet(cms.PSet(
                binLowEdges = cms.vdouble(0.5, 0.86, 1.87),
                nPUVtx = cms.int32(0)
            ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.51, 0.86, 1.87),
                    nPUVtx = cms.int32(1)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.51, 0.86, 1.87),
                    nPUVtx = cms.int32(2)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.52, 0.86, 1.87),
                    nPUVtx = cms.int32(3)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.52, 0.86, 1.87),
                    nPUVtx = cms.int32(4)
                )),
            defaultBinning = cms.vdouble(0.52, 0.86, 1.87),
            plugin = cms.string('RecoTauDiscriminationBinnedTrackIsolation')
        )
    ),
    mvas = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        mvaLabel = cms.string('1prong0pi0'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            mvaLabel = cms.string('1prong1pi0'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(2),
            mvaLabel = cms.string('1prong2pi0'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            mvaLabel = cms.string('3prong0pi0'),
            nCharged = cms.uint32(3)
        )),
    PFTauProducer = cms.InputTag("combinatoricRecoTaus"),
    remapOutput = cms.bool(True),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    dbLabel = cms.string('hpstanc')
)


process.combinatoricRecoTausHPSSelector = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    src = cms.InputTag("combinatoricRecoTaus"),
    PFTauProducer = cms.InputTag("combinatoricRecoTaus"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(5.0),
    coneSizeFormula = cms.string('0.3'),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-0.1),
        maxMass = cms.double(1),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.double(1.3),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.double(1.2),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.double(1.5),
            nCharged = cms.uint32(3)
        )),
    matchingCone = cms.double(0.1)
)


process.combinatoricRecoTausTancTransform = cms.EDProducer("RecoTauMVATransform",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    transforms = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        transform = cms.PSet(
            max = cms.double(1.99833333333),
            transform = cms.vdouble( (0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243693947972, 0.2446621342, 
                0.25648929965, 0.2608766459, 0.265139843949, 0.268288096025, 0.271490633611, 
                0.274812027295, 0.278726505561, 0.283196361675, 0.287921047203, 0.293485065795, 
                0.299327353484, 0.305468394708, 0.310410038477, 0.315654364298, 0.320865024837, 
                0.324875648584, 0.328691660974, 0.332598633349, 0.336484807993, 0.339893814351, 
                0.343528868912, 0.346311138119, 0.348525259682, 0.350638868762, 0.352500481165, 
                0.354385202603, 0.356405103778, 0.358448162743, 0.359626155068, 0.361359527277, 
                0.362911630832, 0.364767207965, 0.365568276809, 0.367161876825, 0.368245783665, 
                0.369700987138, 0.370891835827, 0.371335926598, 0.372724067775, 0.374122626292, 
                0.374872824273, 0.376287585272, 0.377808481377, 0.379437962659, 0.380385427158, 
                0.381454465894, 0.382529530437, 0.383308773065, 0.383900643462, 0.384488881534, 
                0.385284008411, 0.385778244795, 0.386880706208, 0.387787417873, 0.389206336729, 
                0.390430843456, 0.391560096158, 0.392490239284, 0.393218300975, 0.394889524946, 
                0.396474094424, 0.397328157396, 0.398823062781, 0.400437280424, 0.401846875958, 
                0.402719262685, 0.403705236447, 0.40437725886, 0.405483096559, 0.40715324019, 
                0.408161946716, 0.408949958358, 0.410194428622, 0.411674966358, 0.412726139917, 
                0.413994836217, 0.414922434459, 0.415970963664, 0.417494895799, 0.418345516985, 
                0.419769194149, 0.42120259427, 0.423008169722, 0.424220511323, 0.425684525769, 
                0.426912279039, 0.428023327968, 0.429389155258, 0.430889124801, 0.432147128025, 
                0.433793555744, 0.435196517338, 0.436351162787, 0.437253465009, 0.438419065687, 
                0.439590897333, 0.440949213705, 0.441921470289, 0.442848592497, 0.44396524306, 
                0.445223842049, 0.446977728682, 0.448745488265, 0.451078381688, 0.451907557714, 
                0.452739787751, 0.453638395261, 0.45475822595, 0.456165813144, 0.457223834211, 
                0.457934807034, 0.45922014571, 0.461017229233, 0.461451032994, 0.463048655665, 
                0.464804181316, 0.466425147476, 0.467542494191, 0.468517661795, 0.470468799941, 
                0.47198076935, 0.472892624736, 0.474420238705, 0.476266453893, 0.477505267649, 
                0.479532143347, 0.481200116592, 0.481613637289, 0.483360304775, 0.485061449421, 
                0.487101659613, 0.488019909526, 0.488999144832, 0.490200759674, 0.491190516798, 
                0.493849514855, 0.495306102206, 0.495928489713, 0.4964353883, 0.498082556741, 
                0.49979254034, 0.500775976586, 0.502679733683, 0.504598020717, 0.505078487853, 
                0.506619141507, 0.508171974823, 0.509336469886, 0.510953930915, 0.512581697566, 
                0.513998315702, 0.515647034962, 0.515939613111, 0.517975069449, 0.519430445753, 
                0.519957296262, 0.521273324958, 0.522406663349, 0.523925469498, 0.524625850033, 
                0.525907581275, 0.527065315655, 0.52822815856, 0.528783474767, 0.529145626115, 
                0.529453767868, 0.530435650231, 0.532014259582, 0.532782125184, 0.534528955521, 
                0.535733634238, 0.539584530704, 0.541410067901, 0.543682312792, 0.545138243861, 
                0.546811742597, 0.548048893429, 0.548459504636, 0.550158093752, 0.551205716597, 
                0.552261157841, 0.553773021814, 0.554620522074, 0.557022425024, 0.558787346691, 
                0.55989408991, 0.562351160997, 0.564603650808, 0.567330572538, 0.568251047692, 
                0.570322191691, 0.570800554836, 0.573840553165, 0.575722428922, 0.578806943369, 
                0.580018988744, 0.581943439091, 0.583637839285, 0.583719886077, 0.585230062162, 
                0.586459819001, 0.58819018682, 0.589432428675, 0.590707557501, 0.59199058109, 
                0.593311935901, 0.596143502405, 0.598713047084, 0.59985869618, 0.60146038335, 
                0.603073645068, 0.60364159568, 0.605493798425, 0.607716165748, 0.611539567166, 
                0.61344596304, 0.614868728468, 0.616356298487, 0.617243661796, 0.618356139972, 
                0.620433033442, 0.623603658141, 0.625027738979, 0.626745245057, 0.630061473707, 
                0.634451273629, 0.636224368987, 0.638386932974, 0.639666729708, 0.641472541416, 
                0.643376129813, 0.645998175052, 0.648651724655, 0.650614385321, 0.651964427491, 
                0.654372246094, 0.656912558238, 0.657658356547, 0.658734274882, 0.661006291486, 
                0.663094362812, 0.664860224717, 0.667639986138, 0.669224738703, 0.670609710516, 
                0.672008536945, 0.674322956904, 0.676181757848, 0.680504320591, 0.681701882298, 
                0.683847428048, 0.687028204213, 0.690096183579, 0.692936565842, 0.698333032093, 
                0.702469873766, 0.704533440299, 0.706621657637, 0.710308262591, 0.713270705866, 
                0.714865826284, 0.719086552707, 0.722147885763, 0.725885046087, 0.729450681758, 
                0.732859861331, 0.739185288999, 0.743172463789, 0.74657896386, 0.751327840506, 
                0.754658774214, 0.758047388164, 0.762059448212, 0.769914558551, 0.775838239214, 
                0.780728907111, 0.786952215918, 0.793694146175, 0.796885300439, 0.802863959078, 
                0.813001141474, 0.820597251397, 0.829350775725, 0.837460143471, 0.84199323298, 
                0.847433416989, 0.854638027367, 0.860714284529, 0.869959964541, 0.876007819869, 
                0.884455823419, 0.896538436371, 0.904016005807, 0.910382232961, 0.916770946986, 
                0.93386870405, 0.943467586229, 0.95165443966, 0.971789456433, 0.970755563959, 
                0.9679163435, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0 ) ),
            min = cms.double(-0.998333333333)
        ),
        nCharged = cms.uint32(3)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            transform = cms.PSet(
                max = cms.double(1.99833333333),
                transform = cms.vdouble( (0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725625489751, 0.725917318629, 0.727526582607, 
                    0.745748231906, 0.750169168536, 0.757185219071, 0.764249672036, 0.767603981959, 
                    0.772574492642, 0.775097031572, 0.777704615235, 0.779407980465, 0.781767581973, 
                    0.784842584326, 0.786420654919, 0.787883166617, 0.790123535551, 0.79208138528, 
                    0.79327247227, 0.795907708578, 0.798503646112, 0.800206834461, 0.802663946447, 
                    0.8031582666, 0.80490222571, 0.806889568691, 0.809394028316, 0.811861583702, 
                    0.813019057268, 0.81342095915, 0.814698723372, 0.816279445985, 0.818232037783, 
                    0.819367026875, 0.819759858707, 0.821328989638, 0.822878675172, 0.82364763472, 
                    0.825358996088, 0.828499118125, 0.829830087025, 0.831236000117, 0.832703495507, 
                    0.833414247004, 0.834436344112, 0.834946785624, 0.835869791486, 0.836486520822, 
                    0.837364626557, 0.838193318858, 0.839702591039, 0.841531457051, 0.842218371935, 
                    0.843640339114, 0.844222988069, 0.845392038566, 0.846778761898, 0.84769605779, 
                    0.848073950379, 0.848849957765, 0.849494110293, 0.8500905241, 0.851335675181, 
                    0.853500950651, 0.853839833615, 0.854227213103, 0.854567621296, 0.854984559013, 
                    0.855203285083, 0.856470785047, 0.857475859603, 0.85892685241, 0.859008202829, 
                    0.859451257957, 0.860468389831, 0.861489507276, 0.861351261404, 0.861705874851, 
                    0.861659795003, 0.861659795003, 0.86179137032, 0.862147375366, 0.862550177315, 
                    0.863312092458, 0.863805642705, 0.864438066642, 0.864754370118, 0.865480701328, 
                    0.866346092335, 0.867168965701, 0.867397571488, 0.868313201223, 0.868771741382, 
                    0.869186401202, 0.86983185136, 0.869929474522, 0.870346507695, 0.870951429469, 
                    0.870863388987, 0.871514279263, 0.872166654676, 0.872355339191, 0.872776974093, 
                    0.873155878735, 0.873579101025, 0.874003066865, 0.873916467734, 0.874211597253, 
                    0.874402872188, 0.87510742975, 0.87525648792, 0.87525648792, 0.875448860228, 
                    0.875598481234, 0.875512416378, 0.87617785231, 0.87617785231, 0.876371452215, 
                    0.877233539228, 0.877818409805, 0.87840545558, 0.87840545558, 0.878601622981, 
                    0.878601622981, 0.879472984901, 0.879712328244, 0.87982581203, 0.879981638026, 
                    0.880179766123, 0.880378141371, 0.880534852587, 0.880691869776, 0.8811323429, 
                    0.881090533252, 0.881531917098, 0.881732079801, 0.8822162463, 0.882902187113, 
                    0.882979722574, 0.88403281278, 0.885010261835, 0.884928594333, 0.885132644083, 
                    0.885050953876, 0.88525535544, 0.886362380543, 0.886487219509, 0.886652934413, 
                    0.887232935079, 0.887728512003, 0.888561331939, 0.889019284728, 0.889438266521, 
                    0.890358658388, 0.890120720891, 0.890292192785, 0.890675834925, 0.890556765164, 
                    0.890981544778, 0.891699669632, 0.891660238395, 0.891969519877, 0.892319678993, 
                    0.892161931402, 0.892513711208, 0.892729546909, 0.893162065429, 0.893339503795, 
                    0.893339503795, 0.893656248099, 0.894427465173, 0.894606969217, 0.894825762437, 
                    0.894928163898, 0.895703822513, 0.89622167567, 0.896663385868, 0.897404545302, 
                    0.89769650475, 0.899189293203, 0.899525558799, 0.900803884235, 0.901822547362, 
                    0.901939302648, 0.902926505697, 0.903082359676, 0.904038745128, 0.90469561985, 
                    0.904927332682, 0.905283513893, 0.906828000044, 0.907062493553, 0.908109372415, 
                    0.908783021349, 0.90898498498, 0.910379224289, 0.911372920866, 0.911751863015, 
                    0.912477297669, 0.913239550237, 0.91300238707, 0.913422855139, 0.915063352192, 
                    0.916893920936, 0.916979020829, 0.91791358353, 0.918350995783, 0.918790342789, 
                    0.919328152961, 0.919993298628, 0.920982245955, 0.922524618114, 0.923591109364, 
                    0.924018850534, 0.924248923821, 0.924479515826, 0.925498182241, 0.926493584801, 
                    0.927436921962, 0.927911825271, 0.928716526512, 0.929225746944, 0.929920622352, 
                    0.931640820211, 0.931772433588, 0.932293506679, 0.932760264784, 0.93386870405, 
                    0.934480569506, 0.934731886916, 0.935797384751, 0.936588472051, 0.936817507478, 
                    0.937277790773, 0.938339506605, 0.938808219887, 0.93993649209, 0.94020045716, 
                    0.940781492864, 0.941047196853, 0.942510417566, 0.942629939, 0.942750378489, 
                    0.943616386541, 0.944163684906, 0.945338814696, 0.945845741457, 0.946028661789, 
                    0.946308362468, 0.946541150838, 0.946751152357, 0.947576555912, 0.948029352938, 
                    0.94826905955, 0.948081416726, 0.949376743021, 0.94926144862, 0.949775296374, 
                    0.949706301122, 0.951268968863, 0.953037066674, 0.95357532021, 0.953770570793, 
                    0.953640586734, 0.953509869657, 0.954300159882, 0.955476996866, 0.956207587781, 
                    0.956355833165, 0.956846568485, 0.957770053042, 0.958723171834, 0.958928454571, 
                    0.959445187694, 0.959807967592, 0.959442259047, 0.960697132989, 0.961203278228, 
                    0.963193467582, 0.963932365293, 0.964461162833, 0.964482886627, 0.96526433234, 
                    0.966030150632, 0.966856588211, 0.969491617691, 0.970743493871, 0.972389419268, 
                    0.973307337131, 0.975623617612, 0.976087161844, 0.975647899082, 0.976736074007, 
                    0.979440008803, 0.981271208497, 0.982207028661, 0.984863078211, 0.986956530647, 
                    0.990258251858, 0.990208776979, 0.990702226892, 0.993228159625, 0.99534336087, 
                    0.996696237239, 0.995185049087, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0 ) ),
                min = cms.double(-0.998333333333)
            ),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            transform = cms.PSet(
                max = cms.double(1.99833333333),
                transform = cms.vdouble( (0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.786753288885, 0.788132324416, 0.79656141615, 0.810183644995, 
                    0.858360829913, 0.862298212616, 0.867110980413, 0.871372861265, 0.875682014578, 
                    0.880242297589, 0.883696978098, 0.885512278829, 0.887768921813, 0.889264020585, 
                    0.89119925019, 0.892452552697, 0.893185095837, 0.893419577074, 0.894898998675, 
                    0.895774783109, 0.896260903725, 0.896505707407, 0.898082672851, 0.898779137453, 
                    0.89979939771, 0.900120276805, 0.900442301311, 0.900314253861, 0.90063761708, 
                    0.903107169678, 0.903707364412, 0.904624297652, 0.90437518453, 0.904187494019, 
                    0.904648539996, 0.905849328721, 0.90625146477, 0.906593041173, 0.906284313013, 
                    0.906627709554, 0.906627709554, 0.907095652088, 0.906972372385, 0.907318308525, 
                    0.907603995571, 0.907357055463, 0.907233089763, 0.907994846936, 0.908883949265, 
                    0.908883949265, 0.909836831321, 0.909836831321, 0.909776114594, 0.911030037809, 
                    0.911509901723, 0.911871023987, 0.911811279009, 0.911751452972, 0.911691545709, 
                    0.911511334909, 0.911451101085, 0.912784331406, 0.9125455069, 0.9125455069, 
                    0.91297278083, 0.912853317543, 0.912673506387, 0.913592984461, 0.915007651179, 
                    0.915441697726, 0.915324604996, 0.915207187526, 0.915148356591, 0.91552593882, 
                    0.915467174967, 0.9154083293, 0.915290391839, 0.915231299701, 0.915728896806, 
                    0.915728896806, 0.915552071941, 0.916492320764, 0.917377950283, 0.917822427143, 
                    0.918268017622, 0.91871472591, 0.919668295227, 0.919611512782, 0.919554650007, 
                    0.919440682785, 0.919269125195, 0.921306876156, 0.921306876156, 0.921082297245, 
                    0.920969526416, 0.921426208902, 0.921939970027, 0.921939970027, 0.922343069964, 
                    0.923319759486, 0.923727168952, 0.923727168952, 0.92460140151, 0.924492316338, 
                    0.924959238052, 0.926474177051, 0.926474177051, 0.926420752856, 0.926313671218, 
                    0.926785714713, 0.926785714713, 0.926785714713, 0.926732331515, 0.926732331515, 
                    0.926571713811, 0.927521701059, 0.927468561656, 0.927998554333, 0.927945695605, 
                    0.929008220067, 0.928746371941, 0.928693770351, 0.928641091039, 0.929607013105, 
                    0.929554832769, 0.930039996532, 0.93101417799, 0.931554211882, 0.932636161324, 
                    0.932585903271, 0.932585903271, 0.93357188521, 0.933522156167, 0.933967924145, 
                    0.933769185329, 0.934766776762, 0.935267583538, 0.935169629185, 0.935672412756, 
                    0.936176553451, 0.936176553451, 0.93779194569, 0.937554472402, 0.937458974653, 
                    0.937411116161, 0.937970225775, 0.938435668089, 0.938341043455, 0.938341043455, 
                    0.938903099624, 0.93885608225, 0.938808992455, 0.938714594933, 0.939278948765, 
                    0.940409694612, 0.940363611919, 0.940363611919, 0.940884673949, 0.940838860114, 
                    0.940700991551, 0.941179107659, 0.941750185868, 0.941750185868, 0.942276966885, 
                    0.943290568826, 0.943822114749, 0.944267645451, 0.944223792272, 0.944223792272, 
                    0.944223792272, 0.944223792272, 0.944135878551, 0.944091817682, 0.943959217069, 
                    0.944948988041, 0.944817531021, 0.945185418124, 0.945774534438, 0.946869842865, 
                    0.94678443912, 0.947292782482, 0.947803406812, 0.948955745704, 0.949513262437, 
                    0.949431324505, 0.949349120177, 0.949787213059, 0.950350748429, 0.951522477849, 
                    0.952051228023, 0.95197239226, 0.951813940452, 0.951734321829, 0.952189098377, 
                    0.952726227521, 0.952647494583, 0.953226869405, 0.953148724357, 0.95303101596, 
                    0.953497250008, 0.954122169792, 0.954006075021, 0.954594998037, 0.955778170341, 
                    0.955740668477, 0.957457733339, 0.958697023242, 0.958590781777, 0.958519649968, 
                    0.959665182275, 0.960242079268, 0.960242079268, 0.960855701368, 0.960787753107, 
                    0.961370655681, 0.961269567079, 0.961823203605, 0.963730727425, 0.963634885553, 
                    0.963570709071, 0.964138473298, 0.964106695414, 0.96404297039, 0.963914839098, 
                    0.963882663464, 0.96452094996, 0.964361812095, 0.96497328025, 0.965587812399, 
                    0.966174859102, 0.966052013818, 0.966021162949, 0.968018795469, 0.96867865254, 
                    0.968592547647, 0.96914294659, 0.969057430126, 0.969000155331, 0.970289180287, 
                    0.971618144708, 0.971511684075, 0.972907637123, 0.972856607143, 0.972753968298, 
                    0.972676478315, 0.973344727784, 0.973217439385, 0.973917083716, 0.973842007934, 
                    0.973791716846, 0.974496912029, 0.974447701286, 0.974373528048, 0.974273957942, 
                    0.974198771106, 0.974791150217, 0.975488253999, 0.976165676348, 0.977513433798, 
                    0.977332925695, 0.978053351441, 0.978734902423, 0.97864854949, 0.979275680612, 
                    0.979190505138, 0.979039751165, 0.978974471583, 0.978886796984, 0.980438334358, 
                    0.981887328142, 0.982567303114, 0.983312443593, 0.983168209088, 0.983021459539, 
                    0.98366063828, 0.983606342672, 0.983441268961, 0.983291720735, 0.985747459607, 
                    0.985615866821, 0.988157949486, 0.988031989052, 0.987786602856, 0.988507380959, 
                    0.988364321833, 0.988127868612, 0.987928555371, 0.987641272072, 0.987408197679, 
                    0.98704162283, 0.986691071046, 0.986360943929, 0.987048151948, 0.989952686544, 
                    0.991766844123, 0.992193166195, 0.99456966538, 0.995655052048, 0.994746673755, 
                    0.993062299865, 0.995491593707, 0.993997811711, 0.991951166261, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0 ) ),
                min = cms.double(-0.998333333333)
            ),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(2),
            transform = cms.PSet(
                max = cms.double(1.99833333333),
                transform = cms.vdouble( (0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320785409267, 0.320785409267, 0.320785409267, 
                    0.320967688479, 0.32115017496, 0.32115017496, 0.32115017496, 0.32115017496, 
                    0.321332869066, 0.321607300294, 0.321790515012, 0.322065728828, 0.322709728783, 
                    0.337811096719, 0.33917314626, 0.341489359417, 0.343051156809, 0.344690580804, 
                    0.34605531485, 0.347729452006, 0.349352972192, 0.351698761571, 0.354076266303, 
                    0.356364861761, 0.357459291064, 0.358806090169, 0.360659074159, 0.361655179522, 
                    0.363285639001, 0.363823848893, 0.365224296488, 0.366635567078, 0.368317558281, 
                    0.36949108301, 0.370409007364, 0.370997606343, 0.372726361337, 0.373488515297, 
                    0.374412657806, 0.375752608537, 0.377534910678, 0.378625338634, 0.379181030815, 
                    0.379877944035, 0.382266731549, 0.382549741971, 0.383828491978, 0.38525242259, 
                    0.386835650852, 0.38785063627, 0.389317222671, 0.390498501728, 0.392134514369, 
                    0.392433445129, 0.393938724972, 0.395003106909, 0.395165758646, 0.395929379967, 
                    0.396695958257, 0.397011143016, 0.398247378442, 0.399356983741, 0.399994683207, 
                    0.401254354869, 0.40236309389, 0.403477977186, 0.404278112546, 0.405403648355, 
                    0.406718341929, 0.408044942586, 0.409053791836, 0.409879342767, 0.410568240656, 
                    0.411067477386, 0.412572498902, 0.413612340683, 0.414628216181, 0.41718987191, 
                    0.417878334739, 0.41856907358, 0.419300644011, 0.420520753157, 0.420777117228, 
                    0.422716149289, 0.423248081689, 0.424315972822, 0.425568676714, 0.426697968924, 
                    0.427784748237, 0.428512348538, 0.429242428143, 0.430526071506, 0.4311350135, 
                    0.432803583714, 0.433609675616, 0.434608917639, 0.436308891919, 0.436878509184, 
                    0.437640316502, 0.438596319943, 0.440520911858, 0.441683795845, 0.443048277506, 
                    0.444696219849, 0.446478472767, 0.44715804854, 0.448645092811, 0.450058431683, 
                    0.450666877959, 0.450755388115, 0.451660727674, 0.452685605028, 0.453508861839, 
                    0.455164391331, 0.456611329026, 0.456920461171, 0.457863702358, 0.45902581005, 
                    0.459451411686, 0.460410936031, 0.461808077134, 0.4630001435, 0.46452516501, 
                    0.465632370863, 0.466972634942, 0.467639712811, 0.468206417853, 0.469000443277, 
                    0.470125946746, 0.471938031657, 0.473437184975, 0.474815974144, 0.475643583896, 
                    0.477037107394, 0.478345116523, 0.479756398109, 0.482127131145, 0.483321305722, 
                    0.484827612962, 0.485378450947, 0.486839313932, 0.488800865348, 0.488631796262, 
                    0.489784626283, 0.49019813266, 0.490696455307, 0.492699918902, 0.493707798202, 
                    0.495481544763, 0.497780890453, 0.499067549901, 0.499842743245, 0.501067711008, 
                    0.501110885208, 0.503739653301, 0.504533670387, 0.507669169039, 0.508207246665, 
                    0.510099534144, 0.511125093239, 0.513041788431, 0.514972912765, 0.517927881794, 
                    0.519848789077, 0.52116702462, 0.522598588906, 0.524038039421, 0.524905522273, 
                    0.525729939569, 0.527349110611, 0.528189103375, 0.529884063982, 0.531038635091, 
                    0.531258876588, 0.533372518417, 0.532652261497, 0.533222445036, 0.533832435241, 
                    0.534714171593, 0.536561182549, 0.536184284139, 0.538295230995, 0.539204274194, 
                    0.539743792118, 0.542257448251, 0.543191981222, 0.54415669717, 0.545124845911, 
                    0.546421082543, 0.548704392123, 0.551006864138, 0.551639517385, 0.554308295208, 
                    0.554286639155, 0.555277851271, 0.557294734318, 0.558661984326, 0.560735788966, 
                    0.561777981725, 0.56352691872, 0.56493793563, 0.567793486879, 0.568888208725, 
                    0.57034433091, 0.570356276084, 0.572191934216, 0.573659294894, 0.574044772549, 
                    0.575543527534, 0.577054482298, 0.578553389267, 0.580816407199, 0.582777514902, 
                    0.58546601664, 0.587013469943, 0.586699955875, 0.587164603914, 0.589909772096, 
                    0.590347109603, 0.591182964289, 0.593622213241, 0.595632610766, 0.596088895792, 
                    0.596547219627, 0.597007595967, 0.59905000376, 0.59875479532, 0.600402032492, 
                    0.601476624751, 0.602375325225, 0.604611692334, 0.606308877758, 0.609454442616, 
                    0.612487831768, 0.615198564485, 0.616345932738, 0.617679752716, 0.620364786891, 
                    0.621560433387, 0.622923085077, 0.622771613804, 0.627021967049, 0.629464905691, 
                    0.630636176618, 0.632414811477, 0.635412621765, 0.636860801036, 0.638359784998, 
                    0.642296739762, 0.64372019874, 0.646732193739, 0.649419880322, 0.653004922396, 
                    0.654536589972, 0.657493324695, 0.65872664624, 0.662116021475, 0.666837437051, 
                    0.668332370106, 0.670194812833, 0.671514734427, 0.671514734427, 0.672844093862, 
                    0.672352092845, 0.678607302272, 0.681605563269, 0.681020472505, 0.682082800049, 
                    0.684848783291, 0.686959317553, 0.690918830645, 0.691984674993, 0.694695530605, 
                    0.697455651971, 0.700496795416, 0.703736816672, 0.704917801757, 0.706220722464, 
                    0.707858889942, 0.71018130526, 0.714321429016, 0.720425948473, 0.724503155871, 
                    0.727977004139, 0.730714468803, 0.735012362904, 0.739735756402, 0.750660954162, 
                    0.757799352464, 0.760515374245, 0.768004247792, 0.77935327172, 0.784646260495, 
                    0.789164336822, 0.791123170072, 0.795276817521, 0.804299018936, 0.819103217408, 
                    0.822961151625, 0.833298258018, 0.842807182616, 0.85334688934, 0.86724344838, 
                    0.872176831791, 0.87195156781, 0.87843961359, 0.891494313173, 0.912879175226, 
                    0.924218217451, 0.937234161591, 0.94206607914, 0.958884557005, 0.959595443343, 
                    0.93904371889, 0.927733482302, 0.93386870405, 0.916051159827, 0.943467586229, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0 ) ),
                min = cms.double(-0.998333333333)
            ),
            nCharged = cms.uint32(1)
        )),
    toTransform = cms.InputTag("combinatoricRecoTausDiscriminationByTanc"),
    PFTauProducer = cms.InputTag("combinatoricRecoTaus")
)


process.combinedInclusiveSecondaryVertexBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertex'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("inclusiveSecondaryVertexFinderTagInfos"))
)


process.combinedMVABJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedMVA'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexTagInfos"), cms.InputTag("softMuonTagInfos"), cms.InputTag("softElectronTagInfos"))
)


process.combinedSecondaryVertexBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertex'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexTagInfos"))
)


process.combinedSecondaryVertexMVABJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('combinedSecondaryVertexMVA'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("secondaryVertexTagInfos"))
)


process.conditionsInEdm = cms.EDProducer("ConditionDumperInEdm",
    gtEvmDigisLabel = cms.InputTag("gtEvmDigis")
)


process.conv2Clusters = cms.EDProducer("TrackClusterRemover",
    trajectories = cms.InputTag("convStepTracks"),
    oldClusterRemovalInfo = cms.InputTag("convClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    overrideTrkQuals = cms.InputTag("convStepSelector","convStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    Common = cms.PSet(
        maxChi2 = cms.double(30.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True)
)


process.conv2StepSelector = cms.EDProducer("MultiTrackSelector",
    src = cms.InputTag("conv2StepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        max_d0 = cms.double(100.0),
        minNumber3DLayers = cms.uint32(1),
        max_lostHitFraction = cms.double(1.0),
        applyAbsCutsIfNoPV = cms.bool(False),
        qualityBit = cms.string('loose'),
        minNumberLayers = cms.uint32(3),
        chi2n_par = cms.double(3.0),
        nSigmaZ = cms.double(4.0),
        dz_par2 = cms.vdouble(5.0, 8.0),
        applyAdaptedPVCuts = cms.bool(False),
        min_eta = cms.double(-9999.0),
        dz_par1 = cms.vdouble(5.0, 8.0),
        copyTrajectories = cms.untracked.bool(False),
        vtxNumber = cms.int32(-1),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(1),
        max_relpterr = cms.double(9999.0),
        copyExtras = cms.untracked.bool(True),
        vertexCut = cms.string('ndof>=2&!isFake'),
        max_z0 = cms.double(100.0),
        min_nhits = cms.uint32(0),
        name = cms.string('conv2StepLoose'),
        max_minMissHitOutOrIn = cms.int32(99),
        chi2n_no1Dmod_par = cms.double(9999),
        res_par = cms.vdouble(0.003, 0.001),
        max_eta = cms.double(9999.0),
        d0_par2 = cms.vdouble(5.0, 8.0),
        d0_par1 = cms.vdouble(5.0, 8.0),
        preFilterName = cms.string(''),
        minHitsToBypassChecks = cms.uint32(20)
    ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(1),
            max_lostHitFraction = cms.double(1.0),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('tight'),
            minNumberLayers = cms.uint32(3),
            chi2n_par = cms.double(2.5),
            dz_par1 = cms.vdouble(5.0, 8.0),
            dz_par2 = cms.vdouble(5.0, 8.0),
            applyAdaptedPVCuts = cms.bool(True),
            min_eta = cms.double(-9999.0),
            nSigmaZ = cms.double(4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('conv2StepTight'),
            max_minMissHitOutOrIn = cms.int32(99),
            chi2n_no1Dmod_par = cms.double(9999),
            preFilterName = cms.string('conv2StepLoose'),
            max_eta = cms.double(9999.0),
            d0_par2 = cms.vdouble(5.0, 8.0),
            d0_par1 = cms.vdouble(5.0, 8.0),
            res_par = cms.vdouble(0.003, 0.001),
            minHitsToBypassChecks = cms.uint32(20)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(1),
            max_lostHitFraction = cms.double(1.0),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('highPurity'),
            minNumberLayers = cms.uint32(3),
            chi2n_par = cms.double(2.0),
            nSigmaZ = cms.double(4.0),
            dz_par2 = cms.vdouble(5.0, 8.0),
            applyAdaptedPVCuts = cms.bool(True),
            min_eta = cms.double(-9999.0),
            dz_par1 = cms.vdouble(5.0, 8.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('conv2Step'),
            max_minMissHitOutOrIn = cms.int32(99),
            chi2n_no1Dmod_par = cms.double(9999),
            res_par = cms.vdouble(0.003, 0.001),
            max_eta = cms.double(9999.0),
            d0_par2 = cms.vdouble(5.0, 8.0),
            d0_par1 = cms.vdouble(5.0, 8.0),
            preFilterName = cms.string('conv2StepTight'),
            minHitsToBypassChecks = cms.uint32(20)
        )),
    beamspot = cms.InputTag("offlineBeamSpot"),
    vertices = cms.InputTag("pixelVertices"),
    useVtxError = cms.bool(False),
    useVertices = cms.bool(True)
)


process.conv2StepTracks = cms.EDProducer("TrackProducer",
    src = cms.InputTag("conv2TrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('conv2StepFitterSmoother'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    AlgorithmName = cms.string('iter9'),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    GeometricInnerState = cms.bool(False),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.conv2TrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("photonConvTrajSeedFromQuadruplets","conv2SeedCandidates"),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryBuilder = cms.string('conv2CkfTrajectoryBuilder')
)


process.convClusters = cms.EDProducer("TrackClusterRemover",
    trajectories = cms.InputTag("tobTecStepTracks"),
    oldClusterRemovalInfo = cms.InputTag("tobTecStepClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    overrideTrkQuals = cms.InputTag("tobTecStepSelector","tobTecStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    Common = cms.PSet(
        maxChi2 = cms.double(30.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True)
)


process.convStepSelector = cms.EDProducer("MultiTrackSelector",
    src = cms.InputTag("convStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        max_d0 = cms.double(100.0),
        minNumber3DLayers = cms.uint32(1),
        max_lostHitFraction = cms.double(1.0),
        applyAbsCutsIfNoPV = cms.bool(False),
        qualityBit = cms.string('loose'),
        minNumberLayers = cms.uint32(3),
        chi2n_par = cms.double(3.0),
        nSigmaZ = cms.double(4.0),
        dz_par2 = cms.vdouble(5.0, 8.0),
        applyAdaptedPVCuts = cms.bool(False),
        min_eta = cms.double(-9999.0),
        dz_par1 = cms.vdouble(5.0, 8.0),
        copyTrajectories = cms.untracked.bool(False),
        vtxNumber = cms.int32(-1),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(1),
        max_relpterr = cms.double(9999.0),
        copyExtras = cms.untracked.bool(True),
        vertexCut = cms.string('ndof>=2&!isFake'),
        max_z0 = cms.double(100.0),
        min_nhits = cms.uint32(0),
        name = cms.string('convStepLoose'),
        max_minMissHitOutOrIn = cms.int32(99),
        chi2n_no1Dmod_par = cms.double(9999),
        res_par = cms.vdouble(0.003, 0.001),
        max_eta = cms.double(9999.0),
        d0_par2 = cms.vdouble(5.0, 8.0),
        d0_par1 = cms.vdouble(5.0, 8.0),
        preFilterName = cms.string(''),
        minHitsToBypassChecks = cms.uint32(20)
    ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(1),
            max_lostHitFraction = cms.double(1.0),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('tight'),
            minNumberLayers = cms.uint32(3),
            chi2n_par = cms.double(2.5),
            dz_par1 = cms.vdouble(5.0, 8.0),
            dz_par2 = cms.vdouble(5.0, 8.0),
            applyAdaptedPVCuts = cms.bool(True),
            min_eta = cms.double(-9999.0),
            nSigmaZ = cms.double(4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('convStepTight'),
            max_minMissHitOutOrIn = cms.int32(99),
            chi2n_no1Dmod_par = cms.double(9999),
            preFilterName = cms.string('convStepLoose'),
            max_eta = cms.double(9999.0),
            d0_par2 = cms.vdouble(5.0, 8.0),
            d0_par1 = cms.vdouble(5.0, 8.0),
            res_par = cms.vdouble(0.003, 0.001),
            minHitsToBypassChecks = cms.uint32(20)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(1),
            max_lostHitFraction = cms.double(1.0),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('highPurity'),
            minNumberLayers = cms.uint32(3),
            chi2n_par = cms.double(2.0),
            nSigmaZ = cms.double(4.0),
            dz_par2 = cms.vdouble(5.0, 8.0),
            applyAdaptedPVCuts = cms.bool(True),
            min_eta = cms.double(-9999.0),
            dz_par1 = cms.vdouble(5.0, 8.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('convStep'),
            max_minMissHitOutOrIn = cms.int32(99),
            chi2n_no1Dmod_par = cms.double(9999),
            res_par = cms.vdouble(0.003, 0.001),
            max_eta = cms.double(9999.0),
            d0_par2 = cms.vdouble(5.0, 8.0),
            d0_par1 = cms.vdouble(5.0, 8.0),
            preFilterName = cms.string('convStepTight'),
            minHitsToBypassChecks = cms.uint32(20)
        )),
    beamspot = cms.InputTag("offlineBeamSpot"),
    vertices = cms.InputTag("pixelVertices"),
    useVtxError = cms.bool(False),
    useVertices = cms.bool(True)
)


process.convStepTracks = cms.EDProducer("TrackProducer",
    src = cms.InputTag("convTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('convStepFitterSmoother'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    AlgorithmName = cms.string('iter8'),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    GeometricInnerState = cms.bool(False),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.convTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("photonConvTrajSeedFromSingleLeg","convSeedCandidates"),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryBuilder = cms.string('convCkfTrajectoryBuilder')
)


process.conversionStepConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(True),
    minConvRadius = cms.double(2.0),
    TrackProducer = cms.string('conversionStepTracks'),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    setTrackerOnly = cms.bool(True),
    setArbitratedMerged = cms.bool(True),
    useTrajectory = cms.bool(True),
    setArbitratedEcalSeeded = cms.bool(False)
)


process.conversionStepTracks = cms.EDProducer("TrackListMerger",
    ShareFrac = cms.double(0.19),
    writeOnlyTrkQuals = cms.bool(False),
    MinPT = cms.double(0.05),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(True),
    Epsilon = cms.double(-0.001),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("convStepSelector","convStep")),
    indivShareFrac = cms.vdouble(1.0, 1.0),
    makeReKeyedSeeds = cms.untracked.bool(False),
    MaxNormalizedChisq = cms.double(1000.0),
    FoundHitBonus = cms.double(5.0),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(True),
        tLists = cms.vint32(1)
    )),
    MinFound = cms.int32(3),
    hasSelector = cms.vint32(1),
    TrackProducers = cms.VInputTag(cms.InputTag("convStepTracks")),
    LostHitPenalty = cms.double(20.0),
    newQuality = cms.string('confirmed')
)


process.conversionTrackCandidates = cms.EDProducer("ConversionTrackCandidateProducer",
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    scHybridBarrelProducer = cms.InputTag("correctedHybridSuperClusters"),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('alongMomElePropagator'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('oppositeToMomElePropagator')
    ),
    inOutTrackCandidateCollection = cms.string('inOutTracksFromConversions'),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    useHitsSplitting = cms.bool(False),
    outInTrackCandidateSCAssociationCollection = cms.string('outInTrackCandidateSCAssociationCollection'),
    ValidHitBonus = cms.double(5.0),
    barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    vetoClusteredHits = cms.bool(False),
    bcBarrelCollection = cms.InputTag("hybridSuperClusters","hybridBarrelBasicClusters"),
    scIslandEndcapProducer = cms.InputTag("correctedMulti5x5SuperClustersWithPreshower"),
    ecalIsoCut_offset = cms.double(999999999),
    hcalTowers = cms.InputTag("towerMaker"),
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    isoEMin = cms.double(0.08),
    maxNumOfSeedsInOut = cms.int32(50),
    outInTrackCandidateCollection = cms.string('outInTracksFromConversions'),
    maxNumOfSeedsOutIn = cms.int32(50),
    bcEndcapCollection = cms.InputTag("multi5x5SuperClusters","multi5x5EndcapBasicClusters"),
    useNumXstals = cms.bool(True),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    InOutRedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    ecalIsoCut_slope = cms.double(0.0),
    isoEtaSlice = cms.double(2.5),
    isoEtMin = cms.double(0.0),
    fractionShared = cms.double(0.5),
    minSCEt = cms.double(20.0),
    MissingHitPenalty = cms.double(20.0),
    OutInRedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    MeasurementTrackerName = cms.string(''),
    maxHOverE = cms.double(0.15),
    hOverEConeSize = cms.double(0.15),
    inOutTrackCandidateSCAssociationCollection = cms.string('inOutTrackCandidateSCAssociationCollection'),
    endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    isoInnerConeR = cms.double(3.5),
    isoConeR = cms.double(0.4),
    TrajectoryBuilder = cms.string('TrajectoryBuilderForConversions'),
    allowSharedFirstHit = cms.bool(True)
)


process.conversions = cms.EDProducer("ConvertedPhotonProducer",
    scHybridBarrelProducer = cms.InputTag("correctedHybridSuperClusters"),
    convertedPhotonCollection = cms.string('uncleanedConversions'),
    dRForConversionRecovery = cms.double(0.3),
    bcBarrelCollection = cms.InputTag("hybridSuperClusters","hybridBarrelBasicClusters"),
    conversionIOTrackProducer = cms.string('ckfInOutTracksFromConversions'),
    deltaCotCut = cms.double(0.05),
    scIslandEndcapProducer = cms.InputTag("correctedMulti5x5SuperClustersWithPreshower"),
    maxReducedChiSq = cms.double(225.0),
    hcalTowers = cms.InputTag("towerMaker"),
    recoverOneTrackCase = cms.bool(True),
    inOutTrackSCAssociation = cms.string('inOutTrackSCAssociationCollection'),
    maxDelta = cms.double(0.01),
    bcEndcapCollection = cms.InputTag("multi5x5SuperClusters","multi5x5EndcapBasicClusters"),
    risolveConversionAmbiguity = cms.bool(True),
    inOutTrackCollection = cms.string(''),
    outInTrackSCAssociation = cms.string('outInTrackSCAssociationCollection'),
    outInTrackCollection = cms.string(''),
    cleanedConvertedPhotonCollection = cms.string(''),
    minSCEt = cms.double(20.0),
    maxNbrOfIterations = cms.int32(40),
    maxHOverE = cms.double(0.15),
    conversionOITrackProducer = cms.string('ckfOutInTracksFromConversions'),
    hOverEConeSize = cms.double(0.15),
    minApproachDisCut = cms.double(0.0),
    maxNumOfCandidates = cms.int32(3),
    minChiSqImprovement = cms.double(50.0),
    MVA_weights_location = cms.string('RecoEgamma/EgammaTools/data/TMVAnalysis_Likelihood.weights.txt'),
    AlgorithmName = cms.string('ecalSeeded')
)


process.convertObjectMapRecord = cms.EDProducer("ConvertObjectMapRecord",
    L1GtObjectMapTag = cms.InputTag("hltL1GtObjectMap")
)


process.corMetGlobalMuons = cms.EDProducer("MuonMET",
    muonMETDepositValueMapInputTag = cms.InputTag("muonMETValueMapProducer","muCorrData"),
    metTypeInputTag = cms.InputTag("CaloMET"),
    muonsInputTag = cms.InputTag("muons"),
    uncorMETInputTag = cms.InputTag("met")
)


process.correctedHybridSuperClusters = cms.EDProducer("EgammaSCCorrectionMaker",
    corectedSuperClusterCollection = cms.string(''),
    modeEE = cms.int32(0),
    sigmaElectronicNoise = cms.double(0.03),
    superClusterAlgo = cms.string('Hybrid'),
    modeEB = cms.int32(0),
    applyLocalContCorrection = cms.bool(True),
    rawSuperClusterProducer = cms.InputTag("hybridSuperClusters"),
    localContCorrectorName = cms.string('EcalBasicClusterLocalContCorrection'),
    applyEnergyCorrection = cms.bool(True),
    etThresh = cms.double(0.0),
    crackCorrectorName = cms.string('EcalClusterCrackCorrection'),
    applyCrackCorrection = cms.bool(True),
    energyCorrectorName = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    hyb_fCorrPset = cms.PSet(
        brLinearLowThr = cms.double(1.1),
        fEtEtaVec = cms.vdouble(0, 1.00121, -0.63672, 0, 0, 
            0, 0.5655, 6.457, 0.5081, 8.0, 
            1.023, -0.00181),
        brLinearHighThr = cms.double(8.0),
        fBremVec = cms.vdouble(-0.04382, 0.1169, 0.9267, -0.0009413, 1.419)
    ),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEB")
)


process.correctedMulti5x5SuperClustersWithPreshower = cms.EDProducer("EgammaSCCorrectionMaker",
    corectedSuperClusterCollection = cms.string(''),
    modeEE = cms.int32(0),
    sigmaElectronicNoise = cms.double(0.15),
    superClusterAlgo = cms.string('Multi5x5'),
    modeEB = cms.int32(0),
    applyLocalContCorrection = cms.bool(False),
    rawSuperClusterProducer = cms.InputTag("multi5x5SuperClustersWithPreshower"),
    localContCorrectorName = cms.string('EcalBasicClusterLocalContCorrection'),
    applyEnergyCorrection = cms.bool(True),
    etThresh = cms.double(0.0),
    fix_fCorrPset = cms.PSet(
        brLinearLowThr = cms.double(0.9),
        fEtEtaVec = cms.vdouble(1, -0.4386, -32.38, 0.6372, 15.67, 
            -0.0928, -2.462, 1.138, 20.93),
        brLinearHighThr = cms.double(6.0),
        fBremVec = cms.vdouble(-0.05228, 0.08738, 0.9508, 0.002677, 1.221)
    ),
    crackCorrectorName = cms.string('EcalClusterCrackCorrection'),
    VerbosityLevel = cms.string('ERROR'),
    applyCrackCorrection = cms.bool(True),
    energyCorrectorName = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEE")
)


process.cosmicMuons = cms.EDProducer("CosmicMuonProducer",
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(False),
        AllowNoVertex = cms.untracked.bool(True),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(False)
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrajectoryBuilderParameters = cms.PSet(
        BackwardMuonTrajectoryUpdatorParameters = cms.PSet(
            MaxChi2 = cms.double(100.0),
            RescaleErrorFactor = cms.double(1.0),
            Granularity = cms.int32(2),
            ExcludeRPCFromFit = cms.bool(False),
            UseInvalidHits = cms.bool(False),
            RescaleError = cms.bool(False)
        ),
        DTRecSegmentLabel = cms.InputTag("dt4DCosmicSegments"),
        MuonTrajectoryUpdatorParameters = cms.PSet(
            MaxChi2 = cms.double(3000.0),
            RescaleErrorFactor = cms.double(1.0),
            Granularity = cms.int32(0),
            ExcludeRPCFromFit = cms.bool(False),
            UseInvalidHits = cms.bool(False),
            RescaleError = cms.bool(False)
        ),
        EnableRPCMeasurement = cms.bool(True),
        CSCRecSegmentLabel = cms.InputTag("cscSegments"),
        BuildTraversingMuon = cms.bool(False),
        Strict1Leg = cms.bool(False),
        EnableDTMeasurement = cms.bool(True),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        MuonSmootherParameters = cms.PSet(
            PropagatorAlong = cms.string('SteppingHelixPropagatorAny'),
            PropagatorOpposite = cms.string('SteppingHelixPropagatorAny'),
            RescalingFactor = cms.double(5.0)
        ),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        EnableCSCMeasurement = cms.bool(True),
        MuonNavigationParameters = cms.PSet(
            Barrel = cms.bool(True),
            Endcap = cms.bool(True)
        )
    ),
    MuonSeedCollectionLabel = cms.string('CosmicMuonSeed')
)


process.cosmicMuons1Leg = cms.EDProducer("CosmicMuonProducer",
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrajectoryBuilderParameters = cms.PSet(
        BackwardMuonTrajectoryUpdatorParameters = cms.PSet(
            MaxChi2 = cms.double(100.0),
            RescaleErrorFactor = cms.double(1.0),
            Granularity = cms.int32(2),
            ExcludeRPCFromFit = cms.bool(False),
            UseInvalidHits = cms.bool(False),
            RescaleError = cms.bool(False)
        ),
        DTRecSegmentLabel = cms.InputTag("dt4DCosmicSegments"),
        MuonTrajectoryUpdatorParameters = cms.PSet(
            MaxChi2 = cms.double(3000.0),
            RescaleErrorFactor = cms.double(1.0),
            Granularity = cms.int32(0),
            ExcludeRPCFromFit = cms.bool(False),
            UseInvalidHits = cms.bool(False),
            RescaleError = cms.bool(False)
        ),
        EnableRPCMeasurement = cms.bool(True),
        CSCRecSegmentLabel = cms.InputTag("cscSegments"),
        BuildTraversingMuon = cms.bool(True),
        Strict1Leg = cms.bool(True),
        EnableDTMeasurement = cms.bool(True),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        MuonSmootherParameters = cms.PSet(
            PropagatorAlong = cms.string('SteppingHelixPropagatorAny'),
            PropagatorOpposite = cms.string('SteppingHelixPropagatorAny'),
            RescalingFactor = cms.double(5.0)
        ),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        EnableCSCMeasurement = cms.bool(True),
        MuonNavigationParameters = cms.PSet(
            Barrel = cms.bool(True),
            Endcap = cms.bool(True)
        )
    ),
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(False),
        AllowNoVertex = cms.untracked.bool(True),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(False)
    ),
    MuonSeedCollectionLabel = cms.string('CosmicMuonSeed')
)


process.cosmicsVeto = cms.EDProducer("CosmicsMuonIdProducer",
    CosmicCompFillerParameters = cms.PSet(
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator'),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        ),
        deltaPt = cms.double(0.1),
        maxdzTight = cms.double(10.0),
        offTimeNegTight = cms.double(-20.0),
        maxvertRho = cms.double(5),
        ipCut = cms.double(0.02),
        segmentComp = cms.double(0.4),
        sharedFrac = cms.double(0.75),
        angleCut = cms.double(0.1),
        hIpTrvProb = cms.double(0.5),
        InputMuonCollections = cms.VInputTag(cms.InputTag("globalMuons"), cms.InputTag("muons1stStep")),
        maxdxyTight = cms.double(1.0),
        maxdzLoose = cms.double(0.1),
        InputTrackCollections = cms.VInputTag(cms.InputTag("generalTracks"), cms.InputTag("cosmicsVetoTracks")),
        maxdxyTightMult = cms.double(1.0),
        corrTimeNeg = cms.double(-10),
        offTimePosTight = cms.double(25.0),
        maxdzLooseMult = cms.double(0.1),
        maxvertZ = cms.double(20),
        nChamberMatches = cms.int32(1),
        corrTimePos = cms.double(5),
        offTimeNegLoose = cms.double(-15.0),
        maxdxyLooseMult = cms.double(0.01),
        offTimePosTightMult = cms.double(25.0),
        offTimePosLoose = cms.double(15.0),
        largedxyMult = cms.double(3.0),
        largedxy = cms.double(2.0),
        nTrackThreshold = cms.int32(3),
        maxdzTightMult = cms.double(10.0),
        InputCosmicMuonCollection = cms.InputTag("muonsFromCosmics1Leg"),
        minvProb = cms.double(0.001),
        hIpTrdxy = cms.double(0.02),
        InputVertexCollection = cms.InputTag("offlinePrimaryVertices"),
        offTimePosLooseMult = cms.double(15.0),
        offTimeNegLooseMult = cms.double(-15.0),
        sharedHits = cms.int32(5),
        maxdxyLoose = cms.double(0.01),
        offTimeNegTightMult = cms.double(-20.0)
    ),
    muonCollection = cms.InputTag("muons1stStep"),
    trackCollections = cms.VInputTag(cms.InputTag("generalTracks"), cms.InputTag("cosmicsVetoTracks"))
)


process.cosmicsVetoSeeds = cms.EDProducer("TrajectorySeedFromMuonProducer",
    skipMatchedMuons = cms.bool(False),
    muonCollectionTag = cms.InputTag("muons1stStep"),
    trackCollectionTag = cms.InputTag("generalTracks")
)


process.cosmicsVetoTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("cosmicsVetoSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('none'),
    doSeedingRegionRebuilding = cms.bool(False),
    maxNSeeds = cms.uint32(500000),
    NavigationSchool = cms.string('CosmicNavigationSchool'),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilderP5')
)


process.cosmicsVetoTracks = cms.EDProducer("CosmicTrackSelector",
    keepAllTracks = cms.bool(False),
    maxNumberLostLayers = cms.uint32(999),
    max_d0 = cms.double(110.0),
    minNumber3DLayers = cms.uint32(0),
    src = cms.InputTag("cosmicsVetoTracksRaw"),
    copyExtras = cms.untracked.bool(True),
    min_pt = cms.double(1.0),
    copyTrajectories = cms.untracked.bool(True),
    qualityBit = cms.string(''),
    minNumberLayers = cms.uint32(0),
    chi2n_par = cms.double(10.0),
    max_eta = cms.double(2.0),
    min_nPixelHit = cms.uint32(0),
    min_nHit = cms.uint32(5),
    max_z0 = cms.double(300.0),
    beamspot = cms.InputTag("offlineBeamSpot")
)


process.cosmicsVetoTracksRaw = cms.EDProducer("TrackProducer",
    src = cms.InputTag("cosmicsVetoTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('FittingSmootherRKP5'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    AlgorithmName = cms.string('ctf'),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    GeometricInnerState = cms.bool(True),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.cosmictrackSelector = cms.EDProducer("CosmicTrackSelector",
    keepAllTracks = cms.bool(False),
    maxNumberLostLayers = cms.uint32(999),
    max_d0 = cms.double(110.0),
    minNumber3DLayers = cms.uint32(0),
    src = cms.InputTag("ctfWithMaterialTracksCosmics"),
    copyExtras = cms.untracked.bool(True),
    min_pt = cms.double(1.0),
    copyTrajectories = cms.untracked.bool(True),
    qualityBit = cms.string(''),
    minNumberLayers = cms.uint32(0),
    chi2n_par = cms.double(10.0),
    max_eta = cms.double(2.0),
    min_nPixelHit = cms.uint32(0),
    min_nHit = cms.uint32(5),
    max_z0 = cms.double(300.0),
    beamspot = cms.InputTag("offlineBeamSpot")
)


process.csc2DRecHits = cms.EDProducer("CSCRecHitDProducer",
    XTasymmetry_ME1b = cms.double(0.01),
    XTasymmetry_ME1a = cms.double(0.023),
    ConstSyst_ME1a = cms.double(0.01),
    ConstSyst_ME1b = cms.double(0.02),
    XTasymmetry_ME41 = cms.double(0.023),
    XTasymmetry_ME22 = cms.double(0.023),
    XTasymmetry_ME21 = cms.double(0.023),
    ConstSyst_ME21 = cms.double(0.03),
    ConstSyst_ME22 = cms.double(0.03),
    XTasymmetry_ME31 = cms.double(0.023),
    NoiseLevel_ME13 = cms.double(4.0),
    NoiseLevel_ME12 = cms.double(7.0),
    NoiseLevel_ME32 = cms.double(7.0),
    NoiseLevel_ME31 = cms.double(5.0),
    XTasymmetry_ME32 = cms.double(0.023),
    ConstSyst_ME41 = cms.double(0.03),
    XTasymmetry_ME13 = cms.double(0.02),
    XTasymmetry_ME12 = cms.double(0.015),
    ConstSyst_ME12 = cms.double(0.02),
    ConstSyst_ME13 = cms.double(0.03),
    ConstSyst_ME32 = cms.double(0.03),
    ConstSyst_ME31 = cms.double(0.03),
    NoiseLevel_ME1a = cms.double(9.0),
    NoiseLevel_ME1b = cms.double(6.0),
    NoiseLevel_ME21 = cms.double(5.0),
    NoiseLevel_ME22 = cms.double(7.0),
    NoiseLevel_ME41 = cms.double(5.0),
    CSCStripClusterSize = cms.untracked.int32(3),
    UseAverageTime = cms.bool(False),
    CSCStripPeakThreshold = cms.double(10.0),
    readBadChannels = cms.bool(True),
    CSCUseStaticPedestals = cms.bool(False),
    stripDigiTag = cms.InputTag("muonCSCDigis","MuonCSCStripDigi"),
    readBadChambers = cms.bool(True),
    CSCStripxtalksOffset = cms.double(0.03),
    CSCstripWireDeltaTime = cms.int32(8),
    CSCUseCalibrations = cms.bool(True),
    CSCUseTimingCorrections = cms.bool(True),
    CSCNoOfTimeBinsForDynamicPedestal = cms.int32(2),
    UseParabolaFit = cms.bool(False),
    wireDigiTag = cms.InputTag("muonCSCDigis","MuonCSCWireDigi"),
    UseFivePoleFit = cms.bool(True),
    CSCUseGasGainCorrections = cms.bool(True),
    CSCDebug = cms.untracked.bool(False),
    CSCWireClusterDeltaT = cms.int32(1),
    CSCStripClusterChargeCut = cms.double(25.0)
)


process.cscSegments = cms.EDProducer("CSCSegmentProducer",
    inputObjects = cms.InputTag("csc2DRecHits"),
    algo_psets = cms.VPSet(cms.PSet(
        chamber_types = cms.vstring('ME1/a', 
            'ME1/b', 
            'ME1/2', 
            'ME1/3', 
            'ME2/1', 
            'ME2/2', 
            'ME3/1', 
            'ME3/2', 
            'ME4/1'),
        algo_name = cms.string('CSCSegAlgoSK'),
        parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
            1, 1, 1, 1),
        algo_psets = cms.VPSet(cms.PSet(
            dPhiFineMax = cms.double(0.025),
            verboseInfo = cms.untracked.bool(True),
            chi2Max = cms.double(99999.0),
            dPhiMax = cms.double(0.003),
            wideSeg = cms.double(3.0),
            minLayersApart = cms.int32(2),
            dRPhiFineMax = cms.double(8.0),
            dRPhiMax = cms.double(8.0)
        ), 
            cms.PSet(
                dPhiFineMax = cms.double(0.025),
                verboseInfo = cms.untracked.bool(True),
                chi2Max = cms.double(99999.0),
                dPhiMax = cms.double(0.025),
                wideSeg = cms.double(3.0),
                minLayersApart = cms.int32(2),
                dRPhiFineMax = cms.double(3.0),
                dRPhiMax = cms.double(8.0)
            ))
    ), 
        cms.PSet(
            chamber_types = cms.vstring('ME1/a', 
                'ME1/b', 
                'ME1/2', 
                'ME1/3', 
                'ME2/1', 
                'ME2/2', 
                'ME3/1', 
                'ME3/2', 
                'ME4/1'),
            algo_name = cms.string('CSCSegAlgoTC'),
            parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
                1, 1, 1, 1),
            algo_psets = cms.VPSet(cms.PSet(
                dPhiFineMax = cms.double(0.02),
                verboseInfo = cms.untracked.bool(True),
                SegmentSorting = cms.int32(1),
                chi2Max = cms.double(6000.0),
                dPhiMax = cms.double(0.003),
                chi2ndfProbMin = cms.double(0.0001),
                minLayersApart = cms.int32(2),
                dRPhiFineMax = cms.double(6.0),
                dRPhiMax = cms.double(1.2)
            ), 
                cms.PSet(
                    dPhiFineMax = cms.double(0.013),
                    verboseInfo = cms.untracked.bool(True),
                    SegmentSorting = cms.int32(1),
                    chi2Max = cms.double(6000.0),
                    dPhiMax = cms.double(0.00198),
                    chi2ndfProbMin = cms.double(0.0001),
                    minLayersApart = cms.int32(2),
                    dRPhiFineMax = cms.double(3.0),
                    dRPhiMax = cms.double(0.6)
                ))
        ), 
        cms.PSet(
            chamber_types = cms.vstring('ME1/a', 
                'ME1/b', 
                'ME1/2', 
                'ME1/3', 
                'ME2/1', 
                'ME2/2', 
                'ME3/1', 
                'ME3/2', 
                'ME4/1'),
            algo_name = cms.string('CSCSegAlgoDF'),
            parameters_per_chamber_type = cms.vint32(3, 1, 2, 2, 1, 
                2, 1, 2, 1),
            algo_psets = cms.VPSet(cms.PSet(
                tanThetaMax = cms.double(1.2),
                maxRatioResidualPrune = cms.double(3.0),
                dPhiFineMax = cms.double(0.025),
                tanPhiMax = cms.double(0.5),
                dXclusBoxMax = cms.double(8.0),
                preClustering = cms.untracked.bool(False),
                chi2Max = cms.double(5000.0),
                minHitsPerSegment = cms.int32(3),
                minHitsForPreClustering = cms.int32(10),
                minLayersApart = cms.int32(2),
                dRPhiFineMax = cms.double(8.0),
                nHitsPerClusterIsShower = cms.int32(20),
                CSCSegmentDebug = cms.untracked.bool(False),
                Pruning = cms.untracked.bool(False),
                dYclusBoxMax = cms.double(8.0)
            ), 
                cms.PSet(
                    tanThetaMax = cms.double(2.0),
                    maxRatioResidualPrune = cms.double(3.0),
                    dPhiFineMax = cms.double(0.025),
                    tanPhiMax = cms.double(0.8),
                    dXclusBoxMax = cms.double(8.0),
                    preClustering = cms.untracked.bool(False),
                    chi2Max = cms.double(5000.0),
                    minHitsPerSegment = cms.int32(3),
                    minHitsForPreClustering = cms.int32(10),
                    minLayersApart = cms.int32(2),
                    dRPhiFineMax = cms.double(12.0),
                    nHitsPerClusterIsShower = cms.int32(20),
                    CSCSegmentDebug = cms.untracked.bool(False),
                    Pruning = cms.untracked.bool(False),
                    dYclusBoxMax = cms.double(12.0)
                ), 
                cms.PSet(
                    tanThetaMax = cms.double(1.2),
                    maxRatioResidualPrune = cms.double(3.0),
                    dPhiFineMax = cms.double(0.025),
                    tanPhiMax = cms.double(0.5),
                    dXclusBoxMax = cms.double(8.0),
                    preClustering = cms.untracked.bool(False),
                    chi2Max = cms.double(5000.0),
                    minHitsPerSegment = cms.int32(3),
                    minHitsForPreClustering = cms.int32(30),
                    minLayersApart = cms.int32(2),
                    dRPhiFineMax = cms.double(8.0),
                    nHitsPerClusterIsShower = cms.int32(20),
                    CSCSegmentDebug = cms.untracked.bool(False),
                    Pruning = cms.untracked.bool(False),
                    dYclusBoxMax = cms.double(8.0)
                ))
        ), 
        cms.PSet(
            chamber_types = cms.vstring('ME1/a', 
                'ME1/b', 
                'ME1/2', 
                'ME1/3', 
                'ME2/1', 
                'ME2/2', 
                'ME3/1', 
                'ME3/2', 
                'ME4/1', 
                'ME4/2'),
            algo_name = cms.string('CSCSegAlgoST'),
            parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
                1, 1, 1, 1, 1),
            algo_psets = cms.VPSet(cms.PSet(
                maxRatioResidualPrune = cms.double(3),
                yweightPenalty = cms.double(1.5),
                maxRecHitsInCluster = cms.int32(20),
                preClusteringUseChaining = cms.bool(True),
                ForceCovariance = cms.bool(False),
                hitDropLimit6Hits = cms.double(0.3333),
                NormChi2Cut2D = cms.double(20.0),
                BPMinImprovement = cms.double(10000.0),
                Covariance = cms.double(0.0),
                tanPhiMax = cms.double(0.5),
                onlyBestSegment = cms.bool(False),
                SeedBig = cms.double(0.0015),
                dRPhiFineMax = cms.double(8.0),
                SeedSmall = cms.double(0.0002),
                curvePenalty = cms.double(2.0),
                dXclusBoxMax = cms.double(4.0),
                BrutePruning = cms.bool(True),
                curvePenaltyThreshold = cms.double(0.85),
                CorrectTheErrors = cms.bool(True),
                hitDropLimit4Hits = cms.double(0.6),
                useShowering = cms.bool(False),
                CSCDebug = cms.untracked.bool(False),
                yweightPenaltyThreshold = cms.double(1.0),
                tanThetaMax = cms.double(1.2),
                NormChi2Cut3D = cms.double(10.0),
                minHitsPerSegment = cms.int32(3),
                ForceCovarianceAll = cms.bool(False),
                dPhiFineMax = cms.double(0.025),
                prePrunLimit = cms.double(3.17),
                hitDropLimit5Hits = cms.double(0.8),
                preClustering = cms.bool(True),
                prePrun = cms.bool(True),
                maxDPhi = cms.double(999.0),
                maxDTheta = cms.double(999.0),
                Pruning = cms.bool(True),
                dYclusBoxMax = cms.double(8.0)
            ), 
                cms.PSet(
                    maxRatioResidualPrune = cms.double(3),
                    yweightPenalty = cms.double(1.5),
                    maxRecHitsInCluster = cms.int32(24),
                    preClusteringUseChaining = cms.bool(True),
                    ForceCovariance = cms.bool(False),
                    hitDropLimit6Hits = cms.double(0.3333),
                    NormChi2Cut2D = cms.double(20.0),
                    BPMinImprovement = cms.double(10000.0),
                    Covariance = cms.double(0.0),
                    tanPhiMax = cms.double(0.5),
                    onlyBestSegment = cms.bool(False),
                    SeedBig = cms.double(0.0015),
                    dRPhiFineMax = cms.double(8.0),
                    SeedSmall = cms.double(0.0002),
                    curvePenalty = cms.double(2.0),
                    dXclusBoxMax = cms.double(4.0),
                    BrutePruning = cms.bool(True),
                    curvePenaltyThreshold = cms.double(0.85),
                    CorrectTheErrors = cms.bool(True),
                    hitDropLimit4Hits = cms.double(0.6),
                    useShowering = cms.bool(False),
                    CSCDebug = cms.untracked.bool(False),
                    yweightPenaltyThreshold = cms.double(1.0),
                    tanThetaMax = cms.double(1.2),
                    NormChi2Cut3D = cms.double(10.0),
                    minHitsPerSegment = cms.int32(3),
                    ForceCovarianceAll = cms.bool(False),
                    dPhiFineMax = cms.double(0.025),
                    prePrunLimit = cms.double(3.17),
                    hitDropLimit5Hits = cms.double(0.8),
                    preClustering = cms.bool(True),
                    prePrun = cms.bool(True),
                    maxDPhi = cms.double(999.0),
                    maxDTheta = cms.double(999.0),
                    Pruning = cms.bool(True),
                    dYclusBoxMax = cms.double(8.0)
                ))
        )),
    algo_type = cms.int32(4)
)


process.cscTriggerPrimitiveDigis = cms.EDProducer("CSCTriggerPrimitivesProducer",
    MaxBX = cms.int32(9),
    MinBX = cms.int32(3),
    tmbSLHC = cms.PSet(
        mpcBlockMe1a = cms.uint32(0),
        tmbCrossBxAlgorithm = cms.untracked.uint32(1),
        alctTrigEnable = cms.uint32(0),
        tmbDropUsedClcts = cms.untracked.bool(False),
        verbosity = cms.untracked.int32(0),
        matchEarliestClctME11Only = cms.untracked.bool(False),
        tmbL1aWindowSize = cms.uint32(7),
        tmbEarlyTbins = cms.untracked.int32(4),
        clctTrigEnable = cms.uint32(0),
        tmbDropUsedAlcts = cms.untracked.bool(False),
        clctToAlct = cms.untracked.bool(False),
        matchTrigWindowSize = cms.uint32(3),
        tmbReadoutEarliest2 = cms.untracked.bool(False),
        matchEarliestAlctME11Only = cms.untracked.bool(False),
        maxME11LCTs = cms.untracked.uint32(2),
        matchTrigEnable = cms.uint32(1)
    ),
    CSCComparatorDigiProducer = cms.InputTag("simMuonCSCDigis","MuonCSCComparatorDigi"),
    clctParamMTCC = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctMinSeparation = cms.uint32(10),
        clctPidThreshPretrig = cms.uint32(2),
        clctFifoTbins = cms.uint32(12),
        verbosity = cms.untracked.int32(0),
        clctNplanesHitPretrig = cms.uint32(4),
        clctHitPersist = cms.uint32(6),
        clctFifoPretrig = cms.uint32(7),
        clctNplanesHitPattern = cms.uint32(1)
    ),
    debugParameters = cms.untracked.bool(False),
    mpcSLHC = cms.PSet(
        mpcMaxStubs = cms.untracked.uint32(3)
    ),
    alctSLHC = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctGhostCancellationSideQuality = cms.untracked.bool(True),
        alctTrigMode = cms.uint32(2),
        verbosity = cms.untracked.int32(0),
        alctDriftDelay = cms.uint32(2),
        alctNplanesHitAccelPretrig = cms.uint32(3),
        alctNarrowMaskForR1 = cms.untracked.bool(True),
        alctL1aWindowWidth = cms.uint32(7),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctHitPersist = cms.untracked.uint32(6),
        alctGhostCancellationBxDepth = cms.untracked.int32(1),
        alctFifoTbins = cms.uint32(16),
        alctNplanesHitPretrig = cms.uint32(3),
        alctEarlyTbins = cms.untracked.int32(4),
        alctUseCorrectedBx = cms.untracked.bool(True),
        alctPretrigDeadtime = cms.untracked.uint32(0),
        alctFifoPretrig = cms.uint32(10)
    ),
    alctParamMTCC = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctTrigMode = cms.uint32(2),
        verbosity = cms.untracked.int32(0),
        alctL1aWindowWidth = cms.uint32(3),
        alctNplanesHitAccelPretrig = cms.uint32(2),
        alctDriftDelay = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctFifoTbins = cms.uint32(16),
        alctNplanesHitPretrig = cms.uint32(2),
        alctFifoPretrig = cms.uint32(10)
    ),
    clctParamOldMC = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctMinSeparation = cms.uint32(10),
        clctPidThreshPretrig = cms.uint32(2),
        clctFifoTbins = cms.uint32(12),
        verbosity = cms.untracked.int32(0),
        clctNplanesHitPretrig = cms.uint32(2),
        clctHitPersist = cms.uint32(6),
        clctFifoPretrig = cms.uint32(7),
        clctNplanesHitPattern = cms.uint32(4)
    ),
    alctParamOldMC = cms.PSet(
        alctAccelMode = cms.uint32(1),
        alctTrigMode = cms.uint32(3),
        verbosity = cms.untracked.int32(0),
        alctL1aWindowWidth = cms.uint32(5),
        alctNplanesHitAccelPretrig = cms.uint32(2),
        alctDriftDelay = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctFifoTbins = cms.uint32(16),
        alctNplanesHitPretrig = cms.uint32(2),
        alctFifoPretrig = cms.uint32(10)
    ),
    checkBadChambers_ = cms.untracked.bool(True),
    tmbParam = cms.PSet(
        alctTrigEnable = cms.uint32(0),
        verbosity = cms.untracked.int32(0),
        tmbDropUsedAlcts = cms.untracked.bool(True),
        tmbEarlyTbins = cms.untracked.int32(4),
        mpcBlockMe1a = cms.uint32(0),
        tmbL1aWindowSize = cms.uint32(7),
        matchTrigWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.untracked.bool(True),
        clctTrigEnable = cms.uint32(0),
        matchTrigEnable = cms.uint32(1)
    ),
    commonParam = cms.PSet(
        gangedME1a = cms.untracked.bool(True),
        isTMB07 = cms.bool(True),
        isMTCC = cms.bool(False),
        isSLHC = cms.untracked.bool(False),
        smartME1aME1b = cms.untracked.bool(False),
        disableME1a = cms.untracked.bool(False),
        disableME42 = cms.untracked.bool(False)
    ),
    CSCWireDigiProducer = cms.InputTag("simMuonCSCDigis","MuonCSCWireDigi"),
    alctParam07 = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctTrigMode = cms.uint32(2),
        verbosity = cms.untracked.int32(0),
        alctDriftDelay = cms.uint32(2),
        alctNplanesHitAccelPretrig = cms.uint32(3),
        alctNarrowMaskForR1 = cms.untracked.bool(False),
        alctL1aWindowWidth = cms.uint32(7),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctHitPersist = cms.untracked.uint32(6),
        alctFifoTbins = cms.uint32(16),
        alctNplanesHitPretrig = cms.uint32(3),
        alctEarlyTbins = cms.untracked.int32(4),
        alctFifoPretrig = cms.uint32(10)
    ),
    clctSLHC = cms.PSet(
        clctPretriggerTriggerZone = cms.untracked.uint32(5),
        clctMinSeparation = cms.uint32(5),
        clctPidThreshPretrig = cms.uint32(4),
        clctDriftDelay = cms.uint32(2),
        clctFifoTbins = cms.uint32(12),
        verbosity = cms.untracked.int32(0),
        useDynamicStateMachineZone = cms.untracked.bool(True),
        clctNplanesHitPretrig = cms.uint32(3),
        clctHitPersist = cms.uint32(4),
        clctStartBxShift = cms.untracked.int32(0),
        clctStateMachineZone = cms.untracked.uint32(8),
        useDeadTimeZoning = cms.untracked.bool(True),
        clctFifoPretrig = cms.uint32(7),
        clctNplanesHitPattern = cms.uint32(4),
        clctUseCorrectedBx = cms.untracked.bool(True)
    ),
    clctParam07 = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctMinSeparation = cms.uint32(10),
        clctPidThreshPretrig = cms.uint32(2),
        clctFifoTbins = cms.uint32(12),
        verbosity = cms.untracked.int32(0),
        clctNplanesHitPretrig = cms.uint32(3),
        clctHitPersist = cms.uint32(4),
        clctStartBxShift = cms.untracked.int32(0),
        clctFifoPretrig = cms.uint32(7),
        clctNplanesHitPattern = cms.uint32(4)
    )
)


process.csctfDigis = cms.EDProducer("CSCTFUnpacker",
    mappingFile = cms.string(''),
    producer = cms.InputTag("rawDataCollector"),
    MaxBX = cms.int32(9),
    slot2sector = cms.vint32(0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0),
    swapME1strips = cms.bool(False),
    MinBX = cms.int32(3)
)


process.ctfCombinedSeeds = cms.EDProducer("TrackProducer",
    src = cms.InputTag("ckfTrackCandidatesCombinedSeeds"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    AlgorithmName = cms.string('undefAlgorithm'),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    GeometricInnerState = cms.bool(False),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.ctfNoOverlaps = cms.EDProducer("TrackProducer",
    src = cms.InputTag("ckfTrackCandidatesNoOverlaps"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    AlgorithmName = cms.string('undefAlgorithm'),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    GeometricInnerState = cms.bool(False),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.ctfPixelLess = cms.EDProducer("TrackProducer",
    src = cms.InputTag("ckfTrackCandidatesPixelLess"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('RKFittingSmoother'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    AlgorithmName = cms.string('undefAlgorithm'),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    GeometricInnerState = cms.bool(False),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.ctfWithMaterialTracks = cms.EDProducer("TrackProducer",
    src = cms.InputTag("ckfTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    AlgorithmName = cms.string('undefAlgorithm'),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    GeometricInnerState = cms.bool(False),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.ctfWithMaterialTracksCosmics = cms.EDProducer("TrackProducer",
    src = cms.InputTag("ckfTrackCandidatesP5"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('FittingSmootherRKP5'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    AlgorithmName = cms.string('ctf'),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    GeometricInnerState = cms.bool(True),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.dedxDiscrimASmi = cms.EDProducer("DeDxDiscriminatorProducer",
    UseStrip = cms.bool(True),
    MeVperADCPixel = cms.double(3.61e-06),
    UseCalibration = cms.bool(False),
    calibrationPath = cms.string(''),
    ProbabilityMode = cms.untracked.string('Accumulation'),
    tracks = cms.InputTag("generalTracks"),
    UsePixel = cms.bool(False),
    ShapeTest = cms.bool(True),
    MeVperADCStrip = cms.double(0.00095665),
    Formula = cms.untracked.uint32(3),
    Reccord = cms.untracked.string('SiStripDeDxMip_3D_Rcd'),
    trajectoryTrackAssociation = cms.InputTag("generalTracks")
)


process.dedxDiscrimBTag = cms.EDProducer("DeDxDiscriminatorProducer",
    UseStrip = cms.bool(True),
    MeVperADCPixel = cms.double(3.61e-06),
    UseCalibration = cms.bool(False),
    calibrationPath = cms.string(''),
    ProbabilityMode = cms.untracked.string('Accumulation'),
    tracks = cms.InputTag("generalTracks"),
    UsePixel = cms.bool(False),
    ShapeTest = cms.bool(True),
    MeVperADCStrip = cms.double(0.00095665),
    Formula = cms.untracked.uint32(1),
    Reccord = cms.untracked.string('SiStripDeDxMip_3D_Rcd'),
    trajectoryTrackAssociation = cms.InputTag("generalTracks")
)


process.dedxDiscrimProd = cms.EDProducer("DeDxDiscriminatorProducer",
    UseStrip = cms.bool(True),
    MeVperADCPixel = cms.double(3.61e-06),
    UseCalibration = cms.bool(False),
    calibrationPath = cms.string(''),
    ProbabilityMode = cms.untracked.string('Accumulation'),
    tracks = cms.InputTag("generalTracks"),
    UsePixel = cms.bool(False),
    ShapeTest = cms.bool(True),
    MeVperADCStrip = cms.double(0.00095665),
    Formula = cms.untracked.uint32(0),
    Reccord = cms.untracked.string('SiStripDeDxMip_3D_Rcd'),
    trajectoryTrackAssociation = cms.InputTag("generalTracks")
)


process.dedxDiscrimSmi = cms.EDProducer("DeDxDiscriminatorProducer",
    UseStrip = cms.bool(True),
    MeVperADCPixel = cms.double(3.61e-06),
    UseCalibration = cms.bool(False),
    calibrationPath = cms.string(''),
    ProbabilityMode = cms.untracked.string('Accumulation'),
    tracks = cms.InputTag("generalTracks"),
    UsePixel = cms.bool(False),
    ShapeTest = cms.bool(True),
    MeVperADCStrip = cms.double(0.00095665),
    Formula = cms.untracked.uint32(2),
    Reccord = cms.untracked.string('SiStripDeDxMip_3D_Rcd'),
    trajectoryTrackAssociation = cms.InputTag("generalTracks")
)


process.dedxHarmonic2 = cms.EDProducer("DeDxEstimatorProducer",
    UseStrip = cms.bool(True),
    MeVperADCPixel = cms.double(3.61e-06),
    UseCalibration = cms.bool(False),
    calibrationPath = cms.string(''),
    tracks = cms.InputTag("generalTracks"),
    estimator = cms.string('generic'),
    ShapeTest = cms.bool(True),
    MeVperADCStrip = cms.double(0.00095665),
    trajectoryTrackAssociation = cms.InputTag("generalTracks"),
    UsePixel = cms.bool(False),
    exponent = cms.double(-2.0)
)


process.dedxMedian = cms.EDProducer("DeDxEstimatorProducer",
    UseStrip = cms.bool(True),
    MeVperADCPixel = cms.double(3.61e-06),
    UseCalibration = cms.bool(False),
    calibrationPath = cms.string(''),
    tracks = cms.InputTag("generalTracks"),
    estimator = cms.string('median'),
    ShapeTest = cms.bool(False),
    MeVperADCStrip = cms.double(0.00095665),
    UsePixel = cms.bool(False),
    trajectoryTrackAssociation = cms.InputTag("generalTracks")
)


process.dedxTruncated40 = cms.EDProducer("DeDxEstimatorProducer",
    UseStrip = cms.bool(True),
    MeVperADCPixel = cms.double(3.61e-06),
    UseCalibration = cms.bool(False),
    calibrationPath = cms.string(''),
    tracks = cms.InputTag("generalTracks"),
    estimator = cms.string('truncated'),
    ShapeTest = cms.bool(True),
    fraction = cms.double(0.4),
    MeVperADCStrip = cms.double(0.00095665),
    UsePixel = cms.bool(False),
    trajectoryTrackAssociation = cms.InputTag("generalTracks")
)


process.dedxUnbinned = cms.EDProducer("DeDxEstimatorProducer",
    UseStrip = cms.bool(True),
    MeVperADCPixel = cms.double(3.61e-06),
    UseCalibration = cms.bool(False),
    calibrationPath = cms.string(''),
    tracks = cms.InputTag("generalTracks"),
    estimator = cms.string('unbinnedFit'),
    ShapeTest = cms.bool(True),
    MeVperADCStrip = cms.double(0.00095665),
    UsePixel = cms.bool(False),
    trajectoryTrackAssociation = cms.InputTag("generalTracks")
)


process.detachedTripletStep = cms.EDProducer("TrackListMerger",
    ShareFrac = cms.double(0.19),
    writeOnlyTrkQuals = cms.bool(True),
    MinPT = cms.double(0.05),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(False),
    Epsilon = cms.double(-0.001),
    shareFrac = cms.double(0.13),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("detachedTripletStepSelector","detachedTripletStepVtx"), cms.InputTag("detachedTripletStepSelector","detachedTripletStepTrk")),
    indivShareFrac = cms.vdouble(0.13, 0.13),
    MaxNormalizedChisq = cms.double(1000.0),
    hasSelector = cms.vint32(1, 1),
    FoundHitBonus = cms.double(5.0),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(True),
        tLists = cms.vint32(0, 1)
    )),
    MinFound = cms.int32(3),
    TrackProducers = cms.VInputTag(cms.InputTag("detachedTripletStepTracks"), cms.InputTag("detachedTripletStepTracks")),
    LostHitPenalty = cms.double(20.0),
    newQuality = cms.string('confirmed')
)


process.detachedTripletStepClusters = cms.EDProducer("TrackClusterRemover",
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    trajectories = cms.InputTag("pixelPairStepTracks"),
    oldClusterRemovalInfo = cms.InputTag("pixelPairStepClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    overrideTrkQuals = cms.InputTag("pixelPairStepSelector","pixelPairStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True)
)


process.detachedTripletStepSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            maxElement = cms.uint32(100000),
            ComponentName = cms.string('PixelTripletLargeTipGenerator'),
            extraHitRPhitolerance = cms.double(0.0),
            useMultScattering = cms.bool(True),
            phiPreFiltering = cms.double(0.3),
            extraHitRZtolerance = cms.double(0.0)
        ),
        SeedingLayers = cms.string('detachedTripletStepSeedLayers')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
        FilterPixelHits = cms.bool(True),
        FilterStripHits = cms.bool(False),
        FilterAtHelixStage = cms.bool(False)
    ),
    ClusterCheckPSet = cms.PSet(
        MaxNumberOfPixelClusters = cms.uint32(40000),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters")
    ),
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originRadius = cms.double(1.5),
            ptMin = cms.double(0.3),
            originHalfLength = cms.double(15.0)
        ),
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot')
    ),
    SeedCreatorPSet = cms.PSet(
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial'),
        ComponentName = cms.string('SeedFromConsecutiveHitsTripletOnlyCreator')
    )
)


process.detachedTripletStepSelector = cms.EDProducer("MultiTrackSelector",
    src = cms.InputTag("detachedTripletStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        max_d0 = cms.double(100.0),
        minNumber3DLayers = cms.uint32(0),
        max_lostHitFraction = cms.double(1.0),
        applyAbsCutsIfNoPV = cms.bool(False),
        qualityBit = cms.string('loose'),
        minNumberLayers = cms.uint32(3),
        chi2n_par = cms.double(1.2),
        nSigmaZ = cms.double(4.0),
        dz_par2 = cms.vdouble(1.2, 3.0),
        applyAdaptedPVCuts = cms.bool(True),
        min_eta = cms.double(-9999.0),
        dz_par1 = cms.vdouble(1.1, 3.0),
        copyTrajectories = cms.untracked.bool(False),
        vtxNumber = cms.int32(-1),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_relpterr = cms.double(9999.0),
        copyExtras = cms.untracked.bool(True),
        vertexCut = cms.string('ndof>=2&!isFake'),
        max_z0 = cms.double(100.0),
        min_nhits = cms.uint32(0),
        name = cms.string('detachedTripletStepVtxLoose'),
        max_minMissHitOutOrIn = cms.int32(99),
        chi2n_no1Dmod_par = cms.double(9999),
        res_par = cms.vdouble(0.003, 0.001),
        max_eta = cms.double(9999.0),
        d0_par2 = cms.vdouble(1.2, 3.0),
        d0_par1 = cms.vdouble(1.1, 3.0),
        preFilterName = cms.string(''),
        minHitsToBypassChecks = cms.uint32(20)
    ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(0),
            max_lostHitFraction = cms.double(1.0),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('loose'),
            minNumberLayers = cms.uint32(3),
            chi2n_par = cms.double(0.7),
            nSigmaZ = cms.double(4.0),
            dz_par2 = cms.vdouble(1.4, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            min_eta = cms.double(-9999.0),
            dz_par1 = cms.vdouble(1.4, 4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(999),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('detachedTripletStepTrkLoose'),
            max_minMissHitOutOrIn = cms.int32(99),
            chi2n_no1Dmod_par = cms.double(9999),
            res_par = cms.vdouble(0.003, 0.001),
            max_eta = cms.double(9999.0),
            d0_par2 = cms.vdouble(1.4, 4.0),
            d0_par1 = cms.vdouble(1.4, 4.0),
            preFilterName = cms.string(''),
            minHitsToBypassChecks = cms.uint32(20)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(3),
            max_lostHitFraction = cms.double(1.0),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('tight'),
            minNumberLayers = cms.uint32(3),
            chi2n_par = cms.double(0.9),
            dz_par1 = cms.vdouble(0.9, 3.0),
            dz_par2 = cms.vdouble(1.0, 3.0),
            applyAdaptedPVCuts = cms.bool(True),
            min_eta = cms.double(-9999.0),
            nSigmaZ = cms.double(4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('detachedTripletStepVtxTight'),
            max_minMissHitOutOrIn = cms.int32(99),
            chi2n_no1Dmod_par = cms.double(9999),
            preFilterName = cms.string('detachedTripletStepVtxLoose'),
            max_eta = cms.double(9999.0),
            d0_par2 = cms.vdouble(1.0, 3.0),
            d0_par1 = cms.vdouble(0.95, 3.0),
            res_par = cms.vdouble(0.003, 0.001),
            minHitsToBypassChecks = cms.uint32(20)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(4),
            max_lostHitFraction = cms.double(1.0),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('tight'),
            minNumberLayers = cms.uint32(5),
            chi2n_par = cms.double(0.5),
            dz_par1 = cms.vdouble(1.1, 4.0),
            dz_par2 = cms.vdouble(1.1, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            min_eta = cms.double(-9999.0),
            nSigmaZ = cms.double(4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('detachedTripletStepTrkTight'),
            max_minMissHitOutOrIn = cms.int32(99),
            chi2n_no1Dmod_par = cms.double(9999),
            preFilterName = cms.string('detachedTripletStepTrkLoose'),
            max_eta = cms.double(9999.0),
            d0_par2 = cms.vdouble(1.1, 4.0),
            d0_par1 = cms.vdouble(1.1, 4.0),
            res_par = cms.vdouble(0.003, 0.001),
            minHitsToBypassChecks = cms.uint32(20)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(3),
            max_lostHitFraction = cms.double(1.0),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('highPurity'),
            minNumberLayers = cms.uint32(3),
            chi2n_par = cms.double(0.7),
            nSigmaZ = cms.double(4.0),
            dz_par2 = cms.vdouble(0.9, 3.0),
            applyAdaptedPVCuts = cms.bool(True),
            min_eta = cms.double(-9999.0),
            dz_par1 = cms.vdouble(0.8, 3.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('detachedTripletStepVtx'),
            max_minMissHitOutOrIn = cms.int32(99),
            chi2n_no1Dmod_par = cms.double(9999),
            res_par = cms.vdouble(0.003, 0.001),
            max_eta = cms.double(9999.0),
            d0_par2 = cms.vdouble(0.9, 3.0),
            d0_par1 = cms.vdouble(0.85, 3.0),
            preFilterName = cms.string('detachedTripletStepVtxTight'),
            minHitsToBypassChecks = cms.uint32(20)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(4),
            max_lostHitFraction = cms.double(1.0),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('highPurity'),
            minNumberLayers = cms.uint32(5),
            chi2n_par = cms.double(0.3),
            nSigmaZ = cms.double(4.0),
            dz_par2 = cms.vdouble(1.0, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            min_eta = cms.double(-9999.0),
            dz_par1 = cms.vdouble(1.0, 4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(0),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('detachedTripletStepTrk'),
            max_minMissHitOutOrIn = cms.int32(99),
            chi2n_no1Dmod_par = cms.double(9999),
            res_par = cms.vdouble(0.003, 0.001),
            max_eta = cms.double(9999.0),
            d0_par2 = cms.vdouble(1.0, 4.0),
            d0_par1 = cms.vdouble(1.0, 4.0),
            preFilterName = cms.string('detachedTripletStepTrkTight'),
            minHitsToBypassChecks = cms.uint32(20)
        )),
    beamspot = cms.InputTag("offlineBeamSpot"),
    vertices = cms.InputTag("pixelVertices"),
    useVtxError = cms.bool(False),
    useVertices = cms.bool(True)
)


process.detachedTripletStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("detachedTripletStepSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('detachedTripletStepTrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    TrajectoryBuilder = cms.string('detachedTripletStepTrajectoryBuilder'),
    numHitsForSeedCleaner = cms.int32(50)
)


process.detachedTripletStepTracks = cms.EDProducer("TrackProducer",
    src = cms.InputTag("detachedTripletStepTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    AlgorithmName = cms.string('iter3'),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    GeometricInnerState = cms.bool(False),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.dt1DCosmicRecHits = cms.EDProducer("DTRecHitProducer",
    recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
    recAlgoConfig = cms.PSet(
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        minTime = cms.double(-3.0),
        stepTwoFromDigi = cms.bool(False),
        doVdriftCorr = cms.bool(False),
        debug = cms.untracked.bool(False),
        tTrigModeConfig = cms.PSet(
            vPropWire = cms.double(24.4),
            doTOFCorrection = cms.bool(False),
            tofCorrType = cms.int32(0),
            wirePropCorrType = cms.int32(0),
            tTrigLabel = cms.string('cosmics'),
            doWirePropCorrection = cms.bool(False),
            doT0Correction = cms.bool(True),
            debug = cms.untracked.bool(False)
        ),
        maxTime = cms.double(420.0)
    ),
    debug = cms.untracked.bool(False),
    dtDigiLabel = cms.InputTag("muonDTDigis")
)


process.dt1DRecHits = cms.EDProducer("DTRecHitProducer",
    recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
    recAlgoConfig = cms.PSet(
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        minTime = cms.double(-3.0),
        stepTwoFromDigi = cms.bool(False),
        doVdriftCorr = cms.bool(True),
        debug = cms.untracked.bool(False),
        tTrigModeConfig = cms.PSet(
            vPropWire = cms.double(24.4),
            doTOFCorrection = cms.bool(True),
            tofCorrType = cms.int32(0),
            wirePropCorrType = cms.int32(0),
            tTrigLabel = cms.string(''),
            doWirePropCorrection = cms.bool(True),
            doT0Correction = cms.bool(True),
            debug = cms.untracked.bool(False)
        ),
        maxTime = cms.double(420.0)
    ),
    debug = cms.untracked.bool(False),
    dtDigiLabel = cms.InputTag("muonDTDigis")
)


process.dt2DCosmicSegments = cms.EDProducer("DTRecSegment2DProducer",
    Reco2DAlgoConfig = cms.PSet(
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            doVdriftCorr = cms.bool(True),
            debug = cms.untracked.bool(False),
            tTrigModeConfig = cms.PSet(
                vPropWire = cms.double(24.4),
                doTOFCorrection = cms.bool(True),
                tofCorrType = cms.int32(0),
                wirePropCorrType = cms.int32(0),
                tTrigLabel = cms.string(''),
                doWirePropCorrection = cms.bool(True),
                doT0Correction = cms.bool(True),
                debug = cms.untracked.bool(False)
            ),
            maxTime = cms.double(420.0)
        ),
        segmCleanerMode = cms.int32(2),
        perform_delta_rejecting = cms.bool(True),
        nSharedHitsMax = cms.int32(2),
        AlphaMaxPhi = cms.double(1.0),
        hit_afterT0_resolution = cms.double(0.03),
        MaxAllowedHits = cms.uint32(50),
        performT0_vdriftSegCorrection = cms.bool(False),
        AlphaMaxTheta = cms.double(0.9),
        debug = cms.untracked.bool(False),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False)
    ),
    Reco2DAlgoName = cms.string('DTCombinatorialPatternReco'),
    debug = cms.untracked.bool(False),
    recHits1DLabel = cms.InputTag("dt1DCosmicRecHits")
)


process.dt2DSegments = cms.EDProducer("DTRecSegment2DProducer",
    Reco2DAlgoConfig = cms.PSet(
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            doVdriftCorr = cms.bool(True),
            debug = cms.untracked.bool(False),
            tTrigModeConfig = cms.PSet(
                vPropWire = cms.double(24.4),
                doTOFCorrection = cms.bool(True),
                tofCorrType = cms.int32(0),
                wirePropCorrType = cms.int32(0),
                tTrigLabel = cms.string(''),
                doWirePropCorrection = cms.bool(True),
                doT0Correction = cms.bool(True),
                debug = cms.untracked.bool(False)
            ),
            maxTime = cms.double(420.0)
        ),
        segmCleanerMode = cms.int32(2),
        perform_delta_rejecting = cms.bool(True),
        MaxT0 = cms.double(100.0),
        performT0_vdriftSegCorrection = cms.bool(False),
        AlphaMaxPhi = cms.double(1.0),
        MaxChi2 = cms.double(4.0),
        hit_afterT0_resolution = cms.double(0.03),
        MaxAllowedHits = cms.uint32(50),
        nSharedHitsMax = cms.int32(2),
        AlphaMaxTheta = cms.double(0.9),
        debug = cms.untracked.bool(False),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        MinT0 = cms.double(-100.0)
    ),
    Reco2DAlgoName = cms.string('DTMeantimerPatternReco'),
    debug = cms.untracked.bool(False),
    recHits1DLabel = cms.InputTag("dt1DRecHits")
)


process.dt4DCosmicSegments = cms.EDProducer("DTRecSegment4DProducer",
    Reco4DAlgoName = cms.string('DTCombinatorialPatternReco4D'),
    Reco4DAlgoConfig = cms.PSet(
        Reco2DAlgoConfig = cms.PSet(
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                tTrigMode = cms.string('DTTTrigSyncFromDB'),
                minTime = cms.double(-3.0),
                stepTwoFromDigi = cms.bool(False),
                doVdriftCorr = cms.bool(False),
                debug = cms.untracked.bool(False),
                tTrigModeConfig = cms.PSet(
                    vPropWire = cms.double(24.4),
                    doTOFCorrection = cms.bool(False),
                    tofCorrType = cms.int32(0),
                    wirePropCorrType = cms.int32(0),
                    tTrigLabel = cms.string('cosmics'),
                    doWirePropCorrection = cms.bool(False),
                    doT0Correction = cms.bool(True),
                    debug = cms.untracked.bool(False)
                ),
                maxTime = cms.double(420.0)
            ),
            segmCleanerMode = cms.int32(1),
            perform_delta_rejecting = cms.bool(False),
            nSharedHitsMax = cms.int32(2),
            AlphaMaxPhi = cms.double(100.0),
            hit_afterT0_resolution = cms.double(0.03),
            MaxAllowedHits = cms.uint32(50),
            performT0_vdriftSegCorrection = cms.bool(False),
            AlphaMaxTheta = cms.double(100.0),
            debug = cms.untracked.bool(False),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False)
        ),
        Reco2DAlgoName = cms.string('DTCombinatorialPatternReco'),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            doVdriftCorr = cms.bool(False),
            debug = cms.untracked.bool(False),
            tTrigModeConfig = cms.PSet(
                vPropWire = cms.double(24.4),
                doTOFCorrection = cms.bool(False),
                tofCorrType = cms.int32(0),
                wirePropCorrType = cms.int32(0),
                tTrigLabel = cms.string('cosmics'),
                doWirePropCorrection = cms.bool(False),
                doT0Correction = cms.bool(True),
                debug = cms.untracked.bool(False)
            ),
            maxTime = cms.double(420.0)
        ),
        segmCleanerMode = cms.int32(1),
        perform_delta_rejecting = cms.bool(False),
        nSharedHitsMax = cms.int32(2),
        hit_afterT0_resolution = cms.double(0.03),
        performT0_vdriftSegCorrection = cms.bool(False),
        debug = cms.untracked.bool(False),
        nUnSharedHitsMin = cms.int32(2),
        AllDTRecHits = cms.bool(True),
        performT0SegCorrection = cms.bool(False)
    ),
    debug = cms.untracked.bool(False),
    recHits1DLabel = cms.InputTag("dt1DCosmicRecHits"),
    recHits2DLabel = cms.InputTag("dt2DCosmicSegments")
)


process.dt4DSegments = cms.EDProducer("DTRecSegment4DProducer",
    Reco4DAlgoName = cms.string('DTMeantimerPatternReco4D'),
    Reco4DAlgoConfig = cms.PSet(
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            doVdriftCorr = cms.bool(True),
            debug = cms.untracked.bool(False),
            tTrigModeConfig = cms.PSet(
                vPropWire = cms.double(24.4),
                doTOFCorrection = cms.bool(True),
                tofCorrType = cms.int32(0),
                wirePropCorrType = cms.int32(0),
                tTrigLabel = cms.string(''),
                doWirePropCorrection = cms.bool(True),
                doT0Correction = cms.bool(True),
                debug = cms.untracked.bool(False)
            ),
            maxTime = cms.double(420.0)
        ),
        Reco2DAlgoConfig = cms.PSet(
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                tTrigMode = cms.string('DTTTrigSyncFromDB'),
                minTime = cms.double(-3.0),
                stepTwoFromDigi = cms.bool(False),
                doVdriftCorr = cms.bool(True),
                debug = cms.untracked.bool(False),
                tTrigModeConfig = cms.PSet(
                    vPropWire = cms.double(24.4),
                    doTOFCorrection = cms.bool(True),
                    tofCorrType = cms.int32(0),
                    wirePropCorrType = cms.int32(0),
                    tTrigLabel = cms.string(''),
                    doWirePropCorrection = cms.bool(True),
                    doT0Correction = cms.bool(True),
                    debug = cms.untracked.bool(False)
                ),
                maxTime = cms.double(420.0)
            ),
            segmCleanerMode = cms.int32(2),
            perform_delta_rejecting = cms.bool(True),
            MaxT0 = cms.double(100.0),
            performT0_vdriftSegCorrection = cms.bool(False),
            AlphaMaxPhi = cms.double(1.0),
            MaxChi2 = cms.double(4.0),
            hit_afterT0_resolution = cms.double(0.03),
            MaxAllowedHits = cms.uint32(50),
            nSharedHitsMax = cms.int32(2),
            AlphaMaxTheta = cms.double(0.9),
            debug = cms.untracked.bool(False),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False),
            MinT0 = cms.double(-100.0)
        ),
        Reco2DAlgoName = cms.string('DTMeantimerPatternReco'),
        perform_delta_rejecting = cms.bool(True),
        hit_afterT0_resolution = cms.double(0.03),
        performT0_vdriftSegCorrection = cms.bool(False),
        debug = cms.untracked.bool(False),
        nUnSharedHitsMin = cms.int32(2),
        AllDTRecHits = cms.bool(True),
        performT0SegCorrection = cms.bool(False)
    ),
    debug = cms.untracked.bool(False),
    recHits1DLabel = cms.InputTag("dt1DRecHits"),
    recHits2DLabel = cms.InputTag("dt2DSegments")
)


process.dt4DSegmentsT0Seg = cms.EDProducer("DTSegment4DT0Corrector",
    recAlgo = cms.string('DTLinearDriftAlgo'),
    recAlgoConfig = cms.PSet(
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        minTime = cms.double(-3.0),
        driftVelocity = cms.double(0.00543),
        hitResolution = cms.double(0.02),
        debug = cms.untracked.bool(False),
        maxTime = cms.double(420.0),
        tTrigModeConfig = cms.PSet(
            vPropWire = cms.double(24.4),
            doTOFCorrection = cms.bool(False),
            tofCorrType = cms.int32(0),
            wirePropCorrType = cms.int32(0),
            tTrigLabel = cms.string('cosmics'),
            doWirePropCorrection = cms.bool(False),
            doT0Correction = cms.bool(True),
            debug = cms.untracked.bool(False)
        )
    ),
    debug = cms.untracked.bool(False),
    perform_delta_rejecting = cms.bool(False),
    hit_afterT0_resolution = cms.double(0.03),
    recHits4DLabel = cms.InputTag("dt4DSegments"),
    performT0_vdriftSegCorrection = cms.bool(True)
)


process.dtTriggerPrimitiveDigis = cms.EDProducer("DTTrigProd",
    lutDumpFlag = cms.untracked.bool(False),
    debug = cms.untracked.bool(False),
    lutBtic = cms.untracked.int32(31),
    digiTag = cms.InputTag("muonDTDigis"),
    DTTFSectorNumbering = cms.bool(True)
)


process.dttfDigis = cms.EDProducer("DTTFFEDReader",
    verbose = cms.untracked.bool(False),
    DTTF_FED_Source = cms.InputTag("rawDataCollector")
)


process.dummy = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    voronoiRfact = cms.double(0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(True),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("particleFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.duplicateTrackCandidates = cms.EDProducer("DuplicateTrackMerger",
    maxDCA = cms.double(30.0),
    maxDQoP = cms.double(0.25),
    minpT = cms.double(0.2),
    maxDdxy = cms.double(10.0),
    maxDLambda = cms.double(0.3),
    source = cms.InputTag("preDuplicateMergingGeneralTracks"),
    useInnermostState = cms.bool(True),
    maxDPhi = cms.double(0.3),
    minP = cms.double(0.4),
    minBDTG = cms.double(-0.1),
    maxDdsz = cms.double(10.0),
    minDeltaR3d = cms.double(-4.0),
    ttrhBuilderName = cms.string('WithAngleAndTemplate')
)


process.earlyGeneralTracks = cms.EDProducer("TrackListMerger",
    ShareFrac = cms.double(0.19),
    writeOnlyTrkQuals = cms.bool(False),
    MinPT = cms.double(0.05),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(True),
    Epsilon = cms.double(-0.001),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("initialStepSelector","initialStep"), cms.InputTag("lowPtTripletStepSelector","lowPtTripletStep"), cms.InputTag("pixelPairStepSelector","pixelPairStep"), cms.InputTag("detachedTripletStep"), cms.InputTag("mixedTripletStep"), 
        cms.InputTag("pixelLessStepSelector","pixelLessStep"), cms.InputTag("tobTecStepSelector","tobTecStep")),
    indivShareFrac = cms.vdouble(1.0, 0.16, 0.19, 0.13, 0.11, 
        0.11, 0.09),
    makeReKeyedSeeds = cms.untracked.bool(False),
    MaxNormalizedChisq = cms.double(1000.0),
    FoundHitBonus = cms.double(5.0),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(True),
        tLists = cms.vint32(0, 1, 2, 3, 4, 
            5, 6)
    )),
    MinFound = cms.int32(3),
    hasSelector = cms.vint32(1, 1, 1, 1, 1, 
        1, 1),
    TrackProducers = cms.VInputTag(cms.InputTag("initialStepTracks"), cms.InputTag("lowPtTripletStepTracks"), cms.InputTag("pixelPairStepTracks"), cms.InputTag("detachedTripletStepTracks"), cms.InputTag("mixedTripletStepTracks"), 
        cms.InputTag("pixelLessStepTracks"), cms.InputTag("tobTecStepTracks")),
    LostHitPenalty = cms.double(20.0),
    newQuality = cms.string('confirmed')
)


process.earlyMuons = cms.EDProducer("MuonIdProducer",
    TrackExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        inputTrackCollection = cms.InputTag("generalTracks"),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(0.1),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.01),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent')
    ),
    maxAbsEta = cms.double(3.0),
    fillGlobalTrackRefits = cms.bool(False),
    arbitrationCleanerOptions = cms.PSet(
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        ClusterDPhi = cms.double(0.6),
        OverlapDTheta = cms.double(0.02),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        ClusterDTheta = cms.double(0.02)
    ),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    addExtraSoftMuons = cms.bool(False),
    debugWithTruthMatching = cms.bool(False),
    CaloExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        DR_Max = cms.double(1.0),
        Threshold_E = cms.double(0.2),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        Noise_HE = cms.double(0.2),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Threshold_H = cms.double(0.5),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Noise_HO = cms.double(0.2),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        DepositLabel = cms.untracked.string('Cal'),
        UseRecHitsFlag = cms.bool(False),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(1.0),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(1.0),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        Threshold_HO = cms.double(0.5),
        Noise_EE = cms.double(0.1),
        Noise_EB = cms.double(0.025),
        DR_Veto_H = cms.double(0.1),
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        Noise_HB = cms.double(0.2),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_HO = cms.double(0.1)
    ),
    runArbitrationCleaner = cms.bool(True),
    fillEnergy = cms.bool(False),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        usePosition = cms.bool(True),
        diagonalOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite')
    ),
    TimingFillerParameters = cms.PSet(
        DTTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DSegments"),
                DTradius = cms.double(0.01),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            HitError = cms.double(6.0),
            DoWireCorr = cms.bool(True),
            PruneCut = cms.double(10000.0),
            DTsegments = cms.InputTag("dt4DSegments"),
            DropTheta = cms.bool(True),
            RequireBothProjections = cms.bool(False),
            HitsMin = cms.int32(3),
            DTTimeOffset = cms.double(0.0),
            debug = cms.bool(False),
            UseSegmentT0 = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            )
        ),
        CSCTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DSegments"),
                DTradius = cms.double(0.01),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            CSCsegments = cms.InputTag("csc2DSegments"),
            CSCStripTimeOffset = cms.double(0.0),
            CSCStripError = cms.double(7.0),
            UseStripTime = cms.bool(True),
            debug = cms.bool(False),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            PruneCut = cms.double(9.0),
            UseWireTime = cms.bool(True)
        ),
        UseDT = cms.bool(True),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseECAL = cms.bool(True)
    ),
    inputCollectionTypes = cms.vstring('inner tracks', 
        'outer tracks'),
    minCaloCompatibility = cms.double(0.6),
    ecalDepositName = cms.string('ecal'),
    minP = cms.double(3.0),
    fillIsolation = cms.bool(False),
    jetDepositName = cms.string('jets'),
    hoDepositName = cms.string('ho'),
    writeIsoDeposits = cms.bool(True),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minPt = cms.double(2.0),
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(9999.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(False),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.2),
        useMuon = cms.bool(True),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(False)
    ),
    JetExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        ExcludeMuonVeto = cms.bool(True),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(0.5),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(0.5),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        JetCollectionLabel = cms.InputTag("ak5CaloJets"),
        DR_Veto = cms.double(0.1),
        Threshold = cms.double(5.0)
    ),
    fillGlobalTrackQuality = cms.bool(False),
    minPCaloMuon = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    fillCaloCompatibility = cms.bool(False),
    fillMatching = cms.bool(True),
    MuonCaloCompatibility = cms.PSet(
        allSiPMHO = cms.bool(False),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    fillTrackerKink = cms.bool(False),
    hcalDepositName = cms.string('hcal'),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    inputCollectionLabels = cms.VInputTag(cms.InputTag("earlyGeneralTracks"), cms.InputTag("standAloneMuons","UpdatedAtVtx")),
    trackDepositName = cms.string('tracker'),
    maxAbsDx = cms.double(3.0),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    minNumberOfMatches = cms.int32(1)
)


process.ecalCompactTrigPrim = cms.EDProducer("EcalCompactTrigPrimProducer",
    outColl = cms.string(''),
    inColl = cms.InputTag("ecalDigis","EcalTriggerPrimitives")
)


process.ecalDetIdToBeRecovered = cms.EDProducer("EcalDetIdToBeRecoveredProducer",
    ebIntegrityChIdErrors = cms.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
    ebDetIdToBeRecovered = cms.string('ebDetId'),
    integrityTTIdErrors = cms.InputTag("ecalDigis","EcalIntegrityTTIdErrors"),
    eeIntegrityGainErrors = cms.InputTag("ecalDigis","EcalIntegrityGainErrors"),
    ebFEToBeRecovered = cms.string('ebFE'),
    ebIntegrityGainErrors = cms.InputTag("ecalDigis","EcalIntegrityGainErrors"),
    eeDetIdToBeRecovered = cms.string('eeDetId'),
    eeIntegrityGainSwitchErrors = cms.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
    eeIntegrityChIdErrors = cms.InputTag("ecalDigis","EcalIntegrityChIdErrors"),
    ebIntegrityGainSwitchErrors = cms.InputTag("ecalDigis","EcalIntegrityGainSwitchErrors"),
    ebSrFlagCollection = cms.InputTag("ecalDigis"),
    eeSrFlagCollection = cms.InputTag("ecalDigis"),
    integrityBlockSizeErrors = cms.InputTag("ecalDigis","EcalIntegrityBlockSizeErrors"),
    eeFEToBeRecovered = cms.string('eeFE')
)


process.ecalDigis = cms.EDProducer("EcalRawToDigi",
    tccUnpacking = cms.bool(True),
    FedLabel = cms.InputTag("listfeds"),
    srpUnpacking = cms.bool(True),
    syncCheck = cms.bool(True),
    feIdCheck = cms.bool(True),
    silentMode = cms.untracked.bool(True),
    InputLabel = cms.InputTag("rawDataCollector"),
    orderedFedList = cms.vint32(601, 602, 603, 604, 605, 
        606, 607, 608, 609, 610, 
        611, 612, 613, 614, 615, 
        616, 617, 618, 619, 620, 
        621, 622, 623, 624, 625, 
        626, 627, 628, 629, 630, 
        631, 632, 633, 634, 635, 
        636, 637, 638, 639, 640, 
        641, 642, 643, 644, 645, 
        646, 647, 648, 649, 650, 
        651, 652, 653, 654),
    eventPut = cms.bool(True),
    numbTriggerTSamples = cms.int32(1),
    numbXtalTSamples = cms.int32(10),
    orderedDCCIdList = cms.vint32(1, 2, 3, 4, 5, 
        6, 7, 8, 9, 10, 
        11, 12, 13, 14, 15, 
        16, 17, 18, 19, 20, 
        21, 22, 23, 24, 25, 
        26, 27, 28, 29, 30, 
        31, 32, 33, 34, 35, 
        36, 37, 38, 39, 40, 
        41, 42, 43, 44, 45, 
        46, 47, 48, 49, 50, 
        51, 52, 53, 54),
    FEDs = cms.vint32(601, 602, 603, 604, 605, 
        606, 607, 608, 609, 610, 
        611, 612, 613, 614, 615, 
        616, 617, 618, 619, 620, 
        621, 622, 623, 624, 625, 
        626, 627, 628, 629, 630, 
        631, 632, 633, 634, 635, 
        636, 637, 638, 639, 640, 
        641, 642, 643, 644, 645, 
        646, 647, 648, 649, 650, 
        651, 652, 653, 654),
    DoRegional = cms.bool(False),
    feUnpacking = cms.bool(True),
    forceToKeepFRData = cms.bool(False),
    headerUnpacking = cms.bool(True),
    memUnpacking = cms.bool(True)
)


process.ecalDrivenElectronSeeds = cms.EDProducer("ElectronSeedProducer",
    endcapSuperClusters = cms.InputTag("correctedMulti5x5SuperClustersWithPreshower"),
    SeedConfiguration = cms.PSet(
        PhiMax2B = cms.double(0.002),
        hOverEPtMin = cms.double(0.0),
        PhiMax2F = cms.double(0.003),
        searchInTIDTEC = cms.bool(True),
        PhiMin2F = cms.double(-0.003),
        deltaZ1WithVertex = cms.double(25.0),
        HighPtThreshold = cms.double(35.0),
        r2MinF = cms.double(-0.15),
        maxHBarrel = cms.double(0.0),
        DeltaPhi1Low = cms.double(0.23),
        DeltaPhi1High = cms.double(0.08),
        ePhiMin1 = cms.double(-0.125),
        hcalTowers = cms.InputTag("towerMaker"),
        LowPtThreshold = cms.double(5.0),
        maxHOverEBarrel = cms.double(0.15),
        dynamicPhiRoad = cms.bool(True),
        ePhiMax1 = cms.double(0.075),
        measurementTrackerName = cms.string(''),
        SizeWindowENeg = cms.double(0.675),
        nSigmasDeltaZ1 = cms.double(5.0),
        rMaxI = cms.double(0.2),
        maxHEndcaps = cms.double(0.0),
        preFilteredSeeds = cms.bool(False),
        r2MaxF = cms.double(0.15),
        maxHOverEEndcaps = cms.double(0.15),
        pPhiMin1 = cms.double(-0.075),
        initialSeeds = cms.InputTag("newCombinedSeeds"),
        pPhiMax1 = cms.double(0.125),
        SCEtCut = cms.double(4.0),
        z2MaxB = cms.double(0.09),
        fromTrackerSeeds = cms.bool(True),
        hcalRecHits = cms.InputTag("hbhereco"),
        z2MinB = cms.double(-0.09),
        rMinI = cms.double(-0.2),
        hOverEConeSize = cms.double(0.15),
        hOverEHBMinE = cms.double(0.7),
        useRecoVertex = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        vertices = cms.InputTag("offlinePrimaryVerticesWithBS"),
        DeltaPhi2F = cms.double(0.012),
        applyHOverECut = cms.bool(True),
        hOverEHFMinE = cms.double(0.8),
        DeltaPhi2B = cms.double(0.008),
        PhiMin2B = cms.double(-0.002)
    ),
    barrelSuperClusters = cms.InputTag("correctedHybridSuperClusters")
)


process.ecalDrivenGsfElectronCores = cms.EDProducer("GsfElectronCoreEcalDrivenProducer",
    ctfTracks = cms.InputTag("generalTracks"),
    gsfTracks = cms.InputTag("electronGsfTracks"),
    gsfPfRecTracks = cms.InputTag("pfTrackElec"),
    useGsfPfRecTracks = cms.bool(True)
)


process.ecalDrivenGsfElectrons = cms.EDProducer("GsfElectronEcalDrivenProducer",
    hOverEPtMin = cms.double(0.0),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    endcapRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    ctfTracksTag = cms.InputTag("generalTracks"),
    maxHBarrelPflow = cms.double(0.0),
    minSCEtBarrel = cms.double(4.0),
    recHitSeverityToBeExcludedBarrel = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    etMinEndcaps = cms.double(0.11),
    gsfPfRecTracksTag = cms.InputTag("pfTrackElec"),
    minEOverPBarrelPflow = cms.double(0.0),
    maxHEndcaps = cms.double(0.0),
    eMinBarrel = cms.double(0.095),
    isFiducial = cms.bool(False),
    maxDeltaEtaEndcaps = cms.double(0.02),
    minEOverPBarrel = cms.double(0.0),
    maxVtxDistTk = cms.double(0.2),
    maxFbremBarrel = cms.double(999999999.0),
    ecalDrivenEcalErrorFromClassBasedParameterization = cms.bool(True),
    applyAmbResolution = cms.bool(False),
    minMVAPflow = cms.double(-0.4),
    maxSigmaIetaIetaEndcapsPflow = cms.double(999999999.0),
    hOverEConeSizePflow = cms.double(0.15),
    recHitSeverityToBeExcludedEndcaps = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    minSCEtEndcaps = cms.double(4.0),
    ambSortingStrategy = cms.uint32(1),
    etMinHcal = cms.double(0.0),
    maxFbremEndcaps = cms.double(999999999.0),
    maxEOverPEndcapsPflow = cms.double(999999999.0),
    pfMvaTag = cms.InputTag(""),
    pflowGsfElectronsTag = cms.InputTag(""),
    maxHBarrel = cms.double(0.0),
    intRadiusEcalBarrel = cms.double(3.0),
    recHitFlagsToBeExcludedEndcaps = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    minEOverPEndcapsPflow = cms.double(0.0),
    eMinEndcaps = cms.double(0.0),
    maxDeltaEtaEndcapsPflow = cms.double(999999999.0),
    useNumCrystals = cms.bool(True),
    addPflowElectrons = cms.bool(True),
    ctfTracksCheck = cms.bool(True),
    pureTrackerDrivenEcalErrorFromSimpleParameterization = cms.bool(True),
    maxFbremEndcapsPflow = cms.double(999999999.0),
    crackCorrectionFunction = cms.string('EcalClusterCrackCorrection'),
    stripEndcapTk = cms.double(0.015),
    isEndcaps = cms.bool(False),
    seedFromTEC = cms.bool(True),
    maxEOverPBarrel = cms.double(999999999.0),
    maxSigmaIetaIetaBarrelPflow = cms.double(999999999.0),
    hOverEConeSize = cms.double(0.15),
    maxDrbTk = cms.double(999999999.0),
    ecalDrivenEcalEnergyFromClassBasedParameterization = cms.bool(True),
    minSCEtBarrelPflow = cms.double(0.0),
    maxDeltaEtaBarrelPflow = cms.double(999999999.0),
    maxTIPPflow = cms.double(999999999.0),
    minMvaByPassForIsolatedPflow = cms.double(-0.4),
    vetoClustered = cms.bool(False),
    hcalTowers = cms.InputTag("towerMaker"),
    etMinBarrel = cms.double(0.0),
    intRadiusHcal = cms.double(0.15),
    maxHOverEBarrel = cms.double(0.15),
    maxHOverEEndcaps = cms.double(0.15),
    isBarrel = cms.bool(False),
    isFiducialPflow = cms.bool(False),
    isBarrelPflow = cms.bool(False),
    minSCEtEndcapsPflow = cms.double(0.0),
    previousGsfElectronsTag = cms.InputTag(""),
    stripBarrelTk = cms.double(0.015),
    maxHEndcapsPflow = cms.double(0.0),
    maxHOverEEndcapsPflow = cms.double(999999999.0),
    maxDeltaEtaBarrel = cms.double(0.02),
    ambClustersOverlapStrategy = cms.uint32(1),
    maxFbremBarrelPflow = cms.double(999999999.0),
    maxTIP = cms.double(999999999.0),
    maxDeltaPhiBarrelPflow = cms.double(999999999.0),
    ptMinTk = cms.double(0.7),
    intRadiusEcalEndcaps = cms.double(3.0),
    minEOverPEndcaps = cms.double(0.0),
    maxEOverPEndcaps = cms.double(999999999.0),
    maxHOverEBarrelPflow = cms.double(999999999.0),
    maxEOverPBarrelPflow = cms.double(999999999.0),
    maxSigmaIetaIetaEndcaps = cms.double(999999999.0),
    jurassicWidth = cms.double(1.5),
    minMvaByPassForIsolated = cms.double(-0.4),
    barrelRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    maxSigmaIetaIetaBarrel = cms.double(999999999.0),
    maxDeltaPhiEndcaps = cms.double(0.15),
    intRadiusEndcapTk = cms.double(0.015),
    applyPreselection = cms.bool(False),
    isEndcapsPflow = cms.bool(False),
    minMVA = cms.double(-0.4),
    useGsfPfRecTracks = cms.bool(True),
    gsfElectronCoresTag = cms.InputTag("ecalDrivenGsfElectronCores"),
    superClusterErrorFunction = cms.string('EcalClusterEnergyUncertaintyObjectSpecific'),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    seedsTag = cms.InputTag("ecalDrivenElectronSeeds"),
    maxDeltaPhiBarrel = cms.double(0.15),
    maxDeltaPhiEndcapsPflow = cms.double(999999999.0),
    hOverEPtMinPflow = cms.double(0.0),
    recHitFlagsToBeExcludedBarrel = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    intRadiusBarrelTk = cms.double(0.015)
)


process.ecalGlobalUncalibRecHit = cms.EDProducer("EcalUncalibRecHitProducer",
    outOfTimeThresholdGain61pEB = cms.double(5),
    eePulseShape = cms.vdouble(5.2e-05, -5.26e-05, 6.66e-05, 0.1168, 0.7575, 
        1.0, 0.8876, 0.6732, 0.4741, 0.3194),
    amplitudeThresholdEE = cms.double(10),
    EBtimeFitParameters = cms.vdouble(-2.015452, 3.130702, -12.3473, 41.88921, -82.83944, 
        91.01147, -50.35761, 11.05621),
    EEhitCollection = cms.string('EcalUncalibRecHitsEE'),
    EEdigiCollection = cms.InputTag("ecalDigis","eeDigis"),
    EEtimeNconst = cms.double(31.8),
    EBtimeConstantTerm = cms.double(0.6),
    outOfTimeThresholdGain61pEE = cms.double(10),
    doEBtimeCorrection = cms.bool(False),
    EEamplitudeFitParameters = cms.vdouble(1.89, 1.4),
    EBtimeNconst = cms.double(28.5),
    kPoorRecoFlagEB = cms.bool(True),
    ebPulseShape = cms.vdouble(5.2e-05, -5.26e-05, 6.66e-05, 0.1168, 0.7575, 
        1.0, 0.8876, 0.6732, 0.4741, 0.3194),
    EBtimeFitLimits_Lower = cms.double(0.2),
    kPoorRecoFlagEE = cms.bool(False),
    chi2ThreshEB_ = cms.double(36.0),
    EBdigiCollection = cms.InputTag("ecalDigis","ebDigis"),
    EEtimeFitParameters = cms.vdouble(-2.390548, 3.553628, -17.62341, 67.67538, -133.213, 
        140.7432, -75.41106, 16.20277),
    algo = cms.string('EcalUncalibRecHitWorkerGlobal'),
    EEchi2Parameters = cms.vdouble(2.122, 0.022, 2.122, 0.022),
    EEtimeCorrShiftBins = cms.vdouble(-0.896, -0.896, -0.896, -0.896, -0.563, 
        -0.392, -0.287, -0.203, -0.135, -0.1, 
        -0.068, -0.05, -0.06, -0.052, -0.055, 
        -0.05, -0.052, -0.056, -0.055, -0.056, 
        -0.048, -0.037, -0.038, -0.037, -0.025, 
        -0.026, -0.024, -0.013, -0.003, 0.005, 
        0.02, 0.026, 0.008, 0.007, -0.006, 
        0.024, 0.045, 0.062, 0.085, 0.088, 
        0.111, 0.139, 0.156, 0.176, 0.21, 
        0.242, 0.267, 0.301, 0.318, 0.278, 
        0.287, 0.218, 0.305, 0.245, 0.184, 
        -0.159, -0.095, 0.037),
    outOfTimeThresholdGain12mEE = cms.double(10),
    outOfTimeThresholdGain12mEB = cms.double(5),
    EEtimeFitLimits_Upper = cms.double(1.4),
    EEtimeFitLimits_Lower = cms.double(0.2),
    ebSpikeThreshold = cms.double(1.042),
    EBamplitudeFitParameters = cms.vdouble(1.138, 1.652),
    EEtimeCorrAmplitudeBins = cms.vdouble(15.7, 17.6, 19.7, 22.1, 24.8, 
        27.9, 31.3, 35.1, 39.4, 44.2, 
        49.6, 55.6, 62.4, 70, 78.6, 
        88.1, 98.9, 111, 124.5, 139.7, 
        156.7, 175.9, 197.3, 221.4, 248.4, 
        278.7, 312.7, 350.9, 393.7, 441.7, 
        495.6, 556.1, 624, 700.1, 785.5, 
        881.4, 988.9, 1109.6, 1245, 1396.9, 
        1567.3, 1758.6, 1973.1, 2213.9, 2484, 
        2787.1, 3127.2, 3508.8, 3936.9, 4417.3, 
        4956.3, 5561.1, 6239.6, 7001, 7522.8, 
        8440.7, 9470.6, 10626),
    doEEtimeCorrection = cms.bool(False),
    amplitudeThresholdEB = cms.double(10),
    outOfTimeThresholdGain12pEE = cms.double(10),
    outOfTimeThresholdGain12pEB = cms.double(5),
    EBtimeCorrAmplitudeBins = cms.vdouble(7.9, 8.9, 10, 11.2, 12.5, 
        14.1, 15.8, 17.7, 19.9, 22.3, 
        25, 28.1, 31.5, 35.3, 39.7, 
        44.5, 49.9, 56, 62.8, 70.5, 
        79.1, 88.8, 99.6, 111.7, 125.4, 
        140.7, 157.9, 177.1, 198.7, 223, 
        250.2, 280.7, 315, 353.4, 396.5, 
        444.9, 499.2, 560.1, 628.4, 705.1, 
        791.1, 887.7, 996, 1117.5, 1253.9, 
        1406.8, 1578.5, 1771.1, 1987.2, 2229.7, 
        2501.8, 2807, 3149.5, 3533.8, 3895.9, 
        3896, 4311.8, 4837.9, 5428.2, 6090.6, 
        6833.7, 7667.5, 8603.1, 9652.9, 10830, 
        12152, 13635, 15298, 17165, 19260, 
        21610),
    EBtimeCorrShiftBins = cms.vdouble(-1.77, -1.77, -1.77, -1.77, -1.666, 
        -1.43, -1.233, -1.012, -0.866, -0.736, 
        -0.64, -0.561, -0.505, -0.452, -0.405, 
        -0.363, -0.335, -0.305, -0.279, -0.26, 
        -0.239, -0.22, -0.204, -0.191, -0.186, 
        -0.177, -0.158, -0.137, -0.126, -0.115, 
        -0.104, -0.096, -0.085, -0.064, -0.056, 
        -0.036, -0.02, -0.006, -0.02, -0.009, 
        -0.02, 0.005, 0.053, 0.076, 0.093, 
        0.137, 0.143, 0.171, 0.222, 0.229, 
        0.271, 0.298, 0.312, 0.307, 0.254, 
        -0.997, -0.859, -0.819, -0.775, -0.589, 
        -0.428, -0.288, -0.434, -0.277, -0.21, 
        -0.179, -0.134, 0.362, 0.152, -0.282, 
        -0.382),
    outOfTimeThresholdGain61mEB = cms.double(5),
    EBhitCollection = cms.string('EcalUncalibRecHitsEB'),
    outOfTimeThresholdGain61mEE = cms.double(10),
    EEtimeConstantTerm = cms.double(1.0),
    EBchi2Parameters = cms.vdouble(2.122, 0.022, 2.122, 0.022),
    chi2ThreshEE_ = cms.double(95.0),
    EBtimeFitLimits_Upper = cms.double(1.4)
)


process.ecalPreshowerDigis = cms.EDProducer("ESRawToDigi",
    sourceTag = cms.InputTag("rawDataCollector"),
    debugMode = cms.untracked.bool(False),
    InstanceES = cms.string(''),
    LookupTable = cms.FileInPath('EventFilter/ESDigiToRaw/data/ES_lookup_table.dat'),
    ESdigiCollection = cms.string('')
)


process.ecalPreshowerRecHit = cms.EDProducer("ESRecHitProducer",
    ESRecoAlgo = cms.int32(0),
    ESrechitCollection = cms.string('EcalRecHitsES'),
    algo = cms.string('ESRecHitWorker'),
    ESdigiCollection = cms.InputTag("ecalPreshowerDigis")
)


process.ecalRecHit = cms.EDProducer("EcalRecHitProducer",
    recoverEEVFE = cms.bool(False),
    EErechitCollection = cms.string('EcalRecHitsEE'),
    recoverEBIsolatedChannels = cms.bool(False),
    recoverEBVFE = cms.bool(False),
    laserCorrection = cms.bool(True),
    EBLaserMIN = cms.double(0.5),
    killDeadChannels = cms.bool(True),
    dbStatusToBeExcludedEB = cms.vint32(14, 78, 142),
    EEuncalibRecHitCollection = cms.InputTag("ecalGlobalUncalibRecHit","EcalUncalibRecHitsEE"),
    dbStatusToBeExcludedEE = cms.vint32(14, 78, 142),
    EELaserMIN = cms.double(0.5),
    ebFEToBeRecovered = cms.InputTag("ecalDetIdToBeRecovered","ebFE"),
    cleaningConfig = cms.PSet(
        e6e2thresh = cms.double(0.04),
        tightenCrack_e6e2_double = cms.double(3),
        tightenCrack_e4e1_single = cms.double(3),
        cThreshold_barrel = cms.double(4),
        e4e1Threshold_barrel = cms.double(0.08),
        tightenCrack_e1_single = cms.double(2),
        e4e1_b_barrel = cms.double(-0.024),
        e4e1_a_barrel = cms.double(0.04),
        cThreshold_double = cms.double(10),
        ignoreOutOfTimeThresh = cms.double(1000000000.0),
        cThreshold_endcap = cms.double(15),
        e4e1_a_endcap = cms.double(0.02),
        e4e1_b_endcap = cms.double(-0.0125),
        e4e1Threshold_endcap = cms.double(0.3),
        tightenCrack_e1_double = cms.double(2)
    ),
    logWarningEtThreshold_EE_FE = cms.double(50),
    eeDetIdToBeRecovered = cms.InputTag("ecalDetIdToBeRecovered","eeDetId"),
    recoverEBFE = cms.bool(True),
    algo = cms.string('EcalRecHitWorkerSimple'),
    ebDetIdToBeRecovered = cms.InputTag("ecalDetIdToBeRecovered","ebDetId"),
    singleChannelRecoveryThreshold = cms.double(8),
    ChannelStatusToBeExcluded = cms.vint32(3, 4, 8, 9, 10, 
        11, 12, 13, 14),
    EBrechitCollection = cms.string('EcalRecHitsEB'),
    singleChannelRecoveryMethod = cms.string('NeuralNetworks'),
    recoverEEFE = cms.bool(True),
    triggerPrimitiveDigiCollection = cms.InputTag("ecalDigis","EcalTriggerPrimitives"),
    EBLaserMAX = cms.double(3.0),
    flagsMapDBReco = cms.vint32(0, 0, 0, 0, 4, 
        -1, -1, -1, 4, 4, 
        7, 7, 7, 8, 9),
    EBuncalibRecHitCollection = cms.InputTag("ecalGlobalUncalibRecHit","EcalUncalibRecHitsEB"),
    algoRecover = cms.string('EcalRecHitWorkerRecover'),
    eeFEToBeRecovered = cms.InputTag("ecalDetIdToBeRecovered","eeFE"),
    EELaserMAX = cms.double(8.0),
    logWarningEtThreshold_EB_FE = cms.double(50),
    recoverEEIsolatedChannels = cms.bool(False)
)


process.ecalTPSkim = cms.EDProducer("EcalTPSkimmer",
    doEndcap = cms.bool(True),
    tpOutputCollection = cms.string(''),
    tpInputCollection = cms.InputTag("ecalDigis","EcalTriggerPrimitives"),
    skipModule = cms.bool(False),
    chStatusToSelectTP = cms.vuint32(13),
    doBarrel = cms.bool(True)
)


process.egammaCTFFinalFitWithMaterial = cms.EDProducer("TrackProducer",
    src = cms.InputTag("siStripElectrons"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('KFFittingSmoother'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    GeometricInnerState = cms.bool(False),
    alias = cms.untracked.string('egammaCTFWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(False),
    TTRHBuilder = cms.string('WithTrackAngle'),
    AlgorithmName = cms.string('undefAlgorithm'),
    Propagator = cms.string('PropagatorWithMaterial')
)


process.eidCutBasedExt = cms.EDProducer("EleIdCutBasedExtProducer",
    electronQuality = cms.string('loose'),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628),
        cutmishits = cms.vdouble(5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043),
        cutdeta = cms.vdouble(0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128),
        cuteopin = cms.vdouble(0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09),
        cutip = cms.vdouble(0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9),
        cutisotk = cms.vdouble(6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347),
        cutsee = cms.vdouble(0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333),
        cutdphi = cms.vdouble(0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358),
        cutisoecal = cms.vdouble(20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4)
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092),
        hOverE = cms.vdouble(0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0),
        sigmaEtaEta = cms.vdouble(0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0),
        deltaEtaIn = cms.vdouble(0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0),
        eSeedOverPin = cms.vdouble(0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0)
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167),
        hOverE = cms.vdouble(0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0),
        sigmaEtaEta = cms.vdouble(0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0),
        deltaEtaIn = cms.vdouble(0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0),
        eSeedOverPin = cms.vdouble(0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0)
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    electronIDType = cms.string('robust'),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    electronVersion = cms.string(''),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS"),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092),
        hOverE = cms.vdouble(0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0),
        sigmaEtaEta = cms.vdouble(0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0),
        deltaEtaIn = cms.vdouble(0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0),
        eSeedOverPin = cms.vdouble(0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0)
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08),
        hOverE = cms.vdouble(0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0),
        sigmaEtaEta = cms.vdouble(0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0),
        deltaEtaIn = cms.vdouble(0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0),
        eSeedOverPin = cms.vdouble(0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0)
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288),
        cutmishits = cms.vdouble(5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131),
        cutdeta = cms.vdouble(0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127),
        cuteopin = cms.vdouble(0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789),
        cutip = cms.vdouble(0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89),
        cutisotk = cms.vdouble(24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0),
        cutsee = cms.vdouble(0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327),
        cutdphi = cms.vdouble(0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515),
        cutisoecal = cms.vdouble(33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7)
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    src = cms.InputTag("gsfElectrons"),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    algorithm = cms.string('eIDCB'),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    additionalCategories = cms.bool(True),
    etBinning = cms.bool(True)
)


process.eidLoose = cms.EDProducer("EleIdCutBasedExtProducer",
    electronQuality = cms.string('loose'),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628),
        cutmishits = cms.vdouble(5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043),
        cutdeta = cms.vdouble(0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128),
        cuteopin = cms.vdouble(0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09),
        cutip = cms.vdouble(0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9),
        cutisotk = cms.vdouble(6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347),
        cutsee = cms.vdouble(0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333),
        cutdphi = cms.vdouble(0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358),
        cutisoecal = cms.vdouble(20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4)
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092),
        hOverE = cms.vdouble(0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0),
        sigmaEtaEta = cms.vdouble(0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0),
        deltaEtaIn = cms.vdouble(0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0),
        eSeedOverPin = cms.vdouble(0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0)
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167),
        hOverE = cms.vdouble(0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0),
        sigmaEtaEta = cms.vdouble(0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0),
        deltaEtaIn = cms.vdouble(0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0),
        eSeedOverPin = cms.vdouble(0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0)
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    electronIDType = cms.string('classbased'),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    electronVersion = cms.string(''),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS"),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092),
        hOverE = cms.vdouble(0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0),
        sigmaEtaEta = cms.vdouble(0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0),
        deltaEtaIn = cms.vdouble(0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0),
        eSeedOverPin = cms.vdouble(0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0)
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08),
        hOverE = cms.vdouble(0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0),
        sigmaEtaEta = cms.vdouble(0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0),
        deltaEtaIn = cms.vdouble(0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0),
        eSeedOverPin = cms.vdouble(0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0)
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288),
        cutmishits = cms.vdouble(5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131),
        cutdeta = cms.vdouble(0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127),
        cuteopin = cms.vdouble(0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789),
        cutip = cms.vdouble(0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89),
        cutisotk = cms.vdouble(24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0),
        cutsee = cms.vdouble(0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327),
        cutdphi = cms.vdouble(0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515),
        cutisoecal = cms.vdouble(33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7)
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    src = cms.InputTag("gsfElectrons"),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    algorithm = cms.string('eIDCB'),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    additionalCategories = cms.bool(True),
    etBinning = cms.bool(True)
)


process.eidRobustHighEnergy = cms.EDProducer("EleIdCutBasedExtProducer",
    electronQuality = cms.string('highenergy'),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628),
        cutmishits = cms.vdouble(5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043),
        cutdeta = cms.vdouble(0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128),
        cuteopin = cms.vdouble(0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09),
        cutip = cms.vdouble(0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9),
        cutisotk = cms.vdouble(6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347),
        cutsee = cms.vdouble(0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333),
        cutdphi = cms.vdouble(0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358),
        cutisoecal = cms.vdouble(20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4)
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092),
        hOverE = cms.vdouble(0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0),
        sigmaEtaEta = cms.vdouble(0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0),
        deltaEtaIn = cms.vdouble(0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0),
        eSeedOverPin = cms.vdouble(0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0)
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167),
        hOverE = cms.vdouble(0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0),
        sigmaEtaEta = cms.vdouble(0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0),
        deltaEtaIn = cms.vdouble(0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0),
        eSeedOverPin = cms.vdouble(0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0)
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    electronIDType = cms.string('robust'),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    electronVersion = cms.string(''),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS"),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092),
        hOverE = cms.vdouble(0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0),
        sigmaEtaEta = cms.vdouble(0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0),
        deltaEtaIn = cms.vdouble(0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0),
        eSeedOverPin = cms.vdouble(0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0)
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08),
        hOverE = cms.vdouble(0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0),
        sigmaEtaEta = cms.vdouble(0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0),
        deltaEtaIn = cms.vdouble(0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0),
        eSeedOverPin = cms.vdouble(0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0)
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288),
        cutmishits = cms.vdouble(5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131),
        cutdeta = cms.vdouble(0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127),
        cuteopin = cms.vdouble(0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789),
        cutip = cms.vdouble(0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89),
        cutisotk = cms.vdouble(24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0),
        cutsee = cms.vdouble(0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327),
        cutdphi = cms.vdouble(0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515),
        cutisoecal = cms.vdouble(33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7)
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    src = cms.InputTag("gsfElectrons"),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    algorithm = cms.string('eIDCB'),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    additionalCategories = cms.bool(True),
    etBinning = cms.bool(True)
)


process.eidRobustLoose = cms.EDProducer("EleIdCutBasedExtProducer",
    electronQuality = cms.string('loose'),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628),
        cutmishits = cms.vdouble(5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043),
        cutdeta = cms.vdouble(0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128),
        cuteopin = cms.vdouble(0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09),
        cutip = cms.vdouble(0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9),
        cutisotk = cms.vdouble(6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347),
        cutsee = cms.vdouble(0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333),
        cutdphi = cms.vdouble(0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358),
        cutisoecal = cms.vdouble(20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4)
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092),
        hOverE = cms.vdouble(0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0),
        sigmaEtaEta = cms.vdouble(0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0),
        deltaEtaIn = cms.vdouble(0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0),
        eSeedOverPin = cms.vdouble(0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0)
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167),
        hOverE = cms.vdouble(0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0),
        sigmaEtaEta = cms.vdouble(0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0),
        deltaEtaIn = cms.vdouble(0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0),
        eSeedOverPin = cms.vdouble(0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0)
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    electronIDType = cms.string('robust'),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    electronVersion = cms.string(''),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS"),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092),
        hOverE = cms.vdouble(0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0),
        sigmaEtaEta = cms.vdouble(0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0),
        deltaEtaIn = cms.vdouble(0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0),
        eSeedOverPin = cms.vdouble(0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0)
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08),
        hOverE = cms.vdouble(0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0),
        sigmaEtaEta = cms.vdouble(0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0),
        deltaEtaIn = cms.vdouble(0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0),
        eSeedOverPin = cms.vdouble(0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0)
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288),
        cutmishits = cms.vdouble(5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131),
        cutdeta = cms.vdouble(0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127),
        cuteopin = cms.vdouble(0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789),
        cutip = cms.vdouble(0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89),
        cutisotk = cms.vdouble(24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0),
        cutsee = cms.vdouble(0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327),
        cutdphi = cms.vdouble(0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515),
        cutisoecal = cms.vdouble(33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7)
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    src = cms.InputTag("gsfElectrons"),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    algorithm = cms.string('eIDCB'),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    additionalCategories = cms.bool(True),
    etBinning = cms.bool(True)
)


process.eidRobustTight = cms.EDProducer("EleIdCutBasedExtProducer",
    electronQuality = cms.string('tight'),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628),
        cutmishits = cms.vdouble(5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043),
        cutdeta = cms.vdouble(0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128),
        cuteopin = cms.vdouble(0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09),
        cutip = cms.vdouble(0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9),
        cutisotk = cms.vdouble(6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347),
        cutsee = cms.vdouble(0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333),
        cutdphi = cms.vdouble(0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358),
        cutisoecal = cms.vdouble(20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4)
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092),
        hOverE = cms.vdouble(0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0),
        sigmaEtaEta = cms.vdouble(0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0),
        deltaEtaIn = cms.vdouble(0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0),
        eSeedOverPin = cms.vdouble(0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0)
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167),
        hOverE = cms.vdouble(0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0),
        sigmaEtaEta = cms.vdouble(0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0),
        deltaEtaIn = cms.vdouble(0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0),
        eSeedOverPin = cms.vdouble(0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0)
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    electronIDType = cms.string('robust'),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    electronVersion = cms.string(''),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS"),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092),
        hOverE = cms.vdouble(0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0),
        sigmaEtaEta = cms.vdouble(0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0),
        deltaEtaIn = cms.vdouble(0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0),
        eSeedOverPin = cms.vdouble(0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0)
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08),
        hOverE = cms.vdouble(0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0),
        sigmaEtaEta = cms.vdouble(0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0),
        deltaEtaIn = cms.vdouble(0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0),
        eSeedOverPin = cms.vdouble(0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0)
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288),
        cutmishits = cms.vdouble(5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131),
        cutdeta = cms.vdouble(0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127),
        cuteopin = cms.vdouble(0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789),
        cutip = cms.vdouble(0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89),
        cutisotk = cms.vdouble(24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0),
        cutsee = cms.vdouble(0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327),
        cutdphi = cms.vdouble(0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515),
        cutisoecal = cms.vdouble(33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7)
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    src = cms.InputTag("gsfElectrons"),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    algorithm = cms.string('eIDCB'),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    additionalCategories = cms.bool(True),
    etBinning = cms.bool(True)
)


process.eidTight = cms.EDProducer("EleIdCutBasedExtProducer",
    electronQuality = cms.string('tight'),
    classbasedtightEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(10.9, 7.01, 8.75, 3.51, 7.75, 
            1.62, 11.6, 9.9, 4.97, 5.33, 
            3.18, 2.32, 0.164, 5.46, 12.0, 
            0.00604, 4.1, 0.000628),
        cutmishits = cms.vdouble(5.5, 1.5, 0.5, 1.5, 2.5, 
            0.5, 3.5, 5.5, 0.5, 0.5, 
            0.5, 0.5, 0.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0871, 0.0289, 0.0783, 0.0946, 0.0245, 
            0.0363, 0.0671, 0.048, 0.0614, 0.0924, 
            0.0158, 0.049, 0.0382, 0.0915, 0.0451, 
            0.0452, 0.00196, 0.0043),
        cutdeta = cms.vdouble(0.00915, 0.00302, 0.0061, 0.0135, 0.00565, 
            0.00793, 0.0102, 0.00266, 0.0106, 0.00903, 
            0.00766, 0.00723, 0.0116, 0.00203, 0.00659, 
            0.0148, 0.00555, 0.0128),
        cuteopin = cms.vdouble(0.878, 0.859, 0.874, 0.944, 0.737, 
            0.773, 0.86, 0.967, 0.917, 0.812, 
            0.915, 1.01, 0.847, 0.953, 0.979, 
            0.841, 0.771, 1.09),
        cutip = cms.vdouble(0.0239, 0.027, 0.0768, 0.0231, 0.178, 
            0.0957, 0.0102, 0.0168, 0.043, 0.0166, 
            0.0594, 0.0308, 2.1, 0.00527, 3.17, 
            4.91, 0.769, 5.9),
        cutisotk = cms.vdouble(6.53, 4.6, 6.0, 8.63, 3.11, 
            7.77, 5.42, 4.81, 4.06, 6.47, 
            2.8, 3.45, 5.29, 5.18, 15.4, 
            5.38, 4.47, 0.0347),
        cutsee = cms.vdouble(0.0131, 0.0106, 0.0115, 0.0306, 0.028, 
            0.0293, 0.0131, 0.0106, 0.0115, 0.0317, 
            0.029, 0.0289, 0.0142, 0.0106, 0.0103, 
            0.035, 0.0296, 0.0333),
        cutdphi = cms.vdouble(0.0369, 0.0307, 0.117, 0.0475, 0.0216, 
            0.117, 0.0372, 0.0246, 0.0426, 0.0612, 
            0.0142, 0.039, 0.0737, 0.0566, 0.0359, 
            0.0187, 0.012, 0.0358),
        cutisoecal = cms.vdouble(20.0, 27.2, 4.48, 13.5, 4.56, 
            3.19, 12.2, 13.1, 7.42, 7.67, 
            4.12, 4.85, 10.1, 12.4, 11.1, 
            11.0, 10.6, 13.4)
    ),
    classbasedtightEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    classbasedtightEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.032, 0.016, 0.0525, 0.09, 0.025, 
            0.035, 0.065, 0.092),
        hOverE = cms.vdouble(0.05, 0.042, 0.045, 0.0, 0.055, 
            0.037, 0.05, 0.0),
        sigmaEtaEta = cms.vdouble(0.0125, 0.011, 0.01, 0.0, 0.0265, 
            0.0252, 0.026, 0.0),
        deltaEtaIn = cms.vdouble(0.0055, 0.003, 0.0065, 0.0, 0.006, 
            0.0055, 0.0075, 0.0),
        eSeedOverPin = cms.vdouble(0.24, 0.94, 0.11, 0.0, 0.32, 
            0.83, 0.0, 0.0)
    ),
    classbasedtightEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.0225, 0.0114, 0.0234, 0.039, 0.0215, 
            0.0095, 0.0148, 0.0167),
        hOverE = cms.vdouble(0.056, 0.0221, 0.037, 0.0, 0.0268, 
            0.0102, 0.0104, 0.0),
        sigmaEtaEta = cms.vdouble(0.0095, 0.0094, 0.0094, 0.0, 0.026, 
            0.0257, 0.0246, 0.0),
        deltaEtaIn = cms.vdouble(0.0043, 0.00282, 0.0036, 0.0, 0.0066, 
            0.0049, 0.0041, 0.0),
        eSeedOverPin = cms.vdouble(0.32, 0.94, 0.221, 0.0, 0.74, 
            0.89, 0.66, 0.0)
    ),
    classbasedtightEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    classbasedtightEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00811, 0.00341, 0.00633, 0.0103, 0.00667, 
            0.01, 0.0106, 0.0145, 0.0163, 0.0076, 
            0.00259, 0.00511, 0.00941, 0.0043, 0.00857, 
            0.012, 0.0169, 0.00172, 0.00861, 0.00362, 
            0.00601, 0.00925, 0.00489, 0.00832, 0.0119, 
            0.0169, 0.000996),
        cutiso_sum = cms.vdouble(11.8, 8.31, 6.26, 6.18, 3.28, 
            4.38, 4.17, 5.4, 1.57, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0213, 0.0422, 0.0632, 0.0361, 0.073, 
            0.126, 0.171, 0.119, 0.0372, 0.0131, 
            0.0146, 0.0564, 0.0152, 0.0222, 0.0268, 
            0.0314, 0.0884, 0.00374, 0.00852, 0.00761, 
            0.0143, 0.0106, 0.0127, 0.0119, 0.0123, 
            0.0235, 0.00363),
        cuthoe = cms.vdouble(0.0783, 0.0387, 0.105, 0.118, 0.0227, 
            0.062, 0.13, 2.47, 0.38, 0.0888, 
            0.0503, 0.0955, 0.0741, 0.015, 0.03, 
            0.589, 1.13, 0.612, 0.0494, 0.0461, 
            0.0292, 0.0369, 0.0113, 0.0145, 0.124, 
            2.05, 0.61),
        cutfmishits = cms.vdouble(2.5, 1.5, 1.5, 1.5, 1.5, 
            0.5, 2.5, 0.5, 0.5, 2.5, 
            1.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5, -0.5, 2.5, 1.5, 
            0.5, 0.5, 0.5, 0.5, 0.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(13.7, 11.6, 7.14, 9.98, 3.52, 
            4.87, 6.24, 7.96, 2.53, 11.2, 
            11.9, 7.88, 8.16, 5.58, 5.03, 
            11.4, 8.15, 5.79, 10.4, 11.1, 
            10.4, 7.47, 5.08, 5.9, 11.8, 
            14.1, 11.7),
        cutdcotdist = cms.vdouble(0.0393, 0.0256, 0.00691, 0.0394, 0.0386, 
            0.039, 0.0325, 0.0384, 0.0382, 0.0245, 
            0.000281, 5.46e-05, 0.0342, 0.0232, 0.00107, 
            0.0178, 0.0193, 0.000758, 0.000108, 0.0248, 
            0.000458, 0.0129, 0.00119, 0.0182, 4.53e-05, 
            0.0189, 0.000928),
        cutsee = cms.vdouble(0.0143, 0.0105, 0.0123, 0.0324, 0.0307, 
            0.0301, 0.0109, 0.027, 0.0292, 0.0133, 
            0.0104, 0.0116, 0.0332, 0.0296, 0.031, 
            0.00981, 0.0307, 0.072, 0.0149, 0.0105, 
            0.011, 0.0342, 0.0307, 0.0303, 0.00954, 
            0.0265, 0.0101),
        cuteseedopcor = cms.vdouble(0.784, 0.366, 0.57, 0.911, 0.298, 
            0.645, 0.51, 0.497, 0.932, 0.835, 
            0.968, 0.969, 0.923, 0.898, 0.98, 
            0.63, 0.971, 1.0, 0.515, 0.963, 
            0.986, 0.823, 0.879, 1.01, 0.931, 
            0.937, 1.05),
        cutdphiin = cms.vdouble(0.0404, 0.0499, 0.263, 0.042, 0.0484, 
            0.241, 0.242, 0.231, 0.286, 0.0552, 
            0.0338, 0.154, 0.0623, 0.0183, 0.0392, 
            0.0547, 0.0588, 0.00654, 0.042, 0.0217, 
            0.0885, 0.0445, 0.0141, 0.0234, 0.065, 
            0.0258, 0.0346),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 13.7, 13.2, 
            13.6, 14.2, 14.1, 13.9, 12.9, 
            14.9, 17.7)
    ),
    electronIDType = cms.string('classbased'),
    robusttightEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    electronVersion = cms.string(''),
    robusttightEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.015, 0.0092, 0.02, 0.0025, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.018, 0.025, 0.02, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusttightEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.01, 0.0099, 0.025, 0.004, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.01, 0.028, 0.02, 0.0066, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedBarrelRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    robusttightEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    reducedEndcapRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    verticesCollection = cms.InputTag("offlinePrimaryVerticesWithBS"),
    classbasedlooseEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    robusttightEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.011, 0.09, 0.005, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.1, 0.0275, 0.09, 0.007, -1, 
            -1, 9999.0, 9999.0, 0, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robusthighenergyEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedlooseEleIDCutsV00 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.05, 0.025, 0.053, 0.09, 0.07, 
            0.03, 0.092, 0.092),
        hOverE = cms.vdouble(0.115, 0.1, 0.055, 0.0, 0.145, 
            0.12, 0.15, 0.0),
        sigmaEtaEta = cms.vdouble(0.014, 0.012, 0.0115, 0.0, 0.0275, 
            0.0265, 0.0265, 0.0),
        deltaEtaIn = cms.vdouble(0.009, 0.0045, 0.0085, 0.0, 0.0105, 
            0.0068, 0.01, 0.0),
        eSeedOverPin = cms.vdouble(0.11, 0.91, 0.11, 0.0, 0.0, 
            0.85, 0.0, 0.0)
    ),
    classbasedlooseEleIDCutsV01 = cms.PSet(
        deltaPhiIn = cms.vdouble(0.053, 0.0189, 0.059, 0.099, 0.0278, 
            0.0157, 0.042, 0.08),
        hOverE = cms.vdouble(0.076, 0.033, 0.07, 0.0, 0.083, 
            0.0148, 0.033, 0.0),
        sigmaEtaEta = cms.vdouble(0.0101, 0.0095, 0.0097, 0.0, 0.0271, 
            0.0267, 0.0259, 0.0),
        deltaEtaIn = cms.vdouble(0.0078, 0.00259, 0.0062, 0.0, 0.0078, 
            0.0061, 0.0061, 0.0),
        eSeedOverPin = cms.vdouble(0.3, 0.92, 0.211, 0.0, 0.42, 
            0.88, 0.68, 0.0)
    ),
    classbasedlooseEleIDCutsV02 = cms.PSet(
        cutisohcal = cms.vdouble(13.5, 9.93, 7.56, 14.8, 8.1, 
            10.8, 42.7, 20.1, 9.11, 10.4, 
            6.89, 5.59, 8.53, 9.59, 24.2, 
            2.78, 8.67, 0.288),
        cutmishits = cms.vdouble(5.5, 1.5, 5.5, 2.5, 2.5, 
            2.5, 3.5, 5.5, 0.5, 1.5, 
            2.5, 0.5, 1.5, 1.5, 0.5, 
            0.5, 0.5, 0.5),
        cuthoe = cms.vdouble(0.0887, 0.0934, 0.0949, 0.0986, 0.0431, 
            0.0878, 0.097, 0.0509, 0.098, 0.0991, 
            0.0321, 0.0928, 0.0663, 0.0717, 0.0966, 
            0.0758, 0.0149, 0.0131),
        cutdeta = cms.vdouble(0.00958, 0.00406, 0.0122, 0.0137, 0.00837, 
            0.0127, 0.011, 0.00336, 0.00977, 0.015, 
            0.00675, 0.0109, 0.014, 0.00508, 0.0109, 
            0.0146, 0.00506, 0.0127),
        cuteopin = cms.vdouble(0.878, 0.802, 0.814, 0.942, 0.735, 
            0.774, 0.829, 0.909, 0.829, 0.813, 
            0.86, 0.897, 0.817, 0.831, 0.818, 
            0.861, 0.787, 0.789),
        cutip = cms.vdouble(0.0246, 0.076, 0.0966, 0.0885, 0.441, 
            0.205, 0.0292, 0.0293, 0.0619, 0.0251, 
            0.159, 0.0815, 7.29, 0.0106, 5.76, 
            6.89, 1.27, 5.89),
        cutisotk = cms.vdouble(24.3, 8.45, 14.4, 27.8, 6.02, 
            10.5, 14.1, 10.2, 14.5, 19.1, 
            6.1, 14.1, 8.59, 8.33, 8.3, 
            8.93, 8.6, 16.0),
        cutsee = cms.vdouble(0.0172, 0.0115, 0.0143, 0.0344, 0.0295, 
            0.0304, 0.0145, 0.0108, 0.0128, 0.0347, 
            0.0307, 0.0316, 0.018, 0.011, 0.0132, 
            0.0349, 0.031, 0.0327),
        cutdphi = cms.vdouble(0.0372, 0.114, 0.118, 0.0488, 0.117, 
            0.119, 0.0606, 0.0548, 0.117, 0.07, 
            0.0355, 0.117, 0.088, 0.045, 0.118, 
            0.0919, 0.0236, 0.0515),
        cutisoecal = cms.vdouble(33.4, 28.1, 7.32, 27.4, 7.33, 
            21.7, 93.8, 102.0, 12.1, 26.0, 
            8.91, 10.0, 16.1, 31.3, 16.9, 
            15.4, 13.3, 37.7)
    ),
    classbasedlooseEleIDCutsV03 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV04 = cms.PSet(
        cutdetain = cms.vdouble(0.00989, 0.00484, 0.0146, 0.0146, 0.00902, 
            0.0172, 0.0137, 0.0477, 0.0275, 0.00967, 
            0.00377, 0.00924, 0.013, 0.00666, 0.0123, 
            0.0125, 0.0228, 0.0112, 0.0106, 0.0038, 
            0.00897, 0.0139, 0.00667, 0.0122, 0.0122, 
            0.0193, 0.00239),
        cutiso_sum = cms.vdouble(31.5, 10.3, 8.8, 11.0, 6.13, 
            6.94, 7.52, 9.0, 3.5, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0, 100000.0, 100000.0, 100000.0, 
            100000.0, 100000.0),
        cutip_gsf = cms.vdouble(0.0431, 0.0767, 0.139, 0.101, 0.149, 
            0.154, 0.932, 0.15, 0.124, 0.0238, 
            0.0467, 0.0759, 0.0369, 0.147, 0.0986, 
            0.0626, 0.195, 0.116, 0.0122, 0.0125, 
            0.0693, 0.0162, 0.089, 0.0673, 0.0467, 
            0.0651, 0.0221),
        cuthoe = cms.vdouble(0.166, 0.0771, 0.144, 0.37, 0.0497, 
            0.139, 0.401, 2.68, 0.516, 0.234, 
            0.0556, 0.144, 0.368, 0.031, 0.12, 
            0.602, 2.01, 1.05, 0.104, 0.063, 
            0.0565, 0.38, 0.0192, 0.0294, 0.537, 
            4.65, 1.87),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 2.5, 2.5, 1.5, 2.5, 
            1.5, 1.5, 1.5, 1.5, 0.5, 
            2.5, 2.5, 0.5, 2.5, 1.5, 
            0.5, 1.5, 1.5, 0.5, 2.5, 
            0.5, 0.5),
        cutiso_sumoet = cms.vdouble(28.9, 15.3, 12.0, 18.3, 7.17, 
            9.42, 11.0, 9.81, 3.94, 22.7, 
            15.9, 12.3, 17.0, 7.58, 8.89, 
            15.2, 12.7, 6.17, 20.8, 21.2, 
            17.2, 15.5, 9.37, 10.6, 19.8, 
            22.1, 15.6),
        cutdcotdist = cms.vdouble(0.0393, 0.0392, 0.0397, 0.0394, 0.0393, 
            0.039, 0.0378, 0.0388, 0.0382, 0.0385, 
            0.0167, 0.00325, 0.0394, 0.0387, 0.0388, 
            0.0227, 0.0258, 0.0127, 0.0298, 0.03, 
            0.00946, 0.039, 0.0231, 0.0278, 0.00162, 
            0.0367, 0.0199),
        cutsee = cms.vdouble(0.0175, 0.0127, 0.0177, 0.0373, 0.0314, 
            0.0329, 0.0157, 0.0409, 0.14, 0.0169, 
            0.0106, 0.0142, 0.0363, 0.0322, 0.0354, 
            0.0117, 0.0372, 28.2, 0.0171, 0.0113, 
            0.014, 0.0403, 0.0323, 0.0411, 0.0104, 
            0.0436, 0.0114),
        cuteseedopcor = cms.vdouble(0.78, 0.302, 0.483, 0.904, 0.168, 
            0.645, 0.108, 0.284, 0.324, 0.591, 
            0.286, 0.488, 0.813, 0.791, 0.672, 
            0.398, 0.834, 0.878, 0.515, 0.937, 
            0.806, 0.816, 0.85, 0.507, 0.367, 
            0.83, 0.648),
        cutdphiin = cms.vdouble(0.041, 0.275, 0.365, 0.047, 0.273, 
            0.296, 0.329, 0.465, 0.627, 0.0581, 
            0.0954, 0.327, 0.0702, 0.0582, 0.279, 
            0.117, 0.318, 0.246, 0.0821, 0.052, 
            0.292, 0.116, 0.0435, 0.312, 0.118, 
            0.296, 0.0459),
        cutet = cms.vdouble(-100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, -100000.0, -100000.0, 
            -100000.0, -100000.0, -100000.0, 12.0, 12.0, 
            12.0, 12.0, 12.0, 12.0, 12.0, 
            12.0, 12.5)
    ),
    classbasedlooseEleIDCutsV06 = cms.PSet(
        cutdetain = cms.vdouble(0.0137, 0.00678, 0.0241, 0.0187, 0.0161, 
            0.0224, 0.0252, 0.0308, 0.0273),
        cutiso_sum = cms.vdouble(33.0, 17.0, 17.9, 18.8, 8.55, 
            12.5, 17.6, 18.5, 2.98),
        cutip_gsf = cms.vdouble(0.0551, 0.0765, 0.143, 0.0874, 0.594, 
            0.37, 0.0913, 1.15, 0.231),
        cutip_gsfl = cms.vdouble(0.0186, 0.0759, 0.138, 0.0473, 0.62, 
            0.304, 0.109, 0.775, 0.0479),
        cuthoe = cms.vdouble(0.247, 0.137, 0.147, 0.371, 0.0588, 
            0.147, 0.52, 0.452, 0.404),
        cutiso_sumoetl = cms.vdouble(11.3, 9.05, 9.07, 9.94, 5.25, 
            6.15, 10.7, 10.8, 4.4),
        cutfmishits = cms.vdouble(4.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 4.5, 3.5, 3.5),
        cuthoel = cms.vdouble(0.236, 0.126, 0.147, 0.375, 0.0392, 
            0.145, 0.365, 0.383, 0.384),
        cutdphiin = cms.vdouble(0.0897, 0.262, 0.353, 0.116, 0.357, 
            0.319, 0.342, 0.404, 0.336),
        cutseel = cms.vdouble(0.0164, 0.0118, 0.015, 0.0523, 0.0326, 
            0.0456, 0.0185, 0.0589, 0.0544),
        cutiso_sumoet = cms.vdouble(34.5, 12.7, 12.1, 19.9, 6.35, 
            8.85, 14.0, 10.5, 9.74),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0176, 0.0125, 0.0181, 0.0415, 0.0364, 
            0.0418, 0.0146, 0.0678, 0.133),
        cuteseedopcor = cms.vdouble(0.63, 0.82, 0.401, 0.718, 0.4, 
            0.458, 0.15, 0.664, 0.373),
        cutdphiinl = cms.vdouble(0.0747, 0.25, 0.356, 0.0956, 0.347, 
            0.326, 0.333, 0.647, 0.289),
        cutdetainl = cms.vdouble(0.0124, 0.00503, 0.0257, 0.0228, 0.0118, 
            0.0178, 0.0188, 0.14, 0.024)
    ),
    src = cms.InputTag("gsfElectrons"),
    robusttightEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.0201, 0.0102, 0.0211, 0.00606, -1, 
            -1, 2.34, 3.24, 4.51, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.00253, 0.0291, 0.022, 0.0032, -1, 
            -1, 0.826, 2.7, 0.255, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    classbasedtightEleIDCuts = cms.PSet(
        cutdetain = cms.vdouble(0.0116, 0.00449, 0.00938, 0.0184, 0.00678, 
            0.0109, 0.0252, 0.0268, 0.0139),
        cutiso_sum = cms.vdouble(15.5, 12.2, 12.2, 11.7, 7.16, 
            9.71, 8.66, 11.9, 2.98),
        cutip_gsf = cms.vdouble(0.0131, 0.0586, 0.0839, 0.0366, 0.452, 
            0.204, 0.0913, 0.0802, 0.0731),
        cutip_gsfl = cms.vdouble(0.0119, 0.0527, 0.0471, 0.0212, 0.233, 
            0.267, 0.109, 0.122, 0.0479),
        cuthoe = cms.vdouble(0.215, 0.0608, 0.147, 0.369, 0.0349, 
            0.102, 0.52, 0.422, 0.404),
        cutiso_sumoetl = cms.vdouble(6.21, 6.81, 5.3, 5.39, 2.73, 
            4.73, 4.84, 3.46, 3.73),
        cutfmishits = cms.vdouble(1.5, 1.5, 1.5, 2.5, 2.5, 
            1.5, 1.5, 2.5, 0.5),
        cuthoel = cms.vdouble(0.228, 0.0836, 0.143, 0.37, 0.0392, 
            0.0979, 0.3, 0.381, 0.339),
        cutdphiin = cms.vdouble(0.0897, 0.0993, 0.295, 0.0979, 0.151, 
            0.252, 0.341, 0.308, 0.328),
        cutseel = cms.vdouble(0.0132, 0.0117, 0.0112, 0.0387, 0.0281, 
            0.0287, 0.00987, 0.0296, 0.0544),
        cutiso_sumoet = cms.vdouble(11.9, 7.81, 6.28, 8.92, 4.65, 
            5.49, 9.36, 8.84, 5.94),
        cutdcotdist = cms.vdouble(9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0),
        cutsee = cms.vdouble(0.0145, 0.0116, 0.012, 0.039, 0.0297, 
            0.0311, 0.00987, 0.0347, 0.0917),
        cuteseedopcor = cms.vdouble(0.637, 0.943, 0.742, 0.748, 0.763, 
            0.631, 0.214, 0.873, 0.473),
        cutdphiinl = cms.vdouble(0.061, 0.14, 0.286, 0.0921, 0.197, 
            0.24, 0.333, 0.303, 0.258),
        cutdetainl = cms.vdouble(0.00816, 0.00401, 0.0081, 0.019, 0.00588, 
            0.00893, 0.0171, 0.0434, 0.0143)
    ),
    algorithm = cms.string('eIDCB'),
    robusthighenergyEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 9999, 0.09, 0.005, 0.94, 
            0.83, 7.5, 2, 0.03, 9999.0, 
            0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.05, 0.03, 0.09, 0.007, -1, 
            -1, 15, 2.5, 0.03, 2.5, 
            0, 0.5, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCuts = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV02 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV03 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV00 = cms.PSet(
        barrel = cms.vdouble(0.115, 0.014, 0.09, 0.009, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.15, 0.0275, 0.092, 0.0105, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV01 = cms.PSet(
        barrel = cms.vdouble(0.075, 0.0132, 0.058, 0.0077, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.083, 0.027, 0.042, 0.01, -1, 
            -1, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    robustlooseEleIDCutsV04 = cms.PSet(
        barrel = cms.vdouble(0.05, 0.0103, 0.8, 0.00688, -1, 
            -1, 7.33, 4.68, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0),
        endcap = cms.vdouble(0.0389, 0.0307, 0.7, 0.00944, -1, 
            -1, 7.76, 3.09, 2.23, 9999.0, 
            9999.0, 9999.0, 9999.0, 9999.0, 9999.0, 
            9999.0, 9999.0, 9999.0, 0.0, -9999.0, 
            9999.0, 9999.0, 9999, -1, 0, 
            0)
    ),
    additionalCategories = cms.bool(True),
    etBinning = cms.bool(True)
)


process.elPFIsoDepositCharged = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedElectrons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedHadrons"),
        DR_Veto = cms.double(0),
        DepositLabel = cms.untracked.string('')
    )
)


process.elPFIsoDepositChargedAll = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedElectrons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedParticles"),
        DR_Veto = cms.double(0),
        DepositLabel = cms.untracked.string('')
    )
)


process.elPFIsoDepositGamma = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedElectrons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        SCMatch_Veto = cms.bool(False),
        ComponentName = cms.string('PFCandWithSuperClusterExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllPhotons"),
        MissHitSCMatch_Veto = cms.bool(True),
        DR_Veto = cms.double(0),
        DepositLabel = cms.untracked.string('')
    )
)


process.elPFIsoDepositNeutral = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedElectrons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllNeutralHadrons"),
        DR_Veto = cms.double(0),
        DepositLabel = cms.untracked.string('')
    )
)


process.elPFIsoDepositPU = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedElectrons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfPileUpAllChargedParticles"),
        DR_Veto = cms.double(0),
        DepositLabel = cms.untracked.string('')
    )
)


process.elPFIsoValueCharged03NoPFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositCharged"),
        deltaR = cms.double(0.3),
        PivotCoordinatesForEBEE = cms.bool(True),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueCharged03PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositCharged"),
        deltaR = cms.double(0.3),
        PivotCoordinatesForEBEE = cms.bool(True),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueCharged04NoPFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositCharged"),
        deltaR = cms.double(0.4),
        PivotCoordinatesForEBEE = cms.bool(True),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueCharged04PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositCharged"),
        deltaR = cms.double(0.4),
        PivotCoordinatesForEBEE = cms.bool(True),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueChargedAll03NoPFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositChargedAll"),
        deltaR = cms.double(0.3),
        PivotCoordinatesForEBEE = cms.bool(True),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueChargedAll03PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositChargedAll"),
        deltaR = cms.double(0.3),
        PivotCoordinatesForEBEE = cms.bool(True),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueChargedAll04NoPFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositChargedAll"),
        deltaR = cms.double(0.4),
        PivotCoordinatesForEBEE = cms.bool(True),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueChargedAll04PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositChargedAll"),
        deltaR = cms.double(0.4),
        PivotCoordinatesForEBEE = cms.bool(True),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueGamma03NoPFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositGamma"),
        deltaR = cms.double(0.3),
        PivotCoordinatesForEBEE = cms.bool(True),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.08)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueGamma03PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositGamma"),
        deltaR = cms.double(0.3),
        PivotCoordinatesForEBEE = cms.bool(True),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.08)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueGamma04NoPFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositGamma"),
        deltaR = cms.double(0.4),
        PivotCoordinatesForEBEE = cms.bool(True),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.08)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueGamma04PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositGamma"),
        deltaR = cms.double(0.4),
        PivotCoordinatesForEBEE = cms.bool(True),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.08)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueNeutral03NoPFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositNeutral"),
        deltaR = cms.double(0.3),
        PivotCoordinatesForEBEE = cms.bool(True),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueNeutral03PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositNeutral"),
        deltaR = cms.double(0.3),
        PivotCoordinatesForEBEE = cms.bool(True),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueNeutral04NoPFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositNeutral"),
        deltaR = cms.double(0.4),
        PivotCoordinatesForEBEE = cms.bool(True),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValueNeutral04PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositNeutral"),
        deltaR = cms.double(0.4),
        PivotCoordinatesForEBEE = cms.bool(True),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValuePU03NoPFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositPU"),
        deltaR = cms.double(0.3),
        PivotCoordinatesForEBEE = cms.bool(True),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValuePU03PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositPU"),
        deltaR = cms.double(0.3),
        PivotCoordinatesForEBEE = cms.bool(True),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValuePU04NoPFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositPU"),
        deltaR = cms.double(0.4),
        PivotCoordinatesForEBEE = cms.bool(True),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.elPFIsoValuePU04PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("elPFIsoDepositPU"),
        deltaR = cms.double(0.4),
        PivotCoordinatesForEBEE = cms.bool(True),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.015)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.electronCkfTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("electronMergedSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('electronTrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryBuilder = cms.string('TrajectoryBuilderForElectrons')
)


process.electronEcalRecHitIsolationLcone = cms.EDProducer("EgammaEcalRecHitIsolationProducer",
    useNumCrystals = cms.bool(True),
    etMinBarrel = cms.double(0.0),
    intRadiusEndcap = cms.double(3.0),
    tryBoth = cms.bool(True),
    ecalBarrelRecHitCollection = cms.InputTag("EcalRecHitsEB"),
    eMinEndcap = cms.double(0.0),
    ecalEndcapRecHitCollection = cms.InputTag("EcalRecHitsEE"),
    etMinEndcap = cms.double(0.11),
    eMinBarrel = cms.double(0.095),
    ecalEndcapRecHitProducer = cms.InputTag("ecalRecHit"),
    jurassicWidth = cms.double(1.5),
    ecalBarrelRecHitProducer = cms.InputTag("ecalRecHit"),
    extRadius = cms.double(0.4),
    useIsolEt = cms.bool(True),
    vetoClustered = cms.bool(False),
    intRadiusBarrel = cms.double(3.0),
    subtract = cms.bool(False),
    emObjectProducer = cms.InputTag("gsfElectrons")
)


process.electronEcalRecHitIsolationScone = cms.EDProducer("EgammaEcalRecHitIsolationProducer",
    useNumCrystals = cms.bool(True),
    etMinBarrel = cms.double(0.0),
    intRadiusEndcap = cms.double(3.0),
    tryBoth = cms.bool(True),
    ecalBarrelRecHitCollection = cms.InputTag("EcalRecHitsEB"),
    eMinEndcap = cms.double(0.0),
    ecalEndcapRecHitCollection = cms.InputTag("EcalRecHitsEE"),
    etMinEndcap = cms.double(0.11),
    eMinBarrel = cms.double(0.095),
    ecalEndcapRecHitProducer = cms.InputTag("ecalRecHit"),
    jurassicWidth = cms.double(1.5),
    ecalBarrelRecHitProducer = cms.InputTag("ecalRecHit"),
    extRadius = cms.double(0.3),
    useIsolEt = cms.bool(True),
    vetoClustered = cms.bool(False),
    intRadiusBarrel = cms.double(3.0),
    subtract = cms.bool(False),
    emObjectProducer = cms.InputTag("gsfElectrons")
)


process.electronGsfTracks = cms.EDProducer("GsfTrackProducer",
    src = cms.InputTag("electronCkfTrackCandidates"),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string(''),
    Fitter = cms.string('GsfElectronFittingSmoother'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    AlgorithmName = cms.string('gsf'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    GeometricInnerState = cms.bool(False),
    Propagator = cms.string('fwdGsfElectronPropagator')
)


process.electronHcalDepth1TowerIsolationLcone = cms.EDProducer("EgammaTowerIsolationProducer",
    absolut = cms.bool(True),
    intRadius = cms.double(0.15),
    extRadius = cms.double(0.4),
    Depth = cms.int32(1),
    towerProducer = cms.InputTag("towerMaker"),
    etMin = cms.double(0.0),
    emObjectProducer = cms.InputTag("gsfElectrons")
)


process.electronHcalDepth1TowerIsolationScone = cms.EDProducer("EgammaTowerIsolationProducer",
    absolut = cms.bool(True),
    intRadius = cms.double(0.15),
    extRadius = cms.double(0.3),
    Depth = cms.int32(1),
    towerProducer = cms.InputTag("towerMaker"),
    etMin = cms.double(0.0),
    emObjectProducer = cms.InputTag("gsfElectrons")
)


process.electronHcalDepth2TowerIsolationLcone = cms.EDProducer("EgammaTowerIsolationProducer",
    absolut = cms.bool(True),
    intRadius = cms.double(0.15),
    extRadius = cms.double(0.4),
    Depth = cms.int32(2),
    towerProducer = cms.InputTag("towerMaker"),
    etMin = cms.double(0.0),
    emObjectProducer = cms.InputTag("gsfElectrons")
)


process.electronHcalDepth2TowerIsolationScone = cms.EDProducer("EgammaTowerIsolationProducer",
    absolut = cms.bool(True),
    intRadius = cms.double(0.15),
    extRadius = cms.double(0.3),
    Depth = cms.int32(2),
    towerProducer = cms.InputTag("towerMaker"),
    etMin = cms.double(0.0),
    emObjectProducer = cms.InputTag("gsfElectrons")
)


process.electronHcalTowerIsolationLcone = cms.EDProducer("EgammaTowerIsolationProducer",
    absolut = cms.bool(True),
    intRadius = cms.double(0.15),
    extRadius = cms.double(0.4),
    Depth = cms.int32(-1),
    towerProducer = cms.InputTag("towerMaker"),
    etMin = cms.double(0.0),
    emObjectProducer = cms.InputTag("gsfElectrons")
)


process.electronHcalTowerIsolationScone = cms.EDProducer("EgammaTowerIsolationProducer",
    absolut = cms.bool(True),
    intRadius = cms.double(0.15),
    extRadius = cms.double(0.3),
    Depth = cms.int32(-1),
    towerProducer = cms.InputTag("towerMaker"),
    etMin = cms.double(0.0),
    emObjectProducer = cms.InputTag("gsfElectrons")
)


process.electronMergedSeeds = cms.EDProducer("ElectronSeedMerger",
    EcalBasedSeeds = cms.InputTag("ecalDrivenElectronSeeds"),
    TkBasedSeeds = cms.InputTag("trackerDrivenElectronSeeds","SeedsForGsf")
)


process.electronTrackIsolationLcone = cms.EDProducer("EgammaElectronTkIsolationProducer",
    absolut = cms.bool(True),
    trackProducer = cms.InputTag("generalTracks"),
    stripBarrel = cms.double(0.015),
    intRadiusEndcap = cms.double(0.015),
    electronProducer = cms.InputTag("gsfElectrons"),
    maxVtxDistXY = cms.double(9999.0),
    extRadius = cms.double(0.4),
    ptMin = cms.double(0.7),
    maxVtxDist = cms.double(0.2),
    stripEndcap = cms.double(0.015),
    intRadiusBarrel = cms.double(0.015),
    BeamspotProducer = cms.InputTag("offlineBeamSpot")
)


process.electronTrackIsolationScone = cms.EDProducer("EgammaElectronTkIsolationProducer",
    absolut = cms.bool(True),
    trackProducer = cms.InputTag("generalTracks"),
    stripBarrel = cms.double(0.015),
    intRadiusEndcap = cms.double(0.015),
    electronProducer = cms.InputTag("gsfElectrons"),
    maxVtxDistXY = cms.double(9999.0),
    extRadius = cms.double(0.3),
    ptMin = cms.double(0.7),
    maxVtxDist = cms.double(0.2),
    stripEndcap = cms.double(0.015),
    intRadiusBarrel = cms.double(0.015),
    BeamspotProducer = cms.InputTag("offlineBeamSpot")
)


process.fixedConePFTauDecayModeIndexProducer = cms.EDProducer("PFRecoTauDecayModeIndexProducer",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    PFTauDecayModeProducer = cms.InputTag("fixedConePFTauDecayModeProducer")
)


process.fixedConePFTauDecayModeProducer = cms.EDProducer("PFRecoTauDecayModeDeterminator",
    mergeByBestMatch = cms.bool(True),
    refitTracks = cms.bool(False),
    maxPiZeroMass = cms.double(0.2),
    mergeLowPtPhotonsFirst = cms.bool(True),
    setMergedPi0Mass = cms.bool(True),
    setChargedPionMass = cms.bool(True),
    filterPhotons = cms.bool(True),
    minPtFractionSinglePhotons = cms.double(0.1),
    minPtFractionPiZeroes = cms.double(0.15),
    maxNbrOfIterations = cms.int32(10),
    filterTwoProngs = cms.bool(True),
    minPtFractionForSecondProng = cms.double(0.1),
    maxDistance = cms.double(0.01),
    setPi0Mass = cms.bool(True),
    maxPhotonsToMerge = cms.uint32(2),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer")
)


process.fixedConePFTauDiscriminationAgainstElectron = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(-0.1),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("fixedConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    ApplyCut_BremCombined = cms.bool(False),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(False),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    BremCombined_HOP = cms.double(0.1),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.fixedConePFTauDiscriminationAgainstMuon = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    a = cms.double(0.5),
    c = cms.double(0.0),
    b = cms.double(0.5),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("fixedConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    discriminatorOption = cms.string('noSegMatch'),
    HoPMin = cms.double(0.2)
)


process.fixedConePFTauDiscriminationByECALIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("fixedConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.fixedConePFTauDiscriminationByECALIsolationUsingLeadingPion = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("fixedConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.fixedConePFTauDiscriminationByIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    maximumOccupancy = cms.uint32(0),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("fixedConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.fixedConePFTauDiscriminationByIsolationUsingLeadingPion = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    maximumOccupancy = cms.uint32(0),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("fixedConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.fixedConePFTauDiscriminationByLeadingPionPtCut = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    UseOnlyChargedHadrons = cms.bool(False)
)


process.fixedConePFTauDiscriminationByLeadingTrackFinding = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    UseOnlyChargedHadrons = cms.bool(True)
)


process.fixedConePFTauDiscriminationByLeadingTrackPtCut = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    UseOnlyChargedHadrons = cms.bool(True)
)


process.fixedConePFTauDiscriminationByTrackIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("fixedConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.fixedConePFTauDiscriminationByTrackIsolationUsingLeadingPion = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("fixedConePFTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("fixedConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.fixedConePFTauProducer = cms.EDProducer("RecoTauProducer",
    piZeroSrc = cms.InputTag("ak5PFJetsRecoTauPiZeros"),
    modifiers = cms.VPSet(cms.PSet(
        ElectronPreIDProducer = cms.InputTag("elecpreid"),
        name = cms.string('shrinkingConeElectronRej'),
        plugin = cms.string('RecoTauElectronRejectionPlugin'),
        DataType = cms.string('AOD'),
        maximumForElectrionPreIDOutput = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
        EcalStripSumE_minClusEnergy = cms.double(0.1),
        ElecPreIDLeadTkMatch_maxDR = cms.double(0.01),
        EcalStripSumE_deltaEta = cms.double(0.03)
    )),
    jetRegionSrc = cms.InputTag("recoTauAK5PFJets08Region"),
    jetSrc = cms.InputTag("ak5PFJets"),
    builders = cms.VPSet(cms.PSet(
        usePFLeptons = cms.bool(True),
        signalConeNeutralHadrons = cms.string('0.10'),
        name = cms.string('fixedCone'),
        plugin = cms.string('RecoTauBuilderConePlugin'),
        isoConeChargedHadrons = cms.string('0.5'),
        isoConePiZeros = cms.string('0.5'),
        isoConeNeutralHadrons = cms.string('0.5'),
        useClosestPV = cms.bool(False),
        matchingCone = cms.string('0.1'),
        signalConeChargedHadrons = cms.string('0.07'),
        leadObjectPt = cms.double(5.0),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        signalConePiZeros = cms.string('0.15'),
        pfCandSrc = cms.InputTag("particleFlow")
    )),
    buildNullTaus = cms.bool(True)
)


process.fixedConeRecoTaus = cms.EDProducer("RecoTauProducer",
    piZeroSrc = cms.InputTag("ak5PFJetsRecoTauPiZeros"),
    modifiers = cms.VPSet(cms.PSet(
        ElectronPreIDProducer = cms.InputTag("elecpreid"),
        name = cms.string('shrinkingConeElectronRej'),
        plugin = cms.string('RecoTauElectronRejectionPlugin'),
        DataType = cms.string('AOD'),
        maximumForElectrionPreIDOutput = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
        EcalStripSumE_minClusEnergy = cms.double(0.1),
        ElecPreIDLeadTkMatch_maxDR = cms.double(0.01),
        EcalStripSumE_deltaEta = cms.double(0.03)
    )),
    jetRegionSrc = cms.InputTag("recoTauAK5PFJets08Region"),
    jetSrc = cms.InputTag("ak5PFJets"),
    builders = cms.VPSet(cms.PSet(
        usePFLeptons = cms.bool(True),
        signalConeNeutralHadrons = cms.string('0.10'),
        name = cms.string('fixedCone'),
        plugin = cms.string('RecoTauBuilderConePlugin'),
        isoConeChargedHadrons = cms.string('0.5'),
        isoConePiZeros = cms.string('0.5'),
        isoConeNeutralHadrons = cms.string('0.5'),
        useClosestPV = cms.bool(False),
        matchingCone = cms.string('0.1'),
        signalConeChargedHadrons = cms.string('0.07'),
        leadObjectPt = cms.double(5.0),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        signalConePiZeros = cms.string('0.15'),
        pfCandSrc = cms.InputTag("particleFlow")
    )),
    buildNullTaus = cms.bool(True)
)


process.fixedGridRhoAll = cms.EDProducer("FixedGridRhoProducer",
    EtaRegion = cms.string('All'),
    pfCandidatesTag = cms.InputTag("particleFlow")
)


process.fixedGridRhoFastjetAll = cms.EDProducer("FixedGridRhoProducerFastjet",
    gridSpacing = cms.double(0.55),
    pfCandidatesTag = cms.InputTag("particleFlow"),
    maxRapidity = cms.double(5.0)
)


process.gctDigis = cms.EDProducer("GctRawToDigi",
    unpackSharedRegions = cms.bool(False),
    numberOfGctSamplesToUnpack = cms.uint32(5),
    verbose = cms.untracked.bool(False),
    numberOfRctSamplesToUnpack = cms.uint32(1),
    inputLabel = cms.InputTag("rawDataCollector"),
    unpackerVersion = cms.uint32(0),
    gctFedId = cms.untracked.int32(745),
    hltMode = cms.bool(False)
)


process.generalConversionStepConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1),
    arbitratedMergedPreferCollection = cms.int32(3),
    allowFirstHitShare = cms.bool(True),
    minProb = cms.double(1e-06),
    arbitratedEcalSeededPreferCollection = cms.int32(-1),
    checkCharge = cms.bool(True),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(3),
    TrackProducer2 = cms.string('conversionStepConversionTrackProducer'),
    TrackProducer1 = cms.string('generalConversionTrackProducer')
)


process.generalConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(True),
    minConvRadius = cms.double(2.0),
    TrackProducer = cms.string('generalTracks'),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    setTrackerOnly = cms.bool(True),
    setArbitratedMerged = cms.bool(True),
    useTrajectory = cms.bool(True),
    setArbitratedEcalSeeded = cms.bool(False)
)


process.generalInOutOutInConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1),
    arbitratedMergedPreferCollection = cms.int32(3),
    allowFirstHitShare = cms.bool(True),
    minProb = cms.double(1e-06),
    arbitratedEcalSeededPreferCollection = cms.int32(-1),
    checkCharge = cms.bool(True),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(2),
    TrackProducer2 = cms.string('generalConversionStepConversionTrackMerger'),
    TrackProducer1 = cms.string('inOutOutInConversionTrackMerger')
)


process.generalTracks = cms.EDProducer("DuplicateListMerger",
    diffHitsCut = cms.int32(5),
    originalSource = cms.InputTag("preDuplicateMergingGeneralTracks"),
    minTrkProbCut = cms.double(0.0),
    newQuality = cms.string('confirmed'),
    mergedSource = cms.InputTag("mergedDuplicateTracks"),
    candidateSource = cms.InputTag("duplicateTrackCandidates","candidateMap")
)


process.generalV0Candidates = cms.EDProducer("V0Producer",
    kShortNormalizedMassCut = cms.double(0.0),
    vtxChi2Cut = cms.double(7.0),
    lambdaNormalizedMassCut = cms.double(0.0),
    selectKshorts = cms.bool(True),
    tkDCACut = cms.double(1.0),
    tkChi2Cut = cms.double(5.0),
    tkNhitsCut = cms.int32(6),
    trackRecoAlgorithm = cms.InputTag("generalTracks"),
    vtxSignificance2DCut = cms.double(15.0),
    selectLambdas = cms.bool(True),
    trackQualities = cms.vstring('loose'),
    vtxSignificance3DCut = cms.double(0.0),
    lambdaMassCut = cms.double(0.05),
    rVtxCut = cms.double(0.0),
    vertexFitter = cms.InputTag("KalmanVertexFitter"),
    impactParameterSigCut = cms.double(2.0),
    collinearityCut = cms.double(0.02),
    lVtxCut = cms.double(0.0),
    kShortMassCut = cms.double(0.07),
    useSmoothing = cms.bool(True),
    innerHitPosCut = cms.double(4.0),
    mPiPiCut = cms.double(0.6)
)


process.ghostTrackBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('ghostTrack'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"), cms.InputTag("ghostTrackVertexTagInfos"))
)


process.ghostTrackVertexTagInfos = cms.EDProducer("SecondaryVertexProducer",
    extSVDeltaRToJet = cms.double(0.3),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    vertexReco = cms.PSet(
        primcut = cms.double(2.0),
        seccut = cms.double(4.0),
        maxFitChi2 = cms.double(10.0),
        fitType = cms.string('RefitGhostTrackWithVertices'),
        mergeThreshold = cms.double(3.0),
        finder = cms.string('gtvr')
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    ),
    constraint = cms.string('BeamSpot'),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfos"),
    vertexCuts = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.65),
        distVal2dMax = cms.double(2.5),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(0.5),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(3.0),
        multiplicityMin = cms.uint32(1),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(99999.9),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(0.01),
        distSig3dMin = cms.double(-99999.9)
    ),
    useExternalSV = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    usePVError = cms.bool(True),
    trackSelection = cms.PSet(
        b_pT = cms.double(0.3684),
        a_dR = cms.double(-0.001053),
        min_pT = cms.double(120),
        max_pT = cms.double(500),
        min_pT_dRcut = cms.double(0.5),
        max_pT_trackPTcut = cms.double(3),
        max_pT_dRcut = cms.double(0.1),
        b_dR = cms.double(0.6263),
        a_pT = cms.double(0.005263),
        totalHitsMin = cms.uint32(8),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(2),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        useVariableJTA = cms.bool(False),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(99999.9),
        ptMin = cms.double(1.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip3dSig'),
    extSVCollection = cms.InputTag("secondaryVertices")
)


process.gk5CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    doAreaDiskApprox = cms.bool(False),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('GeneralizedKt'),
    rParam = cms.double(0.5)
)


process.gk5CaloJetsPUCorr = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('GeneralizedKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0)
)


process.gk5JetID = cms.EDProducer("JetIDProducer",
    eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheRecHitsColl = cms.InputTag("hbhereco"),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    hoRecHitsColl = cms.InputTag("horeco"),
    ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    hfRecHitsColl = cms.InputTag("hfreco"),
    useRecHits = cms.bool(True),
    src = cms.InputTag("gk5CaloJets")
)


process.gk5PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doOutputJets = cms.bool(True),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    doAreaFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    jetPtMin = cms.double(3.0),
    jetType = cms.string('PFJet'),
    src = cms.InputTag("particleFlow"),
    doPUOffsetCorr = cms.bool(False),
    radiusPU = cms.double(0.5),
    doAreaDiskApprox = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('GeneralizedKt'),
    rParam = cms.double(0.5)
)


process.gk5TrackJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    doAreaDiskApprox = cms.bool(False),
    jetType = cms.string('TrackJet'),
    MinVtxNdof = cms.int32(5),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    MaxVtxZ = cms.double(15.0),
    UseOnlyVertexTracks = cms.bool(False),
    UseOnlyOnePV = cms.bool(False),
    DzTrVtxMax = cms.double(1),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("trackRefsForJets"),
    jetPtMin = cms.double(3.0),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    DxyTrVtxMax = cms.double(0.2),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('GeneralizedKt'),
    rParam = cms.double(0.5)
)


process.gk7CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('GeneralizedKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.gk7CaloJetsPUCorr = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('GeneralizedKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0)
)


process.gk7JetID = cms.EDProducer("JetIDProducer",
    eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheRecHitsColl = cms.InputTag("hbhereco"),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    hoRecHitsColl = cms.InputTag("horeco"),
    ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    hfRecHitsColl = cms.InputTag("hfreco"),
    useRecHits = cms.bool(True),
    src = cms.InputTag("gk7CaloJets")
)


process.gk7PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('GeneralizedKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("particleFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.gk7TrackJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('TrackJet'),
    MinVtxNdof = cms.int32(5),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('GeneralizedKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    MaxVtxZ = cms.double(15.0),
    rParam = cms.double(0.7),
    UseOnlyVertexTracks = cms.bool(False),
    UseOnlyOnePV = cms.bool(False),
    DzTrVtxMax = cms.double(1),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("trackRefsForJets"),
    jetPtMin = cms.double(3.0),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    DxyTrVtxMax = cms.double(0.2),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.glbTrackQual = cms.EDProducer("GlobalTrackQualityProducer",
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    GlobalMuonTrackMatcher = cms.PSet(
        Pt_threshold1 = cms.double(0.0),
        DeltaDCut_3 = cms.double(15.0),
        MinP = cms.double(2.5),
        MinPt = cms.double(1.0),
        Chi2Cut_1 = cms.double(50.0),
        Pt_threshold2 = cms.double(999999999.0),
        LocChi2Cut = cms.double(20.0),
        Eta_threshold = cms.double(1.2),
        Quality_3 = cms.double(7.0),
        Quality_2 = cms.double(15.0),
        Chi2Cut_2 = cms.double(50.0),
        Chi2Cut_3 = cms.double(200.0),
        DeltaDCut_1 = cms.double(2.5),
        DeltaRCut_2 = cms.double(0.2),
        DeltaRCut_3 = cms.double(1.0),
        DeltaDCut_2 = cms.double(10.0),
        DeltaRCut_1 = cms.double(0.1),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        Quality_1 = cms.double(20.0)
    ),
    BaseLabel = cms.string('GLB'),
    MaxChi2 = cms.double(100000.0),
    nSigma = cms.double(3.0),
    InputCollection = cms.InputTag("globalMuons"),
    RefitterParameters = cms.PSet(
        TrackerSkipSection = cms.int32(-1),
        MuonHitsOption = cms.int32(1),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        RefitDirection = cms.string('insideOut'),
        CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
        Propagator = cms.string('SmartPropagatorAnyRK'),
        TrackerSkipSystem = cms.int32(-1),
        DoPredictionsOnly = cms.bool(False),
        Chi2ProbabilityCut = cms.double(30.0),
        PropDirForCosmics = cms.bool(False),
        HitThreshold = cms.int32(1),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
        Chi2CutCSC = cms.double(1.0),
        Chi2CutRPC = cms.double(1.0),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        DYTthrs = cms.vint32(10, 5),
        RefitRPCHits = cms.bool(True),
        Chi2CutDT = cms.double(30.0),
        PtCut = cms.double(1.0),
        SkipStation = cms.int32(-1)
    ),
    InputLinksCollection = cms.InputTag("globalMuons")
)


process.globalCombinedSeeds = cms.EDProducer("SeedCombiner",
    seedCollections = cms.VInputTag(cms.InputTag("globalSeedsFromTripletsWithVertices"), cms.InputTag("globalSeedsFromPairsWithVertices"))
)


process.globalCosmicMuons = cms.EDProducer("GlobalCosmicMuonProducer",
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(False),
        AllowNoVertex = cms.untracked.bool(True),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(False)
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrajectoryBuilderParameters = cms.PSet(
        GlobalMuonTrackMatcher = cms.PSet(
            Pt_threshold1 = cms.double(0.0),
            DeltaDCut_3 = cms.double(15.0),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Chi2Cut_1 = cms.double(50.0),
            Pt_threshold2 = cms.double(999999999.0),
            LocChi2Cut = cms.double(20.0),
            Eta_threshold = cms.double(1.2),
            Quality_3 = cms.double(7.0),
            Quality_2 = cms.double(15.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(2.5),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            DeltaDCut_2 = cms.double(10.0),
            DeltaRCut_1 = cms.double(0.1),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            Quality_1 = cms.double(20.0)
        ),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        TkTrackCollectionLabel = cms.InputTag("regionalCosmicTracks"),
        SmootherParameters = cms.PSet(
            PropagatorAlong = cms.string('SteppingHelixPropagatorAny'),
            PropagatorOpposite = cms.string('SteppingHelixPropagatorAny'),
            RescalingFactor = cms.double(5.0)
        ),
        Propagator = cms.string('SteppingHelixPropagatorAny')
    ),
    MuonCollectionLabel = cms.InputTag("cosmicMuons")
)


process.globalCosmicMuons1Leg = cms.EDProducer("GlobalCosmicMuonProducer",
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrajectoryBuilderParameters = cms.PSet(
        GlobalMuonTrackMatcher = cms.PSet(
            Pt_threshold1 = cms.double(0.0),
            DeltaDCut_3 = cms.double(15.0),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Chi2Cut_1 = cms.double(50.0),
            Pt_threshold2 = cms.double(999999999.0),
            LocChi2Cut = cms.double(20.0),
            Eta_threshold = cms.double(1.2),
            Quality_3 = cms.double(7.0),
            Quality_2 = cms.double(15.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(2.5),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            DeltaDCut_2 = cms.double(10.0),
            DeltaRCut_1 = cms.double(0.1),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            Quality_1 = cms.double(20.0)
        ),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        TkTrackCollectionLabel = cms.InputTag("regionalCosmicTracks"),
        SmootherParameters = cms.PSet(
            PropagatorAlong = cms.string('SteppingHelixPropagatorAny'),
            PropagatorOpposite = cms.string('SteppingHelixPropagatorAny'),
            RescalingFactor = cms.double(5.0)
        ),
        Propagator = cms.string('SteppingHelixPropagatorAny')
    ),
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(False),
        AllowNoVertex = cms.untracked.bool(True),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(False)
    ),
    MuonCollectionLabel = cms.InputTag("cosmicMuons1Leg")
)


process.globalMixedSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originRadius = cms.double(0.2),
            ptMin = cms.double(0.9),
            originHalfLength = cms.double(21.2)
        ),
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    ClusterCheckPSet = cms.PSet(
        MaxNumberOfPixelClusters = cms.uint32(40000),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters")
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        maxElement = cms.uint32(1000000),
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.string('MixedLayerPairs')
    ),
    SeedCreatorPSet = cms.PSet(
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial'),
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator')
    )
)


process.globalMuons = cms.EDProducer("GlobalMuonProducer",
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(False)
    ),
    GLBTrajBuilderParameters = cms.PSet(
        ScaleTECyFactor = cms.double(-1.0),
        GlbRefitterParameters = cms.PSet(
            TrackerSkipSection = cms.int32(-1),
            DoPredictionsOnly = cms.bool(False),
            PropDirForCosmics = cms.bool(False),
            HitThreshold = cms.int32(1),
            MuonHitsOption = cms.int32(1),
            Chi2CutRPC = cms.double(1.0),
            Fitter = cms.string('GlbMuKFFitter'),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            TrackerRecHitBuilder = cms.string('WithTrackAngle'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            RefitDirection = cms.string('insideOut'),
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            DYTthrs = cms.vint32(30, 15),
            Chi2CutCSC = cms.double(150.0),
            Chi2CutDT = cms.double(10.0),
            RefitRPCHits = cms.bool(True),
            PtCut = cms.double(1.0),
            Chi2ProbabilityCut = cms.double(30.0),
            SkipStation = cms.int32(-1),
            Propagator = cms.string('SmartPropagatorAnyRK'),
            TrackerSkipSystem = cms.int32(-1)
        ),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        ScaleTECxFactor = cms.double(-1.0),
        MuonTrackingRegionBuilder = cms.PSet(
            EtaR_UpperLimit_Par1 = cms.double(0.25),
            EtaR_UpperLimit_Par2 = cms.double(0.15),
            OnDemand = cms.double(-1.0),
            Rescale_Dz = cms.double(3.0),
            Eta_min = cms.double(0.1),
            Rescale_phi = cms.double(3.0),
            Eta_fixed = cms.double(0.2),
            DeltaZ_Region = cms.double(15.9),
            MeasurementTrackerName = cms.string(''),
            PhiR_UpperLimit_Par2 = cms.double(0.2),
            vertexCollection = cms.InputTag("pixelVertices"),
            Phi_fixed = cms.double(0.2),
            DeltaR = cms.double(0.2),
            EscapePt = cms.double(1.5),
            UseFixedRegion = cms.bool(False),
            PhiR_UpperLimit_Par1 = cms.double(0.6),
            Rescale_eta = cms.double(3.0),
            Phi_min = cms.double(0.1),
            UseVertex = cms.bool(False),
            beamSpot = cms.InputTag("offlineBeamSpot")
        ),
        RefitRPCHits = cms.bool(True),
        PCut = cms.double(2.5),
        TrackTransformer = cms.PSet(
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('KFFitterForRefitInsideOut'),
            TrackerRecHitBuilder = cms.string('WithTrackAngle'),
            Smoother = cms.string('KFSmootherForRefitInsideOut'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            RefitDirection = cms.string('alongMomentum'),
            RefitRPCHits = cms.bool(True),
            Propagator = cms.string('SmartPropagatorAnyRK')
        ),
        GlobalMuonTrackMatcher = cms.PSet(
            Pt_threshold1 = cms.double(0.0),
            DeltaDCut_3 = cms.double(15.0),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Chi2Cut_1 = cms.double(50.0),
            Pt_threshold2 = cms.double(999999999.0),
            LocChi2Cut = cms.double(20.0),
            Eta_threshold = cms.double(1.2),
            Quality_3 = cms.double(7.0),
            Quality_2 = cms.double(15.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(2.5),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            DeltaDCut_2 = cms.double(10.0),
            DeltaRCut_1 = cms.double(0.1),
            Propagator = cms.string('SmartPropagatorRK'),
            Quality_1 = cms.double(20.0)
        ),
        PtCut = cms.double(1.0),
        TrackerPropagator = cms.string('SteppingHelixPropagatorAny')
    ),
    TrackerCollectionLabel = cms.InputTag("generalTracks"),
    MuonCollectionLabel = cms.InputTag("standAloneMuons","UpdatedAtVtx")
)


process.globalPixelLessSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originRadius = cms.double(0.2),
            ptMin = cms.double(0.9),
            originHalfLength = cms.double(40)
        ),
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    ClusterCheckPSet = cms.PSet(
        MaxNumberOfPixelClusters = cms.uint32(40000),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(5000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters")
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        maxElement = cms.uint32(100000),
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.string('pixelLessLayerPairs4PixelLessTracking')
    ),
    SeedCreatorPSet = cms.PSet(
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial'),
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator')
    )
)


process.globalPixelSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originRadius = cms.double(0.2),
            ptMin = cms.double(0.9),
            originHalfLength = cms.double(21.2)
        ),
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    ClusterCheckPSet = cms.PSet(
        MaxNumberOfPixelClusters = cms.uint32(40000),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters")
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.string('PixelLayerPairs')
    ),
    SeedCreatorPSet = cms.PSet(
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial'),
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator')
    )
)


process.globalSETMuons = cms.EDProducer("GlobalMuonProducer",
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    GLBTrajBuilderParameters = cms.PSet(
        ScaleTECyFactor = cms.double(-1.0),
        GlbRefitterParameters = cms.PSet(
            TrackerSkipSection = cms.int32(-1),
            DoPredictionsOnly = cms.bool(False),
            PropDirForCosmics = cms.bool(False),
            HitThreshold = cms.int32(1),
            MuonHitsOption = cms.int32(1),
            Chi2CutRPC = cms.double(1.0),
            Fitter = cms.string('GlbMuKFFitter'),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            TrackerRecHitBuilder = cms.string('WithTrackAngle'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            RefitDirection = cms.string('insideOut'),
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            DYTthrs = cms.vint32(30, 15),
            Chi2CutCSC = cms.double(150.0),
            Chi2CutDT = cms.double(10.0),
            RefitRPCHits = cms.bool(True),
            PtCut = cms.double(1.0),
            Chi2ProbabilityCut = cms.double(30.0),
            SkipStation = cms.int32(-1),
            Propagator = cms.string('SmartPropagatorAnyRK'),
            TrackerSkipSystem = cms.int32(-1)
        ),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        ScaleTECxFactor = cms.double(-1.0),
        MuonTrackingRegionBuilder = cms.PSet(
            EtaR_UpperLimit_Par1 = cms.double(0.25),
            EtaR_UpperLimit_Par2 = cms.double(0.15),
            OnDemand = cms.double(-1.0),
            Rescale_Dz = cms.double(3.0),
            Eta_min = cms.double(0.1),
            Rescale_phi = cms.double(3.0),
            Eta_fixed = cms.double(0.2),
            DeltaZ_Region = cms.double(15.9),
            MeasurementTrackerName = cms.string(''),
            PhiR_UpperLimit_Par2 = cms.double(0.2),
            vertexCollection = cms.InputTag("pixelVertices"),
            Phi_fixed = cms.double(0.2),
            DeltaR = cms.double(0.2),
            EscapePt = cms.double(1.5),
            UseFixedRegion = cms.bool(False),
            PhiR_UpperLimit_Par1 = cms.double(0.6),
            Rescale_eta = cms.double(3.0),
            Phi_min = cms.double(0.1),
            UseVertex = cms.bool(False),
            beamSpot = cms.InputTag("offlineBeamSpot")
        ),
        RefitRPCHits = cms.bool(True),
        PCut = cms.double(2.5),
        TrackTransformer = cms.PSet(
            DoPredictionsOnly = cms.bool(False),
            Fitter = cms.string('KFFitterForRefitInsideOut'),
            TrackerRecHitBuilder = cms.string('WithTrackAngle'),
            Smoother = cms.string('KFSmootherForRefitInsideOut'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            RefitDirection = cms.string('alongMomentum'),
            RefitRPCHits = cms.bool(True),
            Propagator = cms.string('SmartPropagatorAnyRK')
        ),
        GlobalMuonTrackMatcher = cms.PSet(
            Pt_threshold1 = cms.double(0.0),
            DeltaDCut_3 = cms.double(15.0),
            MinP = cms.double(2.5),
            MinPt = cms.double(1.0),
            Chi2Cut_1 = cms.double(50.0),
            Pt_threshold2 = cms.double(999999999.0),
            LocChi2Cut = cms.double(20.0),
            Eta_threshold = cms.double(1.2),
            Quality_3 = cms.double(7.0),
            Quality_2 = cms.double(15.0),
            Chi2Cut_2 = cms.double(50.0),
            Chi2Cut_3 = cms.double(200.0),
            DeltaDCut_1 = cms.double(2.5),
            DeltaRCut_2 = cms.double(0.2),
            DeltaRCut_3 = cms.double(1.0),
            DeltaDCut_2 = cms.double(10.0),
            DeltaRCut_1 = cms.double(0.1),
            Propagator = cms.string('SmartPropagatorRK'),
            Quality_1 = cms.double(20.0)
        ),
        PtCut = cms.double(1.0),
        TrackerPropagator = cms.string('SteppingHelixPropagatorAny')
    ),
    TrackerCollectionLabel = cms.InputTag("generalTracks"),
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(False)
    ),
    MuonCollectionLabel = cms.InputTag("standAloneSETMuons","UpdatedAtVtx")
)


process.globalSeedsFromPairsWithVertices = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            useFixedError = cms.bool(True),
            originRadius = cms.double(0.2),
            sigmaZVertex = cms.double(3.0),
            fixedError = cms.double(0.2),
            VertexCollection = cms.InputTag("pixelVertices"),
            ptMin = cms.double(0.9),
            useFoundVertices = cms.bool(True),
            nSigmaZ = cms.double(4.0)
        ),
        ComponentName = cms.string('GlobalTrackingRegionWithVerticesProducer')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    ClusterCheckPSet = cms.PSet(
        MaxNumberOfPixelClusters = cms.uint32(40000),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters")
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        maxElement = cms.uint32(1000000),
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.string('MixedLayerPairs')
    ),
    SeedCreatorPSet = cms.PSet(
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial'),
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator')
    )
)


process.globalSeedsFromTriplets = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originRadius = cms.double(0.2),
            ptMin = cms.double(0.9),
            originHalfLength = cms.double(21.2)
        ),
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    ClusterCheckPSet = cms.PSet(
        MaxNumberOfPixelClusters = cms.uint32(40000),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters")
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            maxElement = cms.uint32(100000),
            SeedComparitorPSet = cms.PSet(
                ComponentName = cms.string('none')
            ),
            extraHitRPhitolerance = cms.double(0.032),
            useMultScattering = cms.bool(True),
            phiPreFiltering = cms.double(0.3),
            extraHitRZtolerance = cms.double(0.037),
            ComponentName = cms.string('PixelTripletHLTGenerator')
        ),
        SeedingLayers = cms.string('PixelLayerTriplets')
    ),
    SeedCreatorPSet = cms.PSet(
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial'),
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator')
    )
)


process.gsfConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(False),
    minConvRadius = cms.double(2.0),
    TrackProducer = cms.string('electronGsfTracks'),
    setArbitratedMergedEcalGeneral = cms.bool(False),
    setTrackerOnly = cms.bool(False),
    setArbitratedMerged = cms.bool(True),
    useTrajectory = cms.bool(True),
    setArbitratedEcalSeeded = cms.bool(False)
)


process.gsfElectronCores = cms.EDProducer("GsfElectronCoreProducer",
    ecalDrivenGsfElectronCoresTag = cms.InputTag("ecalDrivenGsfElectronCores"),
    gsfPfRecTracks = cms.InputTag("pfTrackElec"),
    pflowGsfElectronCoresTag = cms.InputTag("pfElectronTranslator","pf"),
    gsfTracks = cms.InputTag("electronGsfTracks"),
    pfSuperClusterTrackMap = cms.InputTag("pfElectronTranslator","pf"),
    ctfTracks = cms.InputTag("generalTracks"),
    useGsfPfRecTracks = cms.bool(True),
    pfSuperClusters = cms.InputTag("pfElectronTranslator","pf")
)


process.gsfElectrons = cms.EDProducer("GsfElectronProducer",
    hOverEPtMin = cms.double(0.0),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    endcapRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    ctfTracksTag = cms.InputTag("generalTracks"),
    maxHBarrelPflow = cms.double(0.0),
    minSCEtBarrel = cms.double(4.0),
    recHitSeverityToBeExcludedBarrel = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    etMinEndcaps = cms.double(0.11),
    gsfPfRecTracksTag = cms.InputTag("pfTrackElec"),
    minEOverPBarrelPflow = cms.double(0.0),
    maxHEndcaps = cms.double(0.0),
    eMinBarrel = cms.double(0.095),
    isFiducial = cms.bool(False),
    maxDeltaEtaEndcaps = cms.double(0.02),
    minEOverPBarrel = cms.double(0.0),
    maxVtxDistTk = cms.double(0.2),
    maxFbremBarrel = cms.double(999999999.0),
    ecalDrivenEcalErrorFromClassBasedParameterization = cms.bool(True),
    applyAmbResolution = cms.bool(True),
    minMVAPflow = cms.double(-0.1),
    maxSigmaIetaIetaEndcapsPflow = cms.double(999999999.0),
    hOverEConeSizePflow = cms.double(0.15),
    recHitSeverityToBeExcludedEndcaps = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    minSCEtEndcaps = cms.double(4.0),
    ambSortingStrategy = cms.uint32(1),
    etMinHcal = cms.double(0.0),
    maxFbremEndcaps = cms.double(999999999.0),
    maxEOverPEndcapsPflow = cms.double(999999999.0),
    pfMvaTag = cms.InputTag("pfElectronTranslator","pf"),
    pflowGsfElectronsTag = cms.InputTag("pfElectronTranslator","pf"),
    maxHBarrel = cms.double(0.0),
    intRadiusEcalBarrel = cms.double(3.0),
    recHitFlagsToBeExcludedEndcaps = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    minEOverPEndcapsPflow = cms.double(0.0),
    eMinEndcaps = cms.double(0.0),
    maxDeltaEtaEndcapsPflow = cms.double(999999999.0),
    useNumCrystals = cms.bool(True),
    addPflowElectrons = cms.bool(True),
    ctfTracksCheck = cms.bool(True),
    pureTrackerDrivenEcalErrorFromSimpleParameterization = cms.bool(True),
    maxFbremEndcapsPflow = cms.double(999999999.0),
    crackCorrectionFunction = cms.string('EcalClusterCrackCorrection'),
    stripEndcapTk = cms.double(0.015),
    isEndcaps = cms.bool(False),
    seedFromTEC = cms.bool(True),
    maxEOverPBarrel = cms.double(999999999.0),
    maxSigmaIetaIetaBarrelPflow = cms.double(999999999.0),
    hOverEConeSize = cms.double(0.15),
    maxDrbTk = cms.double(999999999.0),
    ecalDrivenEcalEnergyFromClassBasedParameterization = cms.bool(True),
    minSCEtBarrelPflow = cms.double(0.0),
    maxDeltaEtaBarrelPflow = cms.double(999999999.0),
    maxTIPPflow = cms.double(999999999.0),
    minMvaByPassForIsolatedPflow = cms.double(-0.1),
    vetoClustered = cms.bool(False),
    hcalTowers = cms.InputTag("towerMaker"),
    etMinBarrel = cms.double(0.0),
    intRadiusHcal = cms.double(0.15),
    maxHOverEBarrel = cms.double(0.15),
    maxHOverEEndcaps = cms.double(0.15),
    isBarrel = cms.bool(False),
    isFiducialPflow = cms.bool(False),
    isBarrelPflow = cms.bool(False),
    minSCEtEndcapsPflow = cms.double(0.0),
    previousGsfElectronsTag = cms.InputTag("ecalDrivenGsfElectrons"),
    stripBarrelTk = cms.double(0.015),
    maxHEndcapsPflow = cms.double(0.0),
    maxHOverEEndcapsPflow = cms.double(999999999.0),
    maxDeltaEtaBarrel = cms.double(0.02),
    ambClustersOverlapStrategy = cms.uint32(1),
    maxFbremBarrelPflow = cms.double(999999999.0),
    maxTIP = cms.double(999999999.0),
    maxDeltaPhiBarrelPflow = cms.double(999999999.0),
    ptMinTk = cms.double(0.7),
    intRadiusEcalEndcaps = cms.double(3.0),
    minEOverPEndcaps = cms.double(0.0),
    maxEOverPEndcaps = cms.double(999999999.0),
    maxHOverEBarrelPflow = cms.double(999999999.0),
    maxEOverPBarrelPflow = cms.double(999999999.0),
    maxSigmaIetaIetaEndcaps = cms.double(999999999.0),
    jurassicWidth = cms.double(1.5),
    minMvaByPassForIsolated = cms.double(-0.1),
    barrelRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    maxSigmaIetaIetaBarrel = cms.double(999999999.0),
    maxDeltaPhiEndcaps = cms.double(0.15),
    intRadiusEndcapTk = cms.double(0.015),
    applyPreselection = cms.bool(True),
    isEndcapsPflow = cms.bool(False),
    minMVA = cms.double(-0.1),
    useGsfPfRecTracks = cms.bool(True),
    gsfElectronCoresTag = cms.InputTag("gsfElectronCores"),
    superClusterErrorFunction = cms.string('EcalClusterEnergyUncertaintyObjectSpecific'),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    seedsTag = cms.InputTag("ecalDrivenElectronSeeds"),
    maxDeltaPhiBarrel = cms.double(0.15),
    maxDeltaPhiEndcapsPflow = cms.double(999999999.0),
    hOverEPtMinPflow = cms.double(0.0),
    recHitFlagsToBeExcludedBarrel = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    intRadiusBarrelTk = cms.double(0.015)
)


process.gsfGeneralConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1),
    arbitratedMergedPreferCollection = cms.int32(2),
    allowFirstHitShare = cms.bool(True),
    minProb = cms.double(1e-06),
    arbitratedEcalSeededPreferCollection = cms.int32(-1),
    checkCharge = cms.bool(True),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(-1),
    TrackProducer2 = cms.string('gsfConversionTrackProducer'),
    TrackProducer1 = cms.string('generalConversionTrackProducer')
)


process.gsfGeneralInOutOutInConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1),
    arbitratedMergedPreferCollection = cms.int32(2),
    allowFirstHitShare = cms.bool(True),
    minProb = cms.double(1e-06),
    arbitratedEcalSeededPreferCollection = cms.int32(-1),
    checkCharge = cms.bool(True),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(-1),
    TrackProducer2 = cms.string('gsfConversionTrackProducer'),
    TrackProducer1 = cms.string('generalInOutOutInConversionTrackMerger')
)


process.gtDigis = cms.EDProducer("L1GlobalTriggerRawToDigi",
    DaqGtFedId = cms.untracked.int32(813),
    DaqGtInputTag = cms.InputTag("rawDataCollector"),
    UnpackBxInEvent = cms.int32(-1),
    ActiveBoardsMask = cms.uint32(65535)
)


process.gtEvmDigis = cms.EDProducer("L1GlobalTriggerEvmRawToDigi",
    EvmGtFedId = cms.untracked.int32(812),
    EvmGtInputTag = cms.InputTag("rawDataCollector"),
    UnpackBxInEvent = cms.int32(-1),
    ActiveBoardsMask = cms.uint32(65535),
    BstLengthBytes = cms.int32(-1)
)


process.hackHCALMIPs = cms.EDProducer("HcalTpgMipEmbedder",
    threshold = cms.double(3),
    src = cms.InputTag("hcalDigis"),
    rawThreshold = cms.uint32(3),
    cutOnRawBits = cms.bool(False)
)


process.hbheprereco = cms.EDProducer("HcalHitReconstructor",
    setTimingShapedCutsFlags = cms.bool(True),
    saturationParameters = cms.PSet(
        maxADCvalue = cms.int32(127)
    ),
    tsFromDB = cms.bool(True),
    samplesToAdd = cms.int32(2),
    correctionPhaseNS = cms.double(6.0),
    timingshapedcutsParameters = cms.PSet(
        win_gain = cms.double(3.0),
        win_offset = cms.double(0.0),
        ignorehighest = cms.bool(False),
        ignorelowest = cms.bool(True),
        tfilterEnvelope = cms.vdouble(50.0, -2.0, 4.25, 52.0, -2.0, 
            4.09, 54.0, -2.0, 3.95, 56.0, 
            -2.0, 3.82, 58.0, -2.0, 3.71, 
            60.0, -2.0, 3.6, 63.0, -2.0, 
            3.46, 66.0, -2.0, 3.33, 69.0, 
            -2.0, 3.22, 73.0, -2.0, 3.1, 
            77.0, -2.0, 2.99, 82.0, -2.0, 
            2.87, 88.0, -2.0, 2.75, 95.0, 
            -2.0, 2.64, 103.0, -2.0, 2.54, 
            113.0, -2.0, 2.44, 127.0, -2.0, 
            2.33, 146.0, -2.0, 2.23, 176.0, 
            -2.0, 2.13, 250.0, -2.0, 2.0)
    ),
    digiLabel = cms.InputTag("hcalDigis"),
    pulseShapeParameters = cms.PSet(
        TS4TS5UpperCut = cms.vdouble(1, 0.8, 0.75, 0.72),
        TS4TS5ChargeThreshold = cms.double(70),
        MinimumTS4TS5Threshold = cms.double(100),
        TS4TS5LowerThreshold = cms.vdouble(100, 120, 160, 200, 300, 
            500),
        TrianglePeakTS = cms.uint32(4),
        RMS8MaxCut = cms.vdouble(-13.5, -11.5, -11.5),
        UseDualFit = cms.bool(True),
        RightSlopeCut = cms.vdouble(5, 4.15, 4.15),
        TS4TS5UpperThreshold = cms.vdouble(70, 90, 100, 400),
        LinearThreshold = cms.vdouble(20, 100, 100000),
        RightSlopeSmallCut = cms.vdouble(1.08, 1.16, 1.16),
        LeftSlopeThreshold = cms.vdouble(250, 500, 100000),
        LeftSlopeCut = cms.vdouble(5, 2.55, 2.55),
        TriangleIgnoreSlow = cms.bool(False),
        TS4TS5LowerCut = cms.vdouble(-1, -0.7, -0.5, -0.4, -0.3, 
            0.1),
        MinimumChargeThreshold = cms.double(20),
        RightSlopeThreshold = cms.vdouble(250, 400, 100000),
        LinearCut = cms.vdouble(-3, -0.054, -0.054),
        RightSlopeSmallThreshold = cms.vdouble(150, 200, 100000),
        RMS8MaxThreshold = cms.vdouble(20, 100, 100000)
    ),
    setHSCPFlags = cms.bool(True),
    firstAuxTS = cms.int32(4),
    setSaturationFlags = cms.bool(True),
    useLeakCorrection = cms.bool(False),
    flagParameters = cms.PSet(
        nominalPedestal = cms.double(3.0),
        hitMultiplicityThreshold = cms.int32(17),
        hitEnergyMinimum = cms.double(1.0),
        pulseShapeParameterSets = cms.VPSet(cms.PSet(
            pulseShapeParameters = cms.vdouble(0.0, 100.0, -50.0, 0.0, -15.0, 
                0.15)
        ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(100.0, 2000.0, -50.0, 0.0, -5.0, 
                    0.05)
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(2000.0, 1000000.0, -50.0, 0.0, 95.0, 
                    0.0)
            ), 
            cms.PSet(
                pulseShapeParameters = cms.vdouble(-1000000.0, 1000000.0, 45.0, 0.1, 1000000.0, 
                    0.0)
            ))
    ),
    setTimingTrustFlags = cms.bool(False),
    correctForPhaseContainment = cms.bool(True),
    correctForTimeslew = cms.bool(True),
    setNoiseFlags = cms.bool(True),
    correctTiming = cms.bool(True),
    recoParamsFromDB = cms.bool(True),
    Subdetector = cms.string('HBHE'),
    hscpParameters = cms.PSet(
        slopeMax = cms.double(-0.6),
        r1Max = cms.double(1.0),
        r1Min = cms.double(0.15),
        TimingEnergyThreshold = cms.double(30.0),
        slopeMin = cms.double(-1.5),
        outerMin = cms.double(0.0),
        outerMax = cms.double(0.1),
        fracLeaderMin = cms.double(0.4),
        r2Min = cms.double(0.1),
        r2Max = cms.double(0.5),
        fracLeaderMax = cms.double(0.7)
    ),
    dropZSmarkedPassed = cms.bool(True),
    setPulseShapeFlags = cms.bool(True),
    firstSample = cms.int32(4)
)


process.hbhereco = cms.EDProducer("HBHEIsolatedNoiseReflagger",
    eeInput = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    LooseRBXHits1 = cms.int32(14),
    TightHPDHits2 = cms.int32(3),
    TightHPDHits1 = cms.int32(5),
    LooseEcalIsol = cms.double(0.08),
    ebInput = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    MinValidTrackPtBarrel = cms.double(0.9),
    LooseDiHitEne = cms.double(50.0),
    HBThreshold = cms.double(0.7),
    UseEcalRecoveredHits = cms.bool(False),
    TightTrackIsol = cms.double(0.05),
    LooseHPDHits1 = cms.int32(6),
    TightRBXHits2 = cms.int32(10),
    TightRBXHits1 = cms.int32(12),
    LooseRBXHits2 = cms.int32(10),
    TightEcalIsol = cms.double(0.04),
    LooseHcalIsol = cms.double(0.08),
    TightHcalIsol = cms.double(0.04),
    EBThreshold = cms.double(0.07),
    hbheInput = cms.InputTag("hbheprereco"),
    HcalAcceptSeverityLevel = cms.uint32(9),
    EEThreshold = cms.double(0.3),
    HESThreshold = cms.double(0.8),
    TightHPDEne2 = cms.double(25.0),
    TightMonoHitEne = cms.double(15.0),
    TightHPDEne1 = cms.double(10.0),
    LooseHPDHits2 = cms.int32(3),
    LooseHPDEne2 = cms.double(80.0),
    MinValidTrackNHits = cms.int32(5),
    LooseRBXEne1 = cms.double(10.0),
    MinValidTrackPt = cms.double(0.3),
    LooseHPDEne1 = cms.double(10.0),
    HEDThreshold = cms.double(0.8),
    trackExtrapolationInput = cms.InputTag("trackExtrapolator"),
    LooseMonoHitEne = cms.double(35.0),
    TightRBXEne2 = cms.double(50.0),
    LooseRBXEne2 = cms.double(300.0),
    TightRBXEne1 = cms.double(10.0),
    LooseTrackIsol = cms.double(0.1),
    UseHcalRecoveredHits = cms.bool(True),
    TightDiHitEne = cms.double(15.0),
    debug = cms.untracked.bool(False),
    EcalAcceptSeverityLevel = cms.uint32(3)
)


process.hbherecoMB = cms.EDProducer("HcalSimpleReconstructor",
    correctionPhaseNS = cms.double(13.0),
    digiLabel = cms.InputTag("hcalDigis"),
    tsFromDB = cms.bool(True),
    samplesToAdd = cms.int32(4),
    Subdetector = cms.string('HBHE'),
    correctForTimeslew = cms.bool(True),
    dropZSmarkedPassed = cms.bool(False),
    correctForPhaseContainment = cms.bool(True),
    firstSample = cms.int32(4)
)


process.hcalDigis = cms.EDProducer("HcalRawToDigi",
    UnpackZDC = cms.untracked.bool(True),
    FilterDataQuality = cms.bool(True),
    InputLabel = cms.InputTag("rawDataCollector"),
    ComplainEmptyData = cms.untracked.bool(False),
    UnpackCalib = cms.untracked.bool(True),
    UnpackTTP = cms.untracked.bool(True),
    lastSample = cms.int32(9),
    firstSample = cms.int32(0)
)


process.hcalnoise = cms.EDProducer("HcalNoiseInfoProducer",
    lMinRatio = cms.double(-999.0),
    lMaxHighEHitTime = cms.double(9999.0),
    pMinHighEHitTime = cms.double(-4.0),
    lMaxLowEHitTime = cms.double(9999.0),
    TS4TS5EnergyThreshold = cms.double(50),
    tMinRBXHits = cms.int32(50),
    TS4TS5UpperThreshold = cms.vdouble(70, 90, 100, 400, 4000),
    lMinHighEHitTime = cms.double(-9999.0),
    pMinRBXHits = cms.int32(20),
    tMinHPDHits = cms.int32(16),
    minRecHitE = cms.double(1.5),
    hlMaxRBXEMF = cms.double(0.01),
    pMinEEMF = cms.double(10.0),
    pMaxRatio = cms.double(0.85),
    tMinZeros = cms.int32(8),
    minEEMF = cms.double(50.0),
    tMaxLowEHitTime = cms.double(9999.0),
    minHighHitE = cms.double(25.0),
    lMinZeros = cms.int32(10),
    lMinRBXHits = cms.int32(999),
    minERatio = cms.double(50.0),
    lMinHPDNoOtherHits = cms.int32(10),
    hlMaxHPDEMF = cms.double(-9999.0),
    minLowHitE = cms.double(10.0),
    pMinRatio = cms.double(0.75),
    pMaxRBXEMF = cms.double(0.02),
    tMaxRatio = cms.double(999.0),
    tMinHighEHitTime = cms.double(-7.0),
    TS4TS5LowerCut = cms.vdouble(-1, -0.7, -0.4, -0.2, -0.08, 
        0, 0.1),
    lMaxRatio = cms.double(999.0),
    minEZeros = cms.double(10.0),
    pMinEZeros = cms.double(5.0),
    pMinERatio = cms.double(25.0),
    pMinZeros = cms.int32(4),
    tMinRatio = cms.double(-999.0),
    TS4TS5UpperCut = cms.vdouble(1, 0.8, 0.75, 0.72, 0.72),
    pMinLowEHitTime = cms.double(-6.0),
    pMinHPDHits = cms.int32(10),
    lMinLowEHitTime = cms.double(-9999.0),
    tMinHPDNoOtherHits = cms.int32(9),
    pMaxHPDEMF = cms.double(0.02),
    tMinLowEHitTime = cms.double(-9999.0),
    tMaxHighEHitTime = cms.double(6.0),
    pMaxLowEHitTime = cms.double(6.0),
    lMinHPDHits = cms.int32(17),
    TS4TS5LowerThreshold = cms.vdouble(100, 120, 150, 200, 300, 
        400, 500),
    pMinE = cms.double(40.0),
    pMinHPDNoOtherHits = cms.int32(7),
    pMaxHighEHitTime = cms.double(5.0),
    fillTracks = cms.bool(True),
    HcalAcceptSeverityLevel = cms.uint32(9),
    digiCollName = cms.string('hcalDigis'),
    minTrackPt = cms.double(1.0),
    fillDigis = cms.bool(True),
    maxTrackEta = cms.double(2.0),
    recHitCollName = cms.string('hbhereco'),
    fillRecHits = cms.bool(True),
    caloTowerCollName = cms.string('towerMaker'),
    maxCaloTowerIEta = cms.int32(20),
    maxProblemRBXs = cms.int32(20),
    trackCollName = cms.string('generalTracks'),
    fillCaloTowers = cms.bool(True),
    HcalRecHitFlagsToBeExcluded = cms.vint32(11, 12, 13, 14, 15)
)


process.hfEMClusters = cms.EDProducer("HFEMClusterProducer",
    hits = cms.InputTag("hfreco"),
    usePMTFlag = cms.bool(True),
    minTowerEnergy = cms.double(4.0),
    maximumRenergy = cms.double(50),
    maximumSL = cms.double(98),
    usePulseFlag = cms.bool(True),
    forcePulseFlagMC = cms.bool(False),
    correctionType = cms.int32(1),
    seedThresholdET = cms.double(5.0)
)


process.hfRecoEcalCandidate = cms.EDProducer("HFRecoEcalCandidateProducer",
    intercept2DSlope = cms.double(0.475),
    HFDBversion = cms.int32(1),
    e9e25Cut = cms.double(0.94),
    VertexCollection = cms.InputTag("offlinePrimaryVertices"),
    intercept2DCut = cms.double(0.815),
    HFDBvector = cms.vdouble(1.0, 1.0, 0.899, 0.994, 0.958, 
        0.942, 0.943, 0.96, 0.928, 0.922, 
        0.896, 0.812, 1.0, 1.0, 0.82, 
        0.917, 0.952, 0.929, 0.975, 0.984, 
        1.012, 0.971, 1.016, 0.938, 1.0, 
        1.0, 0.0, 0.0, -0.0036, -0.0087, 
        -0.0049, -0.0161, -0.0072, -0.0033, -0.0066, 
        -0.0062, -0.0045, -0.009, 0.0, 0.0, 
        -0.0056, -0.0024, -0.0064, -0.0063, -0.0078, 
        -0.0079, -0.0075, -0.0074, 0.0009, -0.018, 
        0.0, 0.0, 1.0, 1.0, 1.0565, 
        1.0432, 1.0714, 1.114, 1.0908, 1.0576, 
        1.0821, 1.0807, 1.0885, 1.1783, 1.0, 
        1.0, 1.157, 1.0631, 1.0401, 1.0803, 
        1.0506, 1.0491, 1.0235, 1.0643, 0.991, 
        1.0489, 1.0, 1.0),
    eCOREe9Cut = cms.vdouble(-1, 99),
    e1e9Cut = cms.vdouble(-1, 99),
    Correct = cms.bool(True),
    eSeLCut = cms.vdouble(-1, 99),
    hfclusters = cms.InputTag("hfEMClusters")
)


process.hfreco = cms.EDProducer("HcalHitReconstructor",
    digiTimeFromDB = cms.bool(True),
    S9S1stat = cms.PSet(
        longETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        HcalAcceptSeverityLevel = cms.int32(9),
        shortEnergyParams = cms.vdouble(35.1773, 35.37, 35.7933, 36.4472, 37.3317, 
            38.4468, 39.7925, 41.3688, 43.1757, 45.2132, 
            47.4813, 49.98, 52.7093),
        shortETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        short_optimumSlope = cms.vdouble(-99999, 0.0164905, 0.0238698, 0.0321383, 0.041296, 
            0.0513428, 0.0622789, 0.0741041, 0.0868186, 0.100422, 
            0.135313, 0.136289, 0.0589927),
        long_optimumSlope = cms.vdouble(-99999, 0.0164905, 0.0238698, 0.0321383, 0.041296, 
            0.0513428, 0.0622789, 0.0741041, 0.0868186, 0.100422, 
            0.135313, 0.136289, 0.0589927),
        longEnergyParams = cms.vdouble(43.5, 45.7, 48.32, 51.36, 54.82, 
            58.7, 63.0, 67.72, 72.86, 78.42, 
            84.4, 90.8, 97.62),
        isS8S1 = cms.bool(False)
    ),
    saturationParameters = cms.PSet(
        maxADCvalue = cms.int32(127)
    ),
    tsFromDB = cms.bool(True),
    samplesToAdd = cms.int32(1),
    correctionPhaseNS = cms.double(13.0),
    HFInWindowStat = cms.PSet(
        hflongEthresh = cms.double(40.0),
        hflongMinWindowTime = cms.vdouble(-10),
        hfshortEthresh = cms.double(40.0),
        hflongMaxWindowTime = cms.vdouble(10),
        hfshortMaxWindowTime = cms.vdouble(10),
        hfshortMinWindowTime = cms.vdouble(-12)
    ),
    digiLabel = cms.InputTag("hcalDigis"),
    setHSCPFlags = cms.bool(False),
    firstAuxTS = cms.int32(1),
    digistat = cms.PSet(
        HFdigiflagCoef = cms.vdouble(0.93, -0.38275, -0.012667),
        HFdigiflagExpectedPeak = cms.int32(2),
        HFdigiflagSamplesToAdd = cms.int32(3),
        HFdigiflagFirstSample = cms.int32(1),
        HFdigiflagMinEthreshold = cms.double(40)
    ),
    hfTimingTrustParameters = cms.PSet(
        hfTimingTrustLevel2 = cms.int32(4),
        hfTimingTrustLevel1 = cms.int32(1)
    ),
    PETstat = cms.PSet(
        longETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        short_R_29 = cms.vdouble(0.8),
        HcalAcceptSeverityLevel = cms.int32(9),
        shortEnergyParams = cms.vdouble(35.1773, 35.37, 35.7933, 36.4472, 37.3317, 
            38.4468, 39.7925, 41.3688, 43.1757, 45.2132, 
            47.4813, 49.98, 52.7093),
        short_R = cms.vdouble(0.8),
        shortETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        long_R_29 = cms.vdouble(0.8),
        longEnergyParams = cms.vdouble(43.5, 45.7, 48.32, 51.36, 54.82, 
            58.7, 63.0, 67.72, 72.86, 78.42, 
            84.4, 90.8, 97.62),
        long_R = cms.vdouble(0.98)
    ),
    setSaturationFlags = cms.bool(True),
    useLeakCorrection = cms.bool(False),
    setTimingTrustFlags = cms.bool(True),
    S8S1stat = cms.PSet(
        longETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        HcalAcceptSeverityLevel = cms.int32(9),
        shortEnergyParams = cms.vdouble(40, 100, 100, 100, 100, 
            100, 100, 100, 100, 100, 
            100, 100, 100),
        shortETParams = cms.vdouble(0, 0, 0, 0, 0, 
            0, 0, 0, 0, 0, 
            0, 0, 0),
        short_optimumSlope = cms.vdouble(0.3, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1),
        long_optimumSlope = cms.vdouble(0.3, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1, 0.1, 0.1, 
            0.1, 0.1, 0.1),
        longEnergyParams = cms.vdouble(40, 100, 100, 100, 100, 
            100, 100, 100, 100, 100, 
            100, 100, 100),
        isS8S1 = cms.bool(True)
    ),
    correctForPhaseContainment = cms.bool(False),
    correctForTimeslew = cms.bool(False),
    setNoiseFlags = cms.bool(True),
    correctTiming = cms.bool(True),
    recoParamsFromDB = cms.bool(True),
    Subdetector = cms.string('HF'),
    dropZSmarkedPassed = cms.bool(True),
    setPulseShapeFlags = cms.bool(False),
    firstSample = cms.int32(2)
)


process.hfrecoMB = cms.EDProducer("HcalSimpleReconstructor",
    correctionPhaseNS = cms.double(0.0),
    digiLabel = cms.InputTag("hcalDigis"),
    tsFromDB = cms.bool(True),
    samplesToAdd = cms.int32(2),
    Subdetector = cms.string('HF'),
    correctForTimeslew = cms.bool(False),
    dropZSmarkedPassed = cms.bool(False),
    correctForPhaseContainment = cms.bool(False),
    firstSample = cms.int32(4)
)


process.horeco = cms.EDProducer("HcalHitReconstructor",
    samplesToAdd = cms.int32(4),
    digiLabel = cms.InputTag("hcalDigis"),
    setNoiseFlags = cms.bool(True),
    tsFromDB = cms.bool(True),
    correctionPhaseNS = cms.double(13.0),
    setSaturationFlags = cms.bool(True),
    correctTiming = cms.bool(True),
    recoParamsFromDB = cms.bool(True),
    saturationParameters = cms.PSet(
        maxADCvalue = cms.int32(127)
    ),
    useLeakCorrection = cms.bool(False),
    setHSCPFlags = cms.bool(True),
    firstAuxTS = cms.int32(4),
    Subdetector = cms.string('HO'),
    setTimingTrustFlags = cms.bool(False),
    correctForTimeslew = cms.bool(True),
    dropZSmarkedPassed = cms.bool(True),
    setPulseShapeFlags = cms.bool(False),
    correctForPhaseContainment = cms.bool(True),
    firstSample = cms.int32(4)
)


process.horecoMB = cms.EDProducer("HcalSimpleReconstructor",
    correctionPhaseNS = cms.double(13.0),
    digiLabel = cms.InputTag("hcalDigis"),
    tsFromDB = cms.bool(True),
    samplesToAdd = cms.int32(4),
    Subdetector = cms.string('HO'),
    correctForTimeslew = cms.bool(True),
    dropZSmarkedPassed = cms.bool(False),
    correctForPhaseContainment = cms.bool(True),
    firstSample = cms.int32(4)
)


process.hpsPFTauDiscriminationByDeadECALElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronDeadECAL",
    minStatus = cms.uint32(12),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    dR = cms.double(0.08),
    PFTauProducer = cms.InputTag("hpsPFTauProducer")
)


process.hpsPFTauDiscriminationByDecayModeFinding = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-0.1),
        maxMass = cms.double(1),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.double(1.3),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.double(1.2),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.double(1.5),
            nCharged = cms.uint32(3)
        )),
    matchingCone = cms.double(0.1)
)


process.hpsPFTauDiscriminationByIsolationMVAraw = cms.EDProducer("PFRecoTauDiscriminationByMVAIsolation",
    mvaMin = cms.double(0.863),
    gbrfFilePath = cms.FileInPath('RecoTauTag/RecoTau/data/gbrfTauIso.root'),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJetsForRhoComputationVoronoi","rho"),
    returnMVA = cms.bool(True),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    )
)


process.hpsPFTauDiscriminationByLooseChargedIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    applyDeltaBetaCorrection = cms.bool(True),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    maximumSumPtCut = cms.double(2.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    maximumOccupancy = cms.uint32(0),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(2.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    rhoUEOffsetCorrection = cms.double(1.0),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr3Hits = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    applyDeltaBetaCorrection = cms.bool(True),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    maximumSumPtCut = cms.double(2.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    maximumOccupancy = cms.uint32(0),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByLooseElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    BremCombined_HOP = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(0.6),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    ApplyCut_BremCombined = cms.bool(False),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(False),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.hpsPFTauDiscriminationByLooseIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    applyDeltaBetaCorrection = cms.bool(False),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByLooseChargedIsolation")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByLooseIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.0729'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    rhoUEOffsetCorrection = cms.double(1.0),
    maximumSumPtCut = cms.double(1.5),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByLooseChargedIsolation")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByLooseIsolationMVA = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        mva = cms.PSet(
            cut = cms.double(0.795),
            Producer = cms.InputTag("hpsPFTauDiscriminationByIsolationMVAraw")
        ),
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    matchingCone = cms.double(0.1),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-0.1),
        maxMass = cms.double(1),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.double(1.3),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.double(1.2),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.double(1.5),
            nCharged = cms.uint32(3)
        ))
)


process.hpsPFTauDiscriminationByLooseMuonRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    a = cms.double(0.5),
    c = cms.double(0.0),
    b = cms.double(0.5),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('noSegMatch'),
    HoPMin = cms.double(0.2)
)


process.hpsPFTauDiscriminationByMVA2LooseElectronRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    key = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejection","category"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(-0.0639254)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(-0.0220708)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(-0.102071)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(-0.0233814)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(-0.0391565)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(-0.142564)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(0.00982555)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(-0.0596019)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(-0.0381238)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(-0.100381)
        )),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejection"),
    PFTauProducer = cms.InputTag("hpsPFTauProducer")
)


process.hpsPFTauDiscriminationByMVA2MediumElectronRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    key = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejection","category"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.011729)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.0203646)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(0.177502)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(0.0103449)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(0.257798)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(-0.0966083)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(-0.0466023)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(0.0467638)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(0.0863876)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(0.233436)
        )),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejection"),
    PFTauProducer = cms.InputTag("hpsPFTauProducer")
)


process.hpsPFTauDiscriminationByMVA2TightElectronRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    key = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejection","category"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.0306715)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.992195)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(0.308324)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(-0.0370998)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(0.864643)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(0.0832094)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(0.791665)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(0.675537)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(0.87047)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(0.233711)
        )),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejection"),
    PFTauProducer = cms.InputTag("hpsPFTauProducer")
)


process.hpsPFTauDiscriminationByMVA2VLooseElectronRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    key = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejection","category"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(-0.141383)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(-0.122568)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(-0.138286)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(-0.100279)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(-0.116113)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(-0.191557)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(-0.0921955)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(-0.0936173)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(-0.119732)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(-0.1042)
        )),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA2rawElectronRejection"),
    PFTauProducer = cms.InputTag("hpsPFTauProducer")
)


process.hpsPFTauDiscriminationByMVA2rawElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronMVA2",
    minMVA1prongStripsWgsfWOpfEleMvaBL = cms.double(0.0),
    minMVA1prongEC = cms.double(0.0),
    inputFileName1prongNoEleMatchEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_NoEleMatch_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_woG_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongStripsWgsfWOpfEleMvaBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwoPFMVA_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongStripsWgsfWpfEleMvaEC = cms.double(0.0),
    minMVA1prongStripsWOgsfEC = cms.double(0.0),
    returnMVA = cms.bool(True),
    inputFileName1prongStripsWgsfWOpfEleMvaEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwoPFMVA_Endcap_BDTG.weights.xml.gz'),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    minMVA1prongBL = cms.double(0.0),
    inputFileName1prongStripsWgsfWpfEleMvaEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwPFMVA_Endcap_BDTG.weights.xml.gz'),
    method = cms.string('BDT'),
    inputFileName1prongBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_woG_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongStripsWgsfWpfEleMvaBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwPFMVA_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongStripsWgsfWpfEleMvaBL = cms.double(0.0),
    inputFileName1prongNoEleMatchBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_NoEleMatch_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongStripsWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwoGSF_Endcap_BDTG.weights.xml.gz'),
    minMVA1prongNoEleMatchBL = cms.double(0.0),
    minMVA1prongStripsWOgsfBL = cms.double(0.0),
    minMVA1prongNoEleMatchEC = cms.double(0.0),
    inputFileName1prongStripsWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwoGSF_Barrel_BDTG.weights.xml.gz'),
    srcGsfElectrons = cms.InputTag("gsfElectrons"),
    minMVA1prongStripsWgsfWOpfEleMvaEC = cms.double(0.0)
)


process.hpsPFTauDiscriminationByMVA3LooseElectronRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    key = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejection","category"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.1816889)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.1538533)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(0.5605197)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(0.66321647)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(0.86337829)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(0.94084531)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(0.98025548)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(0.80039471)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(-1.0)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(0.49787951)
        ), 
        cms.PSet(
            category = cms.uint32(10),
            cut = cms.double(0.74751109)
        ), 
        cms.PSet(
            category = cms.uint32(11),
            cut = cms.double(0.94486511)
        ), 
        cms.PSet(
            category = cms.uint32(12),
            cut = cms.double(0.63645148)
        ), 
        cms.PSet(
            category = cms.uint32(13),
            cut = cms.double(0.9575507)
        ), 
        cms.PSet(
            category = cms.uint32(14),
            cut = cms.double(0.9549247)
        ), 
        cms.PSet(
            category = cms.uint32(15),
            cut = cms.double(0.83487612)
        ), 
        cms.PSet(
            category = cms.uint32(16),
            cut = cms.double(-1.0)
        ), 
        cms.PSet(
            category = cms.uint32(17),
            cut = cms.double(-1.0)
        )),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejection"),
    PFTauProducer = cms.InputTag("hpsPFTauProducer")
)


process.hpsPFTauDiscriminationByMVA3MediumElectronRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    key = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejection","category"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.5577119)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.7271899)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(0.90410149)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(0.94858187)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(0.95044029)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(0.97195327)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(0.99229473)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(0.92997772)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(-0.3049897)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(0.92191792)
        ), 
        cms.PSet(
            category = cms.uint32(10),
            cut = cms.double(0.96017671)
        ), 
        cms.PSet(
            category = cms.uint32(11),
            cut = cms.double(0.98126549)
        ), 
        cms.PSet(
            category = cms.uint32(12),
            cut = cms.double(0.80912107)
        ), 
        cms.PSet(
            category = cms.uint32(13),
            cut = cms.double(0.98326528)
        ), 
        cms.PSet(
            category = cms.uint32(14),
            cut = cms.double(0.97490251)
        ), 
        cms.PSet(
            category = cms.uint32(15),
            cut = cms.double(0.94708711)
        ), 
        cms.PSet(
            category = cms.uint32(16),
            cut = cms.double(-1.0)
        ), 
        cms.PSet(
            category = cms.uint32(17),
            cut = cms.double(-1.0)
        )),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejection"),
    PFTauProducer = cms.InputTag("hpsPFTauProducer")
)


process.hpsPFTauDiscriminationByMVA3TightElectronRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    key = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejection","category"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.78914332)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.91818088)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(0.96754968)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(0.98437631)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(0.96684271)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(0.99065852)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(0.99797088)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(0.96952927)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(0.1180589)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(0.9714281)
        ), 
        cms.PSet(
            category = cms.uint32(10),
            cut = cms.double(0.98451769)
        ), 
        cms.PSet(
            category = cms.uint32(11),
            cut = cms.double(0.99372888)
        ), 
        cms.PSet(
            category = cms.uint32(12),
            cut = cms.double(0.84681427)
        ), 
        cms.PSet(
            category = cms.uint32(13),
            cut = cms.double(0.98940611)
        ), 
        cms.PSet(
            category = cms.uint32(14),
            cut = cms.double(0.98308349)
        ), 
        cms.PSet(
            category = cms.uint32(15),
            cut = cms.double(0.97482169)
        ), 
        cms.PSet(
            category = cms.uint32(16),
            cut = cms.double(-1.0)
        ), 
        cms.PSet(
            category = cms.uint32(17),
            cut = cms.double(-1.0)
        )),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejection"),
    PFTauProducer = cms.InputTag("hpsPFTauProducer")
)


process.hpsPFTauDiscriminationByMVA3VTightElectronRejection = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    key = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejection","category"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.89307231)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.96239871)
        ), 
        cms.PSet(
            category = cms.uint32(2),
            cut = cms.double(0.98247749)
        ), 
        cms.PSet(
            category = cms.uint32(3),
            cut = cms.double(0.99013329)
        ), 
        cms.PSet(
            category = cms.uint32(4),
            cut = cms.double(0.9768821)
        ), 
        cms.PSet(
            category = cms.uint32(5),
            cut = cms.double(0.9958095)
        ), 
        cms.PSet(
            category = cms.uint32(6),
            cut = cms.double(0.99797088)
        ), 
        cms.PSet(
            category = cms.uint32(7),
            cut = cms.double(0.98120493)
        ), 
        cms.PSet(
            category = cms.uint32(8),
            cut = cms.double(0.60025311)
        ), 
        cms.PSet(
            category = cms.uint32(9),
            cut = cms.double(0.98320472)
        ), 
        cms.PSet(
            category = cms.uint32(10),
            cut = cms.double(0.9897899)
        ), 
        cms.PSet(
            category = cms.uint32(11),
            cut = cms.double(0.9964357)
        ), 
        cms.PSet(
            category = cms.uint32(12),
            cut = cms.double(0.88230568)
        ), 
        cms.PSet(
            category = cms.uint32(13),
            cut = cms.double(0.99132508)
        ), 
        cms.PSet(
            category = cms.uint32(14),
            cut = cms.double(0.98467928)
        ), 
        cms.PSet(
            category = cms.uint32(15),
            cut = cms.double(0.98235631)
        ), 
        cms.PSet(
            category = cms.uint32(16),
            cut = cms.double(-1.0)
        ), 
        cms.PSet(
            category = cms.uint32(17),
            cut = cms.double(-1.0)
        )),
    toMultiplex = cms.InputTag("hpsPFTauDiscriminationByMVA3rawElectronRejection"),
    PFTauProducer = cms.InputTag("hpsPFTauProducer")
)


process.hpsPFTauDiscriminationByMVA3rawElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronMVA3",
    inputFileName1prongNoEleMatchWgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwoGSF_Endcap_BDTG.weights.xml.gz'),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    minMVA1prongNoEleMatchWgWgsfEC = cms.double(0.0),
    inputFileName1prongWOgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongWOgWOgsfBL = cms.double(0.0),
    minMVA1prongNoEleMatchWOgWOgsfEC = cms.double(0.0),
    minMVA1prongNoEleMatchWgWOgsfBL = cms.double(0.0),
    inputFileName1prongWgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwoGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongWOgWgsfEC = cms.double(0.0),
    inputFileName1prongWgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwoGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWOgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongWgWgsfBL = cms.double(0.0),
    inputFileName1prongNoEleMatchWOgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwGSF_Endcap_BDTG.weights.xml.gz'),
    minMVA1prongNoEleMatchWgWOgsfEC = cms.double(0.0),
    minMVA1prongNoEleMatchWOgWgsfBL = cms.double(0.0),
    minMVA1prongWgWOgsfEC = cms.double(0.0),
    minMVA1prongWgWOgsfBL = cms.double(0.0),
    returnMVA = cms.bool(True),
    minMVA1prongWOgWOgsfEC = cms.double(0.0),
    inputFileName1prongWOgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwoGSF_Endcap_BDTG.weights.xml.gz'),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    inputFileName1prongWgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwoGSF_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWOgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwoGSF_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWOgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwoGSF_Endcap_BDTG.weights.xml.gz'),
    minMVA1prongWOgWgsfBL = cms.double(0.0),
    minMVA1prongWgWgsfEC = cms.double(0.0),
    minMVA1prongNoEleMatchWOgWOgsfBL = cms.double(0.0),
    inputFileName1prongNoEleMatchWgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongNoEleMatchWgWgsfBL = cms.double(0.0),
    inputFileName1prongNoEleMatchWgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongWOgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwoGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA3prongNoMatch = cms.double(0.0),
    method = cms.string('BDTG'),
    minMVA1prongNoEleMatchWOgWgsfEC = cms.double(0.0),
    srcGsfElectrons = cms.InputTag("gsfElectrons"),
    minMVA3prongMatch = cms.double(0.0),
    inputFileName1prongWOgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongWgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwGSF_Barrel_BDTG.weights.xml.gz')
)


process.hpsPFTauDiscriminationByMVAElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronMVA",
    minMVA1prongStripsWgsfEC = cms.double(0.053),
    minMVA1prongStripsWOgsfEC = cms.double(0.049),
    minMVA1prongBL = cms.double(0.054),
    minMVA1prongEC = cms.double(0.06),
    returnMVA = cms.bool(False),
    inputFileName1prongStripsWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_1_1EC_BDT.weights.xml.gz'),
    inputFileName1prongStripsWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_1_1BL_BDT.weights.xml.gz'),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        ),
        electronMedium = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByMediumElectronRejection")
        )
    ),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    inputFileName1prongStripsWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_0_1BL_BDT.weights.xml.gz'),
    inputFileName1prongStripsWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_0_1EC_BDT.weights.xml.gz'),
    inputFileName1prongEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_X_0EC_BDT.weights.xml.gz'),
    minMVA1prongStripsWgsfBL = cms.double(0.06),
    method = cms.string('BDT'),
    minMVA1prongStripsWOgsfBL = cms.double(0.054),
    inputFileName1prongBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_X_0BL_BDT.weights.xml.gz')
)


process.hpsPFTauDiscriminationByMediumChargedIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    rhoUEOffsetCorrection = cms.double(1.0),
    maximumSumPtCut = cms.double(1.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    relativeSumPtCut = cms.double(0.0),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    applyDeltaBetaCorrection = cms.bool(True),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(1.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    maximumOccupancy = cms.uint32(0),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr3Hits = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    rhoUEOffsetCorrection = cms.double(1.0),
    maximumSumPtCut = cms.double(1.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByMediumElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    BremCombined_HOP = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(-0.1),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    ApplyCut_BremCombined = cms.bool(False),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(True),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.hpsPFTauDiscriminationByMediumIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByMediumChargedIsolation")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.8),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.8),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByMediumIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.2739'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(0.8),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByMediumChargedIsolation")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    particleFlowSrc = cms.InputTag("particleFlow"),
    rhoUEOffsetCorrection = cms.double(1.0),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.8),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.8),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByMediumIsolationMVA = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        mva = cms.PSet(
            cut = cms.double(0.884),
            Producer = cms.InputTag("hpsPFTauDiscriminationByIsolationMVAraw")
        ),
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    matchingCone = cms.double(0.1),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-0.1),
        maxMass = cms.double(1),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.double(1.3),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.double(1.2),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.double(1.5),
            nCharged = cms.uint32(3)
        ))
)


process.hpsPFTauDiscriminationByMediumMuonRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    a = cms.double(0.5),
    c = cms.double(0.0),
    b = cms.double(0.5),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('noAllArbitrated'),
    HoPMin = cms.double(0.2)
)


process.hpsPFTauDiscriminationByRawChargedIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(2.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    storeRawSumPt = cms.bool(True),
    applyRhoCorrection = cms.bool(False),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(2.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    storeRawSumPt = cms.bool(True),
    applyRhoCorrection = cms.bool(False),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByRawGammaIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(2.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    storeRawSumPt = cms.bool(True),
    applyRhoCorrection = cms.bool(False),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByTightChargedIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    rhoUEOffsetCorrection = cms.double(1.0),
    maximumSumPtCut = cms.double(0.8),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    relativeSumPtCut = cms.double(0.0),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    applyDeltaBetaCorrection = cms.bool(True),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(0.8),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    maximumOccupancy = cms.uint32(0),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr3Hits = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    rhoUEOffsetCorrection = cms.double(1.0),
    maximumSumPtCut = cms.double(0.8),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByTightElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    BremCombined_HOP = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(-0.1),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    ApplyCut_BremCombined = cms.bool(True),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(True),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.hpsPFTauDiscriminationByTightIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByTightChargedIsolation")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByTightIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.4576'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(0.5),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByTightChargedIsolation")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    applyDeltaBetaCorrection = cms.bool(True),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    particleFlowSrc = cms.InputTag("particleFlow"),
    rhoUEOffsetCorrection = cms.double(1.0),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsPFTauDiscriminationByTightIsolationMVA = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        mva = cms.PSet(
            cut = cms.double(0.921),
            Producer = cms.InputTag("hpsPFTauDiscriminationByIsolationMVAraw")
        ),
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    matchingCone = cms.double(0.1),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-0.1),
        maxMass = cms.double(1),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.double(1.3),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.double(1.2),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.double(1.5),
            nCharged = cms.uint32(3)
        ))
)


process.hpsPFTauDiscriminationByTightMuonRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    a = cms.double(0.5),
    c = cms.double(0.0),
    b = cms.double(0.5),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('noAllArbitratedWithHOP'),
    HoPMin = cms.double(0.2)
)


process.hpsPFTauDiscriminationByVLooseChargedIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(3.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.1647'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    applyRhoCorrection = cms.bool(False),
    customOuterCone = cms.double(0.3),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByVLooseCombinedIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(3.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.1647'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    applyRhoCorrection = cms.bool(False),
    customOuterCone = cms.double(0.3),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauDiscriminationByVLooseIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(2.0),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    isoConeSizeForDeltaBeta = cms.double(0.3),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByVLooseChargedIsolation")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    customOuterCone = cms.double(0.3)
)


process.hpsPFTauDiscriminationByVLooseIsolationDBSumPtCorr = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    PFTauProducer = cms.InputTag("hpsPFTauProducer"),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(2.0),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    maximumSumPtCut = cms.double(2.0),
    deltaBetaPUTrackPtCutOverride = cms.double(0.5),
    isoConeSizeForDeltaBeta = cms.double(0.8),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.0729'),
    relativeSumPtCut = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
        ),
        preIso = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsPFTauDiscriminationByVLooseChargedIsolation")
        )
    ),
    applyOccupancyCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(True),
    applyRelativeSumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    rhoUEOffsetCorrection = cms.double(1.0),
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    applyRhoCorrection = cms.bool(False),
    customOuterCone = cms.double(0.3),
    particleFlowSrc = cms.InputTag("particleFlow")
)


process.hpsPFTauProducer = cms.EDProducer("RecoTauPiZeroUnembedder",
    src = cms.InputTag("hpsPFTauProducerSansRefs")
)


process.hpsPFTauProducerSansRefs = cms.EDProducer("RecoTauCleaner",
    cleaners = cms.VPSet(cms.PSet(
        selectionPassFunction = cms.string('abs(charge())-1'),
        selection = cms.string('signalPFChargedHadrCands().size() = 3'),
        name = cms.string('UnitCharge'),
        plugin = cms.string('RecoTauStringCleanerPlugin'),
        selectionFailValue = cms.double(0)
    ), 
        cms.PSet(
            selectionPassFunction = cms.string('0'),
            selection = cms.string('signalPiZeroCandidates().size() = 0 | signalPiZeroCandidates()[0].pt > 2.5'),
            name = cms.string('leadStripPtLt2_5'),
            plugin = cms.string('RecoTauStringCleanerPlugin'),
            selectionFailValue = cms.double(1000.0)
        ), 
        cms.PSet(
            src = cms.InputTag("hpsSelectionDiscriminator"),
            name = cms.string('HPS_Select'),
            plugin = cms.string('RecoTauDiscriminantCleanerPlugin')
        ), 
        cms.PSet(
            selectionPassFunction = cms.string('isolationPFChargedHadrCandsPtSum()+isolationPFGammaCandsEtSum()'),
            selection = cms.string('leadPFCand().isNonnull()'),
            name = cms.string('CombinedIsolation'),
            plugin = cms.string('RecoTauStringCleanerPlugin'),
            selectionFailValue = cms.double(1000.0)
        )),
    src = cms.InputTag("combinatoricRecoTaus")
)


process.hpsSelectionDiscriminator = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    PFTauProducer = cms.InputTag("combinatoricRecoTaus"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(0.0),
    coneSizeFormula = cms.string('max(min(0.1, 2.8/pt()),0.05)'),
    matchingCone = cms.double(0.1),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-0.1),
        maxMass = cms.double(1),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.double(1.3),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.double(1.2),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.double(1.5),
            nCharged = cms.uint32(3)
        ))
)


process.hpsTancTaus = cms.EDProducer("RecoTauPiZeroUnembedder",
    src = cms.InputTag("hpsTancTausSansRefs")
)


process.hpsTancTausDiscriminationAgainstCaloMuon = cms.EDProducer("PFRecoTauDiscriminationAgainstCaloMuon",
    srcHcalRecHits = cms.InputTag("hbhereco"),
    minLeadTrackPt = cms.double(15.0),
    maxEnToTrackRatio = cms.double(0.25),
    srcVertex = cms.InputTag("offlinePrimaryVertices"),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    srcEcalRecHitsBarrel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    dRhcal = cms.double(25.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsTancTausDiscriminationByLeadingTrackFinding")
        )
    ),
    maxEnHcal = cms.double(8.0),
    dRecal = cms.double(15.0),
    srcEcalRecHitsEndcap = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    minLeadTrackPtFraction = cms.double(0.8),
    maxEnEcal = cms.double(3.0)
)


process.hpsTancTausDiscriminationByDecayModeSelection = cms.EDProducer("PFRecoTauDiscriminationByHPSSelection",
    src = cms.InputTag("combinatoricRecoTaus"),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    minTauPt = cms.double(5.0),
    coneSizeFormula = cms.string('0.3'),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        minMass = cms.double(-0.1),
        maxMass = cms.double(1),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            assumeStripMass = cms.double(0.1349),
            minMass = cms.double(0.3),
            maxMass = cms.double(1.3),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            minPi0Mass = cms.double(0.05),
            maxMass = cms.double(1.2),
            maxPi0Mass = cms.double(0.2),
            nPiZeros = cms.uint32(2),
            minMass = cms.double(0.4),
            nCharged = cms.uint32(1),
            assumeStripMass = cms.double(0.0)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            minMass = cms.double(0.8),
            maxMass = cms.double(1.5),
            nCharged = cms.uint32(3)
        )),
    matchingCone = cms.double(0.1)
)


process.hpsTancTausDiscriminationByFlightPath = cms.EDProducer("PFRecoTauDiscriminationByFlight",
    refitPV = cms.bool(True),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsTancTausDiscriminationByDecayModeSelection")
        )
    ),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    vertexSource = cms.InputTag("offlinePrimaryVertices"),
    beamspot = cms.InputTag("offlineBeamSpot")
)


process.hpsTancTausDiscriminationByLeadingPionPtCut = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    UseOnlyChargedHadrons = cms.bool(False)
)


process.hpsTancTausDiscriminationByLeadingTrackFinding = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    UseOnlyChargedHadrons = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsTancTaus")
)


process.hpsTancTausDiscriminationByLeadingTrackPtCut = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    UseOnlyChargedHadrons = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsTancTaus")
)


process.hpsTancTausDiscriminationByLooseElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    BremCombined_HOP = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(0.6),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    ApplyCut_BremCombined = cms.bool(False),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(False),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.hpsTancTausDiscriminationByLooseIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsTancTausDiscriminationByDecayModeSelection")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsTancTausDiscriminationByLooseMuonRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    a = cms.double(0.5),
    c = cms.double(0.0),
    b = cms.double(0.5),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('noSegMatch'),
    HoPMin = cms.double(0.2)
)


process.hpsTancTausDiscriminationByMediumElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    BremCombined_HOP = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(-0.1),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    ApplyCut_BremCombined = cms.bool(False),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(True),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.hpsTancTausDiscriminationByMediumIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsTancTausDiscriminationByDecayModeSelection")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.8),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.8),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsTancTausDiscriminationByTanc = cms.EDProducer("RecoTauMVATransform",
    Prediscriminants = cms.PSet(
        hpsSelect = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsTancTausDiscriminationByDecayModeSelection")
        ),
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsTancTausDiscriminationByLeadingPionPtCut")
        )
    ),
    transforms = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        transform = cms.PSet(
            max = cms.double(1.99833333333),
            transform = cms.vdouble( (0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
                0.243539974508, 0.243539974508, 0.243539974508, 0.243693947972, 0.2446621342, 
                0.25648929965, 0.2608766459, 0.265139843949, 0.268288096025, 0.271490633611, 
                0.274812027295, 0.278726505561, 0.283196361675, 0.287921047203, 0.293485065795, 
                0.299327353484, 0.305468394708, 0.310410038477, 0.315654364298, 0.320865024837, 
                0.324875648584, 0.328691660974, 0.332598633349, 0.336484807993, 0.339893814351, 
                0.343528868912, 0.346311138119, 0.348525259682, 0.350638868762, 0.352500481165, 
                0.354385202603, 0.356405103778, 0.358448162743, 0.359626155068, 0.361359527277, 
                0.362911630832, 0.364767207965, 0.365568276809, 0.367161876825, 0.368245783665, 
                0.369700987138, 0.370891835827, 0.371335926598, 0.372724067775, 0.374122626292, 
                0.374872824273, 0.376287585272, 0.377808481377, 0.379437962659, 0.380385427158, 
                0.381454465894, 0.382529530437, 0.383308773065, 0.383900643462, 0.384488881534, 
                0.385284008411, 0.385778244795, 0.386880706208, 0.387787417873, 0.389206336729, 
                0.390430843456, 0.391560096158, 0.392490239284, 0.393218300975, 0.394889524946, 
                0.396474094424, 0.397328157396, 0.398823062781, 0.400437280424, 0.401846875958, 
                0.402719262685, 0.403705236447, 0.40437725886, 0.405483096559, 0.40715324019, 
                0.408161946716, 0.408949958358, 0.410194428622, 0.411674966358, 0.412726139917, 
                0.413994836217, 0.414922434459, 0.415970963664, 0.417494895799, 0.418345516985, 
                0.419769194149, 0.42120259427, 0.423008169722, 0.424220511323, 0.425684525769, 
                0.426912279039, 0.428023327968, 0.429389155258, 0.430889124801, 0.432147128025, 
                0.433793555744, 0.435196517338, 0.436351162787, 0.437253465009, 0.438419065687, 
                0.439590897333, 0.440949213705, 0.441921470289, 0.442848592497, 0.44396524306, 
                0.445223842049, 0.446977728682, 0.448745488265, 0.451078381688, 0.451907557714, 
                0.452739787751, 0.453638395261, 0.45475822595, 0.456165813144, 0.457223834211, 
                0.457934807034, 0.45922014571, 0.461017229233, 0.461451032994, 0.463048655665, 
                0.464804181316, 0.466425147476, 0.467542494191, 0.468517661795, 0.470468799941, 
                0.47198076935, 0.472892624736, 0.474420238705, 0.476266453893, 0.477505267649, 
                0.479532143347, 0.481200116592, 0.481613637289, 0.483360304775, 0.485061449421, 
                0.487101659613, 0.488019909526, 0.488999144832, 0.490200759674, 0.491190516798, 
                0.493849514855, 0.495306102206, 0.495928489713, 0.4964353883, 0.498082556741, 
                0.49979254034, 0.500775976586, 0.502679733683, 0.504598020717, 0.505078487853, 
                0.506619141507, 0.508171974823, 0.509336469886, 0.510953930915, 0.512581697566, 
                0.513998315702, 0.515647034962, 0.515939613111, 0.517975069449, 0.519430445753, 
                0.519957296262, 0.521273324958, 0.522406663349, 0.523925469498, 0.524625850033, 
                0.525907581275, 0.527065315655, 0.52822815856, 0.528783474767, 0.529145626115, 
                0.529453767868, 0.530435650231, 0.532014259582, 0.532782125184, 0.534528955521, 
                0.535733634238, 0.539584530704, 0.541410067901, 0.543682312792, 0.545138243861, 
                0.546811742597, 0.548048893429, 0.548459504636, 0.550158093752, 0.551205716597, 
                0.552261157841, 0.553773021814, 0.554620522074, 0.557022425024, 0.558787346691, 
                0.55989408991, 0.562351160997, 0.564603650808, 0.567330572538, 0.568251047692, 
                0.570322191691, 0.570800554836, 0.573840553165, 0.575722428922, 0.578806943369, 
                0.580018988744, 0.581943439091, 0.583637839285, 0.583719886077, 0.585230062162, 
                0.586459819001, 0.58819018682, 0.589432428675, 0.590707557501, 0.59199058109, 
                0.593311935901, 0.596143502405, 0.598713047084, 0.59985869618, 0.60146038335, 
                0.603073645068, 0.60364159568, 0.605493798425, 0.607716165748, 0.611539567166, 
                0.61344596304, 0.614868728468, 0.616356298487, 0.617243661796, 0.618356139972, 
                0.620433033442, 0.623603658141, 0.625027738979, 0.626745245057, 0.630061473707, 
                0.634451273629, 0.636224368987, 0.638386932974, 0.639666729708, 0.641472541416, 
                0.643376129813, 0.645998175052, 0.648651724655, 0.650614385321, 0.651964427491, 
                0.654372246094, 0.656912558238, 0.657658356547, 0.658734274882, 0.661006291486, 
                0.663094362812, 0.664860224717, 0.667639986138, 0.669224738703, 0.670609710516, 
                0.672008536945, 0.674322956904, 0.676181757848, 0.680504320591, 0.681701882298, 
                0.683847428048, 0.687028204213, 0.690096183579, 0.692936565842, 0.698333032093, 
                0.702469873766, 0.704533440299, 0.706621657637, 0.710308262591, 0.713270705866, 
                0.714865826284, 0.719086552707, 0.722147885763, 0.725885046087, 0.729450681758, 
                0.732859861331, 0.739185288999, 0.743172463789, 0.74657896386, 0.751327840506, 
                0.754658774214, 0.758047388164, 0.762059448212, 0.769914558551, 0.775838239214, 
                0.780728907111, 0.786952215918, 0.793694146175, 0.796885300439, 0.802863959078, 
                0.813001141474, 0.820597251397, 0.829350775725, 0.837460143471, 0.84199323298, 
                0.847433416989, 0.854638027367, 0.860714284529, 0.869959964541, 0.876007819869, 
                0.884455823419, 0.896538436371, 0.904016005807, 0.910382232961, 0.916770946986, 
                0.93386870405, 0.943467586229, 0.95165443966, 0.971789456433, 0.970755563959, 
                0.9679163435, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0 ) ),
            min = cms.double(-0.998333333333)
        ),
        nCharged = cms.uint32(3)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            transform = cms.PSet(
                max = cms.double(1.99833333333),
                transform = cms.vdouble( (0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                    0.725479663285, 0.725479663285, 0.725625489751, 0.725917318629, 0.727526582607, 
                    0.745748231906, 0.750169168536, 0.757185219071, 0.764249672036, 0.767603981959, 
                    0.772574492642, 0.775097031572, 0.777704615235, 0.779407980465, 0.781767581973, 
                    0.784842584326, 0.786420654919, 0.787883166617, 0.790123535551, 0.79208138528, 
                    0.79327247227, 0.795907708578, 0.798503646112, 0.800206834461, 0.802663946447, 
                    0.8031582666, 0.80490222571, 0.806889568691, 0.809394028316, 0.811861583702, 
                    0.813019057268, 0.81342095915, 0.814698723372, 0.816279445985, 0.818232037783, 
                    0.819367026875, 0.819759858707, 0.821328989638, 0.822878675172, 0.82364763472, 
                    0.825358996088, 0.828499118125, 0.829830087025, 0.831236000117, 0.832703495507, 
                    0.833414247004, 0.834436344112, 0.834946785624, 0.835869791486, 0.836486520822, 
                    0.837364626557, 0.838193318858, 0.839702591039, 0.841531457051, 0.842218371935, 
                    0.843640339114, 0.844222988069, 0.845392038566, 0.846778761898, 0.84769605779, 
                    0.848073950379, 0.848849957765, 0.849494110293, 0.8500905241, 0.851335675181, 
                    0.853500950651, 0.853839833615, 0.854227213103, 0.854567621296, 0.854984559013, 
                    0.855203285083, 0.856470785047, 0.857475859603, 0.85892685241, 0.859008202829, 
                    0.859451257957, 0.860468389831, 0.861489507276, 0.861351261404, 0.861705874851, 
                    0.861659795003, 0.861659795003, 0.86179137032, 0.862147375366, 0.862550177315, 
                    0.863312092458, 0.863805642705, 0.864438066642, 0.864754370118, 0.865480701328, 
                    0.866346092335, 0.867168965701, 0.867397571488, 0.868313201223, 0.868771741382, 
                    0.869186401202, 0.86983185136, 0.869929474522, 0.870346507695, 0.870951429469, 
                    0.870863388987, 0.871514279263, 0.872166654676, 0.872355339191, 0.872776974093, 
                    0.873155878735, 0.873579101025, 0.874003066865, 0.873916467734, 0.874211597253, 
                    0.874402872188, 0.87510742975, 0.87525648792, 0.87525648792, 0.875448860228, 
                    0.875598481234, 0.875512416378, 0.87617785231, 0.87617785231, 0.876371452215, 
                    0.877233539228, 0.877818409805, 0.87840545558, 0.87840545558, 0.878601622981, 
                    0.878601622981, 0.879472984901, 0.879712328244, 0.87982581203, 0.879981638026, 
                    0.880179766123, 0.880378141371, 0.880534852587, 0.880691869776, 0.8811323429, 
                    0.881090533252, 0.881531917098, 0.881732079801, 0.8822162463, 0.882902187113, 
                    0.882979722574, 0.88403281278, 0.885010261835, 0.884928594333, 0.885132644083, 
                    0.885050953876, 0.88525535544, 0.886362380543, 0.886487219509, 0.886652934413, 
                    0.887232935079, 0.887728512003, 0.888561331939, 0.889019284728, 0.889438266521, 
                    0.890358658388, 0.890120720891, 0.890292192785, 0.890675834925, 0.890556765164, 
                    0.890981544778, 0.891699669632, 0.891660238395, 0.891969519877, 0.892319678993, 
                    0.892161931402, 0.892513711208, 0.892729546909, 0.893162065429, 0.893339503795, 
                    0.893339503795, 0.893656248099, 0.894427465173, 0.894606969217, 0.894825762437, 
                    0.894928163898, 0.895703822513, 0.89622167567, 0.896663385868, 0.897404545302, 
                    0.89769650475, 0.899189293203, 0.899525558799, 0.900803884235, 0.901822547362, 
                    0.901939302648, 0.902926505697, 0.903082359676, 0.904038745128, 0.90469561985, 
                    0.904927332682, 0.905283513893, 0.906828000044, 0.907062493553, 0.908109372415, 
                    0.908783021349, 0.90898498498, 0.910379224289, 0.911372920866, 0.911751863015, 
                    0.912477297669, 0.913239550237, 0.91300238707, 0.913422855139, 0.915063352192, 
                    0.916893920936, 0.916979020829, 0.91791358353, 0.918350995783, 0.918790342789, 
                    0.919328152961, 0.919993298628, 0.920982245955, 0.922524618114, 0.923591109364, 
                    0.924018850534, 0.924248923821, 0.924479515826, 0.925498182241, 0.926493584801, 
                    0.927436921962, 0.927911825271, 0.928716526512, 0.929225746944, 0.929920622352, 
                    0.931640820211, 0.931772433588, 0.932293506679, 0.932760264784, 0.93386870405, 
                    0.934480569506, 0.934731886916, 0.935797384751, 0.936588472051, 0.936817507478, 
                    0.937277790773, 0.938339506605, 0.938808219887, 0.93993649209, 0.94020045716, 
                    0.940781492864, 0.941047196853, 0.942510417566, 0.942629939, 0.942750378489, 
                    0.943616386541, 0.944163684906, 0.945338814696, 0.945845741457, 0.946028661789, 
                    0.946308362468, 0.946541150838, 0.946751152357, 0.947576555912, 0.948029352938, 
                    0.94826905955, 0.948081416726, 0.949376743021, 0.94926144862, 0.949775296374, 
                    0.949706301122, 0.951268968863, 0.953037066674, 0.95357532021, 0.953770570793, 
                    0.953640586734, 0.953509869657, 0.954300159882, 0.955476996866, 0.956207587781, 
                    0.956355833165, 0.956846568485, 0.957770053042, 0.958723171834, 0.958928454571, 
                    0.959445187694, 0.959807967592, 0.959442259047, 0.960697132989, 0.961203278228, 
                    0.963193467582, 0.963932365293, 0.964461162833, 0.964482886627, 0.96526433234, 
                    0.966030150632, 0.966856588211, 0.969491617691, 0.970743493871, 0.972389419268, 
                    0.973307337131, 0.975623617612, 0.976087161844, 0.975647899082, 0.976736074007, 
                    0.979440008803, 0.981271208497, 0.982207028661, 0.984863078211, 0.986956530647, 
                    0.990258251858, 0.990208776979, 0.990702226892, 0.993228159625, 0.99534336087, 
                    0.996696237239, 0.995185049087, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0 ) ),
                min = cms.double(-0.998333333333)
            ),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            transform = cms.PSet(
                max = cms.double(1.99833333333),
                transform = cms.vdouble( (0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                    0.785563102399, 0.786753288885, 0.788132324416, 0.79656141615, 0.810183644995, 
                    0.858360829913, 0.862298212616, 0.867110980413, 0.871372861265, 0.875682014578, 
                    0.880242297589, 0.883696978098, 0.885512278829, 0.887768921813, 0.889264020585, 
                    0.89119925019, 0.892452552697, 0.893185095837, 0.893419577074, 0.894898998675, 
                    0.895774783109, 0.896260903725, 0.896505707407, 0.898082672851, 0.898779137453, 
                    0.89979939771, 0.900120276805, 0.900442301311, 0.900314253861, 0.90063761708, 
                    0.903107169678, 0.903707364412, 0.904624297652, 0.90437518453, 0.904187494019, 
                    0.904648539996, 0.905849328721, 0.90625146477, 0.906593041173, 0.906284313013, 
                    0.906627709554, 0.906627709554, 0.907095652088, 0.906972372385, 0.907318308525, 
                    0.907603995571, 0.907357055463, 0.907233089763, 0.907994846936, 0.908883949265, 
                    0.908883949265, 0.909836831321, 0.909836831321, 0.909776114594, 0.911030037809, 
                    0.911509901723, 0.911871023987, 0.911811279009, 0.911751452972, 0.911691545709, 
                    0.911511334909, 0.911451101085, 0.912784331406, 0.9125455069, 0.9125455069, 
                    0.91297278083, 0.912853317543, 0.912673506387, 0.913592984461, 0.915007651179, 
                    0.915441697726, 0.915324604996, 0.915207187526, 0.915148356591, 0.91552593882, 
                    0.915467174967, 0.9154083293, 0.915290391839, 0.915231299701, 0.915728896806, 
                    0.915728896806, 0.915552071941, 0.916492320764, 0.917377950283, 0.917822427143, 
                    0.918268017622, 0.91871472591, 0.919668295227, 0.919611512782, 0.919554650007, 
                    0.919440682785, 0.919269125195, 0.921306876156, 0.921306876156, 0.921082297245, 
                    0.920969526416, 0.921426208902, 0.921939970027, 0.921939970027, 0.922343069964, 
                    0.923319759486, 0.923727168952, 0.923727168952, 0.92460140151, 0.924492316338, 
                    0.924959238052, 0.926474177051, 0.926474177051, 0.926420752856, 0.926313671218, 
                    0.926785714713, 0.926785714713, 0.926785714713, 0.926732331515, 0.926732331515, 
                    0.926571713811, 0.927521701059, 0.927468561656, 0.927998554333, 0.927945695605, 
                    0.929008220067, 0.928746371941, 0.928693770351, 0.928641091039, 0.929607013105, 
                    0.929554832769, 0.930039996532, 0.93101417799, 0.931554211882, 0.932636161324, 
                    0.932585903271, 0.932585903271, 0.93357188521, 0.933522156167, 0.933967924145, 
                    0.933769185329, 0.934766776762, 0.935267583538, 0.935169629185, 0.935672412756, 
                    0.936176553451, 0.936176553451, 0.93779194569, 0.937554472402, 0.937458974653, 
                    0.937411116161, 0.937970225775, 0.938435668089, 0.938341043455, 0.938341043455, 
                    0.938903099624, 0.93885608225, 0.938808992455, 0.938714594933, 0.939278948765, 
                    0.940409694612, 0.940363611919, 0.940363611919, 0.940884673949, 0.940838860114, 
                    0.940700991551, 0.941179107659, 0.941750185868, 0.941750185868, 0.942276966885, 
                    0.943290568826, 0.943822114749, 0.944267645451, 0.944223792272, 0.944223792272, 
                    0.944223792272, 0.944223792272, 0.944135878551, 0.944091817682, 0.943959217069, 
                    0.944948988041, 0.944817531021, 0.945185418124, 0.945774534438, 0.946869842865, 
                    0.94678443912, 0.947292782482, 0.947803406812, 0.948955745704, 0.949513262437, 
                    0.949431324505, 0.949349120177, 0.949787213059, 0.950350748429, 0.951522477849, 
                    0.952051228023, 0.95197239226, 0.951813940452, 0.951734321829, 0.952189098377, 
                    0.952726227521, 0.952647494583, 0.953226869405, 0.953148724357, 0.95303101596, 
                    0.953497250008, 0.954122169792, 0.954006075021, 0.954594998037, 0.955778170341, 
                    0.955740668477, 0.957457733339, 0.958697023242, 0.958590781777, 0.958519649968, 
                    0.959665182275, 0.960242079268, 0.960242079268, 0.960855701368, 0.960787753107, 
                    0.961370655681, 0.961269567079, 0.961823203605, 0.963730727425, 0.963634885553, 
                    0.963570709071, 0.964138473298, 0.964106695414, 0.96404297039, 0.963914839098, 
                    0.963882663464, 0.96452094996, 0.964361812095, 0.96497328025, 0.965587812399, 
                    0.966174859102, 0.966052013818, 0.966021162949, 0.968018795469, 0.96867865254, 
                    0.968592547647, 0.96914294659, 0.969057430126, 0.969000155331, 0.970289180287, 
                    0.971618144708, 0.971511684075, 0.972907637123, 0.972856607143, 0.972753968298, 
                    0.972676478315, 0.973344727784, 0.973217439385, 0.973917083716, 0.973842007934, 
                    0.973791716846, 0.974496912029, 0.974447701286, 0.974373528048, 0.974273957942, 
                    0.974198771106, 0.974791150217, 0.975488253999, 0.976165676348, 0.977513433798, 
                    0.977332925695, 0.978053351441, 0.978734902423, 0.97864854949, 0.979275680612, 
                    0.979190505138, 0.979039751165, 0.978974471583, 0.978886796984, 0.980438334358, 
                    0.981887328142, 0.982567303114, 0.983312443593, 0.983168209088, 0.983021459539, 
                    0.98366063828, 0.983606342672, 0.983441268961, 0.983291720735, 0.985747459607, 
                    0.985615866821, 0.988157949486, 0.988031989052, 0.987786602856, 0.988507380959, 
                    0.988364321833, 0.988127868612, 0.987928555371, 0.987641272072, 0.987408197679, 
                    0.98704162283, 0.986691071046, 0.986360943929, 0.987048151948, 0.989952686544, 
                    0.991766844123, 0.992193166195, 0.99456966538, 0.995655052048, 0.994746673755, 
                    0.993062299865, 0.995491593707, 0.993997811711, 0.991951166261, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0 ) ),
                min = cms.double(-0.998333333333)
            ),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(2),
            transform = cms.PSet(
                max = cms.double(1.99833333333),
                transform = cms.vdouble( (0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                    0.320694347277, 0.320694347277, 0.320785409267, 0.320785409267, 0.320785409267, 
                    0.320967688479, 0.32115017496, 0.32115017496, 0.32115017496, 0.32115017496, 
                    0.321332869066, 0.321607300294, 0.321790515012, 0.322065728828, 0.322709728783, 
                    0.337811096719, 0.33917314626, 0.341489359417, 0.343051156809, 0.344690580804, 
                    0.34605531485, 0.347729452006, 0.349352972192, 0.351698761571, 0.354076266303, 
                    0.356364861761, 0.357459291064, 0.358806090169, 0.360659074159, 0.361655179522, 
                    0.363285639001, 0.363823848893, 0.365224296488, 0.366635567078, 0.368317558281, 
                    0.36949108301, 0.370409007364, 0.370997606343, 0.372726361337, 0.373488515297, 
                    0.374412657806, 0.375752608537, 0.377534910678, 0.378625338634, 0.379181030815, 
                    0.379877944035, 0.382266731549, 0.382549741971, 0.383828491978, 0.38525242259, 
                    0.386835650852, 0.38785063627, 0.389317222671, 0.390498501728, 0.392134514369, 
                    0.392433445129, 0.393938724972, 0.395003106909, 0.395165758646, 0.395929379967, 
                    0.396695958257, 0.397011143016, 0.398247378442, 0.399356983741, 0.399994683207, 
                    0.401254354869, 0.40236309389, 0.403477977186, 0.404278112546, 0.405403648355, 
                    0.406718341929, 0.408044942586, 0.409053791836, 0.409879342767, 0.410568240656, 
                    0.411067477386, 0.412572498902, 0.413612340683, 0.414628216181, 0.41718987191, 
                    0.417878334739, 0.41856907358, 0.419300644011, 0.420520753157, 0.420777117228, 
                    0.422716149289, 0.423248081689, 0.424315972822, 0.425568676714, 0.426697968924, 
                    0.427784748237, 0.428512348538, 0.429242428143, 0.430526071506, 0.4311350135, 
                    0.432803583714, 0.433609675616, 0.434608917639, 0.436308891919, 0.436878509184, 
                    0.437640316502, 0.438596319943, 0.440520911858, 0.441683795845, 0.443048277506, 
                    0.444696219849, 0.446478472767, 0.44715804854, 0.448645092811, 0.450058431683, 
                    0.450666877959, 0.450755388115, 0.451660727674, 0.452685605028, 0.453508861839, 
                    0.455164391331, 0.456611329026, 0.456920461171, 0.457863702358, 0.45902581005, 
                    0.459451411686, 0.460410936031, 0.461808077134, 0.4630001435, 0.46452516501, 
                    0.465632370863, 0.466972634942, 0.467639712811, 0.468206417853, 0.469000443277, 
                    0.470125946746, 0.471938031657, 0.473437184975, 0.474815974144, 0.475643583896, 
                    0.477037107394, 0.478345116523, 0.479756398109, 0.482127131145, 0.483321305722, 
                    0.484827612962, 0.485378450947, 0.486839313932, 0.488800865348, 0.488631796262, 
                    0.489784626283, 0.49019813266, 0.490696455307, 0.492699918902, 0.493707798202, 
                    0.495481544763, 0.497780890453, 0.499067549901, 0.499842743245, 0.501067711008, 
                    0.501110885208, 0.503739653301, 0.504533670387, 0.507669169039, 0.508207246665, 
                    0.510099534144, 0.511125093239, 0.513041788431, 0.514972912765, 0.517927881794, 
                    0.519848789077, 0.52116702462, 0.522598588906, 0.524038039421, 0.524905522273, 
                    0.525729939569, 0.527349110611, 0.528189103375, 0.529884063982, 0.531038635091, 
                    0.531258876588, 0.533372518417, 0.532652261497, 0.533222445036, 0.533832435241, 
                    0.534714171593, 0.536561182549, 0.536184284139, 0.538295230995, 0.539204274194, 
                    0.539743792118, 0.542257448251, 0.543191981222, 0.54415669717, 0.545124845911, 
                    0.546421082543, 0.548704392123, 0.551006864138, 0.551639517385, 0.554308295208, 
                    0.554286639155, 0.555277851271, 0.557294734318, 0.558661984326, 0.560735788966, 
                    0.561777981725, 0.56352691872, 0.56493793563, 0.567793486879, 0.568888208725, 
                    0.57034433091, 0.570356276084, 0.572191934216, 0.573659294894, 0.574044772549, 
                    0.575543527534, 0.577054482298, 0.578553389267, 0.580816407199, 0.582777514902, 
                    0.58546601664, 0.587013469943, 0.586699955875, 0.587164603914, 0.589909772096, 
                    0.590347109603, 0.591182964289, 0.593622213241, 0.595632610766, 0.596088895792, 
                    0.596547219627, 0.597007595967, 0.59905000376, 0.59875479532, 0.600402032492, 
                    0.601476624751, 0.602375325225, 0.604611692334, 0.606308877758, 0.609454442616, 
                    0.612487831768, 0.615198564485, 0.616345932738, 0.617679752716, 0.620364786891, 
                    0.621560433387, 0.622923085077, 0.622771613804, 0.627021967049, 0.629464905691, 
                    0.630636176618, 0.632414811477, 0.635412621765, 0.636860801036, 0.638359784998, 
                    0.642296739762, 0.64372019874, 0.646732193739, 0.649419880322, 0.653004922396, 
                    0.654536589972, 0.657493324695, 0.65872664624, 0.662116021475, 0.666837437051, 
                    0.668332370106, 0.670194812833, 0.671514734427, 0.671514734427, 0.672844093862, 
                    0.672352092845, 0.678607302272, 0.681605563269, 0.681020472505, 0.682082800049, 
                    0.684848783291, 0.686959317553, 0.690918830645, 0.691984674993, 0.694695530605, 
                    0.697455651971, 0.700496795416, 0.703736816672, 0.704917801757, 0.706220722464, 
                    0.707858889942, 0.71018130526, 0.714321429016, 0.720425948473, 0.724503155871, 
                    0.727977004139, 0.730714468803, 0.735012362904, 0.739735756402, 0.750660954162, 
                    0.757799352464, 0.760515374245, 0.768004247792, 0.77935327172, 0.784646260495, 
                    0.789164336822, 0.791123170072, 0.795276817521, 0.804299018936, 0.819103217408, 
                    0.822961151625, 0.833298258018, 0.842807182616, 0.85334688934, 0.86724344838, 
                    0.872176831791, 0.87195156781, 0.87843961359, 0.891494313173, 0.912879175226, 
                    0.924218217451, 0.937234161591, 0.94206607914, 0.958884557005, 0.959595443343, 
                    0.93904371889, 0.927733482302, 0.93386870405, 0.916051159827, 0.943467586229, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0, 
                    1.0, 1.0, 1.0, 1.0, 1.0 ) ),
                min = cms.double(-0.998333333333)
            ),
            nCharged = cms.uint32(1)
        )),
    toTransform = cms.InputTag("hpsTancTausDiscriminationByTancRaw"),
    PFTauProducer = cms.InputTag("hpsTancTaus")
)


process.hpsTancTausDiscriminationByTancLoose = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        tancCut = cms.PSet(
            cut = cms.double(0.95),
            Producer = cms.InputTag("hpsTancTausDiscriminationByTanc")
        )
    ),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    UseOnlyChargedHadrons = cms.bool(True)
)


process.hpsTancTausDiscriminationByTancMedium = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        tancCut = cms.PSet(
            cut = cms.double(0.97),
            Producer = cms.InputTag("hpsTancTausDiscriminationByTanc")
        )
    ),
    UseOnlyChargedHadrons = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsTancTaus")
)


process.hpsTancTausDiscriminationByTancRaw = cms.EDProducer("RecoTauMVADiscriminator",
    discriminantOptions = cms.PSet(
        BinnedMaskedHcalIsolation = cms.PSet(
            vtxSource = cms.InputTag("recoTauPileUpVertices"),
            mask = cms.PSet(
                finalHcalCone = cms.double(0.08),
                ecalCone = cms.double(0.15),
                hcalCone = cms.double(0.3),
                maxSigmas = cms.double(2)
            ),
            binning = cms.VPSet(cms.PSet(
                binLowEdges = cms.vdouble(1.0, 1.79, 4.03),
                nPUVtx = cms.int32(0)
            ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.15, 1.8, 4.03),
                    nPUVtx = cms.int32(1)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.22, 1.81, 4.03),
                    nPUVtx = cms.int32(2)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.27, 1.83, 4.03),
                    nPUVtx = cms.int32(3)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.31, 1.84, 4.03),
                    nPUVtx = cms.int32(4)
                )),
            defaultBinning = cms.vdouble(1.31, 1.84, 4.03),
            plugin = cms.string('RecoTauDiscriminationBinnedMaskedHCALIsolation')
        ),
        InvariantOpeningAngle = cms.PSet(
            defaultRMS = cms.string('max(0.3/max(pt, 1.0), 0.005)'),
            plugin = cms.string('RecoTauDiscriminantInvariantWidth'),
            decayModes = cms.VPSet(cms.PSet(
                nPiZeros = cms.uint32(1),
                rms = cms.string('2.7e-3 + 0.23/max(pt, 1.0)'),
                nCharged = cms.uint32(1),
                mean = cms.string('5.0e-3 + 0.43/max(pt, 1.0)')
            ), 
                cms.PSet(
                    nPiZeros = cms.uint32(2),
                    rms = cms.string('7.5e-3 + 0.3/max(pt, 1.0)'),
                    nCharged = cms.uint32(1),
                    mean = cms.string('4.7e-3 + 0.9/max(pt, 1.0)')
                ), 
                cms.PSet(
                    nPiZeros = cms.uint32(0),
                    rms = cms.string('0.38/max(pt, 1.0)'),
                    nCharged = cms.uint32(3),
                    mean = cms.string('0.87/max(pt, 1.0)')
                )),
            defaultMean = cms.string('max(0.87/max(pt, 1.0), 0.005)')
        ),
        BinnedMaskedEcalIsolation = cms.PSet(
            vtxSource = cms.InputTag("recoTauPileUpVertices"),
            mask = cms.PSet(
                finalHcalCone = cms.double(0.08),
                ecalCone = cms.double(0.15),
                hcalCone = cms.double(0.3),
                maxSigmas = cms.double(2)
            ),
            binning = cms.VPSet(cms.PSet(
                binLowEdges = cms.vdouble(0.5, 0.88, 2.53),
                nPUVtx = cms.int32(0)
            ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.65, 0.98, 2.53),
                    nPUVtx = cms.int32(1)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.74, 1.05, 2.54),
                    nPUVtx = cms.int32(2)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.8, 1.11, 2.54),
                    nPUVtx = cms.int32(3)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.86, 1.15, 2.54),
                    nPUVtx = cms.int32(4)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.9, 1.19, 2.55),
                    nPUVtx = cms.int32(5)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.94, 1.22, 2.55),
                    nPUVtx = cms.int32(6)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.97, 1.25, 2.55),
                    nPUVtx = cms.int32(7)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.0, 1.27, 2.56),
                    nPUVtx = cms.int32(8)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(1.03, 1.3, 2.56),
                    nPUVtx = cms.int32(9)
                )),
            defaultBinning = cms.vdouble(1.03, 1.3, 2.56),
            plugin = cms.string('RecoTauDiscriminationBinnedMaskedECALIsolation')
        ),
        FlightPathSignificance = cms.PSet(
            plugin = cms.string('RecoTauDiscriminantFromDiscriminator'),
            discSrc = cms.InputTag("hpsTancTausDiscriminationByFlightPath"),
            maxValue = cms.double(25),
            minValue = cms.double(-25)
        ),
        BinnedTrackIsolation = cms.PSet(
            vtxSource = cms.InputTag("recoTauPileUpVertices"),
            binning = cms.VPSet(cms.PSet(
                binLowEdges = cms.vdouble(0.5, 0.86, 1.87),
                nPUVtx = cms.int32(0)
            ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.51, 0.86, 1.87),
                    nPUVtx = cms.int32(1)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.51, 0.86, 1.87),
                    nPUVtx = cms.int32(2)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.52, 0.86, 1.87),
                    nPUVtx = cms.int32(3)
                ), 
                cms.PSet(
                    binLowEdges = cms.vdouble(0.52, 0.86, 1.87),
                    nPUVtx = cms.int32(4)
                )),
            defaultBinning = cms.vdouble(0.52, 0.86, 1.87),
            plugin = cms.string('RecoTauDiscriminationBinnedTrackIsolation')
        )
    ),
    mvas = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        mvaLabel = cms.string('1prong0pi0'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            mvaLabel = cms.string('1prong1pi0'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(2),
            mvaLabel = cms.string('1prong2pi0'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            mvaLabel = cms.string('3prong0pi0'),
            nCharged = cms.uint32(3)
        )),
    remapOutput = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    Prediscriminants = cms.PSet(
        hpsSelect = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsTancTausDiscriminationByDecayModeSelection")
        ),
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsTancTausDiscriminationByLeadingPionPtCut")
        )
    ),
    dbLabel = cms.string('hpstanc')
)


process.hpsTancTausDiscriminationByTancTight = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        tancCut = cms.PSet(
            cut = cms.double(0.985),
            Producer = cms.InputTag("hpsTancTausDiscriminationByTanc")
        )
    ),
    UseOnlyChargedHadrons = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsTancTaus")
)


process.hpsTancTausDiscriminationByTancVLoose = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        tancCut = cms.PSet(
            cut = cms.double(0.9),
            Producer = cms.InputTag("hpsTancTausDiscriminationByTanc")
        )
    ),
    UseOnlyChargedHadrons = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsTancTaus")
)


process.hpsTancTausDiscriminationByTightElectronRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    BremCombined_HOP = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(-0.1),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    ApplyCut_BremCombined = cms.bool(True),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(True),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.hpsTancTausDiscriminationByTightIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsTancTausDiscriminationByDecayModeSelection")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsTancTausDiscriminationByTightMuonRejection = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    a = cms.double(0.5),
    c = cms.double(0.0),
    b = cms.double(0.5),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    discriminatorOption = cms.string('noAllArbitrated'),
    HoPMin = cms.double(0.2)
)


process.hpsTancTausDiscriminationByVLooseIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("hpsTancTaus"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.3),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("hpsTancTausDiscriminationByDecayModeSelection")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    rhoConeSize = cms.double(0.5),
    customOuterCone = cms.double(0.3),
    particleFlowSrc = cms.InputTag("particleFlow"),
    rhoUEOffsetCorrection = cms.double(1.0),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(2.0),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.hpsTancTausSansRefs = cms.EDProducer("RecoTauCleaner",
    cleaners = cms.VPSet(cms.PSet(
        selectionPassFunction = cms.string('abs(charge())-1'),
        selection = cms.string('signalPFChargedHadrCands().size() = 3'),
        name = cms.string('UnitCharge'),
        plugin = cms.string('RecoTauStringCleanerPlugin'),
        selectionFailValue = cms.double(0)
    ), 
        cms.PSet(
            selectionPassFunction = cms.string('0'),
            selection = cms.string('deltaR(eta, phi, jetRef().eta, jetRef().phi) < 0.1'),
            name = cms.string('MatchingCone'),
            plugin = cms.string('RecoTauStringCleanerPlugin'),
            selectionFailValue = cms.double(1000.0)
        ), 
        cms.PSet(
            src = cms.InputTag("combinatoricRecoTausDiscriminationByLeadingPionPtCut"),
            name = cms.string('lead pion'),
            plugin = cms.string('RecoTauDiscriminantCleanerPlugin')
        ), 
        cms.PSet(
            src = cms.InputTag("combinatoricRecoTausHPSSelector"),
            name = cms.string('HPS selection'),
            plugin = cms.string('RecoTauDiscriminantCleanerPlugin')
        ), 
        cms.PSet(
            selectionPassFunction = cms.string('isolationPFChargedHadrCandsPtSum()+isolationPFGammaCandsEtSum()'),
            selection = cms.string('leadPFCand().isNonnull()'),
            name = cms.string('CombinedIsolation'),
            plugin = cms.string('RecoTauStringCleanerPlugin'),
            selectionFailValue = cms.double(1000.0)
        )),
    src = cms.InputTag("combinatoricRecoTaus")
)


process.hybridSuperClusters = cms.EDProducer("UnifiedSCCollectionProducer",
    bcCollectionUncleanOnly = cms.string('uncleanOnlyHybridBarrelBasicClusters'),
    scCollection = cms.string(''),
    bcCollection = cms.string('hybridBarrelBasicClusters'),
    uncleanScCollection = cms.InputTag("uncleanedHybridSuperClusters"),
    cleanBcCollection = cms.InputTag("cleanedHybridSuperClusters","hybridBarrelBasicClusters"),
    cleanScCollection = cms.InputTag("cleanedHybridSuperClusters"),
    uncleanBcCollection = cms.InputTag("uncleanedHybridSuperClusters","hybridBarrelBasicClusters"),
    scCollectionUncleanOnly = cms.string('uncleanOnlyHybridSuperClusters')
)


process.ic5JetID = cms.EDProducer("JetIDProducer",
    eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheRecHitsColl = cms.InputTag("hbhereco"),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    hoRecHitsColl = cms.InputTag("horeco"),
    ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    hfRecHitsColl = cms.InputTag("hfreco"),
    useRecHits = cms.bool(True),
    src = cms.InputTag("iterativeCone5CaloJets")
)


process.ic5JetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    jets = cms.InputTag("iterativeCone5CaloJets")
)


process.ic5PFJetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    jets = cms.InputTag("iterativeCone5PFJets")
)


process.ic7JetID = cms.EDProducer("JetIDProducer",
    eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheRecHitsColl = cms.InputTag("hbhereco"),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    hoRecHitsColl = cms.InputTag("horeco"),
    ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    hfRecHitsColl = cms.InputTag("hfreco"),
    useRecHits = cms.bool(True),
    src = cms.InputTag("iterativeCone7CaloJets")
)


process.impactParameterMVABJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('impactParameterMVAComputer'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.impactParameterTagInfos = cms.EDProducer("TrackIPProducer",
    maximumTransverseImpactParameter = cms.double(0.2),
    minimumNumberOfHits = cms.int32(8),
    minimumTransverseMomentum = cms.double(1.0),
    primaryVertex = cms.InputTag("offlinePrimaryVertices"),
    maximumLongitudinalImpactParameter = cms.double(17.0),
    computeProbabilities = cms.bool(True),
    ghostTrackPriorDeltaR = cms.double(0.03),
    jetTracks = cms.InputTag("ak5JetTracksAssociatorAtVertex"),
    jetDirectionUsingGhostTrack = cms.bool(False),
    minimumNumberOfPixelHits = cms.int32(2),
    jetDirectionUsingTracks = cms.bool(False),
    computeGhostTrack = cms.bool(True),
    useTrackQuality = cms.bool(False),
    maximumChiSquared = cms.double(5.0)
)


process.inOutConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(True),
    minConvRadius = cms.double(2.0),
    TrackProducer = cms.string('ckfInOutTracksFromConversions'),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    setTrackerOnly = cms.bool(False),
    setArbitratedMerged = cms.bool(True),
    useTrajectory = cms.bool(True),
    setArbitratedEcalSeeded = cms.bool(True)
)


process.inOutOutInConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1),
    arbitratedMergedPreferCollection = cms.int32(3),
    allowFirstHitShare = cms.bool(True),
    minProb = cms.double(1e-06),
    arbitratedEcalSeededPreferCollection = cms.int32(3),
    checkCharge = cms.bool(True),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(3),
    TrackProducer2 = cms.string('outInConversionTrackProducer'),
    TrackProducer1 = cms.string('inOutConversionTrackProducer')
)


process.inclusiveSecondaryVertexFinderTagInfos = cms.EDProducer("SecondaryVertexProducer",
    extSVDeltaRToJet = cms.double(0.3),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    vertexReco = cms.PSet(
        seccut = cms.double(6.0),
        primcut = cms.double(1.8),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001),
        minweight = cms.double(0.5),
        finder = cms.string('avr')
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    ),
    constraint = cms.string('BeamSpot'),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfos"),
    vertexCuts = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.79),
        distVal2dMax = cms.double(2.5),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(0.5),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(2.0),
        multiplicityMin = cms.uint32(2),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(99999.9),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(0.01),
        distSig3dMin = cms.double(-99999.9)
    ),
    useExternalSV = cms.bool(True),
    minimumTrackWeight = cms.double(0.5),
    usePVError = cms.bool(True),
    trackSelection = cms.PSet(
        b_pT = cms.double(0.3684),
        a_dR = cms.double(-0.001053),
        min_pT = cms.double(120),
        max_pT = cms.double(500),
        min_pT_dRcut = cms.double(0.5),
        max_pT_trackPTcut = cms.double(3),
        max_pT_dRcut = cms.double(0.1),
        b_dR = cms.double(0.6263),
        a_pT = cms.double(0.005263),
        totalHitsMin = cms.uint32(8),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(2),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        useVariableJTA = cms.bool(False),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(99999.9),
        ptMin = cms.double(1.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip3dSig'),
    extSVCollection = cms.InputTag("inclusiveMergedVertices")
)


process.initialStepSeedClusterMask = cms.EDProducer("SeedClusterRemover",
    trajectories = cms.InputTag("initialStepSeeds"),
    oldClusterRemovalInfo = cms.InputTag("pixelLessStepClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    overrideTrkQuals = cms.InputTag(""),
    pixelClusters = cms.InputTag("siPixelClusters"),
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True)
)


process.initialStepSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            maxElement = cms.uint32(100000),
            SeedComparitorPSet = cms.PSet(
                ComponentName = cms.string('LowPtClusterShapeSeedComparitor')
            ),
            extraHitRPhitolerance = cms.double(0.032),
            useMultScattering = cms.bool(True),
            phiPreFiltering = cms.double(0.3),
            extraHitRZtolerance = cms.double(0.037),
            ComponentName = cms.string('PixelTripletHLTGenerator')
        ),
        SeedingLayers = cms.string('PixelLayerTriplets')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    ClusterCheckPSet = cms.PSet(
        MaxNumberOfPixelClusters = cms.uint32(40000),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            originRadius = cms.double(0.02),
            nSigmaZ = cms.double(4.0),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            ptMin = cms.double(0.6)
        )
    ),
    SeedCreatorPSet = cms.PSet(
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial'),
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator')
    )
)


process.initialStepSelector = cms.EDProducer("MultiTrackSelector",
    src = cms.InputTag("initialStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        max_d0 = cms.double(100.0),
        minNumber3DLayers = cms.uint32(0),
        max_lostHitFraction = cms.double(1.0),
        applyAbsCutsIfNoPV = cms.bool(False),
        qualityBit = cms.string('loose'),
        minNumberLayers = cms.uint32(0),
        chi2n_par = cms.double(1.6),
        nSigmaZ = cms.double(4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        applyAdaptedPVCuts = cms.bool(True),
        min_eta = cms.double(-9999.0),
        dz_par1 = cms.vdouble(0.65, 4.0),
        copyTrajectories = cms.untracked.bool(False),
        vtxNumber = cms.int32(-1),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_relpterr = cms.double(9999.0),
        copyExtras = cms.untracked.bool(True),
        vertexCut = cms.string('ndof>=2&!isFake'),
        max_z0 = cms.double(100.0),
        min_nhits = cms.uint32(0),
        name = cms.string('initialStepLoose'),
        max_minMissHitOutOrIn = cms.int32(99),
        chi2n_no1Dmod_par = cms.double(9999),
        res_par = cms.vdouble(0.003, 0.01),
        max_eta = cms.double(9999.0),
        d0_par2 = cms.vdouble(0.55, 4.0),
        d0_par1 = cms.vdouble(0.55, 4.0),
        preFilterName = cms.string(''),
        minHitsToBypassChecks = cms.uint32(20)
    ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(3),
            max_lostHitFraction = cms.double(1.0),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('tight'),
            minNumberLayers = cms.uint32(3),
            chi2n_par = cms.double(0.7),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            min_eta = cms.double(-9999.0),
            nSigmaZ = cms.double(4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('initialStepTight'),
            max_minMissHitOutOrIn = cms.int32(99),
            chi2n_no1Dmod_par = cms.double(9999),
            preFilterName = cms.string('initialStepLoose'),
            max_eta = cms.double(9999.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            d0_par1 = cms.vdouble(0.3, 4.0),
            res_par = cms.vdouble(0.003, 0.01),
            minHitsToBypassChecks = cms.uint32(20)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(3),
            max_lostHitFraction = cms.double(1.0),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('highPurity'),
            minNumberLayers = cms.uint32(3),
            chi2n_par = cms.double(0.7),
            nSigmaZ = cms.double(4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            min_eta = cms.double(-9999.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('initialStep'),
            max_minMissHitOutOrIn = cms.int32(99),
            chi2n_no1Dmod_par = cms.double(9999),
            res_par = cms.vdouble(0.003, 0.001),
            max_eta = cms.double(9999.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            d0_par1 = cms.vdouble(0.3, 4.0),
            preFilterName = cms.string('initialStepTight'),
            minHitsToBypassChecks = cms.uint32(20)
        )),
    beamspot = cms.InputTag("offlineBeamSpot"),
    vertices = cms.InputTag("pixelVertices"),
    useVtxError = cms.bool(False),
    useVertices = cms.bool(True)
)


process.initialStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("initialStepSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    TrajectoryBuilder = cms.string('initialStepTrajectoryBuilder'),
    numHitsForSeedCleaner = cms.int32(50)
)


process.initialStepTracks = cms.EDProducer("TrackProducer",
    src = cms.InputTag("initialStepTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    AlgorithmName = cms.string('iter0'),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    GeometricInnerState = cms.bool(False),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.interestingEcalDetIdEB = cms.EDProducer("InterestingDetIdCollectionProducer",
    severityLevel = cms.int32(1),
    interestingDetIdCollection = cms.string(''),
    basicClustersLabel = cms.InputTag("hybridSuperClusters","hybridBarrelBasicClusters"),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    etaSize = cms.int32(5),
    keepNextToBoundary = cms.bool(True),
    phiSize = cms.int32(5),
    keepNextToDead = cms.bool(True)
)


process.interestingEcalDetIdEBU = cms.EDProducer("InterestingDetIdCollectionProducer",
    severityLevel = cms.int32(1),
    interestingDetIdCollection = cms.string(''),
    basicClustersLabel = cms.InputTag("hybridSuperClusters","uncleanOnlyHybridBarrelBasicClusters"),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    etaSize = cms.int32(5),
    keepNextToBoundary = cms.bool(True),
    phiSize = cms.int32(5),
    keepNextToDead = cms.bool(True)
)


process.interestingEcalDetIdEE = cms.EDProducer("InterestingDetIdCollectionProducer",
    severityLevel = cms.int32(1),
    interestingDetIdCollection = cms.string(''),
    basicClustersLabel = cms.InputTag("multi5x5SuperClusters","multi5x5EndcapBasicClusters"),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    etaSize = cms.int32(5),
    keepNextToBoundary = cms.bool(True),
    phiSize = cms.int32(5),
    keepNextToDead = cms.bool(True)
)


process.interestingEleIsoDetId = cms.EDProducer("EleIsoDetIdCollectionProducer",
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    outerRadius = cms.double(0.6),
    interestingDetIdCollection = cms.string(''),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    innerRadius = cms.double(0.0),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    etCandCut = cms.double(0.0),
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    emObjectLabel = cms.InputTag("gsfElectrons"),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    etCut = cms.double(0),
    energyCut = cms.double(0.04)
)


process.interestingEleIsoDetIdEB = cms.EDProducer("EleIsoDetIdCollectionProducer",
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    outerRadius = cms.double(0.6),
    interestingDetIdCollection = cms.string(''),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    innerRadius = cms.double(0.0),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    etCandCut = cms.double(0.0),
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    emObjectLabel = cms.InputTag("gsfElectrons"),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    etCut = cms.double(0),
    energyCut = cms.double(0.095)
)


process.interestingEleIsoDetIdEE = cms.EDProducer("EleIsoDetIdCollectionProducer",
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    outerRadius = cms.double(0.6),
    interestingDetIdCollection = cms.string(''),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    innerRadius = cms.double(0.0),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    etCandCut = cms.double(0.0),
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    emObjectLabel = cms.InputTag("gsfElectrons"),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    etCut = cms.double(0.11),
    energyCut = cms.double(0.0)
)


process.interestingGamIsoDetId = cms.EDProducer("GamIsoDetIdCollectionProducer",
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    outerRadius = cms.double(0.6),
    interestingDetIdCollection = cms.string(''),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    innerRadius = cms.double(0.0),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    etCandCut = cms.double(0.0),
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    emObjectLabel = cms.InputTag("photons"),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    etCut = cms.double(0),
    energyCut = cms.double(0.04)
)


process.interestingGamIsoDetIdEB = cms.EDProducer("GamIsoDetIdCollectionProducer",
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    outerRadius = cms.double(0.6),
    interestingDetIdCollection = cms.string(''),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    innerRadius = cms.double(0.0),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    etCandCut = cms.double(0.0),
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    emObjectLabel = cms.InputTag("photons"),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    etCut = cms.double(0),
    energyCut = cms.double(0.095)
)


process.interestingGamIsoDetIdEE = cms.EDProducer("GamIsoDetIdCollectionProducer",
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    outerRadius = cms.double(0.6),
    interestingDetIdCollection = cms.string(''),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    innerRadius = cms.double(0.0),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    etCandCut = cms.double(0.0),
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    emObjectLabel = cms.InputTag("photons"),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    etCut = cms.double(0.11),
    energyCut = cms.double(0.0)
)


process.interestingTrackEcalDetIds = cms.EDProducer("InterestingTrackEcalDetIdProducer",
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(9999.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.2),
        useMuon = cms.bool(True),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    ),
    TrackCollection = cms.InputTag("generalTracks"),
    MinTrackPt = cms.double(50.0)
)


process.isoDeposits = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag(""),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag(""),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.iterativeCone5CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    doAreaDiskApprox = cms.bool(False),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('IterativeCone'),
    rParam = cms.double(0.5)
)


process.iterativeCone5CaloJetsPUCorr = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('IterativeCone'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0)
)


process.iterativeCone5JetExtender = cms.EDProducer("JetExtender",
    jets = cms.InputTag("iterativeCone5CaloJets"),
    jet2TracksAtCALO = cms.InputTag("iterativeCone5JetTracksAssociatorAtCaloFace"),
    jet2TracksAtVX = cms.InputTag("iterativeCone5JetTracksAssociatorAtVertex"),
    coneSize = cms.double(0.5)
)


process.iterativeCone5JetTracksAssociatorAtCaloFace = cms.EDProducer("JetTracksAssociatorAtCaloFace",
    trackQuality = cms.string('goodIterative'),
    tracks = cms.InputTag("generalTracks"),
    coneSize = cms.double(0.5),
    extrapolations = cms.InputTag("trackExtrapolator"),
    jets = cms.InputTag("iterativeCone5CaloJets")
)


process.iterativeCone5JetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    jets = cms.InputTag("iterativeCone5CaloJets")
)


process.iterativeCone5PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doOutputJets = cms.bool(True),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    doAreaFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    jetPtMin = cms.double(3.0),
    jetType = cms.string('PFJet'),
    src = cms.InputTag("particleFlow"),
    doPUOffsetCorr = cms.bool(False),
    radiusPU = cms.double(0.5),
    doAreaDiskApprox = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('IterativeCone'),
    rParam = cms.double(0.5)
)


process.iterativeCone5TrackJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    doAreaDiskApprox = cms.bool(False),
    jetType = cms.string('TrackJet'),
    MinVtxNdof = cms.int32(5),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    MaxVtxZ = cms.double(15.0),
    UseOnlyVertexTracks = cms.bool(False),
    UseOnlyOnePV = cms.bool(False),
    DzTrVtxMax = cms.double(1),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("trackRefsForJets"),
    jetPtMin = cms.double(3.0),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    DxyTrVtxMax = cms.double(0.2),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('IterativeCone'),
    rParam = cms.double(0.5)
)


process.jetBProbabilityBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetBProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.jetProbabilityBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('jetProbability'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.kt4CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    doAreaDiskApprox = cms.bool(False),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('Kt'),
    rParam = cms.double(0.4)
)


process.kt4CaloJetsPUCorr = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.4),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0)
)


process.kt4JetExtender = cms.EDProducer("JetExtender",
    jets = cms.InputTag("kt4CaloJets"),
    jet2TracksAtCALO = cms.InputTag("kt4JetTracksAssociatorAtCaloFace"),
    jet2TracksAtVX = cms.InputTag("kt4JetTracksAssociatorAtVertex"),
    coneSize = cms.double(0.5)
)


process.kt4JetID = cms.EDProducer("JetIDProducer",
    eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheRecHitsColl = cms.InputTag("hbhereco"),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    hoRecHitsColl = cms.InputTag("horeco"),
    ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    hfRecHitsColl = cms.InputTag("hfreco"),
    useRecHits = cms.bool(True),
    src = cms.InputTag("kt4CaloJets")
)


process.kt4JetTracksAssociatorAtCaloFace = cms.EDProducer("JetTracksAssociatorAtCaloFace",
    trackQuality = cms.string('goodIterative'),
    tracks = cms.InputTag("generalTracks"),
    coneSize = cms.double(0.5),
    extrapolations = cms.InputTag("trackExtrapolator"),
    jets = cms.InputTag("kt4CaloJets")
)


process.kt4JetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    jets = cms.InputTag("kt4CaloJets")
)


process.kt4PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doOutputJets = cms.bool(True),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    doAreaFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    jetPtMin = cms.double(3.0),
    jetType = cms.string('PFJet'),
    src = cms.InputTag("particleFlow"),
    doPUOffsetCorr = cms.bool(False),
    radiusPU = cms.double(0.5),
    doAreaDiskApprox = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('Kt'),
    rParam = cms.double(0.4)
)


process.kt4TrackJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    doAreaDiskApprox = cms.bool(False),
    jetType = cms.string('TrackJet'),
    MinVtxNdof = cms.int32(5),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    MaxVtxZ = cms.double(15.0),
    UseOnlyVertexTracks = cms.bool(False),
    UseOnlyOnePV = cms.bool(False),
    DzTrVtxMax = cms.double(1),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("trackRefsForJets"),
    jetPtMin = cms.double(3.0),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    DxyTrVtxMax = cms.double(0.2),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('Kt'),
    rParam = cms.double(0.4)
)


process.kt6CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(True),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.kt6CaloJetsCentral = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(3.1),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(True),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(2.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.kt6CaloJetsCentralPUCorr = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(3.1),
    doRhoFastjet = cms.bool(True),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(2.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0)
)


process.kt6CaloJetsPUCorr = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0)
)


process.kt6JetID = cms.EDProducer("JetIDProducer",
    eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheRecHitsColl = cms.InputTag("hbhereco"),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    hoRecHitsColl = cms.InputTag("horeco"),
    ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    hfRecHitsColl = cms.InputTag("hfreco"),
    useRecHits = cms.bool(True),
    src = cms.InputTag("kt6CaloJets")
)


process.kt6PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    voronoiRfact = cms.double(0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(True),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("particleFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.kt6PFJetsCentralChargedPileUp = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(3.1),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(0.9),
    doRhoFastjet = cms.bool(True),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(2.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("pfPileUpAllChargedParticles"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.kt6PFJetsCentralNeutral = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(3.1),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(0.9),
    doRhoFastjet = cms.bool(True),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(2.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("pfAllNeutralHadronsAndPhotons"),
    inputEtMin = cms.double(0.5),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.kt6PFJetsCentralNeutralTight = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    voronoiRfact = cms.double(0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(3.1),
    doRhoFastjet = cms.bool(True),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(2.5),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("pfAllNeutralHadronsAndPhotons"),
    inputEtMin = cms.double(1.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.kt6PFJetsForRhoComputationVoronoi = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(0.9),
    doRhoFastjet = cms.bool(True),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.6),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("particleFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.kt6TrackJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('TrackJet'),
    MinVtxNdof = cms.int32(5),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('Kt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    MaxVtxZ = cms.double(15.0),
    rParam = cms.double(0.6),
    UseOnlyVertexTracks = cms.bool(False),
    UseOnlyOnePV = cms.bool(False),
    DzTrVtxMax = cms.double(1),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("trackRefsForJets"),
    jetPtMin = cms.double(3.0),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    DxyTrVtxMax = cms.double(0.2),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.l1GtRecord = cms.EDProducer("L1GlobalTriggerRecordProducer",
    L1GtReadoutRecordTag = cms.InputTag("gtDigis")
)


process.l1GtTriggerMenuLite = cms.EDProducer("L1GtTriggerMenuLiteProducer")


process.l1L1GtObjectMap = cms.EDProducer("ConvertObjectMapRecord",
    L1GtObjectMapTag = cms.InputTag("hltL1GtObjectMap")
)


process.l1RpcEmulDigis = cms.EDProducer("RPCTrigger",
    RPCTriggerDebug = cms.untracked.int32(0),
    label = cms.string('muonRPCDigis')
)


process.l1compare = cms.EDProducer("L1Comparator",
    CTPsourceEmul = cms.InputTag("valCscTriggerPrimitiveDigis"),
    CTFsourceEmul = cms.InputTag("valCsctfDigis","CSC"),
    COMPARE_COLLS = cms.untracked.vuint32(0, 0, 1, 1, 0, 
        1, 0, 0, 1, 0, 
        1, 0),
    DTPsourceEmul = cms.InputTag("valDtTriggerPrimitiveDigis"),
    RCTsourceData = cms.InputTag("gctDigis"),
    VerboseFlag = cms.untracked.int32(0),
    GMTsourceData = cms.InputTag("gtDigis"),
    DTFsourceEmul = cms.InputTag("valDttfDigis"),
    RPCsourceData = cms.InputTag("gtDigis"),
    GCTsourceEmul = cms.InputTag("valGctDigis"),
    CTTsourceData = cms.InputTag("csctfDigis"),
    FEDsourceEmul = cms.untracked.InputTag("rawDataCollector"),
    LTCsourceEmul = cms.InputTag("none"),
    ETPsourceData = cms.InputTag("ecalDigis","EcalTriggerPrimitives"),
    GCTsourceData = cms.InputTag("gctDigis"),
    DumpFile = cms.untracked.string('dump.txt'),
    LTCsourceData = cms.InputTag("none"),
    HTPsourceEmul = cms.InputTag("valHcalTriggerPrimitiveDigis"),
    CTFsourceData = cms.InputTag("muonCscMon","CSC"),
    GLTsourceEmul = cms.InputTag("valGtDigis"),
    DTPsourceData = cms.InputTag("dttfDigis"),
    RCTsourceEmul = cms.InputTag("valRctDigis"),
    GLTsourceData = cms.InputTag("gtDigis"),
    FEDid = cms.untracked.int32(735),
    DumpMode = cms.untracked.int32(0),
    RPCsourceEmul = cms.InputTag("valRpcTriggerDigis"),
    CTTsourceEmul = cms.InputTag("valCsctfTrackDigis"),
    GMTsourceEmul = cms.InputTag("valGmtDigis"),
    DTFsourceData = cms.InputTag("dttfDigis"),
    ETPsourceEmul = cms.InputTag("valEcalTriggerPrimitiveDigis"),
    CTPsourceData = cms.InputTag("muonCSCDigis"),
    HTPsourceData = cms.InputTag("hcalDigis"),
    FEDsourceData = cms.untracked.InputTag("rawDataCollector")
)


process.l1extraParticles = cms.EDProducer("L1ExtraParticlesProd",
    centralBxOnly = cms.bool(False),
    tauJetSource = cms.InputTag("gctDigis","tauJets"),
    etTotalSource = cms.InputTag("gctDigis"),
    nonIsolatedEmSource = cms.InputTag("gctDigis","nonIsoEm"),
    htMissSource = cms.InputTag("gctDigis"),
    etMissSource = cms.InputTag("gctDigis"),
    produceMuonParticles = cms.bool(True),
    hfRingEtSumsSource = cms.InputTag("gctDigis"),
    forwardJetSource = cms.InputTag("gctDigis","forJets"),
    ignoreHtMiss = cms.bool(False),
    centralJetSource = cms.InputTag("gctDigis","cenJets"),
    produceCaloParticles = cms.bool(True),
    muonSource = cms.InputTag("gtDigis"),
    isolatedEmSource = cms.InputTag("gctDigis","isoEm"),
    etHadSource = cms.InputTag("gctDigis"),
    hfRingBitCountsSource = cms.InputTag("gctDigis")
)


process.logErrorHarvester = cms.EDProducer("LogErrorHarvester")


process.lowPtTripletStepClusters = cms.EDProducer("TrackClusterRemover",
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    trajectories = cms.InputTag("initialStepTracks"),
    stripClusters = cms.InputTag("siStripClusters"),
    overrideTrkQuals = cms.InputTag("initialStepSelector","initialStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True)
)


process.lowPtTripletStepSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            maxElement = cms.uint32(100000),
            SeedComparitorPSet = cms.PSet(
                ComponentName = cms.string('LowPtClusterShapeSeedComparitor')
            ),
            extraHitRPhitolerance = cms.double(0.032),
            useMultScattering = cms.bool(True),
            phiPreFiltering = cms.double(0.3),
            extraHitRZtolerance = cms.double(0.037),
            ComponentName = cms.string('PixelTripletHLTGenerator')
        ),
        SeedingLayers = cms.string('lowPtTripletStepSeedLayers')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    ClusterCheckPSet = cms.PSet(
        MaxNumberOfPixelClusters = cms.uint32(40000),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            originRadius = cms.double(0.02),
            nSigmaZ = cms.double(4.0),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            ptMin = cms.double(0.2)
        )
    ),
    SeedCreatorPSet = cms.PSet(
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial'),
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator')
    )
)


process.lowPtTripletStepSelector = cms.EDProducer("MultiTrackSelector",
    src = cms.InputTag("lowPtTripletStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        max_d0 = cms.double(100.0),
        minNumber3DLayers = cms.uint32(0),
        max_lostHitFraction = cms.double(1.0),
        applyAbsCutsIfNoPV = cms.bool(False),
        qualityBit = cms.string('loose'),
        minNumberLayers = cms.uint32(0),
        chi2n_par = cms.double(1.6),
        nSigmaZ = cms.double(4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        applyAdaptedPVCuts = cms.bool(True),
        min_eta = cms.double(-9999.0),
        dz_par1 = cms.vdouble(0.65, 4.0),
        copyTrajectories = cms.untracked.bool(False),
        vtxNumber = cms.int32(-1),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_relpterr = cms.double(9999.0),
        copyExtras = cms.untracked.bool(True),
        vertexCut = cms.string('ndof>=2&!isFake'),
        max_z0 = cms.double(100.0),
        min_nhits = cms.uint32(0),
        name = cms.string('lowPtTripletStepLoose'),
        max_minMissHitOutOrIn = cms.int32(99),
        chi2n_no1Dmod_par = cms.double(9999),
        res_par = cms.vdouble(0.003, 0.01),
        max_eta = cms.double(9999.0),
        d0_par2 = cms.vdouble(0.55, 4.0),
        d0_par1 = cms.vdouble(0.55, 4.0),
        preFilterName = cms.string(''),
        minHitsToBypassChecks = cms.uint32(20)
    ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(3),
            max_lostHitFraction = cms.double(1.0),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('tight'),
            minNumberLayers = cms.uint32(3),
            chi2n_par = cms.double(0.7),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            min_eta = cms.double(-9999.0),
            nSigmaZ = cms.double(4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('lowPtTripletStepTight'),
            max_minMissHitOutOrIn = cms.int32(99),
            chi2n_no1Dmod_par = cms.double(9999),
            preFilterName = cms.string('lowPtTripletStepLoose'),
            max_eta = cms.double(9999.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            d0_par1 = cms.vdouble(0.3, 4.0),
            res_par = cms.vdouble(0.003, 0.01),
            minHitsToBypassChecks = cms.uint32(20)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(3),
            max_lostHitFraction = cms.double(1.0),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('highPurity'),
            minNumberLayers = cms.uint32(3),
            chi2n_par = cms.double(0.7),
            nSigmaZ = cms.double(4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            min_eta = cms.double(-9999.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('lowPtTripletStep'),
            max_minMissHitOutOrIn = cms.int32(99),
            chi2n_no1Dmod_par = cms.double(9999),
            res_par = cms.vdouble(0.003, 0.001),
            max_eta = cms.double(9999.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            d0_par1 = cms.vdouble(0.3, 4.0),
            preFilterName = cms.string('lowPtTripletStepTight'),
            minHitsToBypassChecks = cms.uint32(20)
        )),
    beamspot = cms.InputTag("offlineBeamSpot"),
    vertices = cms.InputTag("pixelVertices"),
    useVtxError = cms.bool(False),
    useVertices = cms.bool(True)
)


process.lowPtTripletStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("lowPtTripletStepSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('lowPtTripletStepTrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    TrajectoryBuilder = cms.string('lowPtTripletStepTrajectoryBuilder'),
    numHitsForSeedCleaner = cms.int32(50)
)


process.lowPtTripletStepTracks = cms.EDProducer("TrackProducer",
    src = cms.InputTag("lowPtTripletStepTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    AlgorithmName = cms.string('iter1'),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    GeometricInnerState = cms.bool(False),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.lumiProducer = cms.EDProducer("LumiProducer",
    lumiversion = cms.untracked.string(''),
    ncacheEntries = cms.untracked.uint32(5),
    connect = cms.string('frontier://LumiProd/CMS_LUMI_PROD')
)


process.mergedDuplicateTracks = cms.EDProducer("TrackProducer",
    src = cms.InputTag("duplicateTrackCandidates","candidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    AlgorithmName = cms.string('undefAlgorithm'),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    GeometricInnerState = cms.bool(False),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.mergedStandAloneMuonSeeds = cms.EDProducer("MuonSeedMerger",
    SeedCollections = cms.VInputTag(cms.InputTag("ancientMuonSeed"), cms.InputTag("MuonSeed"))
)


process.met = cms.EDProducer("METProducer",
    resolutionsEra = cms.string('Spring10'),
    PF_EtResType6 = cms.vdouble(0.0, 1.22, 0.05),
    HB_EtResPar = cms.vdouble(0.0, 1.22, 0.05),
    jdphi6 = cms.vdouble(0.084, 0.08, 0.072, 0.065, 0.066, 
        0.06, 0.051, 0.049, 0.045, 0.045),
    jdphi3 = cms.vdouble(0.042, 0.043, 0.044, 0.043, 0.041, 
        0.039, 0.039, 0.036, 0.034, 0.031),
    jdpt9 = cms.vdouble(0.843, 0.885, 1.245, 1.665, 1.944, 
        1.981, 1.972, 2.875, 3.923, 7.51),
    jdpt8 = cms.vdouble(0.889, 0.939, 1.166, 1.365, 1.553, 
        1.805, 2.06, 2.22, 2.268, 2.247),
    jdpt7 = cms.vdouble(1.094, 1.139, 1.436, 1.672, 1.831, 
        2.05, 2.267, 2.549, 2.785, 2.86),
    jdpt6 = cms.vdouble(1.213, 1.298, 1.716, 2.015, 2.191, 
        2.612, 2.863, 2.879, 2.925, 2.902),
    jdpt5 = cms.vdouble(1.049, 1.149, 1.607, 1.869, 2.012, 
        2.219, 2.289, 2.412, 2.695, 2.865),
    jdpt4 = cms.vdouble(0.85, 0.961, 1.337, 1.593, 1.854, 
        2.005, 2.209, 2.533, 2.812, 3.047),
    jdpt3 = cms.vdouble(0.929, 1.04, 1.46, 1.74, 2.042, 
        2.289, 2.639, 2.837, 2.946, 2.971),
    jdpt2 = cms.vdouble(0.841, 0.937, 1.316, 1.605, 1.919, 
        2.295, 2.562, 2.722, 2.943, 3.293),
    EE_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    jdpt0 = cms.vdouble(0.749, 0.829, 1.099, 1.355, 1.584, 
        1.807, 2.035, 2.217, 2.378, 2.591),
    HF_PhiResPar = cms.vdouble(0.05022),
    HE_PhiResPar = cms.vdouble(0.02511),
    jdpt1 = cms.vdouble(0.718, 0.813, 1.133, 1.384, 1.588, 
        1.841, 2.115, 2.379, 2.508, 2.772),
    PF_PhiResType2 = cms.vdouble(0.002),
    PF_PhiResType3 = cms.vdouble(0.002),
    HF_EtResPar = cms.vdouble(0.0, 1.82, 0.09),
    resolutionsAlgo = cms.string('AK5PF'),
    PF_PhiResType6 = cms.vdouble(0.02511),
    PF_PhiResType7 = cms.vdouble(0.02511),
    PF_PhiResType4 = cms.vdouble(0.0028, 0.0, 0.0022),
    PF_PhiResType5 = cms.vdouble(0.1, 0.1, 0.13),
    ptresolthreshold = cms.double(10.0),
    HO_EtResPar = cms.vdouble(0.0, 1.3, 0.005),
    EB_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    EB_PhiResPar = cms.vdouble(0.00502),
    jdphi9 = cms.vdouble(0.062, 0.059, 0.053, 0.047, 0.042, 
        0.045, 0.036, 0.032, 0.034, 0.044),
    jdphi8 = cms.vdouble(0.059, 0.057, 0.051, 0.044, 0.038, 
        0.035, 0.037, 0.032, 0.028, 0.028),
    jdphi4 = cms.vdouble(0.042, 0.042, 0.043, 0.042, 0.038, 
        0.036, 0.036, 0.033, 0.031, 0.031),
    HO_PhiResPar = cms.vdouble(0.02511),
    jdphi2 = cms.vdouble(0.04, 0.04, 0.04, 0.04, 0.04, 
        0.038, 0.036, 0.035, 0.034, 0.033),
    jdphi1 = cms.vdouble(0.034, 0.035, 0.035, 0.035, 0.035, 
        0.034, 0.031, 0.03, 0.029, 0.027),
    jdphi0 = cms.vdouble(0.034, 0.034, 0.034, 0.034, 0.032, 
        0.031, 0.028, 0.027, 0.027, 0.027),
    jdphi7 = cms.vdouble(0.077, 0.072, 0.059, 0.05, 0.045, 
        0.042, 0.039, 0.039, 0.037, 0.031),
    EE_PhiResPar = cms.vdouble(0.02511),
    jdphi5 = cms.vdouble(0.069, 0.069, 0.064, 0.058, 0.053, 
        0.049, 0.049, 0.043, 0.039, 0.04),
    HB_PhiResPar = cms.vdouble(0.02511),
    PF_PhiResType1 = cms.vdouble(0.002),
    PF_EtResType5 = cms.vdouble(0.41, 0.52, 0.25),
    PF_EtResType4 = cms.vdouble(0.042, 0.1, 0.0),
    PF_EtResType7 = cms.vdouble(0.0, 1.22, 0.05),
    HE_EtResPar = cms.vdouble(0.0, 1.3, 0.05),
    PF_EtResType1 = cms.vdouble(0.05, 0, 0),
    PF_EtResType3 = cms.vdouble(0.05, 0, 0),
    PF_EtResType2 = cms.vdouble(0.05, 0, 0),
    src = cms.InputTag("towerMaker"),
    METType = cms.string('CaloMET'),
    calculateSignificance = cms.bool(True),
    alias = cms.string('RawCaloMET'),
    noHF = cms.bool(False),
    globalThreshold = cms.double(0.3),
    InputType = cms.string('CandidateCollection')
)


process.metHO = cms.EDProducer("METProducer",
    HB_EtResPar = cms.vdouble(0.0, 1.22, 0.05),
    EE_PhiResPar = cms.vdouble(0.02511),
    jdphi3 = cms.vdouble(0.042, 0.043, 0.044, 0.043, 0.041, 
        0.039, 0.039, 0.036, 0.034, 0.031),
    jdpt9 = cms.vdouble(0.843, 0.885, 1.245, 1.665, 1.944, 
        1.981, 1.972, 2.875, 3.923, 7.51),
    jdpt8 = cms.vdouble(0.889, 0.939, 1.166, 1.365, 1.553, 
        1.805, 2.06, 2.22, 2.268, 2.247),
    jdpt7 = cms.vdouble(1.094, 1.139, 1.436, 1.672, 1.831, 
        2.05, 2.267, 2.549, 2.785, 2.86),
    jdpt6 = cms.vdouble(1.213, 1.298, 1.716, 2.015, 2.191, 
        2.612, 2.863, 2.879, 2.925, 2.902),
    jdpt5 = cms.vdouble(1.049, 1.149, 1.607, 1.869, 2.012, 
        2.219, 2.289, 2.412, 2.695, 2.865),
    jdpt4 = cms.vdouble(0.85, 0.961, 1.337, 1.593, 1.854, 
        2.005, 2.209, 2.533, 2.812, 3.047),
    jdpt3 = cms.vdouble(0.929, 1.04, 1.46, 1.74, 2.042, 
        2.289, 2.639, 2.837, 2.946, 2.971),
    jdpt2 = cms.vdouble(0.841, 0.937, 1.316, 1.605, 1.919, 
        2.295, 2.562, 2.722, 2.943, 3.293),
    jdpt1 = cms.vdouble(0.718, 0.813, 1.133, 1.384, 1.588, 
        1.841, 2.115, 2.379, 2.508, 2.772),
    jdpt0 = cms.vdouble(0.749, 0.829, 1.099, 1.355, 1.584, 
        1.807, 2.035, 2.217, 2.378, 2.591),
    HE_EtResPar = cms.vdouble(0.0, 1.3, 0.05),
    alias = cms.string('RawCaloMETHO'),
    HF_PhiResPar = cms.vdouble(0.05022),
    PF_PhiResType7 = cms.vdouble(0.02511),
    HE_PhiResPar = cms.vdouble(0.02511),
    EE_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    noHF = cms.bool(False),
    PF_PhiResType2 = cms.vdouble(0.002),
    PF_PhiResType3 = cms.vdouble(0.002),
    HF_EtResPar = cms.vdouble(0.0, 1.82, 0.09),
    resolutionsEra = cms.string('Spring10'),
    PF_PhiResType6 = cms.vdouble(0.02511),
    InputType = cms.string('CandidateCollection'),
    PF_PhiResType4 = cms.vdouble(0.0028, 0.0, 0.0022),
    PF_PhiResType5 = cms.vdouble(0.1, 0.1, 0.13),
    ptresolthreshold = cms.double(10.0),
    METType = cms.string('CaloMET'),
    HO_EtResPar = cms.vdouble(0.0, 1.3, 0.005),
    EB_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    jdphi8 = cms.vdouble(0.059, 0.057, 0.051, 0.044, 0.038, 
        0.035, 0.037, 0.032, 0.028, 0.028),
    globalThreshold = cms.double(0.3),
    EB_PhiResPar = cms.vdouble(0.00502),
    src = cms.InputTag("towerMakerWithHO"),
    jdphi9 = cms.vdouble(0.062, 0.059, 0.053, 0.047, 0.042, 
        0.045, 0.036, 0.032, 0.034, 0.044),
    resolutionsAlgo = cms.string('AK5PF'),
    jdphi4 = cms.vdouble(0.042, 0.042, 0.043, 0.042, 0.038, 
        0.036, 0.036, 0.033, 0.031, 0.031),
    HO_PhiResPar = cms.vdouble(0.02511),
    jdphi2 = cms.vdouble(0.04, 0.04, 0.04, 0.04, 0.04, 
        0.038, 0.036, 0.035, 0.034, 0.033),
    jdphi1 = cms.vdouble(0.034, 0.035, 0.035, 0.035, 0.035, 
        0.034, 0.031, 0.03, 0.029, 0.027),
    jdphi0 = cms.vdouble(0.034, 0.034, 0.034, 0.034, 0.032, 
        0.031, 0.028, 0.027, 0.027, 0.027),
    jdphi7 = cms.vdouble(0.077, 0.072, 0.059, 0.05, 0.045, 
        0.042, 0.039, 0.039, 0.037, 0.031),
    jdphi6 = cms.vdouble(0.084, 0.08, 0.072, 0.065, 0.066, 
        0.06, 0.051, 0.049, 0.045, 0.045),
    jdphi5 = cms.vdouble(0.069, 0.069, 0.064, 0.058, 0.053, 
        0.049, 0.049, 0.043, 0.039, 0.04),
    HB_PhiResPar = cms.vdouble(0.02511),
    PF_PhiResType1 = cms.vdouble(0.002),
    PF_EtResType5 = cms.vdouble(0.41, 0.52, 0.25),
    PF_EtResType4 = cms.vdouble(0.042, 0.1, 0.0),
    PF_EtResType7 = cms.vdouble(0.0, 1.22, 0.05),
    PF_EtResType6 = cms.vdouble(0.0, 1.22, 0.05),
    PF_EtResType1 = cms.vdouble(0.05, 0, 0),
    calculateSignificance = cms.bool(True),
    PF_EtResType3 = cms.vdouble(0.05, 0, 0),
    PF_EtResType2 = cms.vdouble(0.05, 0, 0)
)


process.metNoHF = cms.EDProducer("METProducer",
    resolutionsEra = cms.string('Spring10'),
    PF_EtResType6 = cms.vdouble(0.0, 1.22, 0.05),
    HB_EtResPar = cms.vdouble(0.0, 1.22, 0.05),
    jdphi6 = cms.vdouble(0.084, 0.08, 0.072, 0.065, 0.066, 
        0.06, 0.051, 0.049, 0.045, 0.045),
    jdphi3 = cms.vdouble(0.042, 0.043, 0.044, 0.043, 0.041, 
        0.039, 0.039, 0.036, 0.034, 0.031),
    jdpt9 = cms.vdouble(0.843, 0.885, 1.245, 1.665, 1.944, 
        1.981, 1.972, 2.875, 3.923, 7.51),
    jdpt8 = cms.vdouble(0.889, 0.939, 1.166, 1.365, 1.553, 
        1.805, 2.06, 2.22, 2.268, 2.247),
    jdpt7 = cms.vdouble(1.094, 1.139, 1.436, 1.672, 1.831, 
        2.05, 2.267, 2.549, 2.785, 2.86),
    jdpt6 = cms.vdouble(1.213, 1.298, 1.716, 2.015, 2.191, 
        2.612, 2.863, 2.879, 2.925, 2.902),
    jdpt5 = cms.vdouble(1.049, 1.149, 1.607, 1.869, 2.012, 
        2.219, 2.289, 2.412, 2.695, 2.865),
    jdpt4 = cms.vdouble(0.85, 0.961, 1.337, 1.593, 1.854, 
        2.005, 2.209, 2.533, 2.812, 3.047),
    jdpt3 = cms.vdouble(0.929, 1.04, 1.46, 1.74, 2.042, 
        2.289, 2.639, 2.837, 2.946, 2.971),
    jdpt2 = cms.vdouble(0.841, 0.937, 1.316, 1.605, 1.919, 
        2.295, 2.562, 2.722, 2.943, 3.293),
    EE_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    jdpt0 = cms.vdouble(0.749, 0.829, 1.099, 1.355, 1.584, 
        1.807, 2.035, 2.217, 2.378, 2.591),
    HF_PhiResPar = cms.vdouble(0.05022),
    HE_PhiResPar = cms.vdouble(0.02511),
    jdpt1 = cms.vdouble(0.718, 0.813, 1.133, 1.384, 1.588, 
        1.841, 2.115, 2.379, 2.508, 2.772),
    PF_PhiResType2 = cms.vdouble(0.002),
    PF_PhiResType3 = cms.vdouble(0.002),
    HF_EtResPar = cms.vdouble(0.0, 1.82, 0.09),
    resolutionsAlgo = cms.string('AK5PF'),
    PF_PhiResType6 = cms.vdouble(0.02511),
    PF_PhiResType7 = cms.vdouble(0.02511),
    PF_PhiResType4 = cms.vdouble(0.0028, 0.0, 0.0022),
    PF_PhiResType5 = cms.vdouble(0.1, 0.1, 0.13),
    ptresolthreshold = cms.double(10.0),
    HO_EtResPar = cms.vdouble(0.0, 1.3, 0.005),
    EB_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    EB_PhiResPar = cms.vdouble(0.00502),
    jdphi9 = cms.vdouble(0.062, 0.059, 0.053, 0.047, 0.042, 
        0.045, 0.036, 0.032, 0.034, 0.044),
    jdphi8 = cms.vdouble(0.059, 0.057, 0.051, 0.044, 0.038, 
        0.035, 0.037, 0.032, 0.028, 0.028),
    jdphi4 = cms.vdouble(0.042, 0.042, 0.043, 0.042, 0.038, 
        0.036, 0.036, 0.033, 0.031, 0.031),
    HO_PhiResPar = cms.vdouble(0.02511),
    jdphi2 = cms.vdouble(0.04, 0.04, 0.04, 0.04, 0.04, 
        0.038, 0.036, 0.035, 0.034, 0.033),
    jdphi1 = cms.vdouble(0.034, 0.035, 0.035, 0.035, 0.035, 
        0.034, 0.031, 0.03, 0.029, 0.027),
    jdphi0 = cms.vdouble(0.034, 0.034, 0.034, 0.034, 0.032, 
        0.031, 0.028, 0.027, 0.027, 0.027),
    jdphi7 = cms.vdouble(0.077, 0.072, 0.059, 0.05, 0.045, 
        0.042, 0.039, 0.039, 0.037, 0.031),
    EE_PhiResPar = cms.vdouble(0.02511),
    jdphi5 = cms.vdouble(0.069, 0.069, 0.064, 0.058, 0.053, 
        0.049, 0.049, 0.043, 0.039, 0.04),
    HB_PhiResPar = cms.vdouble(0.02511),
    PF_PhiResType1 = cms.vdouble(0.002),
    PF_EtResType5 = cms.vdouble(0.41, 0.52, 0.25),
    PF_EtResType4 = cms.vdouble(0.042, 0.1, 0.0),
    PF_EtResType7 = cms.vdouble(0.0, 1.22, 0.05),
    HE_EtResPar = cms.vdouble(0.0, 1.3, 0.05),
    PF_EtResType1 = cms.vdouble(0.05, 0, 0),
    PF_EtResType3 = cms.vdouble(0.05, 0, 0),
    PF_EtResType2 = cms.vdouble(0.05, 0, 0),
    src = cms.InputTag("towerMaker"),
    METType = cms.string('CaloMET'),
    calculateSignificance = cms.bool(True),
    alias = cms.string('RawCaloMETNoHF'),
    noHF = cms.bool(True),
    globalThreshold = cms.double(0.3),
    InputType = cms.string('CandidateCollection')
)


process.metNoHFHO = cms.EDProducer("METProducer",
    HB_EtResPar = cms.vdouble(0.0, 1.22, 0.05),
    EE_PhiResPar = cms.vdouble(0.02511),
    jdphi3 = cms.vdouble(0.042, 0.043, 0.044, 0.043, 0.041, 
        0.039, 0.039, 0.036, 0.034, 0.031),
    jdpt9 = cms.vdouble(0.843, 0.885, 1.245, 1.665, 1.944, 
        1.981, 1.972, 2.875, 3.923, 7.51),
    jdpt8 = cms.vdouble(0.889, 0.939, 1.166, 1.365, 1.553, 
        1.805, 2.06, 2.22, 2.268, 2.247),
    jdpt7 = cms.vdouble(1.094, 1.139, 1.436, 1.672, 1.831, 
        2.05, 2.267, 2.549, 2.785, 2.86),
    jdpt6 = cms.vdouble(1.213, 1.298, 1.716, 2.015, 2.191, 
        2.612, 2.863, 2.879, 2.925, 2.902),
    jdpt5 = cms.vdouble(1.049, 1.149, 1.607, 1.869, 2.012, 
        2.219, 2.289, 2.412, 2.695, 2.865),
    jdpt4 = cms.vdouble(0.85, 0.961, 1.337, 1.593, 1.854, 
        2.005, 2.209, 2.533, 2.812, 3.047),
    jdpt3 = cms.vdouble(0.929, 1.04, 1.46, 1.74, 2.042, 
        2.289, 2.639, 2.837, 2.946, 2.971),
    jdpt2 = cms.vdouble(0.841, 0.937, 1.316, 1.605, 1.919, 
        2.295, 2.562, 2.722, 2.943, 3.293),
    jdpt1 = cms.vdouble(0.718, 0.813, 1.133, 1.384, 1.588, 
        1.841, 2.115, 2.379, 2.508, 2.772),
    jdpt0 = cms.vdouble(0.749, 0.829, 1.099, 1.355, 1.584, 
        1.807, 2.035, 2.217, 2.378, 2.591),
    HE_EtResPar = cms.vdouble(0.0, 1.3, 0.05),
    alias = cms.string('RawCaloMETNoHFHO'),
    HF_PhiResPar = cms.vdouble(0.05022),
    PF_PhiResType7 = cms.vdouble(0.02511),
    HE_PhiResPar = cms.vdouble(0.02511),
    EE_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    noHF = cms.bool(True),
    PF_PhiResType2 = cms.vdouble(0.002),
    PF_PhiResType3 = cms.vdouble(0.002),
    HF_EtResPar = cms.vdouble(0.0, 1.82, 0.09),
    resolutionsEra = cms.string('Spring10'),
    PF_PhiResType6 = cms.vdouble(0.02511),
    InputType = cms.string('CandidateCollection'),
    PF_PhiResType4 = cms.vdouble(0.0028, 0.0, 0.0022),
    PF_PhiResType5 = cms.vdouble(0.1, 0.1, 0.13),
    ptresolthreshold = cms.double(10.0),
    METType = cms.string('CaloMET'),
    HO_EtResPar = cms.vdouble(0.0, 1.3, 0.005),
    EB_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    jdphi8 = cms.vdouble(0.059, 0.057, 0.051, 0.044, 0.038, 
        0.035, 0.037, 0.032, 0.028, 0.028),
    globalThreshold = cms.double(0.3),
    EB_PhiResPar = cms.vdouble(0.00502),
    src = cms.InputTag("towerMakerWithHO"),
    jdphi9 = cms.vdouble(0.062, 0.059, 0.053, 0.047, 0.042, 
        0.045, 0.036, 0.032, 0.034, 0.044),
    resolutionsAlgo = cms.string('AK5PF'),
    jdphi4 = cms.vdouble(0.042, 0.042, 0.043, 0.042, 0.038, 
        0.036, 0.036, 0.033, 0.031, 0.031),
    HO_PhiResPar = cms.vdouble(0.02511),
    jdphi2 = cms.vdouble(0.04, 0.04, 0.04, 0.04, 0.04, 
        0.038, 0.036, 0.035, 0.034, 0.033),
    jdphi1 = cms.vdouble(0.034, 0.035, 0.035, 0.035, 0.035, 
        0.034, 0.031, 0.03, 0.029, 0.027),
    jdphi0 = cms.vdouble(0.034, 0.034, 0.034, 0.034, 0.032, 
        0.031, 0.028, 0.027, 0.027, 0.027),
    jdphi7 = cms.vdouble(0.077, 0.072, 0.059, 0.05, 0.045, 
        0.042, 0.039, 0.039, 0.037, 0.031),
    jdphi6 = cms.vdouble(0.084, 0.08, 0.072, 0.065, 0.066, 
        0.06, 0.051, 0.049, 0.045, 0.045),
    jdphi5 = cms.vdouble(0.069, 0.069, 0.064, 0.058, 0.053, 
        0.049, 0.049, 0.043, 0.039, 0.04),
    HB_PhiResPar = cms.vdouble(0.02511),
    PF_PhiResType1 = cms.vdouble(0.002),
    PF_EtResType5 = cms.vdouble(0.41, 0.52, 0.25),
    PF_EtResType4 = cms.vdouble(0.042, 0.1, 0.0),
    PF_EtResType7 = cms.vdouble(0.0, 1.22, 0.05),
    PF_EtResType6 = cms.vdouble(0.0, 1.22, 0.05),
    PF_EtResType1 = cms.vdouble(0.05, 0, 0),
    calculateSignificance = cms.bool(True),
    PF_EtResType3 = cms.vdouble(0.05, 0, 0),
    PF_EtResType2 = cms.vdouble(0.05, 0, 0)
)


process.metOpt = cms.EDProducer("METProducer",
    resolutionsEra = cms.string('Spring10'),
    PF_EtResType6 = cms.vdouble(0.0, 1.22, 0.05),
    HB_EtResPar = cms.vdouble(0.0, 1.22, 0.05),
    jdphi6 = cms.vdouble(0.084, 0.08, 0.072, 0.065, 0.066, 
        0.06, 0.051, 0.049, 0.045, 0.045),
    jdphi3 = cms.vdouble(0.042, 0.043, 0.044, 0.043, 0.041, 
        0.039, 0.039, 0.036, 0.034, 0.031),
    jdpt9 = cms.vdouble(0.843, 0.885, 1.245, 1.665, 1.944, 
        1.981, 1.972, 2.875, 3.923, 7.51),
    jdpt8 = cms.vdouble(0.889, 0.939, 1.166, 1.365, 1.553, 
        1.805, 2.06, 2.22, 2.268, 2.247),
    jdpt7 = cms.vdouble(1.094, 1.139, 1.436, 1.672, 1.831, 
        2.05, 2.267, 2.549, 2.785, 2.86),
    jdpt6 = cms.vdouble(1.213, 1.298, 1.716, 2.015, 2.191, 
        2.612, 2.863, 2.879, 2.925, 2.902),
    jdpt5 = cms.vdouble(1.049, 1.149, 1.607, 1.869, 2.012, 
        2.219, 2.289, 2.412, 2.695, 2.865),
    jdpt4 = cms.vdouble(0.85, 0.961, 1.337, 1.593, 1.854, 
        2.005, 2.209, 2.533, 2.812, 3.047),
    jdpt3 = cms.vdouble(0.929, 1.04, 1.46, 1.74, 2.042, 
        2.289, 2.639, 2.837, 2.946, 2.971),
    jdpt2 = cms.vdouble(0.841, 0.937, 1.316, 1.605, 1.919, 
        2.295, 2.562, 2.722, 2.943, 3.293),
    EE_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    jdpt0 = cms.vdouble(0.749, 0.829, 1.099, 1.355, 1.584, 
        1.807, 2.035, 2.217, 2.378, 2.591),
    HF_PhiResPar = cms.vdouble(0.05022),
    HE_PhiResPar = cms.vdouble(0.02511),
    jdpt1 = cms.vdouble(0.718, 0.813, 1.133, 1.384, 1.588, 
        1.841, 2.115, 2.379, 2.508, 2.772),
    PF_PhiResType2 = cms.vdouble(0.002),
    PF_PhiResType3 = cms.vdouble(0.002),
    HF_EtResPar = cms.vdouble(0.0, 1.82, 0.09),
    resolutionsAlgo = cms.string('AK5PF'),
    PF_PhiResType6 = cms.vdouble(0.02511),
    PF_PhiResType7 = cms.vdouble(0.02511),
    PF_PhiResType4 = cms.vdouble(0.0028, 0.0, 0.0022),
    PF_PhiResType5 = cms.vdouble(0.1, 0.1, 0.13),
    ptresolthreshold = cms.double(10.0),
    HO_EtResPar = cms.vdouble(0.0, 1.3, 0.005),
    EB_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    EB_PhiResPar = cms.vdouble(0.00502),
    jdphi9 = cms.vdouble(0.062, 0.059, 0.053, 0.047, 0.042, 
        0.045, 0.036, 0.032, 0.034, 0.044),
    jdphi8 = cms.vdouble(0.059, 0.057, 0.051, 0.044, 0.038, 
        0.035, 0.037, 0.032, 0.028, 0.028),
    jdphi4 = cms.vdouble(0.042, 0.042, 0.043, 0.042, 0.038, 
        0.036, 0.036, 0.033, 0.031, 0.031),
    HO_PhiResPar = cms.vdouble(0.02511),
    jdphi2 = cms.vdouble(0.04, 0.04, 0.04, 0.04, 0.04, 
        0.038, 0.036, 0.035, 0.034, 0.033),
    jdphi1 = cms.vdouble(0.034, 0.035, 0.035, 0.035, 0.035, 
        0.034, 0.031, 0.03, 0.029, 0.027),
    jdphi0 = cms.vdouble(0.034, 0.034, 0.034, 0.034, 0.032, 
        0.031, 0.028, 0.027, 0.027, 0.027),
    jdphi7 = cms.vdouble(0.077, 0.072, 0.059, 0.05, 0.045, 
        0.042, 0.039, 0.039, 0.037, 0.031),
    EE_PhiResPar = cms.vdouble(0.02511),
    jdphi5 = cms.vdouble(0.069, 0.069, 0.064, 0.058, 0.053, 
        0.049, 0.049, 0.043, 0.039, 0.04),
    HB_PhiResPar = cms.vdouble(0.02511),
    PF_PhiResType1 = cms.vdouble(0.002),
    PF_EtResType5 = cms.vdouble(0.41, 0.52, 0.25),
    PF_EtResType4 = cms.vdouble(0.042, 0.1, 0.0),
    PF_EtResType7 = cms.vdouble(0.0, 1.22, 0.05),
    HE_EtResPar = cms.vdouble(0.0, 1.3, 0.05),
    PF_EtResType1 = cms.vdouble(0.05, 0, 0),
    PF_EtResType3 = cms.vdouble(0.05, 0, 0),
    PF_EtResType2 = cms.vdouble(0.05, 0, 0),
    src = cms.InputTag("calotoweroptmaker"),
    METType = cms.string('CaloMET'),
    calculateSignificance = cms.bool(True),
    alias = cms.string('RawCaloMETOpt'),
    noHF = cms.bool(False),
    globalThreshold = cms.double(0.0),
    InputType = cms.string('CandidateCollection')
)


process.metOptHO = cms.EDProducer("METProducer",
    HB_EtResPar = cms.vdouble(0.0, 1.22, 0.05),
    EE_PhiResPar = cms.vdouble(0.02511),
    jdphi3 = cms.vdouble(0.042, 0.043, 0.044, 0.043, 0.041, 
        0.039, 0.039, 0.036, 0.034, 0.031),
    jdpt9 = cms.vdouble(0.843, 0.885, 1.245, 1.665, 1.944, 
        1.981, 1.972, 2.875, 3.923, 7.51),
    jdpt8 = cms.vdouble(0.889, 0.939, 1.166, 1.365, 1.553, 
        1.805, 2.06, 2.22, 2.268, 2.247),
    jdpt7 = cms.vdouble(1.094, 1.139, 1.436, 1.672, 1.831, 
        2.05, 2.267, 2.549, 2.785, 2.86),
    jdpt6 = cms.vdouble(1.213, 1.298, 1.716, 2.015, 2.191, 
        2.612, 2.863, 2.879, 2.925, 2.902),
    jdpt5 = cms.vdouble(1.049, 1.149, 1.607, 1.869, 2.012, 
        2.219, 2.289, 2.412, 2.695, 2.865),
    jdpt4 = cms.vdouble(0.85, 0.961, 1.337, 1.593, 1.854, 
        2.005, 2.209, 2.533, 2.812, 3.047),
    jdpt3 = cms.vdouble(0.929, 1.04, 1.46, 1.74, 2.042, 
        2.289, 2.639, 2.837, 2.946, 2.971),
    jdpt2 = cms.vdouble(0.841, 0.937, 1.316, 1.605, 1.919, 
        2.295, 2.562, 2.722, 2.943, 3.293),
    jdpt1 = cms.vdouble(0.718, 0.813, 1.133, 1.384, 1.588, 
        1.841, 2.115, 2.379, 2.508, 2.772),
    jdpt0 = cms.vdouble(0.749, 0.829, 1.099, 1.355, 1.584, 
        1.807, 2.035, 2.217, 2.378, 2.591),
    HE_EtResPar = cms.vdouble(0.0, 1.3, 0.05),
    alias = cms.string('RawCaloMETOptHO'),
    HF_PhiResPar = cms.vdouble(0.05022),
    PF_PhiResType7 = cms.vdouble(0.02511),
    HE_PhiResPar = cms.vdouble(0.02511),
    EE_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    noHF = cms.bool(False),
    PF_PhiResType2 = cms.vdouble(0.002),
    PF_PhiResType3 = cms.vdouble(0.002),
    HF_EtResPar = cms.vdouble(0.0, 1.82, 0.09),
    resolutionsEra = cms.string('Spring10'),
    PF_PhiResType6 = cms.vdouble(0.02511),
    InputType = cms.string('CandidateCollection'),
    PF_PhiResType4 = cms.vdouble(0.0028, 0.0, 0.0022),
    PF_PhiResType5 = cms.vdouble(0.1, 0.1, 0.13),
    ptresolthreshold = cms.double(10.0),
    METType = cms.string('CaloMET'),
    HO_EtResPar = cms.vdouble(0.0, 1.3, 0.005),
    EB_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    jdphi8 = cms.vdouble(0.059, 0.057, 0.051, 0.044, 0.038, 
        0.035, 0.037, 0.032, 0.028, 0.028),
    globalThreshold = cms.double(0.0),
    EB_PhiResPar = cms.vdouble(0.00502),
    src = cms.InputTag("calotoweroptmakerWithHO"),
    jdphi9 = cms.vdouble(0.062, 0.059, 0.053, 0.047, 0.042, 
        0.045, 0.036, 0.032, 0.034, 0.044),
    resolutionsAlgo = cms.string('AK5PF'),
    jdphi4 = cms.vdouble(0.042, 0.042, 0.043, 0.042, 0.038, 
        0.036, 0.036, 0.033, 0.031, 0.031),
    HO_PhiResPar = cms.vdouble(0.02511),
    jdphi2 = cms.vdouble(0.04, 0.04, 0.04, 0.04, 0.04, 
        0.038, 0.036, 0.035, 0.034, 0.033),
    jdphi1 = cms.vdouble(0.034, 0.035, 0.035, 0.035, 0.035, 
        0.034, 0.031, 0.03, 0.029, 0.027),
    jdphi0 = cms.vdouble(0.034, 0.034, 0.034, 0.034, 0.032, 
        0.031, 0.028, 0.027, 0.027, 0.027),
    jdphi7 = cms.vdouble(0.077, 0.072, 0.059, 0.05, 0.045, 
        0.042, 0.039, 0.039, 0.037, 0.031),
    jdphi6 = cms.vdouble(0.084, 0.08, 0.072, 0.065, 0.066, 
        0.06, 0.051, 0.049, 0.045, 0.045),
    jdphi5 = cms.vdouble(0.069, 0.069, 0.064, 0.058, 0.053, 
        0.049, 0.049, 0.043, 0.039, 0.04),
    HB_PhiResPar = cms.vdouble(0.02511),
    PF_PhiResType1 = cms.vdouble(0.002),
    PF_EtResType5 = cms.vdouble(0.41, 0.52, 0.25),
    PF_EtResType4 = cms.vdouble(0.042, 0.1, 0.0),
    PF_EtResType7 = cms.vdouble(0.0, 1.22, 0.05),
    PF_EtResType6 = cms.vdouble(0.0, 1.22, 0.05),
    PF_EtResType1 = cms.vdouble(0.05, 0, 0),
    calculateSignificance = cms.bool(True),
    PF_EtResType3 = cms.vdouble(0.05, 0, 0),
    PF_EtResType2 = cms.vdouble(0.05, 0, 0)
)


process.metOptNoHF = cms.EDProducer("METProducer",
    resolutionsEra = cms.string('Spring10'),
    PF_EtResType6 = cms.vdouble(0.0, 1.22, 0.05),
    HB_EtResPar = cms.vdouble(0.0, 1.22, 0.05),
    jdphi6 = cms.vdouble(0.084, 0.08, 0.072, 0.065, 0.066, 
        0.06, 0.051, 0.049, 0.045, 0.045),
    jdphi3 = cms.vdouble(0.042, 0.043, 0.044, 0.043, 0.041, 
        0.039, 0.039, 0.036, 0.034, 0.031),
    jdpt9 = cms.vdouble(0.843, 0.885, 1.245, 1.665, 1.944, 
        1.981, 1.972, 2.875, 3.923, 7.51),
    jdpt8 = cms.vdouble(0.889, 0.939, 1.166, 1.365, 1.553, 
        1.805, 2.06, 2.22, 2.268, 2.247),
    jdpt7 = cms.vdouble(1.094, 1.139, 1.436, 1.672, 1.831, 
        2.05, 2.267, 2.549, 2.785, 2.86),
    jdpt6 = cms.vdouble(1.213, 1.298, 1.716, 2.015, 2.191, 
        2.612, 2.863, 2.879, 2.925, 2.902),
    jdpt5 = cms.vdouble(1.049, 1.149, 1.607, 1.869, 2.012, 
        2.219, 2.289, 2.412, 2.695, 2.865),
    jdpt4 = cms.vdouble(0.85, 0.961, 1.337, 1.593, 1.854, 
        2.005, 2.209, 2.533, 2.812, 3.047),
    jdpt3 = cms.vdouble(0.929, 1.04, 1.46, 1.74, 2.042, 
        2.289, 2.639, 2.837, 2.946, 2.971),
    jdpt2 = cms.vdouble(0.841, 0.937, 1.316, 1.605, 1.919, 
        2.295, 2.562, 2.722, 2.943, 3.293),
    EE_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    jdpt0 = cms.vdouble(0.749, 0.829, 1.099, 1.355, 1.584, 
        1.807, 2.035, 2.217, 2.378, 2.591),
    HF_PhiResPar = cms.vdouble(0.05022),
    HE_PhiResPar = cms.vdouble(0.02511),
    jdpt1 = cms.vdouble(0.718, 0.813, 1.133, 1.384, 1.588, 
        1.841, 2.115, 2.379, 2.508, 2.772),
    PF_PhiResType2 = cms.vdouble(0.002),
    PF_PhiResType3 = cms.vdouble(0.002),
    HF_EtResPar = cms.vdouble(0.0, 1.82, 0.09),
    resolutionsAlgo = cms.string('AK5PF'),
    PF_PhiResType6 = cms.vdouble(0.02511),
    PF_PhiResType7 = cms.vdouble(0.02511),
    PF_PhiResType4 = cms.vdouble(0.0028, 0.0, 0.0022),
    PF_PhiResType5 = cms.vdouble(0.1, 0.1, 0.13),
    ptresolthreshold = cms.double(10.0),
    HO_EtResPar = cms.vdouble(0.0, 1.3, 0.005),
    EB_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    EB_PhiResPar = cms.vdouble(0.00502),
    jdphi9 = cms.vdouble(0.062, 0.059, 0.053, 0.047, 0.042, 
        0.045, 0.036, 0.032, 0.034, 0.044),
    jdphi8 = cms.vdouble(0.059, 0.057, 0.051, 0.044, 0.038, 
        0.035, 0.037, 0.032, 0.028, 0.028),
    jdphi4 = cms.vdouble(0.042, 0.042, 0.043, 0.042, 0.038, 
        0.036, 0.036, 0.033, 0.031, 0.031),
    HO_PhiResPar = cms.vdouble(0.02511),
    jdphi2 = cms.vdouble(0.04, 0.04, 0.04, 0.04, 0.04, 
        0.038, 0.036, 0.035, 0.034, 0.033),
    jdphi1 = cms.vdouble(0.034, 0.035, 0.035, 0.035, 0.035, 
        0.034, 0.031, 0.03, 0.029, 0.027),
    jdphi0 = cms.vdouble(0.034, 0.034, 0.034, 0.034, 0.032, 
        0.031, 0.028, 0.027, 0.027, 0.027),
    jdphi7 = cms.vdouble(0.077, 0.072, 0.059, 0.05, 0.045, 
        0.042, 0.039, 0.039, 0.037, 0.031),
    EE_PhiResPar = cms.vdouble(0.02511),
    jdphi5 = cms.vdouble(0.069, 0.069, 0.064, 0.058, 0.053, 
        0.049, 0.049, 0.043, 0.039, 0.04),
    HB_PhiResPar = cms.vdouble(0.02511),
    PF_PhiResType1 = cms.vdouble(0.002),
    PF_EtResType5 = cms.vdouble(0.41, 0.52, 0.25),
    PF_EtResType4 = cms.vdouble(0.042, 0.1, 0.0),
    PF_EtResType7 = cms.vdouble(0.0, 1.22, 0.05),
    HE_EtResPar = cms.vdouble(0.0, 1.3, 0.05),
    PF_EtResType1 = cms.vdouble(0.05, 0, 0),
    PF_EtResType3 = cms.vdouble(0.05, 0, 0),
    PF_EtResType2 = cms.vdouble(0.05, 0, 0),
    src = cms.InputTag("calotoweroptmaker"),
    METType = cms.string('CaloMET'),
    calculateSignificance = cms.bool(True),
    alias = cms.string('RawCaloMETOptNoHF'),
    noHF = cms.bool(True),
    globalThreshold = cms.double(0.0),
    InputType = cms.string('CandidateCollection')
)


process.metOptNoHFHO = cms.EDProducer("METProducer",
    HB_EtResPar = cms.vdouble(0.0, 1.22, 0.05),
    EE_PhiResPar = cms.vdouble(0.02511),
    jdphi3 = cms.vdouble(0.042, 0.043, 0.044, 0.043, 0.041, 
        0.039, 0.039, 0.036, 0.034, 0.031),
    jdpt9 = cms.vdouble(0.843, 0.885, 1.245, 1.665, 1.944, 
        1.981, 1.972, 2.875, 3.923, 7.51),
    jdpt8 = cms.vdouble(0.889, 0.939, 1.166, 1.365, 1.553, 
        1.805, 2.06, 2.22, 2.268, 2.247),
    jdpt7 = cms.vdouble(1.094, 1.139, 1.436, 1.672, 1.831, 
        2.05, 2.267, 2.549, 2.785, 2.86),
    jdpt6 = cms.vdouble(1.213, 1.298, 1.716, 2.015, 2.191, 
        2.612, 2.863, 2.879, 2.925, 2.902),
    jdpt5 = cms.vdouble(1.049, 1.149, 1.607, 1.869, 2.012, 
        2.219, 2.289, 2.412, 2.695, 2.865),
    jdpt4 = cms.vdouble(0.85, 0.961, 1.337, 1.593, 1.854, 
        2.005, 2.209, 2.533, 2.812, 3.047),
    jdpt3 = cms.vdouble(0.929, 1.04, 1.46, 1.74, 2.042, 
        2.289, 2.639, 2.837, 2.946, 2.971),
    jdpt2 = cms.vdouble(0.841, 0.937, 1.316, 1.605, 1.919, 
        2.295, 2.562, 2.722, 2.943, 3.293),
    jdpt1 = cms.vdouble(0.718, 0.813, 1.133, 1.384, 1.588, 
        1.841, 2.115, 2.379, 2.508, 2.772),
    jdpt0 = cms.vdouble(0.749, 0.829, 1.099, 1.355, 1.584, 
        1.807, 2.035, 2.217, 2.378, 2.591),
    HE_EtResPar = cms.vdouble(0.0, 1.3, 0.05),
    alias = cms.string('RawCaloMETOptNoHFHO'),
    HF_PhiResPar = cms.vdouble(0.05022),
    PF_PhiResType7 = cms.vdouble(0.02511),
    HE_PhiResPar = cms.vdouble(0.02511),
    EE_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    noHF = cms.bool(True),
    PF_PhiResType2 = cms.vdouble(0.002),
    PF_PhiResType3 = cms.vdouble(0.002),
    HF_EtResPar = cms.vdouble(0.0, 1.82, 0.09),
    resolutionsEra = cms.string('Spring10'),
    PF_PhiResType6 = cms.vdouble(0.02511),
    InputType = cms.string('CandidateCollection'),
    PF_PhiResType4 = cms.vdouble(0.0028, 0.0, 0.0022),
    PF_PhiResType5 = cms.vdouble(0.1, 0.1, 0.13),
    ptresolthreshold = cms.double(10.0),
    METType = cms.string('CaloMET'),
    HO_EtResPar = cms.vdouble(0.0, 1.3, 0.005),
    EB_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    jdphi8 = cms.vdouble(0.059, 0.057, 0.051, 0.044, 0.038, 
        0.035, 0.037, 0.032, 0.028, 0.028),
    globalThreshold = cms.double(0.0),
    EB_PhiResPar = cms.vdouble(0.00502),
    src = cms.InputTag("calotoweroptmakerWithHO"),
    jdphi9 = cms.vdouble(0.062, 0.059, 0.053, 0.047, 0.042, 
        0.045, 0.036, 0.032, 0.034, 0.044),
    resolutionsAlgo = cms.string('AK5PF'),
    jdphi4 = cms.vdouble(0.042, 0.042, 0.043, 0.042, 0.038, 
        0.036, 0.036, 0.033, 0.031, 0.031),
    HO_PhiResPar = cms.vdouble(0.02511),
    jdphi2 = cms.vdouble(0.04, 0.04, 0.04, 0.04, 0.04, 
        0.038, 0.036, 0.035, 0.034, 0.033),
    jdphi1 = cms.vdouble(0.034, 0.035, 0.035, 0.035, 0.035, 
        0.034, 0.031, 0.03, 0.029, 0.027),
    jdphi0 = cms.vdouble(0.034, 0.034, 0.034, 0.034, 0.032, 
        0.031, 0.028, 0.027, 0.027, 0.027),
    jdphi7 = cms.vdouble(0.077, 0.072, 0.059, 0.05, 0.045, 
        0.042, 0.039, 0.039, 0.037, 0.031),
    jdphi6 = cms.vdouble(0.084, 0.08, 0.072, 0.065, 0.066, 
        0.06, 0.051, 0.049, 0.045, 0.045),
    jdphi5 = cms.vdouble(0.069, 0.069, 0.064, 0.058, 0.053, 
        0.049, 0.049, 0.043, 0.039, 0.04),
    HB_PhiResPar = cms.vdouble(0.02511),
    PF_PhiResType1 = cms.vdouble(0.002),
    PF_EtResType5 = cms.vdouble(0.41, 0.52, 0.25),
    PF_EtResType4 = cms.vdouble(0.042, 0.1, 0.0),
    PF_EtResType7 = cms.vdouble(0.0, 1.22, 0.05),
    PF_EtResType6 = cms.vdouble(0.0, 1.22, 0.05),
    PF_EtResType1 = cms.vdouble(0.05, 0, 0),
    calculateSignificance = cms.bool(True),
    PF_EtResType3 = cms.vdouble(0.05, 0, 0),
    PF_EtResType2 = cms.vdouble(0.05, 0, 0)
)


process.metsignificance = cms.EDProducer("METProducer",
    src = cms.InputTag("towerMaker"),
    METType = cms.string('CaloMETSignif'),
    InputType = cms.string('CandidateCollection'),
    HO_PhiResPar = cms.vdouble(0.02511),
    HF_PhiResPar = cms.vdouble(0.05022),
    EB_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    EB_PhiResPar = cms.vdouble(0.00502),
    EE_PhiResPar = cms.vdouble(0.02511),
    HE_PhiResPar = cms.vdouble(0.02511),
    HB_PhiResPar = cms.vdouble(0.02511),
    alias = cms.string('RawCaloMETSignif'),
    HB_EtResPar = cms.vdouble(0.0, 1.22, 0.05),
    noHF = cms.bool(False),
    globalThreshold = cms.double(0.5),
    HF_EtResPar = cms.vdouble(0.0, 1.82, 0.09),
    HE_EtResPar = cms.vdouble(0.0, 1.3, 0.05),
    HO_EtResPar = cms.vdouble(0.0, 1.3, 0.005),
    EE_EtResPar = cms.vdouble(0.2, 0.03, 0.005)
)


process.mixedTripletStep = cms.EDProducer("TrackListMerger",
    ShareFrac = cms.double(0.19),
    writeOnlyTrkQuals = cms.bool(True),
    MinPT = cms.double(0.05),
    allowFirstHitShare = cms.bool(True),
    copyExtras = cms.untracked.bool(False),
    Epsilon = cms.double(-0.001),
    shareFrac = cms.double(0.11),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("mixedTripletStepSelector","mixedTripletStepVtx"), cms.InputTag("mixedTripletStepSelector","mixedTripletStepTrk")),
    indivShareFrac = cms.vdouble(0.11, 0.11),
    MaxNormalizedChisq = cms.double(1000.0),
    hasSelector = cms.vint32(1, 1),
    FoundHitBonus = cms.double(5.0),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(True),
        tLists = cms.vint32(0, 1)
    )),
    MinFound = cms.int32(3),
    TrackProducers = cms.VInputTag(cms.InputTag("mixedTripletStepTracks"), cms.InputTag("mixedTripletStepTracks")),
    LostHitPenalty = cms.double(20.0),
    newQuality = cms.string('confirmed')
)


process.mixedTripletStepClusters = cms.EDProducer("TrackClusterRemover",
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    trajectories = cms.InputTag("detachedTripletStepTracks"),
    oldClusterRemovalInfo = cms.InputTag("detachedTripletStepClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    overrideTrkQuals = cms.InputTag("detachedTripletStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True)
)


process.mixedTripletStepSeedClusterMask = cms.EDProducer("SeedClusterRemover",
    trajectories = cms.InputTag("mixedTripletStepSeeds"),
    oldClusterRemovalInfo = cms.InputTag("pixelPairStepSeedClusterMask"),
    stripClusters = cms.InputTag("siStripClusters"),
    overrideTrkQuals = cms.InputTag(""),
    pixelClusters = cms.InputTag("siPixelClusters"),
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True)
)


process.mixedTripletStepSeeds = cms.EDProducer("SeedCombiner",
    seedCollections = cms.VInputTag(cms.InputTag("mixedTripletStepSeedsA"), cms.InputTag("mixedTripletStepSeedsB"))
)


process.mixedTripletStepSeedsA = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            maxElement = cms.uint32(100000),
            ComponentName = cms.string('PixelTripletLargeTipGenerator'),
            extraHitRPhitolerance = cms.double(0.0),
            useMultScattering = cms.bool(True),
            phiPreFiltering = cms.double(0.3),
            extraHitRZtolerance = cms.double(0.0)
        ),
        SeedingLayers = cms.string('mixedTripletStepSeedLayersA')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
        FilterPixelHits = cms.bool(True),
        FilterStripHits = cms.bool(True),
        FilterAtHelixStage = cms.bool(False)
    ),
    ClusterCheckPSet = cms.PSet(
        MaxNumberOfPixelClusters = cms.uint32(40000),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters")
    ),
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originRadius = cms.double(1.5),
            ptMin = cms.double(0.4),
            originHalfLength = cms.double(15.0)
        ),
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot')
    ),
    SeedCreatorPSet = cms.PSet(
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial'),
        ComponentName = cms.string('SeedFromConsecutiveHitsTripletOnlyCreator')
    )
)


process.mixedTripletStepSeedsB = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            maxElement = cms.uint32(100000),
            ComponentName = cms.string('PixelTripletLargeTipGenerator'),
            extraHitRPhitolerance = cms.double(0.0),
            useMultScattering = cms.bool(True),
            phiPreFiltering = cms.double(0.3),
            extraHitRZtolerance = cms.double(0.0)
        ),
        SeedingLayers = cms.string('mixedTripletStepSeedLayersB')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
        FilterPixelHits = cms.bool(True),
        FilterStripHits = cms.bool(True),
        FilterAtHelixStage = cms.bool(False)
    ),
    ClusterCheckPSet = cms.PSet(
        MaxNumberOfPixelClusters = cms.uint32(40000),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters")
    ),
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originRadius = cms.double(1.5),
            ptMin = cms.double(0.6),
            originHalfLength = cms.double(10.0)
        ),
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot')
    ),
    SeedCreatorPSet = cms.PSet(
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial'),
        ComponentName = cms.string('SeedFromConsecutiveHitsTripletOnlyCreator')
    )
)


process.mixedTripletStepSelector = cms.EDProducer("MultiTrackSelector",
    src = cms.InputTag("mixedTripletStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        max_d0 = cms.double(100.0),
        minNumber3DLayers = cms.uint32(2),
        max_lostHitFraction = cms.double(1.0),
        applyAbsCutsIfNoPV = cms.bool(False),
        qualityBit = cms.string('loose'),
        minNumberLayers = cms.uint32(3),
        chi2n_par = cms.double(1.0),
        nSigmaZ = cms.double(4.0),
        dz_par2 = cms.vdouble(1.3, 3.0),
        applyAdaptedPVCuts = cms.bool(True),
        min_eta = cms.double(-9999.0),
        dz_par1 = cms.vdouble(1.2, 3.0),
        copyTrajectories = cms.untracked.bool(False),
        vtxNumber = cms.int32(-1),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(1),
        max_relpterr = cms.double(9999.0),
        copyExtras = cms.untracked.bool(True),
        vertexCut = cms.string('ndof>=2&!isFake'),
        max_z0 = cms.double(100.0),
        min_nhits = cms.uint32(0),
        name = cms.string('mixedTripletStepVtxLoose'),
        max_minMissHitOutOrIn = cms.int32(99),
        chi2n_no1Dmod_par = cms.double(9999),
        res_par = cms.vdouble(0.003, 0.001),
        max_eta = cms.double(9999.0),
        d0_par2 = cms.vdouble(1.3, 3.0),
        d0_par1 = cms.vdouble(1.2, 3.0),
        preFilterName = cms.string(''),
        minHitsToBypassChecks = cms.uint32(20)
    ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(3),
            max_lostHitFraction = cms.double(1.0),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('loose'),
            minNumberLayers = cms.uint32(4),
            chi2n_par = cms.double(0.6),
            nSigmaZ = cms.double(4.0),
            dz_par2 = cms.vdouble(1.1, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            min_eta = cms.double(-9999.0),
            dz_par1 = cms.vdouble(1.1, 4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(False),
            maxNumberLostLayers = cms.uint32(1),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('mixedTripletStepTrkLoose'),
            max_minMissHitOutOrIn = cms.int32(99),
            chi2n_no1Dmod_par = cms.double(9999),
            res_par = cms.vdouble(0.003, 0.001),
            max_eta = cms.double(9999.0),
            d0_par2 = cms.vdouble(1.1, 4.0),
            d0_par1 = cms.vdouble(1.1, 4.0),
            preFilterName = cms.string(''),
            minHitsToBypassChecks = cms.uint32(20)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(3),
            max_lostHitFraction = cms.double(1.0),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('tight'),
            minNumberLayers = cms.uint32(3),
            chi2n_par = cms.double(0.6),
            dz_par1 = cms.vdouble(1.1, 3.0),
            dz_par2 = cms.vdouble(1.2, 3.0),
            applyAdaptedPVCuts = cms.bool(True),
            min_eta = cms.double(-9999.0),
            nSigmaZ = cms.double(4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('mixedTripletStepVtxTight'),
            max_minMissHitOutOrIn = cms.int32(99),
            chi2n_no1Dmod_par = cms.double(9999),
            preFilterName = cms.string('mixedTripletStepVtxLoose'),
            max_eta = cms.double(9999.0),
            d0_par2 = cms.vdouble(1.2, 3.0),
            d0_par1 = cms.vdouble(1.1, 3.0),
            res_par = cms.vdouble(0.003, 0.001),
            minHitsToBypassChecks = cms.uint32(20)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(4),
            max_lostHitFraction = cms.double(1.0),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('tight'),
            minNumberLayers = cms.uint32(5),
            chi2n_par = cms.double(0.4),
            dz_par1 = cms.vdouble(1.0, 4.0),
            dz_par2 = cms.vdouble(1.0, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            min_eta = cms.double(-9999.0),
            nSigmaZ = cms.double(4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('mixedTripletStepTrkTight'),
            max_minMissHitOutOrIn = cms.int32(99),
            chi2n_no1Dmod_par = cms.double(9999),
            preFilterName = cms.string('mixedTripletStepTrkLoose'),
            max_eta = cms.double(9999.0),
            d0_par2 = cms.vdouble(1.0, 4.0),
            d0_par1 = cms.vdouble(1.0, 4.0),
            res_par = cms.vdouble(0.003, 0.001),
            minHitsToBypassChecks = cms.uint32(20)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(3),
            max_lostHitFraction = cms.double(1.0),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('highPurity'),
            minNumberLayers = cms.uint32(3),
            chi2n_par = cms.double(0.4),
            nSigmaZ = cms.double(4.0),
            dz_par2 = cms.vdouble(1.1, 3.0),
            applyAdaptedPVCuts = cms.bool(True),
            min_eta = cms.double(-9999.0),
            dz_par1 = cms.vdouble(1.0, 3.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(1),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('mixedTripletStepVtx'),
            max_minMissHitOutOrIn = cms.int32(1),
            chi2n_no1Dmod_par = cms.double(9999),
            res_par = cms.vdouble(0.003, 0.001),
            max_eta = cms.double(9999.0),
            d0_par2 = cms.vdouble(1.1, 3.0),
            d0_par1 = cms.vdouble(1.0, 3.0),
            preFilterName = cms.string('mixedTripletStepVtxTight'),
            minHitsToBypassChecks = cms.uint32(20)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(4),
            max_lostHitFraction = cms.double(1.0),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('highPurity'),
            minNumberLayers = cms.uint32(5),
            chi2n_par = cms.double(0.25),
            nSigmaZ = cms.double(4.0),
            dz_par2 = cms.vdouble(0.8, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            min_eta = cms.double(-9999.0),
            dz_par1 = cms.vdouble(0.8, 4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(0),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('mixedTripletStepTrk'),
            max_minMissHitOutOrIn = cms.int32(1),
            chi2n_no1Dmod_par = cms.double(9999),
            res_par = cms.vdouble(0.003, 0.001),
            max_eta = cms.double(9999.0),
            d0_par2 = cms.vdouble(0.8, 4.0),
            d0_par1 = cms.vdouble(0.8, 4.0),
            preFilterName = cms.string('mixedTripletStepTrkTight'),
            minHitsToBypassChecks = cms.uint32(20)
        )),
    beamspot = cms.InputTag("offlineBeamSpot"),
    vertices = cms.InputTag("pixelVertices"),
    useVtxError = cms.bool(False),
    useVertices = cms.bool(True)
)


process.mixedTripletStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("mixedTripletStepSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('mixedTripletStepTrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    numHitsForSeedCleaner = cms.int32(50),
    TrajectoryBuilder = cms.string('mixedTripletStepTrajectoryBuilder')
)


process.mixedTripletStepTracks = cms.EDProducer("TrackProducer",
    src = cms.InputTag("mixedTripletStepTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    AlgorithmName = cms.string('iter4'),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    GeometricInnerState = cms.bool(False),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.muIsoDepositCalByAssociatorHits = cms.EDProducer("MuIsoDepositProducer",
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        inputMuonCollection = cms.InputTag("muons1stStep"),
        MultipleDepositsFlag = cms.bool(True),
        MuonTrackRefType = cms.string('bestTrkSta'),
        InputType = cms.string('MuonCollection')
    ),
    ExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        DR_Max = cms.double(1.0),
        Threshold_E = cms.double(0.025),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        Noise_HE = cms.double(0.2),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Threshold_H = cms.double(0.1),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Noise_HO = cms.double(0.2),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        DepositLabel = cms.untracked.string('Cal'),
        UseRecHitsFlag = cms.bool(True),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(1.0),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(True),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(1.0),
            useMuon = cms.bool(False),
            useCalo = cms.bool(False),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(True)
        ),
        Threshold_HO = cms.double(0.1),
        Noise_EE = cms.double(0.1),
        Noise_EB = cms.double(0.025),
        DR_Veto_H = cms.double(0.1),
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        Noise_HB = cms.double(0.2),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_HO = cms.double(0.1)
    )
)


process.muIsoDepositCalByAssociatorTowers = cms.EDProducer("MuIsoDepositCopyProducer",
    depositNames = cms.vstring('ecal', 
        'hcal', 
        'ho'),
    inputTags = cms.VInputTag(cms.InputTag("muons1stStep","ecal"), cms.InputTag("muons1stStep","hcal"), cms.InputTag("muons1stStep","ho"))
)


process.muIsoDepositJets = cms.EDProducer("MuIsoDepositCopyProducer",
    depositNames = cms.vstring(''),
    inputTags = cms.VInputTag(cms.InputTag("muons1stStep","jets"))
)


process.muIsoDepositTk = cms.EDProducer("MuIsoDepositCopyProducer",
    depositNames = cms.vstring(''),
    inputTags = cms.VInputTag(cms.InputTag("muons1stStep","tracker"))
)


process.muPFIsoDepositCharged = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("muons1stStep"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedHadrons"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.muPFIsoDepositChargedAll = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("muons1stStep"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedParticles"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.muPFIsoDepositGamma = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("muons1stStep"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllPhotons"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.muPFIsoDepositNeutral = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("muons1stStep"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllNeutralHadrons"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.muPFIsoDepositPU = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("muons1stStep"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfPileUpAllChargedParticles"),
        DR_Veto = cms.double(1e-05),
        DepositLabel = cms.untracked.string('')
    )
)


process.muPFIsoValueCharged03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositCharged"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueCharged04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositCharged"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueChargedAll03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositChargedAll"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueChargedAll04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositChargedAll"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueGamma03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositGamma"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueGamma04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositGamma"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueGammaHighThreshold03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositGamma"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueGammaHighThreshold04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositGamma"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueNeutral03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositNeutral"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueNeutral04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositNeutral"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueNeutralHighThreshold03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositNeutral"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValueNeutralHighThreshold04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositNeutral"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValuePU03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositPU"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFIsoValuePU04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositPU"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.muPFMeanDRIsoValueCharged03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositCharged"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('meanDR')
    ))
)


process.muPFMeanDRIsoValueCharged04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositCharged"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('meanDR')
    ))
)


process.muPFMeanDRIsoValueChargedAll03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositChargedAll"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('meanDR')
    ))
)


process.muPFMeanDRIsoValueChargedAll04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositChargedAll"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('meanDR')
    ))
)


process.muPFMeanDRIsoValueGamma03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositGamma"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('meanDR')
    ))
)


process.muPFMeanDRIsoValueGamma04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositGamma"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('meanDR')
    ))
)


process.muPFMeanDRIsoValueGammaHighThreshold03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositGamma"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('meanDR')
    ))
)


process.muPFMeanDRIsoValueGammaHighThreshold04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositGamma"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('meanDR')
    ))
)


process.muPFMeanDRIsoValueNeutral03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositNeutral"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('meanDR')
    ))
)


process.muPFMeanDRIsoValueNeutral04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositNeutral"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('meanDR')
    ))
)


process.muPFMeanDRIsoValueNeutralHighThreshold03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositNeutral"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('meanDR')
    ))
)


process.muPFMeanDRIsoValueNeutralHighThreshold04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositNeutral"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('meanDR')
    ))
)


process.muPFMeanDRIsoValuePU03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositPU"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('meanDR')
    ))
)


process.muPFMeanDRIsoValuePU04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositPU"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('meanDR')
    ))
)


process.muPFSumDRIsoValueCharged03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositCharged"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sumDR')
    ))
)


process.muPFSumDRIsoValueCharged04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositCharged"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sumDR')
    ))
)


process.muPFSumDRIsoValueChargedAll03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositChargedAll"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sumDR')
    ))
)


process.muPFSumDRIsoValueChargedAll04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositChargedAll"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.0001', 
            'Threshold(0.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sumDR')
    ))
)


process.muPFSumDRIsoValueGamma03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositGamma"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sumDR')
    ))
)


process.muPFSumDRIsoValueGamma04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositGamma"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sumDR')
    ))
)


process.muPFSumDRIsoValueGammaHighThreshold03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositGamma"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sumDR')
    ))
)


process.muPFSumDRIsoValueGammaHighThreshold04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositGamma"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sumDR')
    ))
)


process.muPFSumDRIsoValueNeutral03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositNeutral"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sumDR')
    ))
)


process.muPFSumDRIsoValueNeutral04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositNeutral"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sumDR')
    ))
)


process.muPFSumDRIsoValueNeutralHighThreshold03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositNeutral"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sumDR')
    ))
)


process.muPFSumDRIsoValueNeutralHighThreshold04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositNeutral"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(1.0)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sumDR')
    ))
)


process.muPFSumDRIsoValuePU03 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositPU"),
        deltaR = cms.double(0.3),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sumDR')
    ))
)


process.muPFSumDRIsoValuePU04 = cms.EDProducer("CandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("muPFIsoDepositPU"),
        deltaR = cms.double(0.4),
        weight = cms.string('1'),
        vetos = cms.vstring('0.01', 
            'Threshold(0.5)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sumDR')
    ))
)


process.muParamGlobalIsoDepositCalByAssociatorHits = cms.EDProducer("MuIsoDepositProducer",
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
        MultipleDepositsFlag = cms.bool(True),
        MuonTrackRefType = cms.string('bestTrkSta'),
        InputType = cms.string('MuonCollection')
    ),
    ExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        DR_Max = cms.double(1.0),
        Threshold_E = cms.double(0.025),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        Noise_HE = cms.double(0.2),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Threshold_H = cms.double(0.1),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Noise_HO = cms.double(0.2),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        DepositLabel = cms.untracked.string('Cal'),
        UseRecHitsFlag = cms.bool(True),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(1.0),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(True),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(True),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(1.0),
            useMuon = cms.bool(False),
            useCalo = cms.bool(False),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(True)
        ),
        Threshold_HO = cms.double(0.1),
        Noise_EE = cms.double(0.1),
        Noise_EB = cms.double(0.025),
        DR_Veto_H = cms.double(0.1),
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        Noise_HB = cms.double(0.2),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_HO = cms.double(0.1)
    )
)


process.muParamGlobalIsoDepositCalByAssociatorTowers = cms.EDProducer("MuIsoDepositProducer",
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
        MultipleDepositsFlag = cms.bool(True),
        MuonTrackRefType = cms.string('bestTrkSta'),
        InputType = cms.string('MuonCollection')
    ),
    ExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        DR_Max = cms.double(1.0),
        Threshold_E = cms.double(0.2),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        Noise_HE = cms.double(0.2),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Threshold_H = cms.double(0.5),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Noise_HO = cms.double(0.2),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        DepositLabel = cms.untracked.string('Cal'),
        UseRecHitsFlag = cms.bool(False),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(1.0),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(1.0),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        Threshold_HO = cms.double(0.5),
        Noise_EE = cms.double(0.1),
        Noise_EB = cms.double(0.025),
        DR_Veto_H = cms.double(0.1),
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        Noise_HB = cms.double(0.2),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_HO = cms.double(0.1)
    )
)


process.muParamGlobalIsoDepositCalEcal = cms.EDProducer("MuIsoDepositProducer",
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
        MultipleDepositsFlag = cms.bool(False),
        MuonTrackRefType = cms.string('track'),
        InputType = cms.string('MuonCollection')
    ),
    ExtractorPSet = cms.PSet(
        DR_Veto_H = cms.double(0.1),
        Vertex_Constraint_Z = cms.bool(False),
        Threshold_H = cms.double(0.5),
        ComponentName = cms.string('CaloExtractor'),
        Threshold_E = cms.double(0.2),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        Weight_E = cms.double(1.0),
        Vertex_Constraint_XY = cms.bool(False),
        DepositLabel = cms.untracked.string('EcalPlusHcal'),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        Weight_H = cms.double(0.0)
    )
)


process.muParamGlobalIsoDepositCalHcal = cms.EDProducer("MuIsoDepositProducer",
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
        MultipleDepositsFlag = cms.bool(False),
        MuonTrackRefType = cms.string('track'),
        InputType = cms.string('MuonCollection')
    ),
    ExtractorPSet = cms.PSet(
        DR_Veto_H = cms.double(0.1),
        Vertex_Constraint_Z = cms.bool(False),
        Threshold_H = cms.double(0.5),
        ComponentName = cms.string('CaloExtractor'),
        Threshold_E = cms.double(0.2),
        DR_Max = cms.double(1.0),
        DR_Veto_E = cms.double(0.07),
        Weight_E = cms.double(0.0),
        Vertex_Constraint_XY = cms.bool(False),
        DepositLabel = cms.untracked.string('EcalPlusHcal'),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        Weight_H = cms.double(1.0)
    )
)


process.muParamGlobalIsoDepositCtfTk = cms.EDProducer("MuIsoDepositProducer",
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
        MultipleDepositsFlag = cms.bool(False),
        MuonTrackRefType = cms.string('bestTrkSta'),
        InputType = cms.string('MuonCollection')
    ),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        inputTrackCollection = cms.InputTag("ctfGSWithMaterialTracks"),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(0.1),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.01),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent')
    )
)


process.muParamGlobalIsoDepositGsTk = cms.EDProducer("MuIsoDepositProducer",
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
        MultipleDepositsFlag = cms.bool(False),
        MuonTrackRefType = cms.string('track'),
        InputType = cms.string('MuonCollection')
    ),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        inputTrackCollection = cms.InputTag("ctfGSWithMaterialTracks"),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(0.1),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.01),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent')
    )
)


process.muParamGlobalIsoDepositJets = cms.EDProducer("MuIsoDepositProducer",
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
        MultipleDepositsFlag = cms.bool(False),
        MuonTrackRefType = cms.string('bestTrkSta'),
        InputType = cms.string('MuonCollection')
    ),
    ExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        ExcludeMuonVeto = cms.bool(True),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(0.5),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(0.5),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        JetCollectionLabel = cms.InputTag("ak5CaloJets"),
        DR_Veto = cms.double(0.1),
        Threshold = cms.double(5.0)
    )
)


process.muParamGlobalIsoDepositTk = cms.EDProducer("MuIsoDepositProducer",
    IOPSet = cms.PSet(
        ExtractForCandidate = cms.bool(False),
        inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
        MultipleDepositsFlag = cms.bool(False),
        MuonTrackRefType = cms.string('track'),
        InputType = cms.string('MuonCollection')
    ),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        inputTrackCollection = cms.InputTag("generalTracks"),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(0.1),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.01),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent')
    )
)


process.muidAllArbitrated = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('AllArbitrated')
)


process.muidGMStaChiCompatibility = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('GMStaChiCompatibility')
)


process.muidGMTkChiCompatibility = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('GMTkChiCompatibility')
)


process.muidGMTkKinkTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('GMTkKinkTight')
)


process.muidGlobalMuonPromptTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('GlobalMuonPromptTight')
)


process.muidRPCMuLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('RPCMuLoose')
)


process.muidTM2DCompatibilityLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TM2DCompatibilityLoose')
)


process.muidTM2DCompatibilityTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TM2DCompatibilityTight')
)


process.muidTMLastStationAngLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMLastStationAngLoose')
)


process.muidTMLastStationAngTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMLastStationAngTight')
)


process.muidTMLastStationLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMLastStationLoose')
)


process.muidTMLastStationOptimizedLowPtLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMLastStationOptimizedLowPtLoose')
)


process.muidTMLastStationOptimizedLowPtTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMLastStationOptimizedLowPtTight')
)


process.muidTMLastStationTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMLastStationTight')
)


process.muidTMOneStationAngLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMOneStationAngLoose')
)


process.muidTMOneStationAngTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMOneStationAngTight')
)


process.muidTMOneStationLoose = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMOneStationLoose')
)


process.muidTMOneStationTight = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TMOneStationTight')
)


process.muidTrackerMuonArbitrated = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('TrackerMuonArbitrated')
)


process.multi5x5BasicClustersCleaned = cms.EDProducer("Multi5x5ClusterProducer",
    reassignSeedCrysToClusterItSeeds = cms.bool(True),
    endcapHitCollection = cms.string('EcalRecHitsEE'),
    barrelClusterCollection = cms.string('multi5x5BarrelBasicClusters'),
    IslandEndcapSeedThr = cms.double(0.18),
    doEndcap = cms.bool(True),
    posCalcParameters = cms.PSet(
        T0_barl = cms.double(7.4),
        LogWeighted = cms.bool(True),
        T0_endc = cms.double(3.1),
        T0_endcPresh = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    barrelShapeAssociation = cms.string('multi5x5BarrelShapeAssoc'),
    RecHitFlagToBeExcluded = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    endcapHitProducer = cms.string('ecalRecHit'),
    clustershapecollectionEB = cms.string('multi5x5BarrelShape'),
    IslandBarrelSeedThr = cms.double(0.5),
    barrelHitProducer = cms.string('ecalRecHit'),
    endcapShapeAssociation = cms.string('multi5x5EndcapShapeAssoc'),
    barrelHitCollection = cms.string('EcalRecHitsEB'),
    clustershapecollectionEE = cms.string('multi5x5EndcapShape'),
    endcapClusterCollection = cms.string('multi5x5EndcapBasicClusters'),
    doBarrel = cms.bool(False)
)


process.multi5x5BasicClustersUncleaned = cms.EDProducer("Multi5x5ClusterProducer",
    reassignSeedCrysToClusterItSeeds = cms.bool(True),
    endcapHitCollection = cms.string('EcalRecHitsEE'),
    barrelClusterCollection = cms.string('multi5x5BarrelBasicClusters'),
    IslandEndcapSeedThr = cms.double(0.18),
    doEndcap = cms.bool(True),
    posCalcParameters = cms.PSet(
        T0_barl = cms.double(7.4),
        LogWeighted = cms.bool(True),
        T0_endc = cms.double(3.1),
        T0_endcPresh = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    barrelShapeAssociation = cms.string('multi5x5BarrelShapeAssoc'),
    RecHitFlagToBeExcluded = cms.vstring(),
    endcapHitProducer = cms.string('ecalRecHit'),
    clustershapecollectionEB = cms.string('multi5x5BarrelShape'),
    IslandBarrelSeedThr = cms.double(0.5),
    barrelHitProducer = cms.string('ecalRecHit'),
    endcapShapeAssociation = cms.string('multi5x5EndcapShapeAssoc'),
    barrelHitCollection = cms.string('EcalRecHitsEB'),
    clustershapecollectionEE = cms.string('multi5x5EndcapShape'),
    endcapClusterCollection = cms.string('multi5x5EndcapBasicClusters'),
    doBarrel = cms.bool(False)
)


process.multi5x5PreshowerClusterShape = cms.EDProducer("PreshowerClusterShapeProducer",
    preshStripEnergyCut = cms.double(0.0),
    preshRecHitProducer = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    preshPi0Nstrip = cms.int32(5),
    endcapSClusterProducer = cms.InputTag("correctedMulti5x5SuperClustersWithPreshower"),
    PreshowerClusterShapeCollectionX = cms.string('multi5x5PreshowerXClustersShape'),
    PreshowerClusterShapeCollectionY = cms.string('multi5x5PreshowerYClustersShape'),
    debugLevel = cms.string('INFO')
)


process.multi5x5SuperClusters = cms.EDProducer("UnifiedSCCollectionProducer",
    bcCollectionUncleanOnly = cms.string('uncleanOnlyMulti5x5EndcapBasicClusters'),
    scCollection = cms.string('multi5x5EndcapSuperClusters'),
    bcCollection = cms.string('multi5x5EndcapBasicClusters'),
    uncleanScCollection = cms.InputTag("multi5x5SuperClustersUncleaned","multi5x5EndcapSuperClusters"),
    cleanBcCollection = cms.InputTag("multi5x5BasicClustersCleaned","multi5x5EndcapBasicClusters"),
    cleanScCollection = cms.InputTag("multi5x5SuperClustersCleaned","multi5x5EndcapSuperClusters"),
    uncleanBcCollection = cms.InputTag("multi5x5BasicClustersUncleaned","multi5x5EndcapBasicClusters"),
    scCollectionUncleanOnly = cms.string('uncleanOnlyMulti5x5EndcapSuperClusters')
)


process.multi5x5SuperClustersCleaned = cms.EDProducer("Multi5x5SuperClusterProducer",
    barrelSuperclusterCollection = cms.string('multi5x5BarrelSuperClusters'),
    endcapEtaSearchRoad = cms.double(0.14),
    barrelClusterCollection = cms.string('multi5x5BarrelBasicClustersCleaned'),
    dynamicPhiRoad = cms.bool(False),
    endcapClusterProducer = cms.string('multi5x5BasicClustersCleaned'),
    barrelPhiSearchRoad = cms.double(0.8),
    endcapPhiSearchRoad = cms.double(0.6),
    barrelClusterProducer = cms.string('multi5x5BasicClusters'),
    seedTransverseEnergyThreshold = cms.double(1.0),
    endcapSuperclusterCollection = cms.string('multi5x5EndcapSuperClusters'),
    barrelEtaSearchRoad = cms.double(0.06),
    doBarrel = cms.bool(False),
    doEndcaps = cms.bool(True),
    endcapClusterCollection = cms.string('multi5x5EndcapBasicClusters'),
    bremRecoveryPset = cms.PSet(
        barrel = cms.PSet(
            cryVec = cms.vint32(16, 13, 11, 10, 9, 
                8, 7, 6, 5, 4, 
                3),
            cryMin = cms.int32(2),
            etVec = cms.vdouble(5.0, 10.0, 15.0, 20.0, 30.0, 
                40.0, 45.0, 55.0, 135.0, 195.0, 
                225.0)
        ),
        endcap = cms.PSet(
            a = cms.double(47.85),
            c = cms.double(0.1201),
            b = cms.double(108.8)
        )
    )
)


process.multi5x5SuperClustersUncleaned = cms.EDProducer("Multi5x5SuperClusterProducer",
    barrelSuperclusterCollection = cms.string('multi5x5BarrelSuperClusters'),
    endcapEtaSearchRoad = cms.double(0.14),
    barrelClusterCollection = cms.string('multi5x5BarrelBasicClustersCleaned'),
    dynamicPhiRoad = cms.bool(False),
    endcapClusterProducer = cms.string('multi5x5BasicClustersUncleaned'),
    barrelPhiSearchRoad = cms.double(0.8),
    endcapPhiSearchRoad = cms.double(0.6),
    barrelClusterProducer = cms.string('multi5x5BasicClusters'),
    seedTransverseEnergyThreshold = cms.double(1.0),
    endcapSuperclusterCollection = cms.string('multi5x5EndcapSuperClusters'),
    barrelEtaSearchRoad = cms.double(0.06),
    bremRecoveryPset = cms.PSet(
        barrel = cms.PSet(
            cryVec = cms.vint32(16, 13, 11, 10, 9, 
                8, 7, 6, 5, 4, 
                3),
            cryMin = cms.int32(2),
            etVec = cms.vdouble(5.0, 10.0, 15.0, 20.0, 30.0, 
                40.0, 45.0, 55.0, 135.0, 195.0, 
                225.0)
        ),
        endcap = cms.PSet(
            a = cms.double(47.85),
            c = cms.double(0.1201),
            b = cms.double(108.8)
        )
    ),
    doEndcaps = cms.bool(True),
    endcapClusterCollection = cms.string('multi5x5EndcapBasicClusters'),
    doBarrel = cms.bool(False)
)


process.multi5x5SuperClustersWithPreshower = cms.EDProducer("PreshowerPhiClusterProducer",
    assocSClusterCollection = cms.string(''),
    preshClusterCollectionY = cms.string('preshowerYClusters'),
    preshClusterCollectionX = cms.string('preshowerXClusters'),
    etThresh = cms.double(0.0),
    preshRecHitProducer = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    endcapSClusterProducer = cms.InputTag("multi5x5SuperClusters","multi5x5EndcapSuperClusters"),
    esPhiClusterDeltaEta = cms.double(0.15),
    esStripEnergyCut = cms.double(0.0),
    esPhiClusterDeltaPhi = cms.double(0.12)
)


process.muonCSCDigis = cms.EDProducer("CSCDCCUnpacker",
    PrintEventNumber = cms.untracked.bool(False),
    UseSelectiveUnpacking = cms.bool(True),
    UseExaminer = cms.bool(True),
    ErrorMask = cms.uint32(0),
    InputObjects = cms.InputTag("rawDataCollector"),
    UseFormatStatus = cms.bool(True),
    ExaminerMask = cms.uint32(535557110),
    UnpackStatusDigis = cms.bool(False),
    VisualFEDInspect = cms.untracked.bool(False),
    FormatedEventDump = cms.untracked.bool(False),
    Debug = cms.untracked.bool(False),
    VisualFEDShort = cms.untracked.bool(False)
)


process.muonCscMon = cms.EDProducer("MuonCandProducerMon",
    VerboseFlag = cms.untracked.int32(0),
    DTinput = cms.untracked.InputTag("dttfDigis"),
    CSCinput = cms.untracked.InputTag("csctfDigis")
)


process.muonDTDigis = cms.EDProducer("DTUnpackingModule",
    useStandardFEDid = cms.bool(True),
    inputLabel = cms.InputTag("rawDataCollector"),
    dataType = cms.string('DDU'),
    fedbyType = cms.bool(False),
    readOutParameters = cms.PSet(
        debug = cms.untracked.bool(False),
        rosParameters = cms.PSet(
            writeSC = cms.untracked.bool(True),
            readingDDU = cms.untracked.bool(True),
            performDataIntegrityMonitor = cms.untracked.bool(False),
            readDDUIDfromDDU = cms.untracked.bool(True),
            debug = cms.untracked.bool(False),
            localDAQ = cms.untracked.bool(False)
        ),
        performDataIntegrityMonitor = cms.untracked.bool(False),
        localDAQ = cms.untracked.bool(False)
    ),
    dqmOnly = cms.bool(False)
)


process.muonDtMon = cms.EDProducer("MuonCandProducerMon",
    VerboseFlag = cms.untracked.int32(0),
    DTinput = cms.untracked.InputTag("dttfDigis"),
    CSCinput = cms.untracked.InputTag("csctfDigis")
)


process.muonEcalDetIds = cms.EDProducer("InterestingEcalDetIdProducer",
    inputCollection = cms.InputTag("muons1stStep")
)


process.muonMETValueMapProducer = cms.EDProducer("MuonMETValueMapProducer",
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(9999.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(False),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(False),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.2),
        useMuon = cms.bool(False),
        useCalo = cms.bool(True),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(False)
    ),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    minPt = cms.double(10.0),
    maxNormChi2 = cms.double(10.0),
    minnValidStaHits = cms.int32(1),
    useHO = cms.bool(False),
    minnHits = cms.int32(11),
    useTrackAssociatorPositions = cms.bool(True),
    useRecHits = cms.bool(False),
    maxEta = cms.double(2.5),
    maxd0 = cms.double(0.2),
    towerEtThreshold = cms.double(0.3),
    isAlsoTkMu = cms.bool(True),
    muonInputTag = cms.InputTag("muons")
)


process.muonRPCDigis = cms.EDProducer("RPCUnpackingModule",
    InputLabel = cms.InputTag("rawDataCollector"),
    doSynchro = cms.bool(True)
)


process.muonSeededSeedsInOut = cms.EDProducer("MuonReSeeder",
    DoPredictionsOnly = cms.bool(False),
    insideOut = cms.bool(True),
    cut = cms.string('pt > 2'),
    src = cms.InputTag("earlyMuons"),
    Fitter = cms.string('KFFitterForRefitInsideOut'),
    TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
    Smoother = cms.string('KFSmootherForRefitInsideOut'),
    MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
    RefitDirection = cms.string('alongMomentum'),
    RefitRPCHits = cms.bool(True),
    debug = cms.untracked.bool(False),
    Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
    layersToKeep = cms.int32(5)
)


process.muonSeededSeedsInOutAsTracks = cms.EDProducer("FakeTrackProducerFromSeed",
    src = cms.InputTag("muonSeededSeedsInOut")
)


process.muonSeededSeedsOutIn = cms.EDProducer("OutsideInMuonSeeder",
    fromVertex = cms.bool(True),
    hitsToTry = cms.int32(3),
    layersToTry = cms.int32(3),
    hitCollector = cms.string('hitCollectorForOutInMuonSeeds'),
    errorRescaleFactor = cms.double(2.0),
    src = cms.InputTag("earlyMuons"),
    muonPropagator = cms.string('SteppingHelixPropagatorAlong'),
    cut = cms.string('pt > 10 && outerTrack.hitPattern.muonStationsWithValidHits >= 2'),
    maxEtaForTOB = cms.double(1.8),
    minEtaForTEC = cms.double(0.7),
    debug = cms.untracked.bool(False),
    trackerPropagator = cms.string('PropagatorWithMaterial')
)


process.muonSeededSeedsOutInAsTracks = cms.EDProducer("FakeTrackProducerFromSeed",
    src = cms.InputTag("muonSeededSeedsOutIn")
)


process.muonSeededTrackCandidatesInOut = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("muonSeededSeedsInOut"),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('muonSeededTrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('none'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryBuilder = cms.string('muonSeededTrajectoryBuilderForInOut')
)


process.muonSeededTrackCandidatesInOutAsTracks = cms.EDProducer("FakeTrackProducerFromCandidate",
    src = cms.InputTag("muonSeededTrackCandidatesInOut")
)


process.muonSeededTrackCandidatesOutIn = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("muonSeededSeedsOutIn"),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('muonSeededTrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    onlyPixelHitsForSeedCleaner = cms.bool(False),
    TrajectoryBuilder = cms.string('muonSeededTrajectoryBuilderForOutIn'),
    numHitsForSeedCleaner = cms.int32(50)
)


process.muonSeededTrackCandidatesOutInAsTracks = cms.EDProducer("FakeTrackProducerFromCandidate",
    src = cms.InputTag("muonSeededTrackCandidatesOutIn")
)


process.muonSeededTracksInOut = cms.EDProducer("TrackProducer",
    src = cms.InputTag("muonSeededTrackCandidatesInOut"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('muonSeededFittingSmootherWithOutliersRejectionAndRK'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    AlgorithmName = cms.string('iter9'),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    GeometricInnerState = cms.bool(False),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.muonSeededTracksInOutSelector = cms.EDProducer("MultiTrackSelector",
    src = cms.InputTag("muonSeededTracksInOut"),
    trackSelectors = cms.VPSet(cms.PSet(
        max_d0 = cms.double(100.0),
        minNumber3DLayers = cms.uint32(0),
        max_lostHitFraction = cms.double(1.0),
        applyAbsCutsIfNoPV = cms.bool(False),
        qualityBit = cms.string('loose'),
        minNumberLayers = cms.uint32(3),
        chi2n_par = cms.double(10.0),
        nSigmaZ = cms.double(4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        applyAdaptedPVCuts = cms.bool(False),
        min_eta = cms.double(-9999.0),
        dz_par1 = cms.vdouble(0.65, 4.0),
        copyTrajectories = cms.untracked.bool(False),
        vtxNumber = cms.int32(-1),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(4),
        max_relpterr = cms.double(9999.0),
        copyExtras = cms.untracked.bool(True),
        vertexCut = cms.string('ndof>=2&!isFake'),
        max_z0 = cms.double(100.0),
        min_nhits = cms.uint32(5),
        name = cms.string('muonSeededTracksInOutLoose'),
        max_minMissHitOutOrIn = cms.int32(99),
        chi2n_no1Dmod_par = cms.double(9999),
        res_par = cms.vdouble(0.003, 0.01),
        max_eta = cms.double(9999.0),
        d0_par2 = cms.vdouble(0.55, 4.0),
        d0_par1 = cms.vdouble(0.55, 4.0),
        preFilterName = cms.string(''),
        minHitsToBypassChecks = cms.uint32(7)
    ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(2),
            max_lostHitFraction = cms.double(1.0),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('tight'),
            minNumberLayers = cms.uint32(5),
            chi2n_par = cms.double(1.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            applyAdaptedPVCuts = cms.bool(False),
            min_eta = cms.double(-9999.0),
            nSigmaZ = cms.double(4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(3),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(6),
            name = cms.string('muonSeededTracksInOutTight'),
            max_minMissHitOutOrIn = cms.int32(99),
            chi2n_no1Dmod_par = cms.double(9999),
            preFilterName = cms.string('muonSeededTracksInOutLoose'),
            max_eta = cms.double(9999.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            d0_par1 = cms.vdouble(0.3, 4.0),
            res_par = cms.vdouble(0.003, 0.01),
            minHitsToBypassChecks = cms.uint32(10)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(2),
            max_lostHitFraction = cms.double(1.0),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('highPurity'),
            minNumberLayers = cms.uint32(5),
            chi2n_par = cms.double(0.4),
            nSigmaZ = cms.double(4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            applyAdaptedPVCuts = cms.bool(False),
            min_eta = cms.double(-9999.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(7),
            name = cms.string('muonSeededTracksInOutHighPurity'),
            max_minMissHitOutOrIn = cms.int32(99),
            chi2n_no1Dmod_par = cms.double(9999),
            res_par = cms.vdouble(0.003, 0.001),
            max_eta = cms.double(9999.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            d0_par1 = cms.vdouble(0.3, 4.0),
            preFilterName = cms.string('muonSeededTracksInOutTight'),
            minHitsToBypassChecks = cms.uint32(20)
        )),
    beamspot = cms.InputTag("offlineBeamSpot"),
    vertices = cms.InputTag("pixelVertices"),
    useVtxError = cms.bool(False),
    useVertices = cms.bool(True)
)


process.muonSeededTracksOutIn = cms.EDProducer("TrackProducer",
    src = cms.InputTag("muonSeededTrackCandidatesOutIn"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('muonSeededFittingSmootherWithOutliersRejectionAndRK'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    AlgorithmName = cms.string('iter10'),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    GeometricInnerState = cms.bool(False),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.muonSeededTracksOutInSelector = cms.EDProducer("MultiTrackSelector",
    src = cms.InputTag("muonSeededTracksOutIn"),
    trackSelectors = cms.VPSet(cms.PSet(
        max_d0 = cms.double(100.0),
        minNumber3DLayers = cms.uint32(0),
        max_lostHitFraction = cms.double(1.0),
        applyAbsCutsIfNoPV = cms.bool(False),
        qualityBit = cms.string('loose'),
        minNumberLayers = cms.uint32(3),
        chi2n_par = cms.double(10.0),
        nSigmaZ = cms.double(4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        applyAdaptedPVCuts = cms.bool(False),
        min_eta = cms.double(-9999.0),
        dz_par1 = cms.vdouble(0.65, 4.0),
        copyTrajectories = cms.untracked.bool(False),
        vtxNumber = cms.int32(-1),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(4),
        max_relpterr = cms.double(9999.0),
        copyExtras = cms.untracked.bool(True),
        vertexCut = cms.string('ndof>=2&!isFake'),
        max_z0 = cms.double(100.0),
        min_nhits = cms.uint32(5),
        name = cms.string('muonSeededTracksOutInLoose'),
        max_minMissHitOutOrIn = cms.int32(99),
        chi2n_no1Dmod_par = cms.double(9999),
        res_par = cms.vdouble(0.003, 0.01),
        max_eta = cms.double(9999.0),
        d0_par2 = cms.vdouble(0.55, 4.0),
        d0_par1 = cms.vdouble(0.55, 4.0),
        preFilterName = cms.string(''),
        minHitsToBypassChecks = cms.uint32(7)
    ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(2),
            max_lostHitFraction = cms.double(1.0),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('tight'),
            minNumberLayers = cms.uint32(5),
            chi2n_par = cms.double(1.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            applyAdaptedPVCuts = cms.bool(False),
            min_eta = cms.double(-9999.0),
            nSigmaZ = cms.double(4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(3),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(6),
            name = cms.string('muonSeededTracksOutInTight'),
            max_minMissHitOutOrIn = cms.int32(99),
            chi2n_no1Dmod_par = cms.double(9999),
            preFilterName = cms.string('muonSeededTracksOutInLoose'),
            max_eta = cms.double(9999.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            d0_par1 = cms.vdouble(0.3, 4.0),
            res_par = cms.vdouble(0.003, 0.01),
            minHitsToBypassChecks = cms.uint32(10)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(2),
            max_lostHitFraction = cms.double(1.0),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('highPurity'),
            minNumberLayers = cms.uint32(5),
            chi2n_par = cms.double(0.4),
            nSigmaZ = cms.double(4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            applyAdaptedPVCuts = cms.bool(False),
            min_eta = cms.double(-9999.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(7),
            name = cms.string('muonSeededTracksOutInHighPurity'),
            max_minMissHitOutOrIn = cms.int32(99),
            chi2n_no1Dmod_par = cms.double(9999),
            res_par = cms.vdouble(0.003, 0.001),
            max_eta = cms.double(9999.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            d0_par1 = cms.vdouble(0.3, 4.0),
            preFilterName = cms.string('muonSeededTracksOutInTight'),
            minHitsToBypassChecks = cms.uint32(20)
        )),
    beamspot = cms.InputTag("offlineBeamSpot"),
    vertices = cms.InputTag("pixelVertices"),
    useVtxError = cms.bool(False),
    useVertices = cms.bool(True)
)


process.muonSelectionTypeValueMapProducer = cms.EDProducer("MuonSelectionTypeValueMapProducer",
    inputMuonCollection = cms.InputTag("muons1stStep"),
    selectionType = cms.string('All')
)


process.muonShowerInformation = cms.EDProducer("MuonShowerInformationProducer",
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    trackCollection = cms.InputTag("generalTracks"),
    ShowerInformationFillerParameters = cms.PSet(
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator'),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        ),
        DT4DRecSegmentLabel = cms.InputTag("dt4DSegments"),
        DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        CSCSegmentLabel = cms.InputTag("cscSegments"),
        CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits")
    ),
    muonCollection = cms.InputTag("muons1stStep")
)


process.muonTCMETValueMapProducer = cms.EDProducer("MuonTCMETValueMapProducer",
    vertexRho = cms.double(2.0),
    chi2_muon = cms.double(10),
    muonMinValidStaHits = cms.int32(1),
    vertexZ = cms.double(15.0),
    nLayersTight = cms.int32(0),
    vertexNdof = cms.int32(4),
    ptErr_max = cms.double(0.2),
    useCaloMuons = cms.bool(False),
    eta_max = cms.double(2.65),
    global_muon = cms.bool(True),
    d0cutb = cms.double(0.5),
    d0cuta = cms.double(0.015),
    vertexMaxDZ = cms.double(0.2),
    chi2_max = cms.double(5),
    chi2_max_tight = cms.double(5.0),
    eta_muon = cms.double(2.5),
    track_algos = cms.vint32(),
    tracker_muon = cms.bool(True),
    track_quality = cms.vint32(2),
    nLayers = cms.int32(0),
    muonInputTag = cms.InputTag("muons"),
    pt_max = cms.double(100.0),
    rf_type = cms.int32(1),
    ptErr_max_tight = cms.double(0.2),
    muon_dptrel = cms.double(1),
    deltaR_muon = cms.double(0.05),
    nhits_muon = cms.double(11),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    usePvtxd0 = cms.bool(False),
    vertexInputTag = cms.InputTag("offlinePrimaryVertices"),
    d0_max = cms.double(0.3),
    maxpt_eta25 = cms.double(0.0),
    nhits_min = cms.double(6),
    trackAlgo_max = cms.int32(8),
    maxpt_eta20 = cms.double(100.0),
    pt_min = cms.double(1.0),
    d0_muon = cms.double(0.2),
    nhits_min_tight = cms.double(9),
    pt_muon = cms.double(10)
)


process.muons = cms.EDProducer("MuonProducer",
    EcalIsoDeposits = cms.InputTag("muIsoDepositCalByAssociatorTowers","ecal"),
    ShowerInfoMap = cms.InputTag("muonShowerInformation"),
    FillTimingInfo = cms.bool(True),
    FillSelectorMaps = cms.bool(True),
    TrackIsoDeposits = cms.InputTag("muIsoDepositTk"),
    InputMuons = cms.InputTag("muons1stStep"),
    FillDetectorBasedIsolation = cms.bool(True),
    PFCandidates = cms.InputTag("particleFlowTmp"),
    JetIsoDeposits = cms.InputTag("muIsoDepositJets"),
    PFIsolation = cms.PSet(
        pfIsolationR03 = cms.PSet(
            photonHighThreshold = cms.InputTag("muPFIsoValueGammaHighThreshold03"),
            pu = cms.InputTag("muPFIsoValuePU03"),
            neutralHadronHighThreshold = cms.InputTag("muPFIsoValueNeutralHighThreshold03"),
            chargedParticle = cms.InputTag("muPFIsoValueChargedAll03"),
            photon = cms.InputTag("muPFIsoValueGamma03"),
            chargedHadron = cms.InputTag("muPFIsoValueCharged03"),
            neutralHadron = cms.InputTag("muPFIsoValueNeutral03")
        ),
        pfIsoMeanDRProfileR04 = cms.PSet(
            photonHighThreshold = cms.InputTag("muPFMeanDRIsoValueGammaHighThreshold04"),
            pu = cms.InputTag("muPFMeanDRIsoValuePU04"),
            neutralHadronHighThreshold = cms.InputTag("muPFMeanDRIsoValueNeutralHighThreshold04"),
            chargedParticle = cms.InputTag("muPFMeanDRIsoValueChargedAll04"),
            photon = cms.InputTag("muPFMeanDRIsoValueGamma04"),
            chargedHadron = cms.InputTag("muPFMeanDRIsoValueCharged04"),
            neutralHadron = cms.InputTag("muPFMeanDRIsoValueNeutral04")
        ),
        pfIsoMeanDRProfileR03 = cms.PSet(
            photonHighThreshold = cms.InputTag("muPFMeanDRIsoValueGammaHighThreshold03"),
            pu = cms.InputTag("muPFMeanDRIsoValuePU03"),
            neutralHadronHighThreshold = cms.InputTag("muPFMeanDRIsoValueNeutralHighThreshold03"),
            chargedParticle = cms.InputTag("muPFMeanDRIsoValueChargedAll03"),
            photon = cms.InputTag("muPFMeanDRIsoValueGamma03"),
            chargedHadron = cms.InputTag("muPFMeanDRIsoValueCharged03"),
            neutralHadron = cms.InputTag("muPFMeanDRIsoValueNeutral03")
        ),
        pfIsolationR04 = cms.PSet(
            photonHighThreshold = cms.InputTag("muPFIsoValueGammaHighThreshold04"),
            pu = cms.InputTag("muPFIsoValuePU04"),
            neutralHadronHighThreshold = cms.InputTag("muPFIsoValueNeutralHighThreshold04"),
            chargedParticle = cms.InputTag("muPFIsoValueChargedAll04"),
            photon = cms.InputTag("muPFIsoValueGamma04"),
            chargedHadron = cms.InputTag("muPFIsoValueCharged04"),
            neutralHadron = cms.InputTag("muPFIsoValueNeutral04")
        ),
        pfIsoSumDRProfileR04 = cms.PSet(
            photonHighThreshold = cms.InputTag("muPFSumDRIsoValueGammaHighThreshold04"),
            pu = cms.InputTag("muPFSumDRIsoValuePU04"),
            neutralHadronHighThreshold = cms.InputTag("muPFSumDRIsoValueNeutralHighThreshold04"),
            chargedParticle = cms.InputTag("muPFSumDRIsoValueChargedAll04"),
            photon = cms.InputTag("muPFSumDRIsoValueGamma04"),
            chargedHadron = cms.InputTag("muPFSumDRIsoValueCharged04"),
            neutralHadron = cms.InputTag("muPFSumDRIsoValueNeutral04")
        ),
        pfIsoSumDRProfileR03 = cms.PSet(
            photonHighThreshold = cms.InputTag("muPFSumDRIsoValueGammaHighThreshold03"),
            pu = cms.InputTag("muPFSumDRIsoValuePU03"),
            neutralHadronHighThreshold = cms.InputTag("muPFSumDRIsoValueNeutralHighThreshold03"),
            chargedParticle = cms.InputTag("muPFSumDRIsoValueChargedAll03"),
            photon = cms.InputTag("muPFSumDRIsoValueGamma03"),
            chargedHadron = cms.InputTag("muPFSumDRIsoValueCharged03"),
            neutralHadron = cms.InputTag("muPFSumDRIsoValueNeutral03")
        )
    ),
    FillCosmicsIdMap = cms.bool(True),
    HoIsoDeposits = cms.InputTag("muIsoDepositCalByAssociatorTowers","ho"),
    HcalIsoDeposits = cms.InputTag("muIsoDepositCalByAssociatorTowers","hcal"),
    ActivateDebug = cms.untracked.bool(False),
    FillPFIsolation = cms.bool(True),
    CosmicIdMap = cms.InputTag("cosmicsVeto"),
    FillPFMomentumAndAssociation = cms.bool(True),
    FillShoweringInfo = cms.bool(True),
    SelectorMaps = cms.VInputTag(cms.InputTag("muidTMLastStationOptimizedLowPtLoose"), cms.InputTag("muidTMLastStationOptimizedLowPtTight"), cms.InputTag("muidTM2DCompatibilityLoose"), cms.InputTag("muidTM2DCompatibilityTight"), cms.InputTag("muidTrackerMuonArbitrated"), 
        cms.InputTag("muidTMLastStationAngLoose"), cms.InputTag("muidGlobalMuonPromptTight"), cms.InputTag("muidGMStaChiCompatibility"), cms.InputTag("muidTMLastStationAngTight"), cms.InputTag("muidGMTkChiCompatibility"), 
        cms.InputTag("muidTMOneStationAngTight"), cms.InputTag("muidTMOneStationAngLoose"), cms.InputTag("muidTMLastStationLoose"), cms.InputTag("muidTMLastStationTight"), cms.InputTag("muidTMOneStationTight"), 
        cms.InputTag("muidTMOneStationLoose"), cms.InputTag("muidAllArbitrated"), cms.InputTag("muidGMTkKinkTight"), cms.InputTag("muidRPCMuLoose"))
)


process.muons1stStep = cms.EDProducer("MuonIdProducer",
    MuonCaloCompatibility = cms.PSet(
        allSiPMHO = cms.bool(False),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(9999.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.2),
        useMuon = cms.bool(True),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    ),
    TrackExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        inputTrackCollection = cms.InputTag("generalTracks"),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(0.1),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.01),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent')
    ),
    ecalDepositName = cms.string('ecal'),
    JetExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        ExcludeMuonVeto = cms.bool(True),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(0.5),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(0.5),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        JetCollectionLabel = cms.InputTag("ak5CaloJets"),
        DR_Veto = cms.double(0.1),
        Threshold = cms.double(5.0)
    ),
    hcalDepositName = cms.string('hcal'),
    trackDepositName = cms.string('tracker'),
    CaloExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        DR_Max = cms.double(1.0),
        Threshold_E = cms.double(0.2),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        Noise_HE = cms.double(0.2),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Threshold_H = cms.double(0.5),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Noise_HO = cms.double(0.2),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        DepositLabel = cms.untracked.string('Cal'),
        UseRecHitsFlag = cms.bool(False),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(1.0),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(1.0),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        Threshold_HO = cms.double(0.5),
        Noise_EE = cms.double(0.1),
        Noise_EB = cms.double(0.025),
        DR_Veto_H = cms.double(0.1),
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        Noise_HB = cms.double(0.2),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_HO = cms.double(0.1)
    ),
    jetDepositName = cms.string('jets'),
    hoDepositName = cms.string('ho'),
    TimingFillerParameters = cms.PSet(
        DTTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DSegments"),
                DTradius = cms.double(0.01),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            HitError = cms.double(6.0),
            DoWireCorr = cms.bool(True),
            PruneCut = cms.double(10000.0),
            DTsegments = cms.InputTag("dt4DSegments"),
            DropTheta = cms.bool(True),
            RequireBothProjections = cms.bool(False),
            HitsMin = cms.int32(3),
            DTTimeOffset = cms.double(0.0),
            debug = cms.bool(False),
            UseSegmentT0 = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            )
        ),
        CSCTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DSegments"),
                DTradius = cms.double(0.01),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            CSCsegments = cms.InputTag("csc2DSegments"),
            CSCStripTimeOffset = cms.double(0.0),
            CSCStripError = cms.double(7.0),
            UseStripTime = cms.bool(True),
            debug = cms.bool(False),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            PruneCut = cms.double(9.0),
            UseWireTime = cms.bool(True)
        ),
        UseDT = cms.bool(True),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseECAL = cms.bool(True)
    ),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        usePosition = cms.bool(True),
        diagonalOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite')
    ),
    maxAbsEta = cms.double(3.0),
    fillGlobalTrackRefits = cms.bool(True),
    arbitrationCleanerOptions = cms.PSet(
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        ClusterDPhi = cms.double(0.6),
        OverlapDTheta = cms.double(0.02),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        ClusterDTheta = cms.double(0.02)
    ),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    addExtraSoftMuons = cms.bool(False),
    debugWithTruthMatching = cms.bool(False),
    runArbitrationCleaner = cms.bool(True),
    fillEnergy = cms.bool(True),
    inputCollectionTypes = cms.vstring('inner tracks', 
        'links', 
        'outer tracks', 
        'tev firstHit', 
        'tev picky', 
        'tev dyt'),
    minCaloCompatibility = cms.double(0.6),
    fillCaloCompatibility = cms.bool(True),
    minP = cms.double(2.5),
    fillIsolation = cms.bool(True),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    writeIsoDeposits = cms.bool(True),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minPt = cms.double(0.5),
    minPCaloMuon = cms.double(1.0),
    fillMatching = cms.bool(True),
    fillTrackerKink = cms.bool(True),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    inputCollectionLabels = cms.VInputTag(cms.InputTag("generalTracks"), cms.InputTag("globalMuons"), cms.InputTag("standAloneMuons","UpdatedAtVtx"), cms.InputTag("tevMuons","firstHit"), cms.InputTag("tevMuons","picky"), 
        cms.InputTag("tevMuons","dyt")),
    fillGlobalTrackQuality = cms.bool(True),
    maxAbsDx = cms.double(3.0),
    maxAbsDy = cms.double(9999.0),
    minNumberOfMatches = cms.int32(1)
)


process.muonsFromCosmics = cms.EDProducer("MuonIdProducer",
    TrackExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        inputTrackCollection = cms.InputTag("regionalCosmicTracks"),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(0.1),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.01),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent')
    ),
    maxAbsEta = cms.double(3.0),
    fillGlobalTrackRefits = cms.bool(False),
    arbitrationCleanerOptions = cms.PSet(
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        ClusterDPhi = cms.double(0.6),
        OverlapDTheta = cms.double(0.02),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        ClusterDTheta = cms.double(0.02)
    ),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    addExtraSoftMuons = cms.bool(False),
    debugWithTruthMatching = cms.bool(False),
    CaloExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        DR_Max = cms.double(1.0),
        Threshold_E = cms.double(0.2),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        Noise_HE = cms.double(0.2),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Threshold_H = cms.double(0.5),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Noise_HO = cms.double(0.2),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        DepositLabel = cms.untracked.string('Cal'),
        UseRecHitsFlag = cms.bool(False),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(1.0),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(1.0),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        Threshold_HO = cms.double(0.5),
        Noise_EE = cms.double(0.1),
        Noise_EB = cms.double(0.025),
        DR_Veto_H = cms.double(0.1),
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        Noise_HB = cms.double(0.2),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_HO = cms.double(0.1)
    ),
    runArbitrationCleaner = cms.bool(True),
    fillEnergy = cms.bool(True),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        usePosition = cms.bool(True),
        diagonalOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite')
    ),
    TimingFillerParameters = cms.PSet(
        DTTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DCosmicSegments"),
                DTradius = cms.double(0.01),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            HitError = cms.double(6.0),
            DoWireCorr = cms.bool(True),
            PruneCut = cms.double(10000.0),
            DTsegments = cms.InputTag("dt4DCosmicSegments"),
            DropTheta = cms.bool(True),
            RequireBothProjections = cms.bool(False),
            HitsMin = cms.int32(3),
            DTTimeOffset = cms.double(0.0),
            debug = cms.bool(False),
            UseSegmentT0 = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            )
        ),
        CSCTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DCosmicSegments"),
                DTradius = cms.double(0.01),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            CSCsegments = cms.InputTag("csc2DSegments"),
            CSCStripTimeOffset = cms.double(0.0),
            CSCStripError = cms.double(7.0),
            UseStripTime = cms.bool(True),
            debug = cms.bool(False),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            PruneCut = cms.double(9.0),
            UseWireTime = cms.bool(True)
        ),
        UseDT = cms.bool(True),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseECAL = cms.bool(True)
    ),
    inputCollectionTypes = cms.vstring('links', 
        'outer tracks', 
        'inner tracks'),
    minCaloCompatibility = cms.double(0.6),
    ecalDepositName = cms.string('ecal'),
    minP = cms.double(2.5),
    fillIsolation = cms.bool(False),
    jetDepositName = cms.string('jets'),
    hoDepositName = cms.string('ho'),
    writeIsoDeposits = cms.bool(True),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minPt = cms.double(0.5),
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(9999.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DCosmicSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.2),
        useMuon = cms.bool(True),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    ),
    JetExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        ExcludeMuonVeto = cms.bool(True),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(0.5),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(0.5),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        JetCollectionLabel = cms.InputTag("ak5CaloJets"),
        DR_Veto = cms.double(0.1),
        Threshold = cms.double(5.0)
    ),
    fillGlobalTrackQuality = cms.bool(False),
    minPCaloMuon = cms.double(1.0),
    maxAbsDy = cms.double(9999.0),
    fillCaloCompatibility = cms.bool(True),
    fillMatching = cms.bool(True),
    MuonCaloCompatibility = cms.PSet(
        allSiPMHO = cms.bool(False),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    fillTrackerKink = cms.bool(True),
    hcalDepositName = cms.string('hcal'),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    inputCollectionLabels = cms.VInputTag("globalCosmicMuons", "cosmicMuons", "regionalCosmicTracks"),
    trackDepositName = cms.string('tracker'),
    maxAbsDx = cms.double(3.0),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    minNumberOfMatches = cms.int32(1)
)


process.muonsFromCosmics1Leg = cms.EDProducer("MuonIdProducer",
    TrackExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        inputTrackCollection = cms.InputTag("regionalCosmicTracks"),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(0.1),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.01),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent')
    ),
    maxAbsEta = cms.double(3.0),
    fillGlobalTrackRefits = cms.bool(False),
    arbitrationCleanerOptions = cms.PSet(
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        ClusterDPhi = cms.double(0.6),
        OverlapDTheta = cms.double(0.02),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        ClusterDTheta = cms.double(0.02)
    ),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    addExtraSoftMuons = cms.bool(False),
    debugWithTruthMatching = cms.bool(False),
    CaloExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        DR_Max = cms.double(1.0),
        Threshold_E = cms.double(0.2),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        Noise_HE = cms.double(0.2),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Threshold_H = cms.double(0.5),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Noise_HO = cms.double(0.2),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        DepositLabel = cms.untracked.string('Cal'),
        UseRecHitsFlag = cms.bool(False),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(1.0),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(1.0),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        Threshold_HO = cms.double(0.5),
        Noise_EE = cms.double(0.1),
        Noise_EB = cms.double(0.025),
        DR_Veto_H = cms.double(0.1),
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        Noise_HB = cms.double(0.2),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_HO = cms.double(0.1)
    ),
    runArbitrationCleaner = cms.bool(True),
    fillEnergy = cms.bool(True),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        usePosition = cms.bool(True),
        diagonalOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite')
    ),
    TimingFillerParameters = cms.PSet(
        DTTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DCosmicSegments"),
                DTradius = cms.double(0.01),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            HitError = cms.double(6.0),
            DoWireCorr = cms.bool(True),
            PruneCut = cms.double(10000.0),
            DTsegments = cms.InputTag("dt4DCosmicSegments"),
            DropTheta = cms.bool(True),
            RequireBothProjections = cms.bool(False),
            HitsMin = cms.int32(3),
            DTTimeOffset = cms.double(0.0),
            debug = cms.bool(False),
            UseSegmentT0 = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            )
        ),
        CSCTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DCosmicSegments"),
                DTradius = cms.double(0.01),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            CSCsegments = cms.InputTag("csc2DSegments"),
            CSCStripTimeOffset = cms.double(0.0),
            CSCStripError = cms.double(7.0),
            UseStripTime = cms.bool(True),
            debug = cms.bool(False),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            PruneCut = cms.double(9.0),
            UseWireTime = cms.bool(True)
        ),
        UseDT = cms.bool(True),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseECAL = cms.bool(True)
    ),
    inputCollectionTypes = cms.vstring('links', 
        'outer tracks', 
        'inner tracks'),
    minCaloCompatibility = cms.double(0.6),
    ecalDepositName = cms.string('ecal'),
    minP = cms.double(2.5),
    fillIsolation = cms.bool(False),
    jetDepositName = cms.string('jets'),
    hoDepositName = cms.string('ho'),
    writeIsoDeposits = cms.bool(True),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minPt = cms.double(0.5),
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(9999.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DCosmicSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.2),
        useMuon = cms.bool(True),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    ),
    JetExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        ExcludeMuonVeto = cms.bool(True),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(0.5),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(0.5),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        JetCollectionLabel = cms.InputTag("ak5CaloJets"),
        DR_Veto = cms.double(0.1),
        Threshold = cms.double(5.0)
    ),
    fillGlobalTrackQuality = cms.bool(False),
    minPCaloMuon = cms.double(1.0),
    maxAbsDy = cms.double(9999.0),
    fillCaloCompatibility = cms.bool(True),
    fillMatching = cms.bool(True),
    MuonCaloCompatibility = cms.PSet(
        allSiPMHO = cms.bool(False),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    fillTrackerKink = cms.bool(True),
    hcalDepositName = cms.string('hcal'),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    inputCollectionLabels = cms.VInputTag("globalCosmicMuons1Leg", "cosmicMuons1Leg", "regionalCosmicTracks"),
    trackDepositName = cms.string('tracker'),
    maxAbsDx = cms.double(3.0),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    minNumberOfMatches = cms.int32(1)
)


process.muonsWithSET = cms.EDProducer("MuonIdProducer",
    TrackExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        inputTrackCollection = cms.InputTag("generalTracks"),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(0.1),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.01),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent')
    ),
    maxAbsEta = cms.double(3.0),
    fillGlobalTrackRefits = cms.bool(True),
    arbitrationCleanerOptions = cms.PSet(
        Clustering = cms.bool(True),
        ME1a = cms.bool(True),
        ClusterDPhi = cms.double(0.6),
        OverlapDTheta = cms.double(0.02),
        Overlap = cms.bool(True),
        OverlapDPhi = cms.double(0.0786),
        ClusterDTheta = cms.double(0.02)
    ),
    globalTrackQualityInputTag = cms.InputTag("glbTrackQual"),
    addExtraSoftMuons = cms.bool(False),
    debugWithTruthMatching = cms.bool(False),
    CaloExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        DR_Max = cms.double(1.0),
        Threshold_E = cms.double(0.2),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        Noise_HE = cms.double(0.2),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Threshold_H = cms.double(0.5),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Noise_HO = cms.double(0.2),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        DepositLabel = cms.untracked.string('Cal'),
        UseRecHitsFlag = cms.bool(False),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(1.0),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(1.0),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        Threshold_HO = cms.double(0.5),
        Noise_EE = cms.double(0.1),
        Noise_EB = cms.double(0.025),
        DR_Veto_H = cms.double(0.1),
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        Noise_HB = cms.double(0.2),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_HO = cms.double(0.1)
    ),
    runArbitrationCleaner = cms.bool(True),
    fillEnergy = cms.bool(True),
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        usePosition = cms.bool(True),
        diagonalOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite')
    ),
    TimingFillerParameters = cms.PSet(
        DTTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DSegments"),
                DTradius = cms.double(0.01),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            HitError = cms.double(6.0),
            DoWireCorr = cms.bool(True),
            PruneCut = cms.double(10000.0),
            DTsegments = cms.InputTag("dt4DSegments"),
            DropTheta = cms.bool(True),
            RequireBothProjections = cms.bool(False),
            HitsMin = cms.int32(3),
            DTTimeOffset = cms.double(0.0),
            debug = cms.bool(False),
            UseSegmentT0 = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            )
        ),
        CSCTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DSegments"),
                DTradius = cms.double(0.01),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            CSCsegments = cms.InputTag("csc2DSegments"),
            CSCStripTimeOffset = cms.double(0.0),
            CSCStripError = cms.double(7.0),
            UseStripTime = cms.bool(True),
            debug = cms.bool(False),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            PruneCut = cms.double(9.0),
            UseWireTime = cms.bool(True)
        ),
        UseDT = cms.bool(True),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseECAL = cms.bool(True)
    ),
    inputCollectionTypes = cms.vstring('inner tracks', 
        'links', 
        'outer tracks'),
    minCaloCompatibility = cms.double(0.6),
    ecalDepositName = cms.string('ecal'),
    minP = cms.double(2.5),
    fillIsolation = cms.bool(True),
    jetDepositName = cms.string('jets'),
    hoDepositName = cms.string('ho'),
    writeIsoDeposits = cms.bool(True),
    maxAbsPullX = cms.double(4.0),
    maxAbsPullY = cms.double(9999.0),
    minPt = cms.double(0.5),
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(9999.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.2),
        useMuon = cms.bool(True),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    ),
    JetExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        ExcludeMuonVeto = cms.bool(True),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(0.5),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(0.5),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        JetCollectionLabel = cms.InputTag("ak5CaloJets"),
        DR_Veto = cms.double(0.1),
        Threshold = cms.double(5.0)
    ),
    fillGlobalTrackQuality = cms.bool(True),
    minPCaloMuon = cms.double(1.0),
    maxAbsDy = cms.double(9999.0),
    fillCaloCompatibility = cms.bool(True),
    fillMatching = cms.bool(True),
    MuonCaloCompatibility = cms.PSet(
        allSiPMHO = cms.bool(False),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    ),
    fillTrackerKink = cms.bool(True),
    hcalDepositName = cms.string('hcal'),
    sigmaThresholdToFillCandidateP4WithGlobalFit = cms.double(2.0),
    inputCollectionLabels = cms.VInputTag("generalTracks", "globalSETMuons", cms.InputTag("standAloneSETMuons","UpdatedAtVtx")),
    trackDepositName = cms.string('tracker'),
    maxAbsDx = cms.double(3.0),
    ptThresholdToFillCandidateP4WithGlobalFit = cms.double(200.0),
    minNumberOfMatches = cms.int32(1)
)


process.muontiming = cms.EDProducer("MuonTimingProducer",
    TimingFillerParameters = cms.PSet(
        DTTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DSegments"),
                DTradius = cms.double(0.01),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            HitError = cms.double(6.0),
            DoWireCorr = cms.bool(True),
            PruneCut = cms.double(10000.0),
            DTsegments = cms.InputTag("dt4DSegments"),
            DropTheta = cms.bool(True),
            RequireBothProjections = cms.bool(False),
            HitsMin = cms.int32(3),
            DTTimeOffset = cms.double(0.0),
            debug = cms.bool(False),
            UseSegmentT0 = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            )
        ),
        CSCTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DSegments"),
                DTradius = cms.double(0.01),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            CSCsegments = cms.InputTag("csc2DSegments"),
            CSCStripTimeOffset = cms.double(0.0),
            CSCStripError = cms.double(7.0),
            UseStripTime = cms.bool(True),
            debug = cms.bool(False),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            PruneCut = cms.double(9.0),
            UseWireTime = cms.bool(True)
        ),
        UseDT = cms.bool(True),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseECAL = cms.bool(True)
    ),
    MuonCollection = cms.InputTag("muons1stStep")
)


process.negativeTrackCountingHighEffJetTags = cms.EDProducer("JetTagProducer",
    trackQualityClass = cms.string('any'),
    jetTagComputer = cms.string('negativeTrackCounting3D2nd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.negativeTrackCountingHighPurJetTags = cms.EDProducer("JetTagProducer",
    trackQualityClass = cms.string('any'),
    jetTagComputer = cms.string('negativeTrackCounting3D3rd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.newCombinedSeeds = cms.EDProducer("SeedCombiner",
    seedCollections = cms.VInputTag(cms.InputTag("initialStepSeeds"), cms.InputTag("pixelPairStepSeeds"), cms.InputTag("mixedTripletStepSeeds"), cms.InputTag("pixelLessStepSeeds"), cms.InputTag("tripletElectronSeeds"), 
        cms.InputTag("pixelPairElectronSeeds"), cms.InputTag("stripPairElectronSeeds"))
)


process.offlineBeamSpot = cms.EDProducer("BeamSpotProducer")


process.offlinePrimaryVertices = cms.EDProducer("PrimaryVertexProducer",
    vertexCollections = cms.VPSet(cms.PSet(
        maxDistanceToBeam = cms.double(1.0),
        useBeamConstraint = cms.bool(False),
        minNdof = cms.double(0.0),
        algorithm = cms.string('AdaptiveVertexFitter'),
        label = cms.string('')
    ), 
        cms.PSet(
            maxDistanceToBeam = cms.double(1.0),
            useBeamConstraint = cms.bool(True),
            minNdof = cms.double(2.0),
            algorithm = cms.string('AdaptiveVertexFitter'),
            label = cms.string('WithBS')
        )),
    verbose = cms.untracked.bool(False),
    TkFilterParameters = cms.PSet(
        maxNormalizedChi2 = cms.double(20.0),
        minPt = cms.double(0.0),
        algorithm = cms.string('filter'),
        maxD0Significance = cms.double(5.0),
        trackQuality = cms.string('any'),
        minPixelLayersWithHits = cms.int32(2),
        minSiliconLayersWithHits = cms.int32(5)
    ),
    beamSpotLabel = cms.InputTag("offlineBeamSpot"),
    TrackLabel = cms.InputTag("generalTracks"),
    TkClusParameters = cms.PSet(
        TkDAClusParameters = cms.PSet(
            dzCutOff = cms.double(4.0),
            d0CutOff = cms.double(3.0),
            Tmin = cms.double(4.0),
            coolingFactor = cms.double(0.6),
            vertexSize = cms.double(0.01),
            use_vdt = cms.untracked.bool(True)
        ),
        algorithm = cms.string('DA_vect')
    )
)


process.outInConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    filterOnConvTrackHyp = cms.bool(True),
    minConvRadius = cms.double(2.0),
    TrackProducer = cms.string('ckfOutInTracksFromConversions'),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    setTrackerOnly = cms.bool(False),
    setArbitratedMerged = cms.bool(True),
    useTrajectory = cms.bool(True),
    setArbitratedEcalSeeded = cms.bool(True)
)


process.particleFlow = cms.EDProducer("PFLinker",
    ValueMapMerged = cms.string('all'),
    ProducePFCandidates = cms.bool(True),
    ValueMapElectrons = cms.string('electrons'),
    Photons = cms.InputTag("pfPhotonTranslator","pfphot"),
    FillMuonRefs = cms.bool(True),
    ValueMapPhotons = cms.string('photons'),
    OutputPF = cms.string(''),
    Muons = cms.InputTag("muons","muons1stStep2muonsMap"),
    PFCandidate = cms.VInputTag(cms.InputTag("particleFlowTmp")),
    GsfElectrons = cms.InputTag("gsfElectrons")
)


process.particleFlowBlock = cms.EDProducer("PFBlockProducer",
    PFClustersHCAL = cms.InputTag("particleFlowClusterHCAL"),
    RecMuons = cms.InputTag("muons1stStep"),
    PFClustersHFHAD = cms.InputTag("particleFlowClusterHFHAD"),
    PFConversions = cms.InputTag("pfConversions"),
    useConversions = cms.bool(True),
    nuclearInteractionsPurity = cms.uint32(1),
    PFClustersECAL = cms.InputTag("particleFlowClusterECAL"),
    verbose = cms.untracked.bool(False),
    PFClustersPS = cms.InputTag("particleFlowClusterPS"),
    usePFatHLT = cms.bool(False),
    PFClustersHO = cms.InputTag("particleFlowClusterHO"),
    useIterTracking = cms.bool(True),
    useConvBremPFRecTracks = cms.bool(True),
    useV0 = cms.bool(False),
    RecTracks = cms.InputTag("pfTrack"),
    EGPhotons = cms.InputTag("photons"),
    ConvBremGsfRecTracks = cms.InputTag("pfTrackElec","Secondary"),
    PFClustersHFEM = cms.InputTag("particleFlowClusterHFEM"),
    useKDTreeTrackEcalLinker = cms.bool(True),
    useHO = cms.bool(True),
    pf_DPtoverPt_Cut = cms.vdouble(-1.0, -1.0, -1.0, 1.0, 1.0),
    GsfRecTracks = cms.InputTag("pfTrackElec"),
    useNuclear = cms.bool(True),
    useConvBremGsfTracks = cms.bool(False),
    PFNuclear = cms.InputTag("pfDisplacedTrackerVertex"),
    PhotonSelectionCuts = cms.vdouble(1, 10, 2.0, 0.001, 4.2, 
        0.003, 2.2, 0.001, 0.05, 10, 
        0.1),
    PFV0 = cms.InputTag("pfV0"),
    debug = cms.untracked.bool(False),
    useEGPhotons = cms.bool(True),
    pf_NHit_Cut = cms.vuint32(3, 3, 3, 3, 3)
)


process.particleFlowClusterECAL = cms.EDProducer("PFClusterProducer",
    posCalcNCrystal = cms.int32(9),
    verbose = cms.untracked.bool(False),
    showerSigma = cms.double(1.5),
    thresh_DoubleSpike_Barrel = cms.double(10.0),
    thresh_Pt_Barrel = cms.double(0.0),
    thresh_Clean_Barrel = cms.double(4.0),
    PFRecHits = cms.InputTag("particleFlowRecHitECAL"),
    cleanRBXandHPDs = cms.bool(False),
    depthCor_B = cms.double(7.4),
    depthCor_A = cms.double(0.89),
    nNeighbours = cms.int32(8),
    thresh_DoubleSpike_Endcap = cms.double(1000000000.0),
    minS4S1_Clean_Barrel = cms.vdouble(0.04, -0.024),
    thresh_Pt_Seed_Barrel = cms.double(0.0),
    thresh_Pt_Endcap = cms.double(0.0),
    thresh_Barrel = cms.double(0.08),
    thresh_Clean_Endcap = cms.double(15.0),
    thresh_Seed_Barrel = cms.double(0.23),
    depthCor_Mode = cms.int32(1),
    depthCor_B_preshower = cms.double(4.0),
    useCornerCells = cms.bool(True),
    depthCor_A_preshower = cms.double(0.89),
    thresh_Endcap = cms.double(0.3),
    thresh_Pt_Seed_Endcap = cms.double(0.15),
    minS4S1_Clean_Endcap = cms.vdouble(0.02, -0.0125),
    thresh_Seed_Endcap = cms.double(0.6),
    minS6S2_DoubleSpike_Endcap = cms.double(-1.0),
    minS6S2_DoubleSpike_Barrel = cms.double(0.04)
)


process.particleFlowClusterHCAL = cms.EDProducer("PFClusterProducer",
    posCalcNCrystal = cms.int32(5),
    verbose = cms.untracked.bool(False),
    showerSigma = cms.double(10.0),
    thresh_DoubleSpike_Barrel = cms.double(1000000000.0),
    thresh_Pt_Barrel = cms.double(0.0),
    thresh_Clean_Barrel = cms.double(100000.0),
    PFRecHits = cms.InputTag("particleFlowRecHitHCAL"),
    cleanRBXandHPDs = cms.bool(True),
    depthCor_B = cms.double(7.4),
    depthCor_A = cms.double(0.89),
    nNeighbours = cms.int32(4),
    thresh_DoubleSpike_Endcap = cms.double(1000000000.0),
    minS4S1_Clean_Barrel = cms.vdouble(0.032, -0.045),
    thresh_Pt_Seed_Barrel = cms.double(0.0),
    thresh_Pt_Endcap = cms.double(0.0),
    thresh_Barrel = cms.double(0.8),
    thresh_Clean_Endcap = cms.double(100000.0),
    thresh_Seed_Barrel = cms.double(0.8),
    depthCor_Mode = cms.int32(0),
    depthCor_B_preshower = cms.double(4.0),
    useCornerCells = cms.bool(True),
    depthCor_A_preshower = cms.double(0.89),
    thresh_Endcap = cms.double(0.8),
    thresh_Pt_Seed_Endcap = cms.double(0.0),
    minS4S1_Clean_Endcap = cms.vdouble(0.032, -0.045),
    thresh_Seed_Endcap = cms.double(1.1),
    minS6S2_DoubleSpike_Endcap = cms.double(-1.0),
    minS6S2_DoubleSpike_Barrel = cms.double(-1.0)
)


process.particleFlowClusterHFEM = cms.EDProducer("PFClusterProducer",
    posCalcNCrystal = cms.int32(5),
    verbose = cms.untracked.bool(False),
    showerSigma = cms.double(10.0),
    thresh_DoubleSpike_Barrel = cms.double(1000000000.0),
    thresh_Pt_Barrel = cms.double(0.0),
    thresh_Clean_Barrel = cms.double(80.0),
    PFRecHits = cms.InputTag("particleFlowRecHitHCAL","HFEM"),
    cleanRBXandHPDs = cms.bool(False),
    depthCor_B = cms.double(7.4),
    depthCor_A = cms.double(0.89),
    nNeighbours = cms.int32(0),
    thresh_DoubleSpike_Endcap = cms.double(1000000000.0),
    minS4S1_Clean_Barrel = cms.vdouble(0.11, -0.19),
    thresh_Pt_Seed_Barrel = cms.double(0.0),
    thresh_Pt_Endcap = cms.double(0.0),
    thresh_Barrel = cms.double(0.8),
    thresh_Clean_Endcap = cms.double(80.0),
    thresh_Seed_Barrel = cms.double(1.4),
    depthCor_Mode = cms.int32(0),
    depthCor_B_preshower = cms.double(4.0),
    useCornerCells = cms.bool(False),
    depthCor_A_preshower = cms.double(0.89),
    thresh_Endcap = cms.double(0.8),
    thresh_Pt_Seed_Endcap = cms.double(0.0),
    minS4S1_Clean_Endcap = cms.vdouble(0.11, -0.19),
    thresh_Seed_Endcap = cms.double(1.4),
    minS6S2_DoubleSpike_Endcap = cms.double(-1.0),
    minS6S2_DoubleSpike_Barrel = cms.double(-1.0)
)


process.particleFlowClusterHFHAD = cms.EDProducer("PFClusterProducer",
    posCalcNCrystal = cms.int32(5),
    verbose = cms.untracked.bool(False),
    showerSigma = cms.double(10.0),
    thresh_DoubleSpike_Barrel = cms.double(1000000000.0),
    thresh_Pt_Barrel = cms.double(0.0),
    thresh_Clean_Barrel = cms.double(120.0),
    PFRecHits = cms.InputTag("particleFlowRecHitHCAL","HFHAD"),
    cleanRBXandHPDs = cms.bool(False),
    depthCor_B = cms.double(7.4),
    depthCor_A = cms.double(0.89),
    nNeighbours = cms.int32(0),
    thresh_DoubleSpike_Endcap = cms.double(1000000000.0),
    minS4S1_Clean_Barrel = cms.vdouble(0.045, -0.08),
    thresh_Pt_Seed_Barrel = cms.double(0.0),
    thresh_Pt_Endcap = cms.double(0.0),
    thresh_Barrel = cms.double(0.8),
    thresh_Clean_Endcap = cms.double(120.0),
    thresh_Seed_Barrel = cms.double(1.4),
    depthCor_Mode = cms.int32(0),
    depthCor_B_preshower = cms.double(4.0),
    useCornerCells = cms.bool(False),
    depthCor_A_preshower = cms.double(0.89),
    thresh_Endcap = cms.double(0.8),
    thresh_Pt_Seed_Endcap = cms.double(0.0),
    minS4S1_Clean_Endcap = cms.vdouble(0.045, -0.08),
    thresh_Seed_Endcap = cms.double(1.4),
    minS6S2_DoubleSpike_Endcap = cms.double(-1.0),
    minS6S2_DoubleSpike_Barrel = cms.double(-1.0)
)


process.particleFlowClusterHO = cms.EDProducer("PFClusterProducer",
    posCalcNCrystal = cms.int32(5),
    verbose = cms.untracked.bool(False),
    showerSigma = cms.double(10.0),
    thresh_DoubleSpike_Barrel = cms.double(1000000000.0),
    thresh_Pt_Barrel = cms.double(0.0),
    thresh_Clean_Barrel = cms.double(100000.0),
    PFRecHits = cms.InputTag("particleFlowRecHitHO"),
    cleanRBXandHPDs = cms.bool(False),
    depthCor_B = cms.double(7.4),
    depthCor_A = cms.double(0.89),
    nNeighbours = cms.int32(4),
    thresh_DoubleSpike_Endcap = cms.double(1000000000.0),
    minS4S1_Clean_Barrel = cms.vdouble(0.032, -0.045),
    thresh_Pt_Seed_Barrel = cms.double(0.0),
    thresh_Pt_Endcap = cms.double(0.0),
    thresh_Barrel = cms.double(0.5),
    thresh_Clean_Endcap = cms.double(100000.0),
    thresh_Seed_Barrel = cms.double(1.0),
    depthCor_Mode = cms.int32(0),
    depthCor_B_preshower = cms.double(4.0),
    useCornerCells = cms.bool(True),
    depthCor_A_preshower = cms.double(0.89),
    thresh_Endcap = cms.double(1.0),
    thresh_Pt_Seed_Endcap = cms.double(0.0),
    minS4S1_Clean_Endcap = cms.vdouble(0.032, -0.045),
    thresh_Seed_Endcap = cms.double(3.1),
    minS6S2_DoubleSpike_Endcap = cms.double(-1.0),
    minS6S2_DoubleSpike_Barrel = cms.double(-1.0)
)


process.particleFlowClusterPS = cms.EDProducer("PFClusterProducer",
    posCalcNCrystal = cms.int32(-1),
    verbose = cms.untracked.bool(False),
    showerSigma = cms.double(0.2),
    thresh_DoubleSpike_Barrel = cms.double(1000000000.0),
    thresh_Pt_Barrel = cms.double(0.0),
    thresh_Clean_Barrel = cms.double(100000.0),
    PFRecHits = cms.InputTag("particleFlowRecHitPS"),
    cleanRBXandHPDs = cms.bool(False),
    depthCor_B = cms.double(7.4),
    depthCor_A = cms.double(0.89),
    nNeighbours = cms.int32(8),
    thresh_DoubleSpike_Endcap = cms.double(1000000000.0),
    minS4S1_Clean_Barrel = cms.vdouble(0.0, 0.0),
    thresh_Pt_Seed_Barrel = cms.double(0.0),
    thresh_Pt_Endcap = cms.double(0.0),
    thresh_Barrel = cms.double(6e-05),
    thresh_Clean_Endcap = cms.double(100000.0),
    thresh_Seed_Barrel = cms.double(0.00012),
    depthCor_Mode = cms.int32(0),
    depthCor_B_preshower = cms.double(4.0),
    useCornerCells = cms.bool(False),
    depthCor_A_preshower = cms.double(0.89),
    thresh_Endcap = cms.double(6e-05),
    thresh_Pt_Seed_Endcap = cms.double(0.0),
    minS4S1_Clean_Endcap = cms.vdouble(0.0, 0.0),
    thresh_Seed_Endcap = cms.double(0.00012),
    minS6S2_DoubleSpike_Endcap = cms.double(-1.0),
    minS6S2_DoubleSpike_Barrel = cms.double(-1.0)
)


process.particleFlowDisplacedVertex = cms.EDProducer("PFDisplacedVertexProducer",
    verbose = cms.untracked.bool(False),
    primaryVertexCut = cms.double(2.5),
    avfParameters = cms.PSet(
        sigmacut = cms.double(6.0),
        ratio = cms.double(0.25),
        Tini = cms.double(256.0)
    ),
    minAdaptWeight = cms.double(0.5),
    switchOff2TrackVertex = cms.untracked.bool(True),
    vertexIdentifierParameters = cms.PSet(
        logPrimSec_min = cms.double(0.0),
        pt_kink_min = cms.double(3.0),
        masses = cms.vdouble(0.05, 0.485, 0.515, 0.48, 0.52, 
            1.107, 1.125, 0.2),
        angles = cms.vdouble(15, 15),
        pt_min = cms.double(0.5),
        bIdentifyVertices = cms.bool(True),
        looper_eta_max = cms.double(0.1)
    ),
    mainVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    vertexCandidatesLabel = cms.InputTag("particleFlowDisplacedVertexCandidate"),
    transvSize = cms.double(1.0),
    offlineBeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    tracksSelectorParameters = cms.PSet(
        nChi2_max = cms.double(5.0),
        bSelectTracks = cms.bool(True),
        nOuterHits_max = cms.int32(9),
        dxy_min = cms.double(0.2),
        nHits_min = cms.int32(6),
        nChi2_min = cms.double(0.5),
        pt_min = cms.double(0.2),
        quality = cms.string('HighPurity')
    ),
    debug = cms.untracked.bool(False),
    tobCut = cms.double(100),
    longSize = cms.double(5),
    tecCut = cms.double(220)
)


process.particleFlowDisplacedVertexCandidate = cms.EDProducer("PFDisplacedVertexCandidateProducer",
    verbose = cms.untracked.bool(False),
    primaryVertexCut = cms.double(2.2),
    dcaPInnerHitCut = cms.double(1000.0),
    mainVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    offlineBeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    tracksSelectorParameters = cms.PSet(
        nChi2_max = cms.double(5.0),
        pt_min = cms.double(0.2),
        dxy = cms.double(0.2),
        pt_min_prim = cms.double(0.8)
    ),
    debug = cms.untracked.bool(False),
    trackCollection = cms.InputTag("generalTracks"),
    dcaCut = cms.double(0.5)
)


process.particleFlowPtrs = cms.EDProducer("PFCandidateFwdPtrProducer",
    src = cms.InputTag("particleFlow")
)


process.particleFlowRecHitECAL = cms.EDProducer("PFRecHitProducerECAL",
    crossBarrelEndcapBorder = cms.bool(False),
    verbose = cms.untracked.bool(False),
    ecalRecHitsEE = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    ecalRecHitsEB = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    thresh_Cleaning_EB = cms.double(2.0),
    timing_Cleaning = cms.bool(True),
    thresh_Barrel = cms.double(0.08),
    thresh_Cleaning_EE = cms.double(2.0),
    topological_Cleaning = cms.bool(True),
    thresh_Endcap = cms.double(0.3)
)


process.particleFlowRecHitHCAL = cms.EDProducer("PFRecHitProducerHCAL",
    ECAL_Compensate = cms.bool(False),
    ECAL_Dead_Code = cms.uint32(10),
    MinLongTiming_Cut = cms.double(-5.0),
    verbose = cms.untracked.bool(False),
    ECAL_Compensation = cms.double(0.5),
    MaxLongTiming_Cut = cms.double(5.0),
    weight_HFhad = cms.double(1.0),
    ApplyPulseDPG = cms.bool(False),
    ECAL_Threshold = cms.double(10.0),
    ApplyTimeDPG = cms.bool(False),
    caloTowers = cms.InputTag("towerMakerPF"),
    hcalRecHitsHBHE = cms.InputTag("hbhereco"),
    LongFibre_Fraction = cms.double(0.1),
    MaxShortTiming_Cut = cms.double(5.0),
    HcalMaxAllowedHFLongShortSev = cms.int32(9),
    thresh_Barrel = cms.double(0.4),
    navigation_HF = cms.bool(True),
    HcalMaxAllowedHFInTimeWindowSev = cms.int32(9),
    HF_Calib_29 = cms.double(1.07),
    LongFibre_Cut = cms.double(120.0),
    EM_Depth = cms.double(22.0),
    weight_HFem = cms.double(1.0),
    LongShortFibre_Cut = cms.double(1000000000.0),
    MinShortTiming_Cut = cms.double(-5.0),
    HCAL_Calib = cms.bool(True),
    thresh_HF = cms.double(0.4),
    HcalMaxAllowedHFDigiTimeSev = cms.int32(9),
    thresh_Endcap = cms.double(0.4),
    HcalMaxAllowedChannelStatusSev = cms.int32(9),
    hcalRecHitsHF = cms.InputTag("hfreco"),
    ShortFibre_Cut = cms.double(60.0),
    ApplyLongShortDPG = cms.bool(True),
    HF_Calib = cms.bool(True),
    HAD_Depth = cms.double(47.0),
    ShortFibre_Fraction = cms.double(0.01),
    HCAL_Calib_29 = cms.double(1.35)
)


process.particleFlowRecHitHO = cms.EDProducer("PFRecHitProducerHO",
    verbose = cms.untracked.bool(False),
    HOMaxAllowedSev = cms.int32(11),
    thresh_Barrel = cms.double(0.4),
    recHitsHO = cms.InputTag("horeco"),
    thresh_Endcap = cms.double(1.0)
)


process.particleFlowRecHitPS = cms.EDProducer("PFRecHitProducerPS",
    thresh_Barrel = cms.double(7e-06),
    ecalRecHitsES = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    verbose = cms.untracked.bool(False),
    thresh_Endcap = cms.double(7e-06)
)


process.particleFlowSimParticle = cms.EDProducer("PFSimParticleProducer",
    VertexGenerator = cms.PSet(
        type = cms.string('None')
    ),
    MCTruthMatchingInfo = cms.untracked.bool(False),
    RecTracks = cms.InputTag("trackerDrivenElectronSeeds"),
    Fitter = cms.string('KFFittingSmoother'),
    ecalRecHitsEE = cms.InputTag("caloRecHits","EcalRecHitsEE"),
    ecalRecHitsEB = cms.InputTag("caloRecHits","EcalRecHitsEB"),
    process_RecTracks = cms.untracked.bool(False),
    ParticleFilter = cms.PSet(
        EProton = cms.double(5000.0),
        etaMax = cms.double(5.0),
        pTMin = cms.double(0.0),
        EMin = cms.double(0.0)
    ),
    TTRHBuilder = cms.string('WithTrackAngle'),
    famosSimHits = cms.untracked.InputTag("famosSimHits","EcalHitsEB"),
    process_Particles = cms.untracked.bool(True),
    Propagator = cms.string('PropagatorWithMaterial'),
    sim = cms.InputTag("g4SimHits"),
    verbose = cms.untracked.bool(False)
)


process.particleFlowSuperClusterECAL = cms.EDProducer("PFSuperClusterProducer",
    applyCrackCorrections = cms.bool(False),
    PFSuperClusterCollectionEndcap = cms.string('particleFlowSuperClusterECALEndcap'),
    thresh_PFClusterSeedBarrel = cms.double(3.0),
    etawidth_SuperClusterEndcap = cms.double(0.04),
    doMustachePUcleaning = cms.bool(False),
    PFBasicClusterCollectionBarrel = cms.string('particleFlowBasicClusterECALBarrel'),
    phiwidth_SuperClusterEndcap = cms.double(0.28),
    verbose = cms.untracked.bool(False),
    thresh_PFClusterEndcap = cms.double(0.5),
    etawidth_SuperClusterBarrel = cms.double(0.04),
    PFSuperClusterCollectionBarrel = cms.string('particleFlowSuperClusterECALBarrel'),
    thresh_PFClusterSeedEndcap = cms.double(3.0),
    phiwidth_SuperClusterBarrel = cms.double(0.28),
    thresh_PFClusterES = cms.double(0.0),
    PFBasicClusterCollectionPreshower = cms.string('particleFlowSuperClusterECALPreshower'),
    PFClustersES = cms.InputTag("particleFlowClusterPS"),
    PFSuperClusterCollectionEndcapWithPreshower = cms.string('particleFlowSuperClusterECALEndcapWithPreshower'),
    PFClusters = cms.InputTag("particleFlowClusterECAL"),
    PFBasicClusterCollectionEndcap = cms.string('particleFlowBasicClusterECALEndcap'),
    thresh_PFClusterBarrel = cms.double(0.5)
)


process.particleFlowTmp = cms.EDProducer("PFProducer",
    sumPtTrackIsoForEgammaSC_endcap = cms.double(4.0),
    calibHF_use = cms.bool(False),
    verbose = cms.untracked.bool(False),
    minSignificance = cms.double(2.5),
    pf_nsigma_ECAL = cms.double(0.0),
    usePFConversions = cms.bool(True),
    useCalibrationsFromDB = cms.bool(True),
    sumPtTrackIsoForPhoton = cms.double(2.0),
    calibPFSCEle_endcap = cms.vdouble(1.153, -16.5975, 5.668, -0.1772, 16.22, 
        7.326, 0.0483, -4.068, 9.406),
    pf_convID_mvaWeightFile = cms.string('RecoParticleFlow/PFProducer/data/MVAnalysis_BDT.weights_pfConversionAug0411.txt'),
    usePFElectrons = cms.bool(True),
    postMuonCleaning = cms.bool(True),
    minSignificanceReduction = cms.double(1.4),
    calibPFSCEle_barrel = cms.vdouble(1.004, -1.536, 22.88, -1.467, 0.3555, 
        0.6227, 14.65, 2051, 25, 0.9932, 
        -0.5444, 0, 0.5438, 0.7109, 7.645, 
        0.2904, 0),
    muon_HO = cms.vdouble(0.9, 0.9),
    postHFCleaning = cms.bool(False),
    factors_45 = cms.vdouble(10.0, 100.0),
    cleanedHF = cms.VInputTag(cms.InputTag("particleFlowRecHitHCAL","Cleaned"), cms.InputTag("particleFlowClusterHFHAD","Cleaned"), cms.InputTag("particleFlowClusterHFEM","Cleaned")),
    iCfgCandConnector = cms.PSet(
        nuclCalibFactors = cms.vdouble(0.8, 0.15, 0.5, 0.5, 0.05),
        ptErrorSecondary = cms.double(1.0),
        bCalibPrimary = cms.bool(True),
        bCorrect = cms.bool(True),
        dptRel_MergedTrack = cms.double(5.0),
        dptRel_PrimaryTrack = cms.double(10.0)
    ),
    useBestMuonTrack = cms.bool(False),
    rejectTracks_Bad = cms.bool(True),
    coneEcalIsoForEgammaSC = cms.double(0.3),
    usePFPhotons = cms.bool(True),
    vertexCollection = cms.InputTag("offlinePrimaryVertices"),
    sumPtTrackIsoForEgammaSC_barrel = cms.double(4.0),
    egammaElectrons = cms.InputTag("mvaElectrons"),
    calibHF_a_EMonly = cms.vdouble(0.96945, 0.96701, 0.76309, 0.82268, 0.87583, 
        0.89718, 0.98674, 1.4681, 1.458, 1.458),
    maxDeltaPhiPt = cms.double(7.0),
    muons = cms.InputTag("muons1stStep"),
    nTrackIsoForEgammaSC = cms.uint32(2),
    pf_electronID_crackCorrection = cms.bool(False),
    minHFCleaningPt = cms.double(5.0),
    calibHF_b_HADonly = cms.vdouble(1.27541, 0.85361, 0.86333, 0.89091, 0.94348, 
        0.94348, 0.9437, 1.0034, 1.0444, 1.0444),
    pf_nsigma_HCAL = cms.double(1.0),
    calibPFSCEle_Fbrem_barrel = cms.vdouble(0.6, 6, -0.0255975, 0.0576727, 0.975442, 
        -0.000546394, 1.26147, 25, -0.02025, 0.04537, 
        0.9728, -0.0008962, 1.172),
    blocks = cms.InputTag("particleFlowBlock"),
    muon_HCAL = cms.vdouble(3.0, 3.0),
    pf_electron_mvaCut = cms.double(-0.1),
    useEGammaElectrons = cms.bool(True),
    useHO = cms.bool(True),
    sumEtEcalIsoForEgammaSC_endcap = cms.double(2.0),
    nsigma_TRACK = cms.double(1.0),
    pf_electron_output_col = cms.string('electrons'),
    dptRel_DispVtx = cms.double(10.0),
    usePFMuonMomAssign = cms.bool(False),
    useVerticesForNeutral = cms.bool(True),
    pf_conv_mvaCut = cms.double(0.0),
    usePhotonReg = cms.bool(False),
    pf_Res_mvaWeightFile = cms.string('RecoParticleFlow/PFProducer/data/TMVARegression_BDTG_PFRes_14Dec2011.root'),
    usePFDecays = cms.bool(False),
    sumPtTrackIsoSlopeForPhoton = cms.double(0.001),
    calibHF_b_EMHAD = cms.vdouble(1.27541, 0.85361, 0.86333, 0.89091, 0.94348, 
        0.94348, 0.9437, 1.0034, 1.0444, 1.0444),
    rejectTracks_Step45 = cms.bool(True),
    pf_GlobC_mvaWeightFile = cms.string('RecoParticleFlow/PFProducer/data/TMVARegression_BDTG_PFGlobalCorr_14Dec2011.root'),
    pf_locC_mvaWeightFile = cms.string('RecoParticleFlow/PFProducer/data/TMVARegression_BDTG_PFClusterLCorr_14Dec2011.root'),
    sumEtEcalIsoForEgammaSC_barrel = cms.double(1.0),
    calibPFSCEle_Fbrem_endcap = cms.vdouble(0.9, 6.5, -0.0692932, 0.101776, 0.995338, 
        -0.00236548, 0.874998, 1.653, -0.0750184, 0.147, 
        0.923165, 0.000474665, 1.10782),
    useEGammaSupercluster = cms.bool(True),
    coneTrackIsoForEgammaSC = cms.double(0.3),
    usePFNuclearInteractions = cms.bool(True),
    pf_electronID_mvaWeightFile = cms.string('RecoParticleFlow/PFProducer/data/MVAnalysis_BDT.weights_PfElectrons23Jan_IntToFloat.txt'),
    maxSignificance = cms.double(2.5),
    minDeltaMet = cms.double(0.4),
    calibHF_a_EMHAD = cms.vdouble(1.42215, 1.00496, 0.68961, 0.81656, 0.98504, 
        0.98504, 1.00802, 1.0593, 1.4576, 1.4576),
    algoType = cms.uint32(0),
    pt_Error = cms.double(1.0),
    debug = cms.untracked.bool(False),
    X0_Map = cms.string('RecoParticleFlow/PFProducer/data/allX0histos.root'),
    muon_ECAL = cms.vdouble(0.5, 0.5),
    calibHF_eta_step = cms.vdouble(0.0, 2.9, 3.0, 3.2, 4.2, 
        4.4, 4.6, 4.8, 5.2, 5.4),
    useRegressionFromDB = cms.bool(True),
    usePFSCEleCalib = cms.bool(True)
)


process.particleFlowTmpPtrs = cms.EDProducer("PFCandidateFwdPtrProducer",
    src = cms.InputTag("particleFlowTmp")
)


process.pfAllElectronsClones = cms.EDProducer("PFCandidateProductFromFwdPtrProducer",
    src = cms.InputTag("pfAllElectrons")
)


process.pfAllMuonsClones = cms.EDProducer("PFCandidateProductFromFwdPtrProducer",
    src = cms.InputTag("pfAllMuons")
)


process.pfConversions = cms.EDProducer("PFConversionProducer",
    conversionCollection = cms.InputTag("allConversions"),
    PrimaryVertexLabel = cms.InputTag("offlinePrimaryVertices")
)


process.pfDisplacedTrackerVertex = cms.EDProducer("PFDisplacedTrackerVertexProducer",
    trackColl = cms.InputTag("generalTracks"),
    displacedTrackerVertexColl = cms.InputTag("particleFlowDisplacedVertex")
)


process.pfElectronInterestingEcalDetIdEB = cms.EDProducer("InterestingDetIdCollectionProducer",
    severityLevel = cms.int32(1),
    interestingDetIdCollection = cms.string(''),
    basicClustersLabel = cms.InputTag("pfElectronTranslator","pf"),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    etaSize = cms.int32(5),
    keepNextToBoundary = cms.bool(True),
    phiSize = cms.int32(5),
    keepNextToDead = cms.bool(True)
)


process.pfElectronInterestingEcalDetIdEE = cms.EDProducer("InterestingDetIdCollectionProducer",
    severityLevel = cms.int32(1),
    interestingDetIdCollection = cms.string(''),
    basicClustersLabel = cms.InputTag("pfElectronTranslator","pf"),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    etaSize = cms.int32(5),
    keepNextToBoundary = cms.bool(True),
    phiSize = cms.int32(5),
    keepNextToDead = cms.bool(True)
)


process.pfElectronTranslator = cms.EDProducer("PFElectronTranslator",
    MVACutBlock = cms.PSet(
        MVACut = cms.double(-1.0)
    ),
    PFBasicClusters = cms.string('pf'),
    PFGsfElectronCore = cms.string('pf'),
    PFGsfElectron = cms.string('pf'),
    PFSuperClusters = cms.string('pf'),
    CheckStatusFlag = cms.bool(True),
    GSFTracks = cms.InputTag("electronGsfTracks"),
    ElectronMVA = cms.string('pf'),
    PFCandidateElectron = cms.InputTag("particleFlowTmp","electrons"),
    PFPreshowerClusters = cms.string('pf'),
    PFCandidate = cms.InputTag("pfSelectedElectrons"),
    isolationValues = cms.PSet(
        pfNeutralHadrons = cms.InputTag("elPFIsoValueNeutral04PFId"),
        pfChargedHadrons = cms.InputTag("elPFIsoValueCharged04PFId"),
        pfPhotons = cms.InputTag("elPFIsoValueGamma04PFId")
    ),
    ElectronSC = cms.string('pf')
)


process.pfJetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    jets = cms.InputTag("ak5PFJets")
)


process.pfJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("pfNoElectronJME"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.pfJetsEI = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(True),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('AntiKt'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("pfNoElectronJME"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.pfJetsLegacyHPSPiZeros = cms.EDProducer("RecoTauPiZeroProducer",
    massHypothesis = cms.double(0.136),
    ranking = cms.VPSet(cms.PSet(
        selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
        selection = cms.string('algoIs("kStrips")'),
        name = cms.string('InStrip'),
        plugin = cms.string('RecoTauPiZeroStringQuality'),
        selectionFailValue = cms.double(1000)
    )),
    jetRegionSrc = cms.InputTag("pfTauPFJets08Region"),
    outputSelection = cms.string('pt > 0'),
    jetSrc = cms.InputTag("ak5PFJets"),
    builders = cms.VPSet(cms.PSet(
        name = cms.string('s'),
        stripPhiAssociationDistance = cms.double(0.2),
        plugin = cms.string('RecoTauPiZeroStripPlugin2'),
        minGammaEtStripAdd = cms.double(0.0),
        minGammaEtStripSeed = cms.double(0.5),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        maxStripBuildIterations = cms.int32(-1),
        updateStripAfterEachDaughter = cms.bool(False),
        makeCombinatoricStrips = cms.bool(False),
        applyElecTrackQcuts = cms.bool(False),
        stripCandidatesParticleIds = cms.vint32(2, 4),
        minStripEt = cms.double(1.0),
        stripEtaAssociationDistance = cms.double(0.05)
    ))
)


process.pfJetsLegacyTaNCPiZeros = cms.EDProducer("RecoTauPiZeroProducer",
    massHypothesis = cms.double(0.136),
    ranking = cms.VPSet(cms.PSet(
        selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
        selection = cms.string('mass() < 0.2'),
        name = cms.string('PFTDM'),
        plugin = cms.string('RecoTauPiZeroStringQuality'),
        selectionFailValue = cms.double(1000)
    )),
    jetRegionSrc = cms.InputTag("pfTauPFJets08Region"),
    outputSelection = cms.string('pt > 1.5'),
    jetSrc = cms.InputTag("ak5PFJets"),
    builders = cms.VPSet(cms.PSet(
        plugin = cms.string('RecoTauPiZeroTrivialPlugin'),
        name = cms.string('1'),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        )
    ), 
        cms.PSet(
            maxMass = cms.double(-1.0),
            plugin = cms.string('RecoTauPiZeroCombinatoricPlugin'),
            minMass = cms.double(0.0),
            qualityCuts = cms.PSet(
                isolationQualityCuts = cms.PSet(
                    minTrackHits = cms.uint32(8),
                    minTrackVertexWeight = cms.double(-1),
                    minTrackPt = cms.double(1.0),
                    maxTrackChi2 = cms.double(100.0),
                    minTrackPixelHits = cms.uint32(0),
                    minGammaEt = cms.double(1.5),
                    maxDeltaZ = cms.double(0.2),
                    maxTransverseImpactParameter = cms.double(0.03)
                ),
                pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
                primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
                signalQualityCuts = cms.PSet(
                    minTrackHits = cms.uint32(3),
                    minTrackVertexWeight = cms.double(-1),
                    minTrackPt = cms.double(0.5),
                    maxTrackChi2 = cms.double(100.0),
                    minTrackPixelHits = cms.uint32(0),
                    minGammaEt = cms.double(0.5),
                    maxDeltaZ = cms.double(0.2),
                    maxTransverseImpactParameter = cms.double(0.03)
                )
            ),
            choose = cms.uint32(2),
            maxInputGammas = cms.uint32(10),
            name = cms.string('2')
        ))
)


process.pfJetsPiZeros = cms.EDProducer("RecoTauPiZeroProducer",
    massHypothesis = cms.double(0.136),
    ranking = cms.VPSet(cms.PSet(
        selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
        selection = cms.string('abs(eta()) < 1.5 & abs(mass() - 0.13579) < 0.05'),
        name = cms.string('nearPiZeroMass'),
        plugin = cms.string('RecoTauPiZeroStringQuality'),
        selectionFailValue = cms.double(1000)
    ), 
        cms.PSet(
            selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
            selection = cms.string('abs(eta()) > 1.5 & mass() < 0.2'),
            name = cms.string('nearPiZeroMass'),
            plugin = cms.string('RecoTauPiZeroStringQuality'),
            selectionFailValue = cms.double(1000)
        ), 
        cms.PSet(
            selectionPassFunction = cms.string('abs(mass() - 0.13579)'),
            selection = cms.string('algoIs("kStrips")'),
            name = cms.string('InStrip'),
            plugin = cms.string('RecoTauPiZeroStringQuality'),
            selectionFailValue = cms.double(1000)
        )),
    jetRegionSrc = cms.InputTag("pfTauPFJets08Region"),
    outputSelection = cms.string('pt > 1.5'),
    jetSrc = cms.InputTag("ak5PFJets"),
    builders = cms.VPSet(cms.PSet(
        maxMass = cms.double(-1.0),
        plugin = cms.string('RecoTauPiZeroCombinatoricPlugin'),
        minMass = cms.double(0.0),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        choose = cms.uint32(2),
        maxInputGammas = cms.uint32(10),
        name = cms.string('2')
    ), 
        cms.PSet(
            name = cms.string('s'),
            stripPhiAssociationDistance = cms.double(0.2),
            plugin = cms.string('RecoTauPiZeroStripPlugin2'),
            minGammaEtStripAdd = cms.double(0.0),
            minGammaEtStripSeed = cms.double(0.5),
            qualityCuts = cms.PSet(
                isolationQualityCuts = cms.PSet(
                    minTrackHits = cms.uint32(8),
                    minTrackVertexWeight = cms.double(-1),
                    minTrackPt = cms.double(1.0),
                    maxTrackChi2 = cms.double(100.0),
                    minTrackPixelHits = cms.uint32(0),
                    minGammaEt = cms.double(1.5),
                    maxDeltaZ = cms.double(0.2),
                    maxTransverseImpactParameter = cms.double(0.03)
                ),
                pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
                primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
                signalQualityCuts = cms.PSet(
                    minTrackHits = cms.uint32(3),
                    minTrackVertexWeight = cms.double(-1),
                    minTrackPt = cms.double(0.5),
                    maxTrackChi2 = cms.double(100.0),
                    minTrackPixelHits = cms.uint32(0),
                    minGammaEt = cms.double(0.5),
                    maxDeltaZ = cms.double(0.2),
                    maxTransverseImpactParameter = cms.double(0.03)
                )
            ),
            maxStripBuildIterations = cms.int32(-1),
            updateStripAfterEachDaughter = cms.bool(False),
            makeCombinatoricStrips = cms.bool(False),
            applyElecTrackQcuts = cms.bool(False),
            stripCandidatesParticleIds = cms.vint32(2, 4),
            minStripEt = cms.double(1.0),
            stripEtaAssociationDistance = cms.double(0.05)
        ))
)


process.pfJetsPtrs = cms.EDProducer("PFJetFwdPtrProducer",
    src = cms.InputTag("pfJets")
)


process.pfJetsPtrsEI = cms.EDProducer("PFJetFwdPtrProducer",
    src = cms.InputTag("pfJetsEI")
)


process.pfMET = cms.EDProducer("METProducer",
    HB_EtResPar = cms.vdouble(0.0, 1.22, 0.05),
    EE_PhiResPar = cms.vdouble(0.02511),
    jdphi3 = cms.vdouble(0.042, 0.043, 0.044, 0.043, 0.041, 
        0.039, 0.039, 0.036, 0.034, 0.031),
    jdpt9 = cms.vdouble(0.843, 0.885, 1.245, 1.665, 1.944, 
        1.981, 1.972, 2.875, 3.923, 7.51),
    jdpt8 = cms.vdouble(0.889, 0.939, 1.166, 1.365, 1.553, 
        1.805, 2.06, 2.22, 2.268, 2.247),
    jdpt7 = cms.vdouble(1.094, 1.139, 1.436, 1.672, 1.831, 
        2.05, 2.267, 2.549, 2.785, 2.86),
    jdpt6 = cms.vdouble(1.213, 1.298, 1.716, 2.015, 2.191, 
        2.612, 2.863, 2.879, 2.925, 2.902),
    jdpt5 = cms.vdouble(1.049, 1.149, 1.607, 1.869, 2.012, 
        2.219, 2.289, 2.412, 2.695, 2.865),
    jdpt4 = cms.vdouble(0.85, 0.961, 1.337, 1.593, 1.854, 
        2.005, 2.209, 2.533, 2.812, 3.047),
    jdpt3 = cms.vdouble(0.929, 1.04, 1.46, 1.74, 2.042, 
        2.289, 2.639, 2.837, 2.946, 2.971),
    jdpt2 = cms.vdouble(0.841, 0.937, 1.316, 1.605, 1.919, 
        2.295, 2.562, 2.722, 2.943, 3.293),
    jdpt1 = cms.vdouble(0.718, 0.813, 1.133, 1.384, 1.588, 
        1.841, 2.115, 2.379, 2.508, 2.772),
    jdpt0 = cms.vdouble(0.749, 0.829, 1.099, 1.355, 1.584, 
        1.807, 2.035, 2.217, 2.378, 2.591),
    HE_EtResPar = cms.vdouble(0.0, 1.3, 0.05),
    alias = cms.string('pfMET'),
    HF_PhiResPar = cms.vdouble(0.05022),
    PF_PhiResType7 = cms.vdouble(0.02511),
    HE_PhiResPar = cms.vdouble(0.02511),
    EE_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    noHF = cms.bool(False),
    PF_PhiResType2 = cms.vdouble(0.002),
    PF_PhiResType3 = cms.vdouble(0.002),
    HF_EtResPar = cms.vdouble(0.0, 1.82, 0.09),
    resolutionsEra = cms.string('Spring10'),
    PF_PhiResType6 = cms.vdouble(0.02511),
    InputType = cms.string('PFCandidateCollection'),
    PF_PhiResType4 = cms.vdouble(0.0028, 0.0, 0.0022),
    PF_PhiResType5 = cms.vdouble(0.1, 0.1, 0.13),
    ptresolthreshold = cms.double(10.0),
    METType = cms.string('PFMET'),
    HO_EtResPar = cms.vdouble(0.0, 1.3, 0.005),
    EB_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    jdphi8 = cms.vdouble(0.059, 0.057, 0.051, 0.044, 0.038, 
        0.035, 0.037, 0.032, 0.028, 0.028),
    globalThreshold = cms.double(0.0),
    jets = cms.InputTag("pfJets"),
    EB_PhiResPar = cms.vdouble(0.00502),
    src = cms.InputTag("particleFlow"),
    jdphi9 = cms.vdouble(0.062, 0.059, 0.053, 0.047, 0.042, 
        0.045, 0.036, 0.032, 0.034, 0.044),
    resolutionsAlgo = cms.string('AK5PF'),
    jdphi4 = cms.vdouble(0.042, 0.042, 0.043, 0.042, 0.038, 
        0.036, 0.036, 0.033, 0.031, 0.031),
    HO_PhiResPar = cms.vdouble(0.02511),
    jdphi2 = cms.vdouble(0.04, 0.04, 0.04, 0.04, 0.04, 
        0.038, 0.036, 0.035, 0.034, 0.033),
    jdphi1 = cms.vdouble(0.034, 0.035, 0.035, 0.035, 0.035, 
        0.034, 0.031, 0.03, 0.029, 0.027),
    jdphi0 = cms.vdouble(0.034, 0.034, 0.034, 0.034, 0.032, 
        0.031, 0.028, 0.027, 0.027, 0.027),
    jdphi7 = cms.vdouble(0.077, 0.072, 0.059, 0.05, 0.045, 
        0.042, 0.039, 0.039, 0.037, 0.031),
    jdphi6 = cms.vdouble(0.084, 0.08, 0.072, 0.065, 0.066, 
        0.06, 0.051, 0.049, 0.045, 0.045),
    jdphi5 = cms.vdouble(0.069, 0.069, 0.064, 0.058, 0.053, 
        0.049, 0.049, 0.043, 0.039, 0.04),
    HB_PhiResPar = cms.vdouble(0.02511),
    PF_PhiResType1 = cms.vdouble(0.002),
    PF_EtResType5 = cms.vdouble(0.41, 0.52, 0.25),
    PF_EtResType4 = cms.vdouble(0.042, 0.1, 0.0),
    PF_EtResType7 = cms.vdouble(0.0, 1.22, 0.05),
    PF_EtResType6 = cms.vdouble(0.0, 1.22, 0.05),
    PF_EtResType1 = cms.vdouble(0.05, 0, 0),
    calculateSignificance = cms.bool(True),
    PF_EtResType3 = cms.vdouble(0.05, 0, 0),
    PF_EtResType2 = cms.vdouble(0.05, 0, 0)
)


process.pfMet = cms.EDProducer("METProducer",
    resolutionsEra = cms.string('Spring10'),
    PF_EtResType6 = cms.vdouble(0.0, 1.22, 0.05),
    HB_EtResPar = cms.vdouble(0.0, 1.22, 0.05),
    jdphi6 = cms.vdouble(0.084, 0.08, 0.072, 0.065, 0.066, 
        0.06, 0.051, 0.049, 0.045, 0.045),
    jdphi3 = cms.vdouble(0.042, 0.043, 0.044, 0.043, 0.041, 
        0.039, 0.039, 0.036, 0.034, 0.031),
    jdpt9 = cms.vdouble(0.843, 0.885, 1.245, 1.665, 1.944, 
        1.981, 1.972, 2.875, 3.923, 7.51),
    jdpt8 = cms.vdouble(0.889, 0.939, 1.166, 1.365, 1.553, 
        1.805, 2.06, 2.22, 2.268, 2.247),
    jdpt7 = cms.vdouble(1.094, 1.139, 1.436, 1.672, 1.831, 
        2.05, 2.267, 2.549, 2.785, 2.86),
    jdpt6 = cms.vdouble(1.213, 1.298, 1.716, 2.015, 2.191, 
        2.612, 2.863, 2.879, 2.925, 2.902),
    jdpt5 = cms.vdouble(1.049, 1.149, 1.607, 1.869, 2.012, 
        2.219, 2.289, 2.412, 2.695, 2.865),
    jdpt4 = cms.vdouble(0.85, 0.961, 1.337, 1.593, 1.854, 
        2.005, 2.209, 2.533, 2.812, 3.047),
    jdpt3 = cms.vdouble(0.929, 1.04, 1.46, 1.74, 2.042, 
        2.289, 2.639, 2.837, 2.946, 2.971),
    jdpt2 = cms.vdouble(0.841, 0.937, 1.316, 1.605, 1.919, 
        2.295, 2.562, 2.722, 2.943, 3.293),
    EE_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    jdpt0 = cms.vdouble(0.749, 0.829, 1.099, 1.355, 1.584, 
        1.807, 2.035, 2.217, 2.378, 2.591),
    HF_PhiResPar = cms.vdouble(0.05022),
    HE_PhiResPar = cms.vdouble(0.02511),
    jdpt1 = cms.vdouble(0.718, 0.813, 1.133, 1.384, 1.588, 
        1.841, 2.115, 2.379, 2.508, 2.772),
    PF_PhiResType2 = cms.vdouble(0.002),
    PF_PhiResType3 = cms.vdouble(0.002),
    HF_EtResPar = cms.vdouble(0.0, 1.82, 0.09),
    resolutionsAlgo = cms.string('AK5PF'),
    PF_PhiResType6 = cms.vdouble(0.02511),
    PF_PhiResType7 = cms.vdouble(0.02511),
    PF_PhiResType4 = cms.vdouble(0.0028, 0.0, 0.0022),
    PF_PhiResType5 = cms.vdouble(0.1, 0.1, 0.13),
    ptresolthreshold = cms.double(10.0),
    HO_EtResPar = cms.vdouble(0.0, 1.3, 0.005),
    EB_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    EB_PhiResPar = cms.vdouble(0.00502),
    jdphi9 = cms.vdouble(0.062, 0.059, 0.053, 0.047, 0.042, 
        0.045, 0.036, 0.032, 0.034, 0.044),
    jdphi8 = cms.vdouble(0.059, 0.057, 0.051, 0.044, 0.038, 
        0.035, 0.037, 0.032, 0.028, 0.028),
    jdphi4 = cms.vdouble(0.042, 0.042, 0.043, 0.042, 0.038, 
        0.036, 0.036, 0.033, 0.031, 0.031),
    HO_PhiResPar = cms.vdouble(0.02511),
    jdphi2 = cms.vdouble(0.04, 0.04, 0.04, 0.04, 0.04, 
        0.038, 0.036, 0.035, 0.034, 0.033),
    jdphi1 = cms.vdouble(0.034, 0.035, 0.035, 0.035, 0.035, 
        0.034, 0.031, 0.03, 0.029, 0.027),
    jdphi0 = cms.vdouble(0.034, 0.034, 0.034, 0.034, 0.032, 
        0.031, 0.028, 0.027, 0.027, 0.027),
    jdphi7 = cms.vdouble(0.077, 0.072, 0.059, 0.05, 0.045, 
        0.042, 0.039, 0.039, 0.037, 0.031),
    EE_PhiResPar = cms.vdouble(0.02511),
    jdphi5 = cms.vdouble(0.069, 0.069, 0.064, 0.058, 0.053, 
        0.049, 0.049, 0.043, 0.039, 0.04),
    HB_PhiResPar = cms.vdouble(0.02511),
    PF_PhiResType1 = cms.vdouble(0.002),
    PF_EtResType5 = cms.vdouble(0.41, 0.52, 0.25),
    PF_EtResType4 = cms.vdouble(0.042, 0.1, 0.0),
    PF_EtResType7 = cms.vdouble(0.0, 1.22, 0.05),
    HE_EtResPar = cms.vdouble(0.0, 1.3, 0.05),
    PF_EtResType1 = cms.vdouble(0.05, 0, 0),
    PF_EtResType3 = cms.vdouble(0.05, 0, 0),
    PF_EtResType2 = cms.vdouble(0.05, 0, 0),
    src = cms.InputTag("particleFlow"),
    METType = cms.string('PFMET'),
    calculateSignificance = cms.bool(True),
    alias = cms.string('PFMET'),
    noHF = cms.bool(False),
    jets = cms.InputTag("ak5PFJets"),
    globalThreshold = cms.double(0.0),
    InputType = cms.string('PFCandidateCollection')
)


process.pfMetEI = cms.EDProducer("METProducer",
    resolutionsEra = cms.string('Spring10'),
    PF_EtResType6 = cms.vdouble(0.0, 1.22, 0.05),
    HB_EtResPar = cms.vdouble(0.0, 1.22, 0.05),
    jdphi6 = cms.vdouble(0.084, 0.08, 0.072, 0.065, 0.066, 
        0.06, 0.051, 0.049, 0.045, 0.045),
    jdphi3 = cms.vdouble(0.042, 0.043, 0.044, 0.043, 0.041, 
        0.039, 0.039, 0.036, 0.034, 0.031),
    jdpt9 = cms.vdouble(0.843, 0.885, 1.245, 1.665, 1.944, 
        1.981, 1.972, 2.875, 3.923, 7.51),
    jdpt8 = cms.vdouble(0.889, 0.939, 1.166, 1.365, 1.553, 
        1.805, 2.06, 2.22, 2.268, 2.247),
    jdpt7 = cms.vdouble(1.094, 1.139, 1.436, 1.672, 1.831, 
        2.05, 2.267, 2.549, 2.785, 2.86),
    jdpt6 = cms.vdouble(1.213, 1.298, 1.716, 2.015, 2.191, 
        2.612, 2.863, 2.879, 2.925, 2.902),
    jdpt5 = cms.vdouble(1.049, 1.149, 1.607, 1.869, 2.012, 
        2.219, 2.289, 2.412, 2.695, 2.865),
    jdpt4 = cms.vdouble(0.85, 0.961, 1.337, 1.593, 1.854, 
        2.005, 2.209, 2.533, 2.812, 3.047),
    jdpt3 = cms.vdouble(0.929, 1.04, 1.46, 1.74, 2.042, 
        2.289, 2.639, 2.837, 2.946, 2.971),
    jdpt2 = cms.vdouble(0.841, 0.937, 1.316, 1.605, 1.919, 
        2.295, 2.562, 2.722, 2.943, 3.293),
    EE_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    jdpt0 = cms.vdouble(0.749, 0.829, 1.099, 1.355, 1.584, 
        1.807, 2.035, 2.217, 2.378, 2.591),
    HF_PhiResPar = cms.vdouble(0.05022),
    InputType = cms.string('PFCandidateCollection'),
    HE_PhiResPar = cms.vdouble(0.02511),
    jdpt1 = cms.vdouble(0.718, 0.813, 1.133, 1.384, 1.588, 
        1.841, 2.115, 2.379, 2.508, 2.772),
    noHF = cms.bool(False),
    PF_PhiResType2 = cms.vdouble(0.002),
    PF_PhiResType3 = cms.vdouble(0.002),
    HF_EtResPar = cms.vdouble(0.0, 1.82, 0.09),
    resolutionsAlgo = cms.string('AK5PF'),
    PF_PhiResType6 = cms.vdouble(0.02511),
    HB_PhiResPar = cms.vdouble(0.02511),
    PF_PhiResType4 = cms.vdouble(0.0028, 0.0, 0.0022),
    PF_PhiResType5 = cms.vdouble(0.1, 0.1, 0.13),
    ptresolthreshold = cms.double(10.0),
    METType = cms.string('PFMET'),
    HO_EtResPar = cms.vdouble(0.0, 1.3, 0.005),
    EB_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    PF_PhiResType1 = cms.vdouble(0.002),
    PF_EtResType4 = cms.vdouble(0.042, 0.1, 0.0),
    jets = cms.InputTag("pfJetsEI"),
    EB_PhiResPar = cms.vdouble(0.00502),
    src = cms.InputTag("particleFlow"),
    jdphi9 = cms.vdouble(0.062, 0.059, 0.053, 0.047, 0.042, 
        0.045, 0.036, 0.032, 0.034, 0.044),
    jdphi8 = cms.vdouble(0.059, 0.057, 0.051, 0.044, 0.038, 
        0.035, 0.037, 0.032, 0.028, 0.028),
    jdphi4 = cms.vdouble(0.042, 0.042, 0.043, 0.042, 0.038, 
        0.036, 0.036, 0.033, 0.031, 0.031),
    HO_PhiResPar = cms.vdouble(0.02511),
    jdphi2 = cms.vdouble(0.04, 0.04, 0.04, 0.04, 0.04, 
        0.038, 0.036, 0.035, 0.034, 0.033),
    jdphi1 = cms.vdouble(0.034, 0.035, 0.035, 0.035, 0.035, 
        0.034, 0.031, 0.03, 0.029, 0.027),
    jdphi0 = cms.vdouble(0.034, 0.034, 0.034, 0.034, 0.032, 
        0.031, 0.028, 0.027, 0.027, 0.027),
    jdphi7 = cms.vdouble(0.077, 0.072, 0.059, 0.05, 0.045, 
        0.042, 0.039, 0.039, 0.037, 0.031),
    EE_PhiResPar = cms.vdouble(0.02511),
    jdphi5 = cms.vdouble(0.069, 0.069, 0.064, 0.058, 0.053, 
        0.049, 0.049, 0.043, 0.039, 0.04),
    PF_PhiResType7 = cms.vdouble(0.02511),
    alias = cms.string('pfMET'),
    PF_EtResType5 = cms.vdouble(0.41, 0.52, 0.25),
    globalThreshold = cms.double(0.0),
    PF_EtResType7 = cms.vdouble(0.0, 1.22, 0.05),
    HE_EtResPar = cms.vdouble(0.0, 1.3, 0.05),
    PF_EtResType1 = cms.vdouble(0.05, 0, 0),
    calculateSignificance = cms.bool(True),
    PF_EtResType3 = cms.vdouble(0.05, 0, 0),
    PF_EtResType2 = cms.vdouble(0.05, 0, 0)
)


process.pfNoElectron = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("pfNoMuon"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("pfIsolatedElectronsEI"),
    name = cms.untracked.string('noElectron'),
    verbose = cms.untracked.bool(False)
)


process.pfNoElectronJME = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("pfNoMuonJME"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("pfIsolatedElectronsEI"),
    name = cms.untracked.string('noElectron'),
    verbose = cms.untracked.bool(False)
)


process.pfNoElectronJMEClones = cms.EDProducer("PFCandidateFromFwdPtrProducer",
    src = cms.InputTag("pfNoElectronJME")
)


process.pfNoJet = cms.EDProducer("TPPFJetsOnPFCandidates",
    bottomCollection = cms.InputTag("pfNoElectronJME"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("pfJetsPtrs"),
    name = cms.untracked.string('noJet'),
    verbose = cms.untracked.bool(False)
)


process.pfNoJetEI = cms.EDProducer("TPPFJetsOnPFCandidates",
    bottomCollection = cms.InputTag("pfNoElectronJME"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("pfJetsPtrsEI"),
    name = cms.untracked.string('noJet'),
    verbose = cms.untracked.bool(False)
)


process.pfNoMuon = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("pfNoPileUpEI"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("pfIsolatedMuonsEI"),
    name = cms.untracked.string('noMuon'),
    verbose = cms.untracked.bool(False)
)


process.pfNoMuonJME = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("pfNoPileUpJMEEI"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("pfIsolatedMuonsEI"),
    name = cms.untracked.string('noMuon'),
    verbose = cms.untracked.bool(False)
)


process.pfNoPileUp = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("particleFlowTmpPtrs"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("pfPileUp"),
    name = cms.untracked.string('pileUpOnPFCandidates'),
    verbose = cms.untracked.bool(False)
)


process.pfNoPileUpEI = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("particleFlowPtrs"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("pfPileUpEI"),
    name = cms.untracked.string('pileUpOnPFCandidates'),
    verbose = cms.untracked.bool(False)
)


process.pfNoPileUpIso = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("particleFlowTmpPtrs"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("pfPileUpIso"),
    name = cms.untracked.string('pileUpOnPFCandidates'),
    verbose = cms.untracked.bool(False)
)


process.pfNoPileUpJME = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("particleFlowPtrs"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("pfPileUpJME"),
    name = cms.untracked.string('pileUpOnPFCandidates'),
    verbose = cms.untracked.bool(False)
)


process.pfNoPileUpJMEEI = cms.EDProducer("TPPFCandidatesOnPFCandidates",
    bottomCollection = cms.InputTag("particleFlowPtrs"),
    enable = cms.bool(True),
    topCollection = cms.InputTag("pfPileUpJMEEI"),
    name = cms.untracked.string('pileUpOnPFCandidates'),
    verbose = cms.untracked.bool(False)
)


process.pfNoTau = cms.EDProducer("TPPFTausOnPFJetsDeltaR",
    deltaR = cms.double(0.5),
    enable = cms.bool(True),
    name = cms.untracked.string('noTau'),
    bottomCollection = cms.InputTag("pfJetsPtrs"),
    topCollection = cms.InputTag("pfTausPtrs"),
    verbose = cms.untracked.bool(False)
)


process.pfNoTauEI = cms.EDProducer("TPPFTausOnPFJetsDeltaR",
    deltaR = cms.double(0.5),
    enable = cms.bool(True),
    name = cms.untracked.string('noTau'),
    bottomCollection = cms.InputTag("pfJetsPtrsEI"),
    topCollection = cms.InputTag("pfTausPtrsEI"),
    verbose = cms.untracked.bool(False)
)


process.pfNuclear = cms.EDProducer("PFNuclearProducer",
    likelihoodCut = cms.double(0.1),
    nuclearColList = cms.VInputTag(cms.InputTag("firstnuclearInteractionMaker"))
)


process.pfPhotonInterestingEcalDetIdEB = cms.EDProducer("InterestingDetIdCollectionProducer",
    severityLevel = cms.int32(1),
    interestingDetIdCollection = cms.string(''),
    basicClustersLabel = cms.InputTag("pfPhotonTranslator","pfphot"),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    etaSize = cms.int32(5),
    keepNextToBoundary = cms.bool(True),
    phiSize = cms.int32(5),
    keepNextToDead = cms.bool(True)
)


process.pfPhotonInterestingEcalDetIdEE = cms.EDProducer("InterestingDetIdCollectionProducer",
    severityLevel = cms.int32(1),
    interestingDetIdCollection = cms.string(''),
    basicClustersLabel = cms.InputTag("pfPhotonTranslator","pfphot"),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    etaSize = cms.int32(5),
    keepNextToBoundary = cms.bool(True),
    phiSize = cms.int32(5),
    keepNextToDead = cms.bool(True)
)


process.pfPhotonTranslator = cms.EDProducer("PFPhotonTranslator",
    hcalTowers = cms.InputTag("towerMaker"),
    PFBasicClusters = cms.string('pfphot'),
    endcapEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    EGPhotons = cms.string('photons'),
    PFSuperClusters = cms.string('pfphot'),
    PFConversionCollection = cms.string('pfphot'),
    PFPhotonCores = cms.string('pfphot'),
    PFPhotons = cms.string('pfphot'),
    primaryVertexProducer = cms.string('offlinePrimaryVerticesWithBS'),
    PFPreshowerClusters = cms.string('pfphot'),
    PFCandidate = cms.InputTag("pfSelectedPhotons"),
    hOverEConeSize = cms.double(0.15),
    isolationValues = cms.PSet(
        pfNeutralHadrons = cms.InputTag("phPFIsoValueNeutral04PFId"),
        pfChargedHadrons = cms.InputTag("phPFIsoValueCharged04PFId"),
        pfPhotons = cms.InputTag("phPFIsoValueGamma04PFId")
    ),
    barrelEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEB")
)


process.pfPileUp = cms.EDProducer("PFPileUp",
    PFCandidates = cms.InputTag("particleFlowTmpPtrs"),
    Enable = cms.bool(True),
    checkClosestZVertex = cms.bool(True),
    verbose = cms.untracked.bool(False),
    Vertices = cms.InputTag("offlinePrimaryVertices")
)


process.pfPileUpEI = cms.EDProducer("PFPileUp",
    checkClosestZVertex = cms.bool(True),
    Enable = cms.bool(True),
    PFCandidates = cms.InputTag("particleFlowPtrs"),
    verbose = cms.untracked.bool(False),
    Vertices = cms.InputTag("offlinePrimaryVertices")
)


process.pfPileUpIso = cms.EDProducer("PFPileUp",
    checkClosestZVertex = cms.bool(True),
    Enable = cms.bool(True),
    PFCandidates = cms.InputTag("particleFlowTmpPtrs"),
    verbose = cms.untracked.bool(False),
    Vertices = cms.InputTag("offlinePrimaryVertices")
)


process.pfPileUpJME = cms.EDProducer("PFPileUp",
    checkClosestZVertex = cms.bool(False),
    Enable = cms.bool(True),
    PFCandidates = cms.InputTag("particleFlowPtrs"),
    verbose = cms.untracked.bool(False),
    Vertices = cms.InputTag("goodOfflinePrimaryVertices")
)


process.pfPileUpJMEEI = cms.EDProducer("PFPileUp",
    PFCandidates = cms.InputTag("particleFlowPtrs"),
    Enable = cms.bool(True),
    checkClosestZVertex = cms.bool(False),
    verbose = cms.untracked.bool(False),
    Vertices = cms.InputTag("goodOfflinePrimaryVertices")
)


process.pfRecoTauDiscriminationAgainstCaloMuon = cms.EDProducer("PFRecoTauDiscriminationAgainstCaloMuon",
    srcHcalRecHits = cms.InputTag("hbhereco"),
    minLeadTrackPt = cms.double(15.0),
    maxEnToTrackRatio = cms.double(0.25),
    srcVertex = cms.InputTag("offlinePrimaryVertices"),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    srcEcalRecHitsBarrel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    dRhcal = cms.double(25.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    maxEnEcal = cms.double(3.0),
    maxEnHcal = cms.double(8.0),
    dRecal = cms.double(15.0),
    srcEcalRecHitsEndcap = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    minLeadTrackPtFraction = cms.double(0.8)
)


process.pfRecoTauDiscriminationAgainstElectron = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(-0.1),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    ApplyCut_BremCombined = cms.bool(False),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(False),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    BremCombined_HOP = cms.double(0.1),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.pfRecoTauDiscriminationAgainstElectronDeadECAL = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronDeadECAL",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    minStatus = cms.uint32(12),
    dR = cms.double(0.08),
    PFTauProducer = cms.InputTag("pfTauProducer")
)


process.pfRecoTauDiscriminationAgainstElectronMVA = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronMVA",
    minMVA1prongStripsWgsfEC = cms.double(0.053),
    minMVA1prongEC = cms.double(0.06),
    minMVA1prongStripsWOgsfEC = cms.double(0.049),
    returnMVA = cms.bool(False),
    inputFileName1prongStripsWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_1_1EC_BDT.weights.xml.gz'),
    inputFileName1prongEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_X_0EC_BDT.weights.xml.gz'),
    inputFileName1prongStripsWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_1_1BL_BDT.weights.xml.gz'),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    inputFileName1prongStripsWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_0_1BL_BDT.weights.xml.gz'),
    inputFileName1prongStripsWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_0_1EC_BDT.weights.xml.gz'),
    minMVA1prongBL = cms.double(0.054),
    inputFileName1prongBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v2_X_0BL_BDT.weights.xml.gz'),
    method = cms.string('BDT'),
    minMVA1prongStripsWOgsfBL = cms.double(0.054),
    minMVA1prongStripsWgsfBL = cms.double(0.06)
)


process.pfRecoTauDiscriminationAgainstElectronMVA2 = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronMVA2",
    minMVA1prongStripsWgsfWOpfEleMvaBL = cms.double(0.0),
    minMVA1prongEC = cms.double(0.0),
    inputFileName1prongNoEleMatchEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_NoEleMatch_Endcap_BDTG.weights.xml.gz'),
    minMVA1prongStripsWgsfWOpfEleMvaEC = cms.double(0.0),
    inputFileName1prongStripsWgsfWOpfEleMvaBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwoPFMVA_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongStripsWgsfWpfEleMvaEC = cms.double(0.0),
    minMVA1prongStripsWOgsfEC = cms.double(0.0),
    returnMVA = cms.bool(True),
    inputFileName1prongStripsWgsfWOpfEleMvaEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwoPFMVA_Endcap_BDTG.weights.xml.gz'),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    PFTauProducer = cms.InputTag("pfTauProducer"),
    minMVA1prongBL = cms.double(0.0),
    inputFileName1prongStripsWgsfWpfEleMvaEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwPFMVA_Endcap_BDTG.weights.xml.gz'),
    method = cms.string('BDT'),
    inputFileName1prongBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_woG_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongStripsWgsfWpfEleMvaBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwGSFwPFMVA_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongStripsWgsfWpfEleMvaBL = cms.double(0.0),
    inputFileName1prongNoEleMatchBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_NoEleMatch_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongStripsWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwoGSF_Endcap_BDTG.weights.xml.gz'),
    minMVA1prongNoEleMatchBL = cms.double(0.0),
    minMVA1prongStripsWOgsfBL = cms.double(0.0),
    minMVA1prongNoEleMatchEC = cms.double(0.0),
    inputFileName1prongStripsWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_wGwoGSF_Barrel_BDTG.weights.xml.gz'),
    srcGsfElectrons = cms.InputTag("gsfElectrons"),
    inputFileName1prongEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v5_woG_Endcap_BDTG.weights.xml.gz')
)


process.pfRecoTauDiscriminationAgainstElectronMVA3 = cms.EDProducer("PFRecoTauDiscriminationAgainstElectronMVA3",
    inputFileName1prongNoEleMatchWOgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwoGSF_Endcap_BDTG.weights.xml.gz'),
    PFTauProducer = cms.InputTag("pfTauProducer"),
    minMVA1prongNoEleMatchWgWgsfEC = cms.double(0.0),
    inputFileName1prongWOgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongWOgWOgsfBL = cms.double(0.0),
    minMVA1prongNoEleMatchWOgWOgsfEC = cms.double(0.0),
    minMVA1prongNoEleMatchWgWOgsfBL = cms.double(0.0),
    inputFileName1prongWgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwoGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongWOgWgsfEC = cms.double(0.0),
    inputFileName1prongWgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwoGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWOgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongWgWOgsfBL = cms.double(0.0),
    inputFileName1prongNoEleMatchWOgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwGSF_Endcap_BDTG.weights.xml.gz'),
    minMVA1prongNoEleMatchWgWOgsfEC = cms.double(0.0),
    minMVA1prongNoEleMatchWOgWgsfBL = cms.double(0.0),
    minMVA1prongWgWOgsfEC = cms.double(0.0),
    minMVA1prongWgWgsfBL = cms.double(0.0),
    returnMVA = cms.bool(True),
    minMVA1prongWOgWOgsfEC = cms.double(0.0),
    inputFileName1prongWOgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwoGSF_Endcap_BDTG.weights.xml.gz'),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    inputFileName1prongWgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwoGSF_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWOgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_woGwoGSF_Barrel_BDTG.weights.xml.gz'),
    inputFileName1prongNoEleMatchWgWOgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwoGSF_Endcap_BDTG.weights.xml.gz'),
    minMVA1prongWOgWgsfBL = cms.double(0.0),
    minMVA1prongWgWgsfEC = cms.double(0.0),
    minMVA1prongNoEleMatchWOgWOgsfBL = cms.double(0.0),
    inputFileName1prongNoEleMatchWgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA1prongNoEleMatchWgWgsfBL = cms.double(0.0),
    inputFileName1prongNoEleMatchWgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_NoEleMatch_wGwGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongWOgWOgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwoGSF_Barrel_BDTG.weights.xml.gz'),
    minMVA3prongNoMatch = cms.double(0.0),
    method = cms.string('BDTG'),
    minMVA1prongNoEleMatchWOgWgsfEC = cms.double(0.0),
    srcGsfElectrons = cms.InputTag("gsfElectrons"),
    minMVA3prongMatch = cms.double(0.0),
    inputFileName1prongWOgWgsfEC = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_woGwGSF_Endcap_BDTG.weights.xml.gz'),
    inputFileName1prongWgWgsfBL = cms.FileInPath('RecoTauTag/RecoTau/data/TMVAClassification_v13EleVeto_wGwGSF_Barrel_BDTG.weights.xml.gz')
)


process.pfRecoTauDiscriminationAgainstMuon = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    a = cms.double(0.5),
    c = cms.double(0.0),
    b = cms.double(0.5),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    discriminatorOption = cms.string('noSegMatch'),
    HoPMin = cms.double(0.2)
)


process.pfRecoTauDiscriminationByECALIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.pfRecoTauDiscriminationByECALIsolationUsingLeadingPion = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.pfRecoTauDiscriminationByIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    maximumOccupancy = cms.uint32(0),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.pfRecoTauDiscriminationByIsolationUsingLeadingPion = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    maximumOccupancy = cms.uint32(0),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.pfRecoTauDiscriminationByLeadingPionPtCut = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    UseOnlyChargedHadrons = cms.bool(False)
)


process.pfRecoTauDiscriminationByLeadingTrackFinding = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    UseOnlyChargedHadrons = cms.bool(True)
)


process.pfRecoTauDiscriminationByLeadingTrackPtCut = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    UseOnlyChargedHadrons = cms.bool(True)
)


process.pfRecoTauDiscriminationByMVAIsolation = cms.EDProducer("PFRecoTauDiscriminationByMVAIsolation",
    mvaMin = cms.double(0.863),
    gbrfFilePath = cms.FileInPath('RecoTauTag/RecoTau/data/gbrfTauIso.root'),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    rhoProducer = cms.InputTag("kt6PFJetsForRhoComputationVoronoi","rho"),
    returnMVA = cms.bool(True),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    )
)


process.pfRecoTauDiscriminationByTrackIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.pfRecoTauDiscriminationByTrackIsolationUsingLeadingPion = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.pfRecoTauTagInfoProducer = cms.EDProducer("PFRecoTauTagInfoProducer",
    tkminTrackerHitsn = cms.int32(3),
    PVProducer = cms.InputTag("offlinePrimaryVertices"),
    tkmaxChi2 = cms.double(100.0),
    ChargedHadrCand_AssociationCone = cms.double(0.8),
    ChargedHadrCand_tkminTrackerHitsn = cms.int32(3),
    ChargedHadrCand_tkmaxChi2 = cms.double(100.0),
    tkPVmaxDZ = cms.double(0.2),
    GammaCand_EcalclusMinEt = cms.double(0.5),
    tkminPixelHitsn = cms.int32(0),
    tkminPt = cms.double(0.5),
    PFCandidateProducer = cms.InputTag("particleFlow"),
    ChargedHadrCand_tkminPt = cms.double(0.5),
    ChargedHadrCand_tkmaxipt = cms.double(0.03),
    ChargedHadrCand_tkminPixelHitsn = cms.int32(0),
    UsePVconstraint = cms.bool(True),
    NeutrHadrCand_HcalclusMinEt = cms.double(1.0),
    PFJetTracksAssociatorProducer = cms.InputTag("ak5PFJetTracksAssociatorAtVertex"),
    smearedPVsigmaY = cms.double(0.0015),
    smearedPVsigmaX = cms.double(0.0015),
    smearedPVsigmaZ = cms.double(0.005),
    ChargedHadrCand_tkPVmaxDZ = cms.double(0.2),
    tkmaxipt = cms.double(0.03)
)


process.pfTauDecayMode = cms.EDProducer("PFRecoTauDecayModeDeterminator",
    mergeByBestMatch = cms.bool(True),
    refitTracks = cms.bool(False),
    maxPiZeroMass = cms.double(0.2),
    mergeLowPtPhotonsFirst = cms.bool(True),
    setMergedPi0Mass = cms.bool(True),
    setChargedPionMass = cms.bool(True),
    filterPhotons = cms.bool(True),
    minPtFractionSinglePhotons = cms.double(0.1),
    minPtFractionPiZeroes = cms.double(0.15),
    maxNbrOfIterations = cms.int32(10),
    filterTwoProngs = cms.bool(True),
    minPtFractionForSecondProng = cms.double(0.1),
    maxDistance = cms.double(0.01),
    setPi0Mass = cms.bool(True),
    maxPhotonsToMerge = cms.uint32(2),
    PFTauProducer = cms.InputTag("pfRecoTauProducer")
)


process.pfTauDecayModeHighEfficiency = cms.EDProducer("PFRecoTauDecayModeDeterminator",
    mergeByBestMatch = cms.bool(True),
    refitTracks = cms.bool(False),
    maxPiZeroMass = cms.double(0.2),
    mergeLowPtPhotonsFirst = cms.bool(True),
    setMergedPi0Mass = cms.bool(True),
    setChargedPionMass = cms.bool(True),
    filterPhotons = cms.bool(True),
    minPtFractionSinglePhotons = cms.double(0.1),
    minPtFractionPiZeroes = cms.double(0.15),
    maxNbrOfIterations = cms.int32(10),
    filterTwoProngs = cms.bool(True),
    minPtFractionForSecondProng = cms.double(0.1),
    maxDistance = cms.double(0.01),
    setPi0Mass = cms.bool(True),
    maxPhotonsToMerge = cms.uint32(2),
    PFTauProducer = cms.InputTag("pfRecoTauProducerHighEfficiency")
)


process.pfTauDecayModeIndexProducer = cms.EDProducer("PFRecoTauDecayModeIndexProducer",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("pfRecoTauProducer"),
    PFTauDecayModeProducer = cms.InputTag("pfRecoTauDecayModeProducer")
)


process.pfTauDecayModeInsideOut = cms.EDProducer("PFRecoTauDecayModeDeterminator",
    mergeByBestMatch = cms.bool(True),
    refitTracks = cms.bool(False),
    maxPiZeroMass = cms.double(0.2),
    mergeLowPtPhotonsFirst = cms.bool(True),
    setMergedPi0Mass = cms.bool(True),
    setChargedPionMass = cms.bool(True),
    filterPhotons = cms.bool(True),
    minPtFractionSinglePhotons = cms.double(0.1),
    minPtFractionPiZeroes = cms.double(0.15),
    maxNbrOfIterations = cms.int32(10),
    filterTwoProngs = cms.bool(True),
    minPtFractionForSecondProng = cms.double(0.1),
    maxDistance = cms.double(0.01),
    setPi0Mass = cms.bool(True),
    maxPhotonsToMerge = cms.uint32(2),
    PFTauProducer = cms.InputTag("pfRecoTauProducerInsideOut")
)


process.pfTauPFJets08Region = cms.EDProducer("RecoTauJetRegionProducer",
    src = cms.InputTag("ak5PFJets"),
    deltaR = cms.double(0.8),
    pfSrc = cms.InputTag("particleFlow")
)


process.pfTauTagInfoProducer = cms.EDProducer("PFRecoTauTagInfoProducer",
    tkminTrackerHitsn = cms.int32(3),
    tkminPt = cms.double(0.5),
    tkmaxChi2 = cms.double(100.0),
    ChargedHadrCand_AssociationCone = cms.double(0.8),
    ChargedHadrCand_tkminTrackerHitsn = cms.int32(3),
    ChargedHadrCand_tkmaxChi2 = cms.double(100.0),
    tkPVmaxDZ = cms.double(0.2),
    GammaCand_EcalclusMinEt = cms.double(0.5),
    tkminPixelHitsn = cms.int32(0),
    PVProducer = cms.InputTag("offlinePrimaryVertices"),
    PFCandidateProducer = cms.InputTag("particleFlow"),
    ChargedHadrCand_tkminPt = cms.double(0.5),
    ChargedHadrCand_tkmaxipt = cms.double(0.03),
    ChargedHadrCand_tkminPixelHitsn = cms.int32(0),
    UsePVconstraint = cms.bool(True),
    NeutrHadrCand_HcalclusMinEt = cms.double(1.0),
    PFJetTracksAssociatorProducer = cms.InputTag("pfJetTracksAssociatorAtVertex"),
    smearedPVsigmaY = cms.double(0.0015),
    smearedPVsigmaX = cms.double(0.0015),
    smearedPVsigmaZ = cms.double(0.005),
    ChargedHadrCand_tkPVmaxDZ = cms.double(0.2),
    tkmaxipt = cms.double(0.03)
)


process.pfTausDiscriminationByIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("pfTausProducer"),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    applyDeltaBetaCorrection = cms.bool(False),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("pfTausDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    maximumOccupancy = cms.uint32(0),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.pfTausDiscriminationByLeadingPionPtCut = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    UseOnlyChargedHadrons = cms.bool(False),
    PFTauProducer = cms.InputTag("pfTausProducer")
)


process.pfTausDiscriminationByLeadingTrackFinding = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    UseOnlyChargedHadrons = cms.bool(True),
    PFTauProducer = cms.InputTag("pfTausProducer")
)


process.pfTausProducer = cms.EDProducer("RecoTauPiZeroUnembedder",
    src = cms.InputTag("pfTausProducerSansRefs"),
    piZeroSrc = cms.InputTag("pfJetsLegacyTaNCPiZeros"),
    modifiers = cms.VPSet(cms.PSet(
        ElectronPreIDProducer = cms.InputTag("elecpreid"),
        name = cms.string('shrinkingConeElectronRej'),
        plugin = cms.string('RecoTauElectronRejectionPlugin'),
        DataType = cms.string('AOD'),
        maximumForElectrionPreIDOutput = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
        EcalStripSumE_minClusEnergy = cms.double(0.1),
        ElecPreIDLeadTkMatch_maxDR = cms.double(0.01),
        EcalStripSumE_deltaEta = cms.double(0.03)
    ), 
        cms.PSet(
            pfTauTagInfoSrc = cms.InputTag("pfTauTagInfoProducer"),
            name = cms.string('pfTauTTIworkaround'),
            plugin = cms.string('RecoTauTagInfoWorkaroundModifer')
        )),
    builders = cms.VPSet(cms.PSet(
        usePFLeptons = cms.bool(True),
        signalConeNeutralHadrons = cms.string('0.15'),
        name = cms.string('shrinkingCone'),
        plugin = cms.string('RecoTauBuilderConePlugin'),
        isoConeChargedHadrons = cms.string('0.5'),
        isoConePiZeros = cms.string('0.5'),
        isoConeNeutralHadrons = cms.string('0.5'),
        matchingCone = cms.string('0.1'),
        signalConeChargedHadrons = cms.string('min(max(5.0/et(), 0.07), 0.15)'),
        leadObjectPt = cms.double(5.0),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        signalConePiZeros = cms.string('0.15'),
        pfCandSrc = cms.InputTag("particleFlow")
    )),
    jetSrc = cms.InputTag("ak5PFJets"),
    jetRegionSrc = cms.InputTag("pfTauPFJets08Region")
)


process.pfTausProducerSansRefs = cms.EDProducer("RecoTauProducer",
    piZeroSrc = cms.InputTag("pfJetsLegacyTaNCPiZeros"),
    modifiers = cms.VPSet(cms.PSet(
        ElectronPreIDProducer = cms.InputTag("elecpreid"),
        name = cms.string('shrinkingConeElectronRej'),
        plugin = cms.string('RecoTauElectronRejectionPlugin'),
        DataType = cms.string('AOD'),
        maximumForElectrionPreIDOutput = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
        EcalStripSumE_minClusEnergy = cms.double(0.1),
        ElecPreIDLeadTkMatch_maxDR = cms.double(0.01),
        EcalStripSumE_deltaEta = cms.double(0.03)
    ), 
        cms.PSet(
            pfTauTagInfoSrc = cms.InputTag("pfTauTagInfoProducer"),
            name = cms.string('pfTauTTIworkaround'),
            plugin = cms.string('RecoTauTagInfoWorkaroundModifer')
        )),
    jetRegionSrc = cms.InputTag("pfTauPFJets08Region"),
    jetSrc = cms.InputTag("ak5PFJets"),
    builders = cms.VPSet(cms.PSet(
        usePFLeptons = cms.bool(True),
        signalConeNeutralHadrons = cms.string('0.15'),
        name = cms.string('shrinkingCone'),
        plugin = cms.string('RecoTauBuilderConePlugin'),
        isoConeChargedHadrons = cms.string('0.5'),
        isoConePiZeros = cms.string('0.5'),
        isoConeNeutralHadrons = cms.string('0.5'),
        matchingCone = cms.string('0.1'),
        signalConeChargedHadrons = cms.string('min(max(5.0/et(), 0.07), 0.15)'),
        leadObjectPt = cms.double(5.0),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        signalConePiZeros = cms.string('0.15'),
        pfCandSrc = cms.InputTag("particleFlow")
    )),
    buildNullTaus = cms.bool(True)
)


process.pfTausPtrs = cms.EDProducer("PFTauFwdPtrProducer",
    src = cms.InputTag("pfTaus")
)


process.pfTausPtrsEI = cms.EDProducer("PFTauFwdPtrProducer",
    src = cms.InputTag("pfTausEI")
)


process.pfTrack = cms.EDProducer("PFTrackProducer",
    TrajInEvents = cms.bool(False),
    TkColList = cms.VInputTag(cms.InputTag("generalTracks")),
    PrimaryVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    GsfTracksInEvents = cms.bool(True),
    UseQuality = cms.bool(True),
    MuColl = cms.InputTag("muons1stStep"),
    TrackQuality = cms.string('highPurity'),
    GsfTrackModuleLabel = cms.InputTag("electronGsfTracks")
)


process.pfTrackElec = cms.EDProducer("PFElecTkProducer",
    TrajInEvents = cms.bool(False),
    maxDPhiBremTangGsfAngularCleaning = cms.double(0.05),
    PFConversions = cms.InputTag("pfConversions"),
    useConversions = cms.bool(False),
    MaxConvBremRecoPT = cms.double(49.0),
    ModeMomentum = cms.bool(True),
    PFEcalClusters = cms.InputTag("particleFlowClusterECAL"),
    Propagator = cms.string('fwdElectronPropagator'),
    useV0 = cms.bool(False),
    pf_convBremFinderID_mvaWeightFile = cms.string('RecoParticleFlow/PFTracking/data/MVAnalysis_BDT.weights_convBremFinder_19Apr_IntToFloat.txt'),
    useFifthStepForEcalDrivenGsf = cms.bool(False),
    GsfTrackModuleLabel = cms.InputTag("electronGsfTracks"),
    MinDPhiGsfSC = cms.double(0.15),
    applyEGSelection = cms.bool(False),
    useNuclear = cms.bool(False),
    Fitter = cms.string('GsfElectronFittingSmoother'),
    applyGsfTrackCleaning = cms.bool(True),
    MinDEtaGsfSC = cms.double(0.06),
    PFNuclear = cms.InputTag("pfDisplacedTrackerVertex"),
    useConvBremFinder = cms.bool(True),
    debugGsfCleaning = cms.bool(False),
    applyAlsoGsfAngularCleaning = cms.bool(True),
    PFV0 = cms.InputTag("pfV0"),
    pf_convBremFinderID_mvaCut = cms.double(0.2),
    useFifthStepForTrackerDrivenGsf = cms.bool(False),
    PrimaryVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    MinSCEnergy = cms.double(4.0),
    maxDEtaGsfAngularCleaning = cms.double(0.05),
    TTRHBuilder = cms.string('WithTrackAngle'),
    PFRecTrackLabel = cms.InputTag("pfTrack")
)


process.pfV0 = cms.EDProducer("PFV0Producer",
    V0List = cms.VInputTag(cms.InputTag("generalV0Candidates","Kshort"), cms.InputTag("generalV0Candidates","Lambda"))
)


process.phPFIsoDepositCharged = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedPhotons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedHadrons"),
        DR_Veto = cms.double(0),
        DepositLabel = cms.untracked.string('')
    )
)


process.phPFIsoDepositChargedAll = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedPhotons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllChargedParticles"),
        DR_Veto = cms.double(0),
        DepositLabel = cms.untracked.string('')
    )
)


process.phPFIsoDepositGamma = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedPhotons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        SCMatch_Veto = cms.bool(True),
        ComponentName = cms.string('PFCandWithSuperClusterExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllPhotons"),
        MissHitSCMatch_Veto = cms.bool(False),
        DR_Veto = cms.double(0),
        DepositLabel = cms.untracked.string('')
    )
)


process.phPFIsoDepositNeutral = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedPhotons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfAllNeutralHadrons"),
        DR_Veto = cms.double(0),
        DepositLabel = cms.untracked.string('')
    )
)


process.phPFIsoDepositPU = cms.EDProducer("CandIsoDepositProducer",
    src = cms.InputTag("pfSelectedPhotons"),
    MultipleDepositsFlag = cms.bool(False),
    trackType = cms.string('candidate'),
    ExtractorPSet = cms.PSet(
        Diff_z = cms.double(99999.99),
        ComponentName = cms.string('CandViewExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(99999.99),
        inputCandView = cms.InputTag("pfPileUpAllChargedParticles"),
        DR_Veto = cms.double(0),
        DepositLabel = cms.untracked.string('')
    )
)


process.phPFIsoValueCharged03PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositCharged"),
        deltaR = cms.double(0.3),
        PivotCoordinatesForEBEE = cms.bool(True),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueCharged04PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositCharged"),
        deltaR = cms.double(0.4),
        PivotCoordinatesForEBEE = cms.bool(True),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueChargedAll03PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositChargedAll"),
        deltaR = cms.double(0.3),
        PivotCoordinatesForEBEE = cms.bool(True),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueChargedAll04PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositChargedAll"),
        deltaR = cms.double(0.4),
        PivotCoordinatesForEBEE = cms.bool(True),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueGamma03PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositGamma"),
        deltaR = cms.double(0.3),
        PivotCoordinatesForEBEE = cms.bool(True),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.05)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueGamma04PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositGamma"),
        deltaR = cms.double(0.4),
        PivotCoordinatesForEBEE = cms.bool(True),
        weight = cms.string('1'),
        vetos = cms.vstring('EcalEndcaps:ConeVeto(0.05)'),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueNeutral03PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositNeutral"),
        deltaR = cms.double(0.3),
        PivotCoordinatesForEBEE = cms.bool(True),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValueNeutral04PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositNeutral"),
        deltaR = cms.double(0.4),
        PivotCoordinatesForEBEE = cms.bool(True),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValuePU03PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositPU"),
        deltaR = cms.double(0.3),
        PivotCoordinatesForEBEE = cms.bool(True),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.phPFIsoValuePU04PFId = cms.EDProducer("PFCandIsolatorFromDeposits",
    deposits = cms.VPSet(cms.PSet(
        src = cms.InputTag("phPFIsoDepositPU"),
        deltaR = cms.double(0.4),
        PivotCoordinatesForEBEE = cms.bool(True),
        weight = cms.string('1'),
        vetos = cms.vstring(),
        skipDefaultVeto = cms.bool(True),
        mode = cms.string('sum')
    ))
)


process.photonConvTrajSeedFromQuadruplets = cms.EDProducer("PhotonConversionTrajectorySeedProducerFromQuadruplets",
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    QuadCutPSet = cms.PSet(
        Cut_maxLegPt = cms.double(10.0),
        Cut_zCA = cms.double(100),
        apply_zCACut = cms.bool(False),
        Cut_BeamPipeRadius = cms.double(3.0),
        apply_DeltaPhiCuts = cms.bool(True),
        rejectAllQuads = cms.bool(False),
        Cut_minLegPt = cms.double(0.6),
        apply_Arbitration = cms.bool(True),
        Cut_DeltaRho = cms.double(12.0),
        apply_ClusterShapeFilter = cms.bool(True)
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
        FilterPixelHits = cms.bool(False),
        FilterStripHits = cms.bool(True),
        FilterAtHelixStage = cms.bool(True)
    ),
    ClusterCheckPSet = cms.PSet(
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(50000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        MaxNumberOfPixelClusters = cms.uint32(10000)
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            originRadius = cms.double(3.0),
            ptMin = cms.double(0.2),
            originHalfLength = cms.double(12.0),
            beamSpot = cms.InputTag("offlineBeamSpot")
        )
    ),
    DoxcheckSeedCandidates = cms.bool(False),
    xcheckSeedCandidates = cms.string('xcheckSeedCandidates'),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedForPhotonConversionFromQuadruplets'),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial')
    ),
    TrackRefitter = cms.InputTag("generalTracks"),
    OrderedHitsFactoryPSet = cms.PSet(
        maxElement = cms.uint32(900000),
        SeedingLayers = cms.string('conv2LayerPairs')
    ),
    primaryVerticesTag = cms.InputTag("pixelVertices"),
    newSeedCandidates = cms.string('conv2SeedCandidates')
)


process.photonConvTrajSeedFromSingleLeg = cms.EDProducer("PhotonConversionTrajectorySeedProducerFromSingleLeg",
    vtxMinDoF = cms.double(4),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    ClusterCheckPSet = cms.PSet(
        MaxNumberOfPixelClusters = cms.uint32(20000),
        cut = cms.string('strip < 150000 && pixel < 20000 && (strip < 20000 + 7* pixel)'),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(150000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            originRadius = cms.double(3.0),
            ptMin = cms.double(0.2),
            originHalfLength = cms.double(12.0),
            beamSpot = cms.InputTag("offlineBeamSpot")
        )
    ),
    DoxcheckSeedCandidates = cms.bool(False),
    xcheckSeedCandidates = cms.string('xcheckSeedCandidates'),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('SeedForPhotonConversion1Leg'),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial')
    ),
    TrackRefitter = cms.InputTag("generalTracks"),
    OrderedHitsFactoryPSet = cms.PSet(
        maxElement = cms.uint32(10000),
        SeedingLayers = cms.string('convLayerPairs'),
        maxHitPairsPerTrackAndGenerator = cms.uint32(10)
    ),
    applyTkVtxConstraint = cms.bool(True),
    maxDZSigmas = cms.double(10.0),
    maxNumSelVtx = cms.uint32(2),
    primaryVerticesTag = cms.InputTag("pixelVertices"),
    newSeedCandidates = cms.string('convSeedCandidates')
)


process.photonCore = cms.EDProducer("PhotonCoreProducer",
    scHybridBarrelProducer = cms.InputTag("correctedHybridSuperClusters"),
    photonCoreCollection = cms.string(''),
    minSCEt = cms.double(10.0),
    pixelSeedProducer = cms.string('electronMergedSeeds'),
    risolveConversionAmbiguity = cms.bool(True),
    scIslandEndcapProducer = cms.InputTag("correctedMulti5x5SuperClustersWithPreshower"),
    conversionProducer = cms.InputTag("conversions")
)


process.photons = cms.EDProducer("PhotonProducer",
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    candidateP4type = cms.string('fromEcalEnergy'),
    usePrimaryVertex = cms.bool(True),
    hcalTowerSumEtOffsetBarrel = cms.double(999999999),
    trackPtSumSolidConeEndcap = cms.double(999999999),
    nTrackSolidConeBarrel = cms.double(999999999),
    ecalRecHitSumEtSlopeEndcap = cms.double(0.0),
    minSCEtBarrel = cms.double(10.0),
    primaryVertexProducer = cms.string('offlinePrimaryVerticesWithBS'),
    hcalTowerSumEtSlopeEndcap = cms.double(0.0),
    ecalRecHitSumEtOffsetEndcap = cms.double(999999999),
    energyRegressionWeightsDBLocation = cms.string('wgbrph'),
    posCalc_t0_barl = cms.double(7.7),
    ecalRecHitSumEtOffsetBarrel = cms.double(999999999),
    posCalc_logweight = cms.bool(True),
    hcalTowers = cms.InputTag("towerMaker"),
    nTrackHollowConeBarrel = cms.double(999999999),
    posCalc_t0_endcPresh = cms.double(3.6),
    nTrackSolidConeEndcap = cms.double(999999999),
    minR9Endcap = cms.double(0.95),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    posCalcParameters = cms.PSet(
        T0_barl = cms.double(7.4),
        LogWeighted = cms.bool(True),
        T0_endc = cms.double(6.3),
        T0_endcPresh = cms.double(3.6),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    posCalc_w0 = cms.double(4.2),
    mipVariableSet = cms.PSet(
        XRangeFit = cms.double(180.0),
        ResidualWidth = cms.double(0.23),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        YRangeFit = cms.double(7.0),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        ComponentName = cms.string('mipVariable'),
        HaloDiscThreshold = cms.double(70.0)
    ),
    photonEcalEnergyCorrFunction = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    nTrackHollowConeEndcap = cms.double(999999999),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    superClusterEnergyCorrFunction = cms.string('EcalClusterEnergyCorrection'),
    superClusterEnergyErrorFunction = cms.string('EcalClusterEnergyUncertainty'),
    maxHoverEEndcap = cms.double(0.5),
    minR9Barrel = cms.double(0.94),
    minSCEtEndcap = cms.double(10.0),
    barrelEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    hbheModule = cms.string('hbhereco'),
    superClusterCrackEnergyCorrFunction = cms.string('EcalClusterCrackCorrection'),
    maxHoverEBarrel = cms.double(0.5),
    highEt = cms.double(100.0),
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    hcalTowerSumEtSlopeBarrel = cms.double(0.0),
    hbheInstance = cms.string(''),
    hOverEConeSize = cms.double(0.15),
    sigmaIetaIetaCutBarrel = cms.double(999999999),
    posCalc_x0 = cms.double(0.89),
    trackPtSumSolidConeBarrel = cms.double(999999999),
    ecalRecHitSumEtSlopeBarrel = cms.double(0.0),
    trackPtSumHollowConeBarrel = cms.double(999999999),
    energyRegressionWeightsFileLocation = cms.string('/afs/cern.ch/user/b/bendavid/cmspublic/regweights/gbrph.root'),
    trackPtSumHollowConeEndcap = cms.double(999999999),
    endcapEcalHits = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    isolationSumsCalculatorSet = cms.PSet(
        HcalTowerInnerRadiusB_Endcap = cms.double(0.15),
        barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        EcalRecHitEtaSliceA_Endcap = cms.double(2.5),
        HcalDepth1TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth2TowerThreshEA_Endcap = cms.double(0.0),
        HcalDepth2TowerInnerRadiusA_Endcap = cms.double(0.15),
        isolationtrackEtaSliceA_Barrel = cms.double(0.015),
        EcalRecHitOuterRadiusA_Endcap = cms.double(0.4),
        HcalDepth2TowerOuterRadiusA_Endcap = cms.double(0.4),
        beamSpotProducer = cms.InputTag("offlineBeamSpot"),
        isolationtrackEtaSliceB_Endcap = cms.double(0.015),
        trackProducer = cms.InputTag("generalTracks"),
        isolationtrackEtaSliceA_Endcap = cms.double(0.015),
        HcalTowerInnerRadiusB_Barrel = cms.double(0.15),
        HcalDepth1TowerInnerRadiusB_Barrel = cms.double(0.15),
        EcalRecHitThreshEtB_Barrel = cms.double(0.0),
        EcalRecHitThreshEtB_Endcap = cms.double(0.11),
        isolationtrackThresholdA_Endcap = cms.double(0.0),
        EcalRecHitThreshEB_Barrel = cms.double(0.095),
        isolationtrackThresholdB_Endcap = cms.double(0.0),
        HcalDepth2TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalTowerOuterRadiusA_Endcap = cms.double(0.4),
        longImpactParameterA_Barrel = cms.double(0.2),
        EcalRecHitEtaSliceB_Endcap = cms.double(2.5),
        transImpactParameterA_Barrel = cms.double(0.1),
        useNumCrystals = cms.bool(True),
        longImpactParameterB_Barrel = cms.double(0.2),
        longImpactParameterA_Endcap = cms.double(0.2),
        isolationtrackThresholdB_Barrel = cms.double(0.0),
        HcalTowerThreshEA_Endcap = cms.double(0.0),
        EcalRecHitInnerRadiusA_Endcap = cms.double(3.5),
        HcalTowerInnerRadiusA_Endcap = cms.double(0.15),
        EcalRecHitEtaSliceB_Barrel = cms.double(2.5),
        TrackConeInnerRadiusA_Endcap = cms.double(0.04),
        HcalDepth2TowerInnerRadiusB_Barrel = cms.double(0.15),
        EcalRecHitThreshEtA_Barrel = cms.double(0.0),
        EcalRecHitInnerRadiusA_Barrel = cms.double(3.5),
        EcalRecHitEtaSliceA_Barrel = cms.double(2.5),
        transImpactParameterA_Endcap = cms.double(0.1),
        ComponentName = cms.string('isolationSumsCalculator'),
        HcalDepth2TowerThreshEB_Endcap = cms.double(0.0),
        HcalTowerThreshEA_Barrel = cms.double(0.0),
        TrackConeOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth1TowerInnerRadiusA_Endcap = cms.double(0.15),
        longImpactParameterB_Endcap = cms.double(0.2),
        HcalTowerInnerRadiusA_Barrel = cms.double(0.15),
        transImpactParameterB_Endcap = cms.double(0.1),
        TrackConeOuterRadiusB_Endcap = cms.double(0.3),
        TrackConeInnerRadiusB_Barrel = cms.double(0.04),
        HcalRecHitCollection = cms.InputTag("towerMaker"),
        vetoClustered = cms.bool(False),
        HcalDepth1TowerThreshEB_Barrel = cms.double(0.0),
        HcalDepth1TowerThreshEA_Barrel = cms.double(0.0),
        TrackConeInnerRadiusB_Endcap = cms.double(0.04),
        HcalDepth2TowerInnerRadiusA_Barrel = cms.double(0.15),
        HcalDepth1TowerOuterRadiusA_Endcap = cms.double(0.4),
        moduleEtaBoundary = cms.vdouble(0.0, 0.02, 0.43, 0.46, 0.78, 
            0.81, 1.13, 1.15, 1.45, 1.58),
        EcalRecHitOuterRadiusB_Endcap = cms.double(0.3),
        EcalRecHitThreshEA_Barrel = cms.double(0.095),
        HcalDepth1TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth2TowerInnerRadiusB_Endcap = cms.double(0.15),
        HcalDepth1TowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth1TowerInnerRadiusA_Barrel = cms.double(0.15),
        endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        HcalTowerOuterRadiusB_Endcap = cms.double(0.3),
        EcalRecHitThreshEB_Endcap = cms.double(0.0),
        HcalTowerThreshEB_Endcap = cms.double(0.0),
        TrackConeOuterRadiusA_Endcap = cms.double(0.4),
        HcalTowerOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth1TowerThreshEB_Endcap = cms.double(0.0),
        modulePhiBoundary = cms.double(0.0087),
        EcalRecHitThreshEtA_Endcap = cms.double(0.11),
        EcalRecHitOuterRadiusB_Barrel = cms.double(0.3),
        TrackConeOuterRadiusB_Barrel = cms.double(0.3),
        transImpactParameterB_Barrel = cms.double(0.1),
        isolationtrackThresholdA_Barrel = cms.double(0.0),
        HcalTowerThreshEB_Barrel = cms.double(0.0),
        EcalRecHitThreshEA_Endcap = cms.double(0.0),
        EcalRecHitOuterRadiusA_Barrel = cms.double(0.4),
        HcalDepth1TowerOuterRadiusB_Barrel = cms.double(0.3),
        TrackConeInnerRadiusA_Barrel = cms.double(0.04),
        HcalDepth2TowerThreshEA_Barrel = cms.double(0.0),
        HcalDepth2TowerOuterRadiusB_Barrel = cms.double(0.3),
        isolationtrackEtaSliceB_Barrel = cms.double(0.015),
        EcalRecHitInnerRadiusB_Barrel = cms.double(3.5),
        HcalDepth2TowerOuterRadiusB_Endcap = cms.double(0.3),
        HcalTowerOuterRadiusB_Barrel = cms.double(0.3),
        HcalDepth1TowerOuterRadiusB_Endcap = cms.double(0.3),
        EcalRecHitInnerRadiusB_Endcap = cms.double(3.5),
        HcalDepth2TowerThreshEB_Barrel = cms.double(0.0)
    ),
    photonCoreProducer = cms.InputTag("photonCore"),
    sigmaIetaIetaCutEndcap = cms.double(999999999),
    regressionWeightsFromDB = cms.bool(True),
    runMIPTagger = cms.bool(True),
    posCalc_t0_endc = cms.double(6.3),
    hcalTowerSumEtOffsetEndcap = cms.double(999999999)
)


process.pixelLessStepClusters = cms.EDProducer("TrackClusterRemover",
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    trajectories = cms.InputTag("mixedTripletStepTracks"),
    oldClusterRemovalInfo = cms.InputTag("mixedTripletStepClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    overrideTrkQuals = cms.InputTag("mixedTripletStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True)
)


process.pixelLessStepSeedClusterMask = cms.EDProducer("SeedClusterRemover",
    trajectories = cms.InputTag("pixelLessStepSeeds"),
    oldClusterRemovalInfo = cms.InputTag("mixedTripletStepSeedClusterMask"),
    stripClusters = cms.InputTag("siStripClusters"),
    overrideTrkQuals = cms.InputTag(""),
    pixelClusters = cms.InputTag("siPixelClusters"),
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True)
)


process.pixelLessStepSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    OrderedHitsFactoryPSet = cms.PSet(
        maxElement = cms.uint32(1000000),
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.string('pixelLessStepSeedLayers')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
        FilterPixelHits = cms.bool(False),
        FilterStripHits = cms.bool(True),
        FilterAtHelixStage = cms.bool(True)
    ),
    ClusterCheckPSet = cms.PSet(
        MaxNumberOfPixelClusters = cms.uint32(40000),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters")
    ),
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originRadius = cms.double(2.5),
            ptMin = cms.double(0.7),
            originHalfLength = cms.double(15.0)
        ),
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot')
    ),
    SeedCreatorPSet = cms.PSet(
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(2.0),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial'),
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator')
    )
)


process.pixelLessStepSelector = cms.EDProducer("MultiTrackSelector",
    src = cms.InputTag("pixelLessStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        max_d0 = cms.double(100.0),
        minNumber3DLayers = cms.uint32(3),
        max_lostHitFraction = cms.double(1.0),
        applyAbsCutsIfNoPV = cms.bool(False),
        qualityBit = cms.string('loose'),
        minNumberLayers = cms.uint32(4),
        chi2n_par = cms.double(0.4),
        nSigmaZ = cms.double(4.0),
        dz_par2 = cms.vdouble(1.2, 4.0),
        applyAdaptedPVCuts = cms.bool(True),
        min_eta = cms.double(-9999.0),
        dz_par1 = cms.vdouble(1.2, 4.0),
        copyTrajectories = cms.untracked.bool(False),
        vtxNumber = cms.int32(-1),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(1),
        max_relpterr = cms.double(9999.0),
        copyExtras = cms.untracked.bool(True),
        vertexCut = cms.string('ndof>=2&!isFake'),
        max_z0 = cms.double(100.0),
        min_nhits = cms.uint32(0),
        name = cms.string('pixelLessStepLoose'),
        max_minMissHitOutOrIn = cms.int32(99),
        chi2n_no1Dmod_par = cms.double(9999),
        res_par = cms.vdouble(0.003, 0.001),
        max_eta = cms.double(9999.0),
        d0_par2 = cms.vdouble(1.2, 4.0),
        d0_par1 = cms.vdouble(1.2, 4.0),
        preFilterName = cms.string(''),
        minHitsToBypassChecks = cms.uint32(20)
    ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(3),
            max_lostHitFraction = cms.double(1.0),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('tight'),
            minNumberLayers = cms.uint32(4),
            chi2n_par = cms.double(0.3),
            dz_par1 = cms.vdouble(0.9, 4.0),
            dz_par2 = cms.vdouble(0.9, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            min_eta = cms.double(-9999.0),
            nSigmaZ = cms.double(4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(0),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('pixelLessStepTight'),
            max_minMissHitOutOrIn = cms.int32(99),
            chi2n_no1Dmod_par = cms.double(9999),
            preFilterName = cms.string('pixelLessStepLoose'),
            max_eta = cms.double(9999.0),
            d0_par2 = cms.vdouble(0.9, 4.0),
            d0_par1 = cms.vdouble(0.9, 4.0),
            res_par = cms.vdouble(0.003, 0.001),
            minHitsToBypassChecks = cms.uint32(20)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(3),
            max_lostHitFraction = cms.double(1.0),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('highPurity'),
            minNumberLayers = cms.uint32(4),
            chi2n_par = cms.double(0.2),
            nSigmaZ = cms.double(4.0),
            dz_par2 = cms.vdouble(0.7, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            min_eta = cms.double(-9999.0),
            dz_par1 = cms.vdouble(0.7, 4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(0),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('pixelLessStep'),
            max_minMissHitOutOrIn = cms.int32(2),
            chi2n_no1Dmod_par = cms.double(9999),
            res_par = cms.vdouble(0.003, 0.001),
            max_eta = cms.double(9999.0),
            d0_par2 = cms.vdouble(0.7, 4.0),
            d0_par1 = cms.vdouble(0.7, 4.0),
            preFilterName = cms.string('pixelLessStepTight'),
            minHitsToBypassChecks = cms.uint32(20)
        )),
    beamspot = cms.InputTag("offlineBeamSpot"),
    vertices = cms.InputTag("pixelVertices"),
    useVtxError = cms.bool(False),
    useVertices = cms.bool(True)
)


process.pixelLessStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("pixelLessStepSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('pixelLessStepTrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    numHitsForSeedCleaner = cms.int32(50),
    TrajectoryBuilder = cms.string('pixelLessStepTrajectoryBuilder')
)


process.pixelLessStepTracks = cms.EDProducer("TrackProducer",
    src = cms.InputTag("pixelLessStepTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    AlgorithmName = cms.string('iter5'),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    GeometricInnerState = cms.bool(False),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.pixelPairElectronSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    OrderedHitsFactoryPSet = cms.PSet(
        maxElement = cms.uint32(1000000),
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.string('pixelPairElectronSeedLayers')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    ClusterCheckPSet = cms.PSet(
        MaxNumberOfPixelClusters = cms.uint32(40000),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters")
    ),
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            useFixedError = cms.bool(True),
            originRadius = cms.double(0.015),
            sigmaZVertex = cms.double(3.0),
            fixedError = cms.double(0.03),
            VertexCollection = cms.InputTag("pixelVertices"),
            ptMin = cms.double(1.0),
            useFoundVertices = cms.bool(True),
            nSigmaZ = cms.double(4.0)
        ),
        ComponentName = cms.string('GlobalTrackingRegionWithVerticesProducer')
    ),
    SeedCreatorPSet = cms.PSet(
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial'),
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator')
    )
)


process.pixelPairStepClusters = cms.EDProducer("TrackClusterRemover",
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    trajectories = cms.InputTag("lowPtTripletStepTracks"),
    oldClusterRemovalInfo = cms.InputTag("lowPtTripletStepClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    overrideTrkQuals = cms.InputTag("lowPtTripletStepSelector","lowPtTripletStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True)
)


process.pixelPairStepSeedClusterMask = cms.EDProducer("SeedClusterRemover",
    trajectories = cms.InputTag("pixelPairStepSeeds"),
    oldClusterRemovalInfo = cms.InputTag("initialStepSeedClusterMask"),
    stripClusters = cms.InputTag("siStripClusters"),
    overrideTrkQuals = cms.InputTag(""),
    pixelClusters = cms.InputTag("siPixelClusters"),
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True)
)


process.pixelPairStepSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    OrderedHitsFactoryPSet = cms.PSet(
        maxElement = cms.uint32(1000000),
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.string('pixelPairStepSeedLayers')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('PixelClusterShapeSeedComparitor'),
        ClusterShapeHitFilterName = cms.string('ClusterShapeHitFilter'),
        FilterPixelHits = cms.bool(True),
        FilterStripHits = cms.bool(False),
        FilterAtHelixStage = cms.bool(True)
    ),
    ClusterCheckPSet = cms.PSet(
        MaxNumberOfPixelClusters = cms.uint32(40000),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters")
    ),
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            useFixedError = cms.bool(True),
            originRadius = cms.double(0.015),
            sigmaZVertex = cms.double(3.0),
            fixedError = cms.double(0.03),
            VertexCollection = cms.InputTag("pixelVertices"),
            ptMin = cms.double(0.6),
            useFoundVertices = cms.bool(True),
            nSigmaZ = cms.double(4.0)
        ),
        ComponentName = cms.string('GlobalTrackingRegionWithVerticesProducer')
    ),
    SeedCreatorPSet = cms.PSet(
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial'),
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator')
    )
)


process.pixelPairStepSelector = cms.EDProducer("MultiTrackSelector",
    src = cms.InputTag("pixelPairStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        max_d0 = cms.double(100.0),
        minNumber3DLayers = cms.uint32(0),
        max_lostHitFraction = cms.double(1.0),
        applyAbsCutsIfNoPV = cms.bool(False),
        qualityBit = cms.string('loose'),
        minNumberLayers = cms.uint32(0),
        chi2n_par = cms.double(1.6),
        nSigmaZ = cms.double(4.0),
        dz_par2 = cms.vdouble(0.45, 4.0),
        applyAdaptedPVCuts = cms.bool(True),
        min_eta = cms.double(-9999.0),
        dz_par1 = cms.vdouble(0.65, 4.0),
        copyTrajectories = cms.untracked.bool(False),
        vtxNumber = cms.int32(-1),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(999),
        max_relpterr = cms.double(9999.0),
        copyExtras = cms.untracked.bool(True),
        vertexCut = cms.string('ndof>=2&!isFake'),
        max_z0 = cms.double(100.0),
        min_nhits = cms.uint32(0),
        name = cms.string('pixelPairStepLoose'),
        max_minMissHitOutOrIn = cms.int32(99),
        chi2n_no1Dmod_par = cms.double(9999),
        res_par = cms.vdouble(0.003, 0.01),
        max_eta = cms.double(9999.0),
        d0_par2 = cms.vdouble(0.55, 4.0),
        d0_par1 = cms.vdouble(0.55, 4.0),
        preFilterName = cms.string(''),
        minHitsToBypassChecks = cms.uint32(20)
    ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(3),
            max_lostHitFraction = cms.double(1.0),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('tight'),
            minNumberLayers = cms.uint32(3),
            chi2n_par = cms.double(0.7),
            dz_par1 = cms.vdouble(0.35, 4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            min_eta = cms.double(-9999.0),
            nSigmaZ = cms.double(4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('pixelPairStepTight'),
            max_minMissHitOutOrIn = cms.int32(99),
            chi2n_no1Dmod_par = cms.double(9999),
            preFilterName = cms.string('pixelPairStepLoose'),
            max_eta = cms.double(9999.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            d0_par1 = cms.vdouble(0.3, 4.0),
            res_par = cms.vdouble(0.003, 0.01),
            minHitsToBypassChecks = cms.uint32(20)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(3),
            max_lostHitFraction = cms.double(1.0),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('highPurity'),
            minNumberLayers = cms.uint32(3),
            chi2n_par = cms.double(0.7),
            nSigmaZ = cms.double(4.0),
            dz_par2 = cms.vdouble(0.4, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            min_eta = cms.double(-9999.0),
            dz_par1 = cms.vdouble(0.35, 4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(2),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('pixelPairStep'),
            max_minMissHitOutOrIn = cms.int32(99),
            chi2n_no1Dmod_par = cms.double(9999),
            res_par = cms.vdouble(0.003, 0.001),
            max_eta = cms.double(9999.0),
            d0_par2 = cms.vdouble(0.4, 4.0),
            d0_par1 = cms.vdouble(0.3, 4.0),
            preFilterName = cms.string('pixelPairStepTight'),
            minHitsToBypassChecks = cms.uint32(20)
        )),
    beamspot = cms.InputTag("offlineBeamSpot"),
    vertices = cms.InputTag("pixelVertices"),
    useVtxError = cms.bool(False),
    useVertices = cms.bool(True)
)


process.pixelPairStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("pixelPairStepSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    TrajectoryBuilder = cms.string('pixelPairStepTrajectoryBuilder'),
    numHitsForSeedCleaner = cms.int32(50)
)


process.pixelPairStepTracks = cms.EDProducer("TrackProducer",
    src = cms.InputTag("pixelPairStepTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('FlexibleKFFittingSmoother'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    AlgorithmName = cms.string('iter2'),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    GeometricInnerState = cms.bool(False),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.pixelTracks = cms.EDProducer("PixelTrackProducer",
    useFilterWithES = cms.bool(False),
    FilterPSet = cms.PSet(
        chi2 = cms.double(1000.0),
        nSigmaTipMaxTolerance = cms.double(0.0),
        ComponentName = cms.string('PixelTrackFilterByKinematics'),
        nSigmaInvPtTolerance = cms.double(0.0),
        ptMin = cms.double(0.1),
        tipMax = cms.double(1.0)
    ),
    FitterPSet = cms.PSet(
        ComponentName = cms.string('PixelFitterByHelixProjections'),
        TTRHBuilder = cms.string('PixelTTRHBuilderWithoutAngle')
    ),
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            nSigmaZ = cms.double(4.0),
            originRadius = cms.double(0.2),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            ptMin = cms.double(0.9)
        ),
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot')
    ),
    CleanerPSet = cms.PSet(
        ComponentName = cms.string('PixelTrackCleanerBySharedHits')
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            maxElement = cms.uint32(100000),
            SeedComparitorPSet = cms.PSet(
                ComponentName = cms.string('LowPtClusterShapeSeedComparitor')
            ),
            extraHitRPhitolerance = cms.double(0.032),
            useMultScattering = cms.bool(True),
            phiPreFiltering = cms.double(0.3),
            extraHitRZtolerance = cms.double(0.037),
            ComponentName = cms.string('PixelTripletHLTGenerator')
        ),
        SeedingLayers = cms.string('PixelLayerTriplets')
    ),
    passLabel = cms.string('pixelTracks')
)


process.pixelVertices = cms.EDProducer("PrimaryVertexProducer",
    vertexCollections = cms.VPSet(cms.PSet(
        maxDistanceToBeam = cms.double(2.0),
        useBeamConstraint = cms.bool(False),
        minNdof = cms.double(2.0),
        algorithm = cms.string('AdaptiveVertexFitter'),
        label = cms.string('')
    )),
    verbose = cms.untracked.bool(False),
    TkFilterParameters = cms.PSet(
        maxNormalizedChi2 = cms.double(100.0),
        minPt = cms.double(0.0),
        algorithm = cms.string('filter'),
        maxD0Significance = cms.double(100.0),
        trackQuality = cms.string('any'),
        minPixelLayersWithHits = cms.int32(3),
        minSiliconLayersWithHits = cms.int32(3)
    ),
    beamSpotLabel = cms.InputTag("offlineBeamSpot"),
    TrackLabel = cms.InputTag("pixelTracks"),
    TkClusParameters = cms.PSet(
        TkGapClusParameters = cms.PSet(
            zSeparation = cms.double(0.1)
        ),
        algorithm = cms.string('gap')
    )
)


process.preDuplicateMergingGeneralTracks = cms.EDProducer("TrackListMerger",
    ShareFrac = cms.double(0.19),
    writeOnlyTrkQuals = cms.bool(False),
    MinPT = cms.double(0.05),
    indivShareFrac = cms.vdouble(1.0, 0.16, 0.19, 0.13, 0.11, 
        0.11, 0.09),
    copyExtras = cms.untracked.bool(True),
    Epsilon = cms.double(-0.001),
    selectedTrackQuals = cms.VInputTag(cms.InputTag("muonSeededTracksInOutSelector","muonSeededTracksInOutHighPurity"), cms.InputTag("muonSeededTracksInOutSelector","muonSeededTracksInOutHighPurity"), cms.InputTag("muonSeededTracksOutInSelector","muonSeededTracksOutInHighPurity")),
    allowFirstHitShare = cms.bool(True),
    makeReKeyedSeeds = cms.untracked.bool(False),
    MaxNormalizedChisq = cms.double(1000.0),
    FoundHitBonus = cms.double(100.0),
    setsToMerge = cms.VPSet(cms.PSet(
        pQual = cms.bool(False),
        tLists = cms.vint32(0, 1, 2)
    )),
    MinFound = cms.int32(3),
    hasSelector = cms.vint32(0, 1, 1),
    TrackProducers = cms.VInputTag(cms.InputTag("earlyGeneralTracks"), cms.InputTag("muonSeededTracksInOut"), cms.InputTag("muonSeededTracksOutIn")),
    LostHitPenalty = cms.double(1.0),
    newQuality = cms.string('confirmed')
)


process.randomEngineStateProducer = cms.EDProducer("RandomEngineStateProducer")


process.recoTauAK5PFJets08Region = cms.EDProducer("RecoTauJetRegionProducer",
    src = cms.InputTag("ak5PFJets"),
    deltaR = cms.double(0.8),
    pfSrc = cms.InputTag("particleFlow")
)


process.recoTauDiscriminantCutMultiplexer = cms.EDProducer("RecoTauDiscriminantCutMultiplexer",
    toMultiplex = cms.InputTag("fixme"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        decayMode = cms.PSet(
            cut = cms.double(0.0),
            Producer = cms.InputTag("fixme")
        )
    ),
    mapping = cms.VPSet(cms.PSet(
        category = cms.uint32(0),
        cut = cms.double(0.5)
    ), 
        cms.PSet(
            category = cms.uint32(1),
            cut = cms.double(0.2)
        )),
    key = cms.InputTag("fixme"),
    PFTauProducer = cms.InputTag("fixme")
)


process.reducedEcalRecHitsEB = cms.EDProducer("ReducedRecHitCollectionProducer",
    interestingDetIdCollections = cms.VInputTag(cms.InputTag("interestingEcalDetIdEB"), cms.InputTag("interestingEcalDetIdEBU"), cms.InputTag("interestingEleIsoDetIdEB"), cms.InputTag("interestingGamIsoDetIdEB"), cms.InputTag("pfElectronInterestingEcalDetIdEB"), 
        cms.InputTag("pfPhotonInterestingEcalDetIdEB"), cms.InputTag("muonEcalDetIds"), cms.InputTag("interestingTrackEcalDetIds")),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    reducedHitsCollection = cms.string('')
)


process.reducedEcalRecHitsEE = cms.EDProducer("ReducedRecHitCollectionProducer",
    interestingDetIdCollections = cms.VInputTag(cms.InputTag("interestingEcalDetIdEE"), cms.InputTag("interestingEleIsoDetIdEE"), cms.InputTag("interestingGamIsoDetIdEE"), cms.InputTag("pfElectronInterestingEcalDetIdEE"), cms.InputTag("pfPhotonInterestingEcalDetIdEE"), 
        cms.InputTag("muonEcalDetIds"), cms.InputTag("interestingTrackEcalDetIds")),
    recHitsLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    reducedHitsCollection = cms.string('')
)


process.reducedEcalRecHitsES = cms.EDProducer("ReducedESRecHitCollectionProducer",
    interestingDetIds = cms.VInputTag(),
    EndcapSuperClusterCollection = cms.InputTag("correctedMulti5x5SuperClustersWithPreshower"),
    scEtThreshold = cms.double(15),
    OutputLabel_ES = cms.string(''),
    EcalRecHitCollectionES = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES")
)


process.reducedHcalRecHits = cms.EDProducer("HcalHitSelection",
    interestingDetIds = cms.VInputTag(),
    hfTag = cms.InputTag("hfreco"),
    hoTag = cms.InputTag("horeco"),
    hbheTag = cms.InputTag("hbhereco"),
    hoSeverityLevel = cms.int32(13)
)


process.refittedStandAloneMuons = cms.EDProducer("StandAloneMuonProducer",
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    InputObjects = cms.InputTag("ancientMuonSeed"),
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(True)
    ),
    STATrajBuilderParameters = cms.PSet(
        DoRefit = cms.bool(True),
        DoSeedRefit = cms.bool(False),
        FilterParameters = cms.PSet(
            NumberOfSigma = cms.double(3.0),
            FitDirection = cms.string('insideOut'),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            MaxChi2 = cms.double(1000.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                MaxChi2 = cms.double(25.0),
                RescaleErrorFactor = cms.double(100.0),
                Granularity = cms.int32(0),
                ExcludeRPCFromFit = cms.bool(False),
                UseInvalidHits = cms.bool(True),
                RescaleError = cms.bool(False)
            ),
            EnableRPCMeasurement = cms.bool(True),
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            EnableDTMeasurement = cms.bool(True),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            EnableCSCMeasurement = cms.bool(True)
        ),
        SeedPropagator = cms.string('SteppingHelixPropagatorAny'),
        NavigationType = cms.string('Standard'),
        SeedTransformerParameters = cms.PSet(
            Fitter = cms.string('KFFitterSmootherSTA'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            UseSubRecHits = cms.bool(False),
            NMinRecHits = cms.uint32(2),
            RescaleError = cms.double(100.0)
        ),
        DoBackwardFilter = cms.bool(True),
        SeedPosition = cms.string('in'),
        BWFilterParameters = cms.PSet(
            NumberOfSigma = cms.double(3.0),
            BWSeedType = cms.string('fromGenerator'),
            FitDirection = cms.string('outsideIn'),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            MaxChi2 = cms.double(100.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                MaxChi2 = cms.double(25.0),
                RescaleErrorFactor = cms.double(100.0),
                Granularity = cms.int32(0),
                ExcludeRPCFromFit = cms.bool(False),
                UseInvalidHits = cms.bool(True),
                RescaleError = cms.bool(False)
            ),
            EnableRPCMeasurement = cms.bool(True),
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            EnableDTMeasurement = cms.bool(True),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            EnableCSCMeasurement = cms.bool(True)
        ),
        RefitterParameters = cms.PSet(
            FitterName = cms.string('KFFitterSmootherSTA'),
            MaxFractionOfLostHits = cms.double(0.05),
            ForceAllIterations = cms.bool(False),
            NumberOfIterations = cms.uint32(3),
            RescaleError = cms.double(100.0)
        )
    ),
    MuonTrajectoryBuilder = cms.string('Exhaustive')
)


process.regionalCosmicCkfTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("regionalCosmicTrackerSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('TrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    NavigationSchool = cms.string('CosmicNavigationSchool'),
    TrajectoryBuilder = cms.string('GroupedCkfTrajectoryBuilderP5')
)


process.regionalCosmicTrackerSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    ClusterCheckPSet = cms.PSet(
        MaxNumberOfPixelClusters = cms.uint32(10000),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(10000),
        ClusterCollectionLabel = cms.InputTag("siStripClusters"),
        doClusterCheck = cms.bool(False)
    ),
    RegionFactoryPSet = cms.PSet(
        CollectionsPSet = cms.PSet(
            recoMuonsCollection = cms.InputTag(""),
            recoTrackMuonsCollection = cms.InputTag("cosmicMuons"),
            recoL2MuonsCollection = cms.InputTag("")
        ),
        ComponentName = cms.string('CosmicRegionalSeedGenerator'),
        RegionInJetsCheckPSet = cms.PSet(
            recoCaloJetsCollection = cms.InputTag("ak5CaloJets"),
            deltaRExclusionSize = cms.double(0.3),
            jetsPtMin = cms.double(5),
            doJetsExclusionCheck = cms.bool(True)
        ),
        ToolsPSet = cms.PSet(
            regionBase = cms.string('seedOnCosmicMuon'),
            thePropagatorName = cms.string('AnalyticalPropagator')
        ),
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            deltaPhiRegion = cms.double(0.1),
            measurementTrackerName = cms.string(''),
            zVertex = cms.double(5),
            deltaEtaRegion = cms.double(0.1),
            ptMin = cms.double(1.0),
            rVertex = cms.double(5)
        )
    ),
    SeedCreatorPSet = cms.PSet(
        ComponentName = cms.string('CosmicSeedCreator'),
        maxseeds = cms.int32(10000),
        propagator = cms.string('PropagatorWithMaterial')
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('GenericPairGenerator'),
        LayerPSet = cms.PSet(
            TOB = cms.PSet(
                TTRHBuilder = cms.string('WithTrackAngle')
            ),
            TEC = cms.PSet(
                useRingSlector = cms.bool(False),
                TTRHBuilder = cms.string('WithTrackAngle'),
                minRing = cms.int32(6),
                maxRing = cms.int32(7)
            ),
            layerList = cms.vstring('TOB6+TOB5', 
                'TOB6+TOB4', 
                'TOB6+TOB3', 
                'TOB5+TOB4', 
                'TOB5+TOB3', 
                'TOB4+TOB3', 
                'TEC1_neg+TOB6', 
                'TEC1_neg+TOB5', 
                'TEC1_neg+TOB4', 
                'TEC1_pos+TOB6', 
                'TEC1_pos+TOB5', 
                'TEC1_pos+TOB4')
        )
    ),
    TTRHBuilder = cms.string('WithTrackAngle')
)


process.regionalCosmicTracks = cms.EDProducer("TrackProducer",
    src = cms.InputTag("regionalCosmicCkfTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('FittingSmootherRKP5'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    GeometricInnerState = cms.bool(True),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    AlgorithmName = cms.string('ctf'),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.roadSearchClouds = cms.EDProducer("RoadSearchCloudMaker",
    MinimalFractionOfUsedLayersPerCloud = cms.double(0.5),
    pixelRecHits = cms.InputTag("siPixelRecHits"),
    MergingFraction = cms.double(0.8),
    MaxDetHitsInCloudPerDetId = cms.uint32(8),
    SeedProducer = cms.InputTag("roadSearchSeeds"),
    DoCloudCleaning = cms.bool(True),
    IncreaseMaxNumberOfConsecutiveMissedLayersPerCloud = cms.uint32(4),
    rphiStripRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    UseStereoRecHits = cms.bool(False),
    ZPhiRoadSize = cms.double(0.06),
    MaximalFractionOfConsecutiveMissedLayersPerCloud = cms.double(0.15),
    stereoStripRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHit"),
    MaximalFractionOfMissedLayersPerCloud = cms.double(0.3),
    scalefactorRoadSeedWindow = cms.double(1.5),
    UsePixelsinRS = cms.bool(True),
    IncreaseMaxNumberOfMissedLayersPerCloud = cms.uint32(3),
    RoadsLabel = cms.string(''),
    MaxRecHitsInCloud = cms.int32(100),
    UseRphiRecHits = cms.bool(False),
    StraightLineNoBeamSpotCloud = cms.bool(False),
    RPhiRoadSize = cms.double(0.02),
    matchedStripRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    MinimumHalfRoad = cms.double(0.55)
)


process.roadSearchSeeds = cms.EDProducer("RoadSearchSeedFinder",
    OuterSeedRecHitAccessMode = cms.string('RPHI'),
    pixelRecHits = cms.InputTag("siPixelRecHits"),
    MaximalEndcapImpactParameter = cms.double(1.2),
    MergeSeedsCenterCut_C = cms.double(0.4),
    MergeSeedsCenterCut_B = cms.double(0.25),
    MergeSeedsCenterCut_A = cms.double(0.05),
    MergeSeedsDifferentHitsCut = cms.uint32(1),
    rphiStripRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    MaximalBarrelImpactParameter = cms.double(0.2),
    PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
    MaxNumberOfSeeds = cms.int32(-1),
    doClusterCheck = cms.bool(False),
    stereoStripRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHit"),
    ClusterCollectionLabel = cms.InputTag("siStripClusters"),
    OuterSeedRecHitAccessUseStereo = cms.bool(False),
    MaxNumberOfCosmicClusters = cms.uint32(300),
    MinimalReconstructedTransverseMomentum = cms.double(1.5),
    PhiRangeForDetIdLookupInRings = cms.double(0.5),
    Mode = cms.string('STANDARD'),
    MaxNumberOfPixelClusters = cms.uint32(300),
    AllNegativeOnly = cms.bool(False),
    RoadsLabel = cms.string(''),
    InnerSeedRecHitAccessMode = cms.string('RPHI'),
    InnerSeedRecHitAccessUseStereo = cms.bool(False),
    OuterSeedRecHitAccessUseRPhi = cms.bool(False),
    MergeSeedsRadiusCut_B = cms.double(0.25),
    MergeSeedsRadiusCut_C = cms.double(0.4),
    matchedStripRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    MergeSeedsRadiusCut_A = cms.double(0.05),
    InnerSeedRecHitAccessUseRPhi = cms.bool(False),
    AllPositiveOnly = cms.bool(False)
)


process.rpcRecHits = cms.EDProducer("RPCRecHitProducer",
    recAlgo = cms.string('RPCRecHitStandardAlgo'),
    deadvecfile = cms.FileInPath('RecoLocalMuon/RPCRecHit/data/RPCDeadVec.dat'),
    rpcDigiLabel = cms.InputTag("muonRPCDigis"),
    maskvecfile = cms.FileInPath('RecoLocalMuon/RPCRecHit/data/RPCMaskVec.dat'),
    recAlgoConfig = cms.PSet(

    ),
    deadSource = cms.string('File'),
    maskSource = cms.string('File')
)


process.rpcTriggerDigis = cms.EDProducer("RPCTrigger",
    RPCTriggerDebug = cms.untracked.int32(0),
    label = cms.string('muonRPCDigis')
)


process.rsTrackCandidates = cms.EDProducer("RoadSearchTrackCandidateMaker",
    NumHitCut = cms.int32(5),
    InitialVertexErrorXY = cms.double(0.2),
    HitChi2Cut = cms.double(30.0),
    StraightLineNoBeamSpotCloud = cms.bool(False),
    nFoundMin = cms.int32(4),
    MinimumChunkLength = cms.int32(7),
    TTRHBuilder = cms.string('WithTrackAngle'),
    CosmicTrackMerging = cms.bool(False),
    MeasurementTrackerName = cms.string(''),
    CloudProducer = cms.InputTag("roadSearchClouds"),
    CosmicSeedPt = cms.double(5.0),
    SplitMatchedHits = cms.bool(False)
)


process.rsWithMaterialTracks = cms.EDProducer("TrackProducer",
    src = cms.InputTag("rsTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('RKFittingSmoother'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    AlgorithmName = cms.string('rs'),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    GeometricInnerState = cms.bool(False),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.sc5JetID = cms.EDProducer("JetIDProducer",
    eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheRecHitsColl = cms.InputTag("hbhereco"),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    hoRecHitsColl = cms.InputTag("horeco"),
    ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    hfRecHitsColl = cms.InputTag("hfreco"),
    useRecHits = cms.bool(True),
    src = cms.InputTag("sisCone5CaloJets")
)


process.sc7JetID = cms.EDProducer("JetIDProducer",
    eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheRecHitsColl = cms.InputTag("hbhereco"),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    hoRecHitsColl = cms.InputTag("horeco"),
    ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    hfRecHitsColl = cms.InputTag("hfreco"),
    useRecHits = cms.bool(True),
    src = cms.InputTag("sisCone7CaloJets")
)


process.scalersRawToDigi = cms.EDProducer("ScalersRawToDigi",
    scalersInputTag = cms.InputTag("rawDataCollector")
)


process.secondaryVertexNegativeTagInfos = cms.EDProducer("SecondaryVertexProducer",
    trackSelection = cms.PSet(
        b_pT = cms.double(0.3684),
        a_dR = cms.double(-0.001053),
        min_pT = cms.double(120),
        max_pT = cms.double(500),
        min_pT_dRcut = cms.double(0.5),
        max_pT_trackPTcut = cms.double(3),
        max_pT_dRcut = cms.double(0.1),
        b_dR = cms.double(0.6263),
        a_pT = cms.double(0.005263),
        totalHitsMin = cms.uint32(8),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(2),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        useVariableJTA = cms.bool(False),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(99999.9),
        ptMin = cms.double(1.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    ),
    vertexCuts = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.65),
        distVal2dMax = cms.double(-0.01),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(-0.5),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(-99999.9),
        multiplicityMin = cms.uint32(2),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(-3.0),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(-2.5),
        distSig3dMin = cms.double(-99999.9)
    ),
    vertexReco = cms.PSet(
        seccut = cms.double(6.0),
        primcut = cms.double(1.8),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001),
        minweight = cms.double(0.5),
        finder = cms.string('avr')
    ),
    extSVDeltaRToJet = cms.double(0.3),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    useExternalSV = cms.bool(False),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfos"),
    minimumTrackWeight = cms.double(0.5),
    usePVError = cms.bool(True),
    trackSort = cms.string('sip3dSig'),
    extSVCollection = cms.InputTag("secondaryVertices")
)


process.secondaryVertexTagInfos = cms.EDProducer("SecondaryVertexProducer",
    trackSelection = cms.PSet(
        b_pT = cms.double(0.3684),
        a_dR = cms.double(-0.001053),
        min_pT = cms.double(120),
        max_pT = cms.double(500),
        min_pT_dRcut = cms.double(0.5),
        max_pT_trackPTcut = cms.double(3),
        max_pT_dRcut = cms.double(0.1),
        b_dR = cms.double(0.6263),
        a_pT = cms.double(0.005263),
        totalHitsMin = cms.uint32(8),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(2),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        useVariableJTA = cms.bool(False),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(99999.9),
        ptMin = cms.double(1.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    ),
    vertexCuts = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.65),
        distVal2dMax = cms.double(2.5),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(0.5),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(3.0),
        multiplicityMin = cms.uint32(2),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(99999.9),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(0.01),
        distSig3dMin = cms.double(-99999.9)
    ),
    vertexReco = cms.PSet(
        seccut = cms.double(6.0),
        primcut = cms.double(1.8),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001),
        minweight = cms.double(0.5),
        finder = cms.string('avr')
    ),
    extSVDeltaRToJet = cms.double(0.3),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    constraint = cms.string('BeamSpot'),
    useExternalSV = cms.bool(False),
    trackIPTagInfos = cms.InputTag("impactParameterTagInfos"),
    minimumTrackWeight = cms.double(0.5),
    usePVError = cms.bool(True),
    trackSort = cms.string('sip3dSig'),
    extSVCollection = cms.InputTag("secondaryVertices")
)


process.seedClusterRemover = cms.EDProducer("SeedClusterRemover",
    trajectories = cms.InputTag("initialStepSeeds"),
    stripClusters = cms.InputTag("siStripClusters"),
    overrideTrkQuals = cms.InputTag(""),
    pixelClusters = cms.InputTag("siPixelClusters"),
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True)
)


process.selectDigi = cms.EDProducer("EcalDigiSelector",
    EcalEBDigiTag = cms.InputTag("ecalDigis","ebDigis"),
    nclus_sel = cms.int32(2),
    EcalEEDigiTag = cms.InputTag("ecalDigis","eeDigis"),
    barrelSuperClusterProducer = cms.InputTag("uncleanedHybridSuperClusters"),
    selectedEcalEBDigiCollection = cms.string('selectedEcalEBDigiCollection'),
    selectedEcalEEDigiCollection = cms.string('selectedEcalEEDigiCollection'),
    endcapSuperClusterProducer = cms.InputTag("correctedMulti5x5SuperClustersWithPreshower"),
    EcalEBRecHitTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    EcalEERecHitTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    single_cluster_thresh = cms.double(15.0),
    cluster_pt_thresh = cms.double(10.0)
)


process.shrinkingConePFTauDecayModeIndexProducer = cms.EDProducer("PFRecoTauDecayModeIndexProducer",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    PFTauDecayModeProducer = cms.InputTag("shrinkingConePFTauDecayModeProducer")
)


process.shrinkingConePFTauDecayModeProducer = cms.EDProducer("PFRecoTauDecayModeDeterminator",
    mergeByBestMatch = cms.bool(True),
    refitTracks = cms.bool(False),
    maxPiZeroMass = cms.double(0.2),
    mergeLowPtPhotonsFirst = cms.bool(True),
    setMergedPi0Mass = cms.bool(True),
    setChargedPionMass = cms.bool(True),
    filterPhotons = cms.bool(True),
    minPtFractionSinglePhotons = cms.double(0.1),
    minPtFractionPiZeroes = cms.double(0.15),
    maxNbrOfIterations = cms.int32(10),
    filterTwoProngs = cms.bool(True),
    minPtFractionForSecondProng = cms.double(0.1),
    maxDistance = cms.double(0.01),
    setPi0Mass = cms.bool(True),
    maxPhotonsToMerge = cms.uint32(2),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer")
)


process.shrinkingConePFTauDiscriminationAgainstElectron = cms.EDProducer("PFRecoTauDiscriminationAgainstElectron",
    ApplyCut_ElectronPreID_2D = cms.bool(False),
    ApplyCut_EOverPLead = cms.bool(False),
    ElecPreID0_HOverPLead_minValue = cms.double(0.05),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    ApplyCut_ElectronPreID = cms.bool(False),
    ApplyCut_HcalTotOverPLead = cms.bool(False),
    EOverPLead_minValue = cms.double(0.8),
    ElecPreID1_EOverPLead_maxValue = cms.double(0.8),
    HcalMaxOverPLead_minValue = cms.double(0.1),
    ApplyCut_EmFraction = cms.bool(False),
    EmFraction_maxValue = cms.double(0.9),
    BremCombined_Mass = cms.double(0.55),
    ApplyCut_PFElectronMVA = cms.bool(True),
    PFElectronMVA_maxValue = cms.double(-0.1),
    ApplyCut_HcalMaxOverPLead = cms.bool(False),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    ApplyCut_BremCombined = cms.bool(False),
    Hcal3x3OverPLead_minValue = cms.double(0.1),
    ElecPreID1_HOverPLead_minValue = cms.double(0.15),
    ElecPreID0_EOverPLead_maxValue = cms.double(0.95),
    BremsRecoveryEOverPLead_minValue = cms.double(0.8),
    ApplyCut_EcalCrackCut = cms.bool(False),
    BremCombined_StripSize = cms.double(0.03),
    EOverPLead_maxValue = cms.double(1.8),
    HcalTotOverPLead_minValue = cms.double(0.1),
    ApplyCut_BremsRecoveryEOverPLead = cms.bool(False),
    ApplyCut_Hcal3x3OverPLead = cms.bool(False),
    BremCombined_HOP = cms.double(0.1),
    BremCombined_Fraction = cms.double(0.99),
    BremsRecoveryEOverPLead_maxValue = cms.double(1.8)
)


process.shrinkingConePFTauDiscriminationAgainstMuon = cms.EDProducer("PFRecoTauDiscriminationAgainstMuon",
    a = cms.double(0.5),
    c = cms.double(0.0),
    b = cms.double(0.5),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    discriminatorOption = cms.string('noSegMatch'),
    HoPMin = cms.double(0.2)
)


process.shrinkingConePFTauDiscriminationByECALIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.shrinkingConePFTauDiscriminationByECALIsolationUsingLeadingPion = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.shrinkingConePFTauDiscriminationByIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    maximumOccupancy = cms.uint32(0),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.shrinkingConePFTauDiscriminationByIsolationUsingLeadingPion = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(True),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    maximumOccupancy = cms.uint32(0),
    rhoProducer = cms.InputTag("kt6PFJets","rho"),
    deltaBetaFactor = cms.string('0.38'),
    applyRhoCorrection = cms.bool(False),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    isoConeSizeForDeltaBeta = cms.double(0.5),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    vertexSrc = cms.InputTag("offlinePrimaryVertices"),
    applySumPtCut = cms.bool(False),
    applyDeltaBetaCorrection = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    rhoConeSize = cms.double(0.5),
    rhoUEOffsetCorrection = cms.double(1.0),
    particleFlowSrc = cms.InputTag("particleFlow"),
    applyRelativeSumPtCut = cms.bool(False),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    )
)


process.shrinkingConePFTauDiscriminationByLeadingPionPtCut = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    UseOnlyChargedHadrons = cms.bool(False)
)


process.shrinkingConePFTauDiscriminationByLeadingTrackFinding = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(0.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    UseOnlyChargedHadrons = cms.bool(True)
)


process.shrinkingConePFTauDiscriminationByLeadingTrackPtCut = cms.EDProducer("PFRecoTauDiscriminationByLeadingObjectPtCut",
    MinPtLeadingObject = cms.double(5.0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and')
    ),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    UseOnlyChargedHadrons = cms.bool(True)
)


process.shrinkingConePFTauDiscriminationByTaNC = cms.EDProducer("RecoTauMVADiscriminator",
    discriminantOptions = cms.PSet(

    ),
    mvas = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        mvaLabel = cms.string('OneProngNoPiZero'),
        nCharged = cms.uint32(1)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            mvaLabel = cms.string('OneProngOnePiZero'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(2),
            mvaLabel = cms.string('OneProngTwoPiZero'),
            nCharged = cms.uint32(1)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            mvaLabel = cms.string('ThreeProngNoPiZero'),
            nCharged = cms.uint32(3)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            mvaLabel = cms.string('ThreeProngOnePiZero'),
            nCharged = cms.uint32(3)
        )),
    remapOutput = cms.bool(True),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    prefailValue = cms.double(-2.0),
    dbLabel = cms.string('')
)


process.shrinkingConePFTauDiscriminationByTaNCfrHalfPercent = cms.EDProducer("RecoTauDecayModeCutMultiplexer",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        nCharged = cms.uint32(1),
        cut = cms.double(0.9087875)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            nCharged = cms.uint32(1),
            cut = cms.double(0.8707145)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(2),
            nCharged = cms.uint32(1),
            cut = cms.double(0.921793)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            nCharged = cms.uint32(3),
            cut = cms.double(0.9451915)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            nCharged = cms.uint32(3),
            cut = cms.double(0.9488565)
        )),
    toMultiplex = cms.InputTag("shrinkingConePFTauDiscriminationByTaNC"),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer")
)


process.shrinkingConePFTauDiscriminationByTaNCfrOnePercent = cms.EDProducer("RecoTauDecayModeCutMultiplexer",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        nCharged = cms.uint32(1),
        cut = cms.double(0.7649845)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            nCharged = cms.uint32(1),
            cut = cms.double(0.699697)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(2),
            nCharged = cms.uint32(1),
            cut = cms.double(0.772231)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            nCharged = cms.uint32(3),
            cut = cms.double(0.905071)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            nCharged = cms.uint32(3),
            cut = cms.double(0.9238995)
        )),
    toMultiplex = cms.InputTag("shrinkingConePFTauDiscriminationByTaNC"),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer")
)


process.shrinkingConePFTauDiscriminationByTaNCfrQuarterPercent = cms.EDProducer("RecoTauDecayModeCutMultiplexer",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        nCharged = cms.uint32(1),
        cut = cms.double(0.9539685)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            nCharged = cms.uint32(1),
            cut = cms.double(0.940843)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(2),
            nCharged = cms.uint32(1),
            cut = cms.double(0.9645195)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            nCharged = cms.uint32(3),
            cut = cms.double(0.960407)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            nCharged = cms.uint32(3),
            cut = cms.double(0.994065)
        )),
    toMultiplex = cms.InputTag("shrinkingConePFTauDiscriminationByTaNC"),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer")
)


process.shrinkingConePFTauDiscriminationByTaNCfrTenthPercent = cms.EDProducer("RecoTauDecayModeCutMultiplexer",
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    decayModes = cms.VPSet(cms.PSet(
        nPiZeros = cms.uint32(0),
        nCharged = cms.uint32(1),
        cut = cms.double(0.959384)
    ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            nCharged = cms.uint32(1),
            cut = cms.double(0.991353)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(2),
            nCharged = cms.uint32(1),
            cut = cms.double(0.9712775)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(0),
            nCharged = cms.uint32(3),
            cut = cms.double(0.9875015)
        ), 
        cms.PSet(
            nPiZeros = cms.uint32(1),
            nCharged = cms.uint32(3),
            cut = cms.double(1.0234655)
        )),
    toMultiplex = cms.InputTag("shrinkingConePFTauDiscriminationByTaNC"),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer")
)


process.shrinkingConePFTauDiscriminationByTrackIsolation = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadTrack = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.shrinkingConePFTauDiscriminationByTrackIsolationUsingLeadingPion = cms.EDProducer("PFRecoTauDiscriminationByIsolation",
    ApplyDiscriminationByECALIsolation = cms.bool(False),
    PFTauProducer = cms.InputTag("shrinkingConePFTauProducer"),
    maximumSumPtCut = cms.double(6.0),
    relativeSumPtCut = cms.double(0.0),
    maximumOccupancy = cms.uint32(0),
    Prediscriminants = cms.PSet(
        BooleanOperator = cms.string('and'),
        leadPion = cms.PSet(
            cut = cms.double(0.5),
            Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
        )
    ),
    applyOccupancyCut = cms.bool(True),
    applySumPtCut = cms.bool(False),
    ApplyDiscriminationByTrackerIsolation = cms.bool(True),
    qualityCuts = cms.PSet(
        isolationQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(8),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(1.0),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(1.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        ),
        pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
        primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
        signalQualityCuts = cms.PSet(
            minTrackHits = cms.uint32(3),
            minTrackVertexWeight = cms.double(-1),
            minTrackPt = cms.double(0.5),
            maxTrackChi2 = cms.double(100.0),
            minTrackPixelHits = cms.uint32(0),
            minGammaEt = cms.double(0.5),
            maxDeltaZ = cms.double(0.2),
            maxTransverseImpactParameter = cms.double(0.03)
        )
    ),
    applyRelativeSumPtCut = cms.bool(False)
)


process.shrinkingConePFTauProducer = cms.EDProducer("RecoTauPiZeroUnembedder",
    src = cms.InputTag("shrinkingConePFTauProducerSansRefs"),
    builders = cms.VPSet(cms.PSet(
        usePFLeptons = cms.bool(True),
        signalConeNeutralHadrons = cms.string('0.15'),
        name = cms.string('shrinkingCone'),
        plugin = cms.string('RecoTauBuilderConePlugin'),
        isoConeChargedHadrons = cms.string('0.5'),
        isoConePiZeros = cms.string('0.5'),
        isoConeNeutralHadrons = cms.string('0.5'),
        matchingCone = cms.string('0.1'),
        signalConeChargedHadrons = cms.string('min(max(5.0/et(), 0.07), 0.15)'),
        leadObjectPt = cms.double(5.0),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        signalConePiZeros = cms.string('0.15'),
        pfCandSrc = cms.InputTag("particleFlow")
    )),
    modifiers = cms.VPSet(cms.PSet(
        ElectronPreIDProducer = cms.InputTag("elecpreid"),
        name = cms.string('shrinkingConeElectronRej'),
        plugin = cms.string('RecoTauElectronRejectionPlugin'),
        DataType = cms.string('AOD'),
        maximumForElectrionPreIDOutput = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
        EcalStripSumE_minClusEnergy = cms.double(0.1),
        ElecPreIDLeadTkMatch_maxDR = cms.double(0.01),
        EcalStripSumE_deltaEta = cms.double(0.03)
    ), 
        cms.PSet(
            pfTauTagInfoSrc = cms.InputTag("pfRecoTauTagInfoProducer"),
            name = cms.string('TTIworkaround'),
            plugin = cms.string('RecoTauTagInfoWorkaroundModifer')
        )),
    piZeroSrc = cms.InputTag("ak5PFJetsLegacyTaNCPiZeros")
)


process.shrinkingConePFTauProducerSansRefs = cms.EDProducer("RecoTauProducer",
    piZeroSrc = cms.InputTag("ak5PFJetsRecoTauPiZeros"),
    modifiers = cms.VPSet(cms.PSet(
        ElectronPreIDProducer = cms.InputTag("elecpreid"),
        name = cms.string('shrinkingConeElectronRej'),
        plugin = cms.string('RecoTauElectronRejectionPlugin'),
        DataType = cms.string('AOD'),
        maximumForElectrionPreIDOutput = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
        EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
        EcalStripSumE_minClusEnergy = cms.double(0.1),
        ElecPreIDLeadTkMatch_maxDR = cms.double(0.01),
        EcalStripSumE_deltaEta = cms.double(0.03)
    ), 
        cms.PSet(
            pfTauTagInfoSrc = cms.InputTag("pfRecoTauTagInfoProducer"),
            name = cms.string('TTIworkaround'),
            plugin = cms.string('RecoTauTagInfoWorkaroundModifer')
        )),
    jetRegionSrc = cms.InputTag("recoTauAK5PFJets08Region"),
    jetSrc = cms.InputTag("ak5PFJets"),
    builders = cms.VPSet(cms.PSet(
        usePFLeptons = cms.bool(True),
        signalConeNeutralHadrons = cms.string('0.15'),
        name = cms.string('shrinkingCone'),
        plugin = cms.string('RecoTauBuilderConePlugin'),
        isoConeChargedHadrons = cms.string('0.5'),
        isoConePiZeros = cms.string('0.5'),
        isoConeNeutralHadrons = cms.string('0.5'),
        matchingCone = cms.string('0.1'),
        signalConeChargedHadrons = cms.string('min(max(5.0/et(), 0.07), 0.15)'),
        leadObjectPt = cms.double(5.0),
        qualityCuts = cms.PSet(
            isolationQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(8),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(1.0),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(1.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            ),
            pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
            primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
            signalQualityCuts = cms.PSet(
                minTrackHits = cms.uint32(3),
                minTrackVertexWeight = cms.double(-1),
                minTrackPt = cms.double(0.5),
                maxTrackChi2 = cms.double(100.0),
                minTrackPixelHits = cms.uint32(0),
                minGammaEt = cms.double(0.5),
                maxDeltaZ = cms.double(0.2),
                maxTransverseImpactParameter = cms.double(0.03)
            )
        ),
        signalConePiZeros = cms.string('0.15'),
        pfCandSrc = cms.InputTag("particleFlow")
    )),
    buildNullTaus = cms.bool(True)
)


process.siPixelClusters = cms.EDProducer("SiPixelClusterProducer",
    src = cms.InputTag("siPixelDigis"),
    ChannelThreshold = cms.int32(1000),
    maxNumberOfClusters = cms.int32(-1),
    SplitClusters = cms.bool(False),
    MissCalibrate = cms.untracked.bool(True),
    VCaltoElectronGain = cms.int32(65),
    VCaltoElectronOffset = cms.int32(-414),
    payloadType = cms.string('Offline'),
    SeedThreshold = cms.int32(1000),
    ClusterThreshold = cms.double(4000.0)
)


process.siPixelDigis = cms.EDProducer("SiPixelRawToDigi",
    UseQualityInfo = cms.bool(False),
    CheckPixelOrder = cms.bool(False),
    IncludeErrors = cms.bool(True),
    UseCablingTree = cms.untracked.bool(True),
    InputLabel = cms.InputTag("rawDataCollector"),
    ErrorList = cms.vint32(29),
    Regions = cms.PSet(

    ),
    Timing = cms.untracked.bool(False),
    UserErrorList = cms.vint32(40)
)


process.siPixelRecHits = cms.EDProducer("SiPixelRecHitConverter",
    VerboseLevel = cms.untracked.int32(0),
    src = cms.InputTag("siPixelClusters"),
    CPE = cms.string('PixelCPEGeneric')
)


process.siStripClusters = cms.EDProducer("SiStripClusterizer",
    DigiProducersList = cms.VInputTag(cms.InputTag("siStripDigis","ZeroSuppressed"), cms.InputTag("siStripZeroSuppression","VirginRaw"), cms.InputTag("siStripZeroSuppression","ProcessedRaw"), cms.InputTag("siStripZeroSuppression","ScopeMode")),
    Clusterizer = cms.PSet(
        ChannelThreshold = cms.double(2.0),
        MaxSequentialBad = cms.uint32(1),
        Algorithm = cms.string('ThreeThresholdAlgorithm'),
        MaxSequentialHoles = cms.uint32(0),
        MaxAdjacentBad = cms.uint32(0),
        QualityLabel = cms.string(''),
        SeedThreshold = cms.double(3.0),
        RemoveApvShots = cms.bool(True),
        ClusterThreshold = cms.double(5.0)
    )
)


process.siStripDigis = cms.EDProducer("SiStripRawToDigiModule",
    UseDaqRegister = cms.bool(False),
    ProductLabel = cms.InputTag("rawDataCollector"),
    DoAPVEmulatorCheck = cms.bool(False),
    UnpackCommonModeValues = cms.bool(False),
    AppendedBytes = cms.int32(0),
    UseFedKey = cms.bool(False),
    ErrorThreshold = cms.uint32(7174),
    TriggerFedId = cms.int32(0),
    MarkModulesOnMissingFeds = cms.bool(True),
    UnpackBadChannels = cms.bool(False),
    DoAllCorruptBufferChecks = cms.bool(False)
)


process.siStripElectronToTrackAssociator = cms.EDProducer("SiStripElectronAssociator",
    siStripElectronCollection = cms.InputTag("siStripElectrons"),
    trackCollection = cms.InputTag("egammaCTFFinalFitWithMaterial"),
    electronsLabel = cms.InputTag("siStripElectrons")
)


process.siStripElectrons = cms.EDProducer("SiStripElectronProducer",
    siStereoHitCollection = cms.string('stereoRecHit'),
    maxHitsOnDetId = cms.int32(4),
    minHits = cms.int32(5),
    trackCandidatesLabel = cms.string(''),
    superClusterProducer = cms.string('correctedHybridSuperClusters'),
    phiBandWidth = cms.double(0.01),
    siStripElectronsLabel = cms.string(''),
    maxNormResid = cms.double(10.0),
    siHitProducer = cms.string('siStripMatchedRecHits'),
    maxReducedChi2 = cms.double(10000.0),
    siRphiHitCollection = cms.string('rphiRecHit'),
    originUncertainty = cms.double(15.0),
    siMatchedHitCollection = cms.string('matchedRecHit'),
    superClusterCollection = cms.string('')
)


process.siStripMatchedRecHits = cms.EDProducer("SiStripRecHitConverter",
    StripCPE = cms.ESInputTag("StripCPEfromTrackAngleESProducer","StripCPEfromTrackAngle"),
    Regional = cms.bool(False),
    stereoRecHits = cms.string('stereoRecHit'),
    useSiStripQuality = cms.bool(False),
    matchedRecHits = cms.string('matchedRecHit'),
    LazyGetterProducer = cms.InputTag("SiStripRawToClustersFacility"),
    ClusterProducer = cms.InputTag("siStripClusters"),
    VerbosityLevel = cms.untracked.int32(1),
    rphiRecHits = cms.string('rphiRecHit'),
    Matcher = cms.ESInputTag("SiStripRecHitMatcherESProducer","StandardMatcher"),
    siStripQualityLabel = cms.ESInputTag(""),
    MaskBadAPVFibers = cms.bool(False)
)


process.siStripZeroSuppression = cms.EDProducer("SiStripZeroSuppression",
    fixCM = cms.bool(False),
    DigisToMergeVR = cms.InputTag("siStripVRDigis","VirginRaw"),
    produceCalculatedBaseline = cms.bool(False),
    produceRawDigis = cms.bool(True),
    RawDigiProducersList = cms.VInputTag(cms.InputTag("siStripDigis","VirginRaw"), cms.InputTag("siStripDigis","ProcessedRaw"), cms.InputTag("siStripDigis","ScopeMode")),
    storeInZScollBadAPV = cms.bool(True),
    mergeCollections = cms.bool(False),
    Algorithms = cms.PSet(
        CutToAvoidSignal = cms.double(2.0),
        slopeY = cms.int32(4),
        slopeX = cms.int32(3),
        PedestalSubtractionFedMode = cms.bool(False),
        Fraction = cms.double(0.2),
        minStripsToFit = cms.uint32(4),
        consecThreshold = cms.uint32(5),
        hitStripThreshold = cms.uint32(40),
        Deviation = cms.uint32(25),
        CommonModeNoiseSubtractionMode = cms.string('IteratedMedian'),
        filteredBaselineDerivativeSumSquare = cms.double(30),
        ApplyBaselineCleaner = cms.bool(True),
        doAPVRestore = cms.bool(True),
        TruncateInSuppressor = cms.bool(True),
        restoreThreshold = cms.double(0.5),
        APVInspectMode = cms.string('BaselineFollower'),
        ForceNoRestore = cms.bool(False),
        useRealMeanCM = cms.bool(False),
        ApplyBaselineRejection = cms.bool(True),
        DeltaCMThreshold = cms.uint32(20),
        nSigmaNoiseDerTh = cms.uint32(4),
        nSaturatedStrip = cms.uint32(2),
        SiStripFedZeroSuppressionMode = cms.uint32(4),
        useCMMeanMap = cms.bool(False),
        SelfSelectRestoreAlgo = cms.bool(False),
        distortionThreshold = cms.uint32(20),
        filteredBaselineMax = cms.double(6),
        Iterations = cms.int32(3),
        CleaningSequence = cms.uint32(1),
        nSmooth = cms.uint32(9),
        APVRestoreMode = cms.string('BaselineFollower'),
        MeanCM = cms.int32(0)
    ),
    DigisToMergeZS = cms.InputTag("siStripDigis","ZeroSuppressed"),
    storeCM = cms.bool(True),
    produceBaselinePoints = cms.bool(False)
)


process.simEcalTriggerPrimitiveDigis = cms.EDProducer("EcalTrigPrimProducer",
    BarrelOnly = cms.bool(False),
    InstanceEB = cms.string(''),
    InstanceEE = cms.string(''),
    binOfMaximum = cms.int32(6),
    Famos = cms.bool(False),
    TcpOutput = cms.bool(False),
    Debug = cms.bool(False),
    Label = cms.string('simEcalUnsuppressedDigis')
)


process.simHcalTriggerPrimitiveDigis = cms.EDProducer("HcalTrigPrimDigiProducer",
    latency = cms.int32(1),
    MinSignalThreshold = cms.uint32(0),
    ZS_threshold = cms.uint32(1),
    PMTNoiseThreshold = cms.uint32(0),
    InputTagFEDRaw = cms.InputTag("rawDataCollector"),
    inputLabel = cms.VInputTag(cms.InputTag("simHcalUnsuppressedDigis"), cms.InputTag("simHcalUnsuppressedDigis")),
    numberOfPresamples = cms.int32(2),
    PeakFinderAlgorithm = cms.int32(2),
    numberOfSamples = cms.int32(4),
    weights = cms.vdouble(1.0, 1.0),
    RunZS = cms.bool(False),
    FG_threshold = cms.uint32(12),
    FrontEndFormatError = cms.bool(False),
    peakFilter = cms.bool(True)
)


process.simpleSecondaryVertexBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex2Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfos"))
)


process.simpleSecondaryVertexHighEffBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex2Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfos"))
)


process.simpleSecondaryVertexHighPurBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex3Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexTagInfos"))
)


process.simpleSecondaryVertexNegativeHighEffBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex2Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexNegativeTagInfos"))
)


process.simpleSecondaryVertexNegativeHighPurBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('simpleSecondaryVertex3Trk'),
    tagInfos = cms.VInputTag(cms.InputTag("secondaryVertexNegativeTagInfos"))
)


process.sisCone5CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    doAreaDiskApprox = cms.bool(False),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('SISCone'),
    rParam = cms.double(0.5),
    restrictInputs = cms.bool(True),
    maxInputs = cms.uint32(1000)
)


process.sisCone5CaloJetsPUCorr = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('SISCone'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    restrictInputs = cms.bool(True),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.5),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxInputs = cms.uint32(1000),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0)
)


process.sisCone5JetExtender = cms.EDProducer("JetExtender",
    jets = cms.InputTag("sisCone5CaloJets"),
    jet2TracksAtCALO = cms.InputTag("sisCone5JetTracksAssociatorAtCaloFace"),
    jet2TracksAtVX = cms.InputTag("sisCone5JetTracksAssociatorAtVertex"),
    coneSize = cms.double(0.5)
)


process.sisCone5JetTracksAssociatorAtCaloFace = cms.EDProducer("JetTracksAssociatorAtCaloFace",
    trackQuality = cms.string('goodIterative'),
    tracks = cms.InputTag("generalTracks"),
    coneSize = cms.double(0.5),
    extrapolations = cms.InputTag("trackExtrapolator"),
    jets = cms.InputTag("sisCone5CaloJets")
)


process.sisCone5JetTracksAssociatorAtVertex = cms.EDProducer("JetTracksAssociatorAtVertex",
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices"),
    jets = cms.InputTag("sisCone5CaloJets")
)


process.sisCone5PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doOutputJets = cms.bool(True),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    srcPVs = cms.InputTag(""),
    inputEtMin = cms.double(0.0),
    doAreaFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    jetPtMin = cms.double(3.0),
    jetType = cms.string('PFJet'),
    src = cms.InputTag("particleFlow"),
    doPUOffsetCorr = cms.bool(False),
    radiusPU = cms.double(0.5),
    doAreaDiskApprox = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('SISCone'),
    rParam = cms.double(0.5)
)


process.sisCone5TrackJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    doAreaDiskApprox = cms.bool(False),
    jetType = cms.string('TrackJet'),
    MinVtxNdof = cms.int32(5),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    MaxVtxZ = cms.double(15.0),
    UseOnlyVertexTracks = cms.bool(False),
    UseOnlyOnePV = cms.bool(False),
    DzTrVtxMax = cms.double(1),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("trackRefsForJets"),
    jetPtMin = cms.double(3.0),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    DxyTrVtxMax = cms.double(0.2),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999),
    jetAlgorithm = cms.string('SISCone'),
    rParam = cms.double(0.5)
)


process.sisCone7CaloJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('SISCone'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0),
    restrictInputs = cms.bool(True),
    maxInputs = cms.uint32(1000)
)


process.sisCone7CaloJetsPUCorr = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    Ghost_EtaMax = cms.double(5.0),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('CaloJet'),
    minSeed = cms.uint32(14327),
    voronoiRfact = cms.double(-0.9),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('SISCone'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    restrictInputs = cms.bool(True),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(True),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("towerMaker"),
    inputEtMin = cms.double(0.3),
    puPtMin = cms.double(10),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxInputs = cms.uint32(1000),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(True),
    inputEMin = cms.double(0.0)
)


process.sisCone7PFJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('PFJet'),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('SISCone'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    Rho_EtaMax = cms.double(4.4),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    maxRecoveredHcalCells = cms.uint32(9999999),
    rParam = cms.double(0.7),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("particleFlow"),
    inputEtMin = cms.double(0.0),
    srcPVs = cms.InputTag(""),
    jetPtMin = cms.double(3.0),
    radiusPU = cms.double(0.5),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.sisCone7TrackJets = cms.EDProducer("FastjetJetProducer",
    Active_Area_Repeats = cms.int32(1),
    doAreaFastjet = cms.bool(False),
    voronoiRfact = cms.double(-0.9),
    maxBadHcalCells = cms.uint32(9999999),
    doAreaDiskApprox = cms.bool(False),
    maxRecoveredEcalCells = cms.uint32(9999999),
    jetType = cms.string('TrackJet'),
    MinVtxNdof = cms.int32(5),
    minSeed = cms.uint32(14327),
    Ghost_EtaMax = cms.double(5.0),
    doRhoFastjet = cms.bool(False),
    jetAlgorithm = cms.string('SISCone'),
    nSigmaPU = cms.double(1.0),
    GhostArea = cms.double(0.01),
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    useDeterministicSeed = cms.bool(True),
    doPVCorrection = cms.bool(False),
    MaxVtxZ = cms.double(15.0),
    rParam = cms.double(0.7),
    UseOnlyVertexTracks = cms.bool(False),
    UseOnlyOnePV = cms.bool(False),
    DzTrVtxMax = cms.double(1),
    maxProblematicHcalCells = cms.uint32(9999999),
    doOutputJets = cms.bool(True),
    src = cms.InputTag("trackRefsForJets"),
    jetPtMin = cms.double(3.0),
    srcPVs = cms.InputTag("offlinePrimaryVertices"),
    inputEtMin = cms.double(0.0),
    radiusPU = cms.double(0.5),
    DxyTrVtxMax = cms.double(0.2),
    maxProblematicEcalCells = cms.uint32(9999999),
    doPUOffsetCorr = cms.bool(False),
    inputEMin = cms.double(0.0)
)


process.softElectronBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softElectron'),
    tagInfos = cms.VInputTag(cms.InputTag("softElectronTagInfos"))
)


process.softElectronByIP3dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softLeptonByIP3d'),
    tagInfos = cms.VInputTag(cms.InputTag("softElectronTagInfos"))
)


process.softElectronByPtBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softLeptonByPt'),
    tagInfos = cms.VInputTag(cms.InputTag("softElectronTagInfos"))
)


process.softElectronCands = cms.EDProducer("SoftElectronCandProducer",
    BarreldRGsfTrackElectronCuts = cms.vdouble(0.0, 0.017),
    BarrelEemPinRatioCuts = cms.vdouble(-0.9, 0.39),
    BarrelMVACuts = cms.vdouble(-0.1, 1.0),
    BarrelPtCuts = cms.vdouble(2.0, 9999.0),
    ForwarddRGsfTrackElectronCuts = cms.vdouble(0.0, 0.006),
    ForwardPtCuts = cms.vdouble(2.0, 9999.0),
    ForwardMVACuts = cms.vdouble(-0.24, 1.0),
    ForwardInverseFBremCuts = cms.vdouble(1.0, 7.01),
    electrons = cms.InputTag("gsfElectrons")
)


process.softElectronSelector = cms.EDProducer("BtagGsfElectronSelector",
    input = cms.InputTag("gsfElectrons"),
    selection = cms.InputTag("eidLoose"),
    cut = cms.double(0.5)
)


process.softElectronTagInfos = cms.EDProducer("SoftLepton",
    muonSelection = cms.uint32(0),
    leptons = cms.InputTag("gsfElectrons"),
    primaryVertex = cms.InputTag("offlinePrimaryVertices"),
    leptonCands = cms.InputTag("softElectronCands"),
    leptonId = cms.InputTag(""),
    refineJetAxis = cms.uint32(0),
    jets = cms.InputTag("ak5CaloJets"),
    leptonDeltaRCut = cms.double(0.4),
    leptonChi2Cut = cms.double(10.0)
)


process.softMuonBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softMuon'),
    tagInfos = cms.VInputTag(cms.InputTag("softMuonTagInfos"))
)


process.softMuonByIP3dBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softLeptonByIP3d'),
    tagInfos = cms.VInputTag(cms.InputTag("softMuonTagInfos"))
)


process.softMuonByPtBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softLeptonByPt'),
    tagInfos = cms.VInputTag(cms.InputTag("softMuonTagInfos"))
)


process.softMuonNoIPBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('softMuonNoIP'),
    tagInfos = cms.VInputTag(cms.InputTag("softMuonTagInfos"))
)


process.softMuonTagInfos = cms.EDProducer("SoftLepton",
    muonSelection = cms.uint32(1),
    leptons = cms.InputTag("muons"),
    primaryVertex = cms.InputTag("offlinePrimaryVertices"),
    leptonCands = cms.InputTag(""),
    leptonId = cms.InputTag(""),
    refineJetAxis = cms.uint32(0),
    jets = cms.InputTag("ak5CaloJets"),
    leptonDeltaRCut = cms.double(0.4),
    leptonChi2Cut = cms.double(9999.0)
)


process.standAloneMuons = cms.EDProducer("StandAloneMuonProducer",
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(True)
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    InputObjects = cms.InputTag("ancientMuonSeed"),
    MuonTrajectoryBuilder = cms.string('Exhaustive'),
    STATrajBuilderParameters = cms.PSet(
        DoRefit = cms.bool(False),
        DoSeedRefit = cms.bool(False),
        FilterParameters = cms.PSet(
            NumberOfSigma = cms.double(3.0),
            FitDirection = cms.string('insideOut'),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            MaxChi2 = cms.double(1000.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                MaxChi2 = cms.double(25.0),
                RescaleErrorFactor = cms.double(100.0),
                Granularity = cms.int32(0),
                ExcludeRPCFromFit = cms.bool(False),
                UseInvalidHits = cms.bool(True),
                RescaleError = cms.bool(False)
            ),
            EnableRPCMeasurement = cms.bool(True),
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            EnableDTMeasurement = cms.bool(True),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            EnableCSCMeasurement = cms.bool(True)
        ),
        SeedPropagator = cms.string('SteppingHelixPropagatorAny'),
        NavigationType = cms.string('Standard'),
        SeedTransformerParameters = cms.PSet(
            Fitter = cms.string('KFFitterSmootherSTA'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            UseSubRecHits = cms.bool(False),
            NMinRecHits = cms.uint32(2),
            RescaleError = cms.double(100.0)
        ),
        DoBackwardFilter = cms.bool(True),
        SeedPosition = cms.string('in'),
        BWFilterParameters = cms.PSet(
            NumberOfSigma = cms.double(3.0),
            BWSeedType = cms.string('fromGenerator'),
            FitDirection = cms.string('outsideIn'),
            DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
            MaxChi2 = cms.double(100.0),
            MuonTrajectoryUpdatorParameters = cms.PSet(
                MaxChi2 = cms.double(25.0),
                RescaleErrorFactor = cms.double(100.0),
                Granularity = cms.int32(0),
                ExcludeRPCFromFit = cms.bool(False),
                UseInvalidHits = cms.bool(True),
                RescaleError = cms.bool(False)
            ),
            EnableRPCMeasurement = cms.bool(True),
            CSCRecSegmentLabel = cms.InputTag("cscSegments"),
            EnableDTMeasurement = cms.bool(True),
            RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            EnableCSCMeasurement = cms.bool(True)
        ),
        RefitterParameters = cms.PSet(
            FitterName = cms.string('KFFitterSmootherSTA'),
            MaxFractionOfLostHits = cms.double(0.05),
            ForceAllIterations = cms.bool(False),
            NumberOfIterations = cms.uint32(3),
            RescaleError = cms.double(100.0)
        )
    )
)


process.standAloneSETMuons = cms.EDProducer("StandAloneMuonProducer",
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(True)
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    InputObjects = cms.InputTag("SETMuonSeed"),
    MuonTrajectoryBuilder = cms.string('DirectMuonTrajectoryBuilder'),
    STATrajBuilderParameters = cms.PSet(
        SeedTransformerParameters = cms.PSet(
            Fitter = cms.string('KFFitterSmootherSTA'),
            MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            UseSubRecHits = cms.bool(False),
            NMinRecHits = cms.uint32(2),
            RescaleError = cms.double(1.0)
        )
    )
)


process.stripPairElectronSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    OrderedHitsFactoryPSet = cms.PSet(
        maxElement = cms.uint32(1000000),
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.string('stripPairElectronSeedLayers')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    ClusterCheckPSet = cms.PSet(
        MaxNumberOfPixelClusters = cms.uint32(40000),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters")
    ),
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originRadius = cms.double(0.4),
            ptMin = cms.double(1.0),
            originHalfLength = cms.double(12.0)
        ),
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot')
    ),
    SeedCreatorPSet = cms.PSet(
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial'),
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator')
    )
)


process.tcMet = cms.EDProducer("METProducer",
    vertexRho = cms.double(2.0),
    eVetoDeltaPhi = cms.double(100.0),
    PFClustersHCAL = cms.InputTag("particleFlowClusterHCAL"),
    PFClustersHFHAD = cms.InputTag("particleFlowClusterHFHAD"),
    dupMinPt = cms.double(0.0),
    usedeltaRRejection = cms.bool(False),
    vertexZ = cms.double(15.0),
    nLayersTight = cms.int32(0),
    vertexNdof = cms.int32(4),
    ptErr_max = cms.double(0.2),
    corner = cms.double(1.479),
    PFClustersECAL = cms.InputTag("particleFlowClusterECAL"),
    eta_max = cms.double(2.65),
    METType = cms.string('TCMET'),
    eVetoDeltaCotTheta = cms.double(100.0),
    tcmetDepValueMap = cms.InputTag("muonTCMETValueMapProducer","muCorrData"),
    maxd0cut = cms.double(0.3),
    alias = cms.string('TCMET'),
    d0cutb = cms.double(0.5),
    trackInputTag = cms.InputTag("generalTracks"),
    usePFClusters = cms.bool(False),
    vertexMaxDZ = cms.double(0.2),
    deltaRShower = cms.double(0.01),
    chi2_max = cms.double(5),
    zdist = cms.double(314.0),
    noHF = cms.bool(False),
    track_algos = cms.vint32(),
    ptErr_tight_max = cms.double(0.2),
    InputType = cms.string('CaloMET:Electron:Muon:Track'),
    maxTrackAlgo = cms.int32(8),
    nLayers = cms.int32(0),
    muonInputTag = cms.InputTag("muons"),
    correctShowerTracks = cms.bool(False),
    vetoDuplicates = cms.bool(False),
    pt_max = cms.double(100.0),
    nhits_tight_min = cms.double(9),
    nMinOuterHits = cms.int32(2),
    globalThreshold = cms.double(0.0),
    chi2_tight_max = cms.double(5.0),
    src = cms.InputTag("towerMaker"),
    checkTrackPropagation = cms.bool(False),
    dupDPhi = cms.double(0.03),
    electronInputTag = cms.InputTag("gsfElectrons"),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    d0cuta = cms.double(0.015),
    hOverECut = cms.double(0.1),
    vertexInputTag = cms.InputTag("offlinePrimaryVertices"),
    electronVetoCone = cms.bool(True),
    muonDepValueMap = cms.InputTag("muonMETValueMapProducer","muCorrData"),
    metInputTag = cms.InputTag("met"),
    usePvtxd0 = cms.bool(False),
    dupDCotTh = cms.double(0.0006),
    PFClustersHFEM = cms.InputTag("particleFlowClusterHFEM"),
    maxpt_eta25 = cms.double(0.0),
    nhits_min = cms.double(6),
    eVetoDeltaR = cms.double(0.015),
    maxpt_eta20 = cms.double(100.0),
    pt_min = cms.double(1.0),
    rf_type = cms.int32(1),
    radius = cms.double(130.0),
    track_quality = cms.vint32(2),
    isCosmics = cms.bool(False),
    eVetoMinElectronPt = cms.double(10.0)
)


process.tcMetWithPFclusters = cms.EDProducer("METProducer",
    vertexRho = cms.double(2.0),
    eVetoDeltaPhi = cms.double(100.0),
    PFClustersHCAL = cms.InputTag("particleFlowClusterHCAL"),
    PFClustersHFHAD = cms.InputTag("particleFlowClusterHFHAD"),
    dupMinPt = cms.double(0.0),
    chi2_tight_max = cms.double(5.0),
    vertexZ = cms.double(15.0),
    nLayersTight = cms.int32(0),
    vertexNdof = cms.int32(4),
    ptErr_max = cms.double(0.2),
    corner = cms.double(1.479),
    PFClustersECAL = cms.InputTag("particleFlowClusterECAL"),
    eta_max = cms.double(2.65),
    muonInputTag = cms.InputTag("muons"),
    eVetoDeltaCotTheta = cms.double(100.0),
    maxd0cut = cms.double(0.3),
    PFClustersHFEM = cms.InputTag("particleFlowClusterHFEM"),
    d0cutb = cms.double(0.5),
    checkTrackPropagation = cms.bool(False),
    usePFClusters = cms.bool(True),
    vertexMaxDZ = cms.double(0.2),
    deltaRShower = cms.double(0.01),
    chi2_max = cms.double(5),
    maxpt_eta25 = cms.double(0.0),
    noHF = cms.bool(False),
    track_algos = cms.vint32(),
    ptErr_tight_max = cms.double(0.2),
    InputType = cms.string('CaloMET:Electron:Muon:Track'),
    maxTrackAlgo = cms.int32(8),
    nLayers = cms.int32(0),
    METType = cms.string('TCMET'),
    correctShowerTracks = cms.bool(False),
    vetoDuplicates = cms.bool(False),
    pt_max = cms.double(100.0),
    radius = cms.double(130.0),
    nhits_tight_min = cms.double(9),
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    dupDCotTh = cms.double(0.0006),
    globalThreshold = cms.double(0.0),
    usedeltaRRejection = cms.bool(False),
    src = cms.InputTag("towerMaker"),
    trackInputTag = cms.InputTag("generalTracks"),
    dupDPhi = cms.double(0.03),
    electronInputTag = cms.InputTag("gsfElectrons"),
    tcmetDepValueMap = cms.InputTag("muonTCMETValueMapProducer","muCorrData"),
    d0cuta = cms.double(0.015),
    hOverECut = cms.double(0.1),
    electronVetoCone = cms.bool(True),
    muonDepValueMap = cms.InputTag("muonMETValueMapProducer","muCorrData"),
    metInputTag = cms.InputTag("met"),
    usePvtxd0 = cms.bool(False),
    vertexInputTag = cms.InputTag("offlinePrimaryVertices"),
    alias = cms.string('TCMET'),
    zdist = cms.double(314.0),
    nhits_min = cms.double(6),
    eVetoDeltaR = cms.double(0.015),
    maxpt_eta20 = cms.double(100.0),
    pt_min = cms.double(1.0),
    rf_type = cms.int32(1),
    nMinOuterHits = cms.int32(2),
    track_quality = cms.vint32(2),
    isCosmics = cms.bool(False),
    eVetoMinElectronPt = cms.double(10.0)
)


process.tcRecoTauProducer = cms.EDProducer("TCRecoTauProducer",
    tkminTrackerHitsn = cms.int32(5),
    PVProducer = cms.InputTag("offlinePrimaryVertices"),
    EtCaloOverTrackMin = cms.double(-0.9),
    EERecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    tkmaxChi2 = cms.double(100.0),
    EtHcalOverTrackMin = cms.double(-0.3),
    CaloRecoTauProducer = cms.InputTag("JPTCaloRecoTauProducer"),
    EBRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    tkminPixelHitsn = cms.int32(0),
    MatchingConeSize = cms.double(0.1),
    TrackCollection = cms.InputTag("generalTracks"),
    HBHERecHitCollection = cms.InputTag("hbhereco"),
    EtCaloOverTrackMax = cms.double(0.0),
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(9999.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.2),
        useMuon = cms.bool(True),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    ),
    SignalConeSize = cms.double(0.2),
    EcalConeSize = cms.double(0.5),
    Track_minPt = cms.double(1.0),
    EtHcalOverTrackMax = cms.double(1.0),
    HFRecHitCollection = cms.InputTag("hfreco"),
    DropRejectedJets = cms.untracked.bool(False),
    HORecHitCollection = cms.InputTag("horeco"),
    DropCaloJets = cms.untracked.bool(False),
    tkmaxipt = cms.double(0.1)
)


process.tevMuons = cms.EDProducer("TevMuonProducer",
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(False)
    ),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    ),
    RefitIndex = cms.vint32(1, 2, 3, 4),
    RefitterParameters = cms.PSet(
        TrackerSkipSection = cms.int32(-1),
        MuonHitsOption = cms.int32(1),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        RefitDirection = cms.string('insideOut'),
        CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
        Propagator = cms.string('SmartPropagatorAnyRK'),
        TrackerSkipSystem = cms.int32(-1),
        DoPredictionsOnly = cms.bool(False),
        Chi2ProbabilityCut = cms.double(30.0),
        PropDirForCosmics = cms.bool(False),
        HitThreshold = cms.int32(1),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
        Chi2CutCSC = cms.double(1.0),
        Chi2CutRPC = cms.double(1.0),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        DYTthrs = cms.vint32(10, 5),
        RefitRPCHits = cms.bool(True),
        Chi2CutDT = cms.double(30.0),
        PtCut = cms.double(1.0),
        SkipStation = cms.int32(-1)
    ),
    Refits = cms.vstring('default', 
        'firstHit', 
        'picky', 
        'dyt'),
    MuonCollectionLabel = cms.InputTag("globalMuons")
)


process.tobTecStepClusters = cms.EDProducer("TrackClusterRemover",
    minNumberOfLayersWithMeasBeforeFiltering = cms.int32(0),
    trajectories = cms.InputTag("pixelLessStepTracks"),
    oldClusterRemovalInfo = cms.InputTag("pixelLessStepClusters"),
    stripClusters = cms.InputTag("siStripClusters"),
    overrideTrkQuals = cms.InputTag("pixelLessStepSelector","pixelLessStep"),
    pixelClusters = cms.InputTag("siPixelClusters"),
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True)
)


process.tobTecStepSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    OrderedHitsFactoryPSet = cms.PSet(
        maxElement = cms.uint32(1000000),
        ComponentName = cms.string('StandardHitPairGenerator'),
        SeedingLayers = cms.string('tobTecStepSeedLayers')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    ClusterCheckPSet = cms.PSet(
        MaxNumberOfPixelClusters = cms.uint32(40000),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters")
    ),
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            originRadius = cms.double(6.0),
            ptMin = cms.double(0.6),
            originHalfLength = cms.double(30.0)
        ),
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot')
    ),
    SeedCreatorPSet = cms.PSet(
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(2.0),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial'),
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator')
    )
)


process.tobTecStepSelector = cms.EDProducer("MultiTrackSelector",
    src = cms.InputTag("tobTecStepTracks"),
    trackSelectors = cms.VPSet(cms.PSet(
        max_d0 = cms.double(100.0),
        minNumber3DLayers = cms.uint32(2),
        max_lostHitFraction = cms.double(1.0),
        applyAbsCutsIfNoPV = cms.bool(False),
        qualityBit = cms.string('loose'),
        minNumberLayers = cms.uint32(5),
        chi2n_par = cms.double(0.4),
        nSigmaZ = cms.double(4.0),
        dz_par2 = cms.vdouble(1.8, 4.0),
        applyAdaptedPVCuts = cms.bool(True),
        min_eta = cms.double(-9999.0),
        dz_par1 = cms.vdouble(1.8, 4.0),
        copyTrajectories = cms.untracked.bool(False),
        vtxNumber = cms.int32(-1),
        keepAllTracks = cms.bool(False),
        maxNumberLostLayers = cms.uint32(1),
        max_relpterr = cms.double(9999.0),
        copyExtras = cms.untracked.bool(True),
        vertexCut = cms.string('ndof>=2&!isFake'),
        max_z0 = cms.double(100.0),
        min_nhits = cms.uint32(0),
        name = cms.string('tobTecStepLoose'),
        max_minMissHitOutOrIn = cms.int32(99),
        chi2n_no1Dmod_par = cms.double(9999),
        res_par = cms.vdouble(0.003, 0.001),
        max_eta = cms.double(9999.0),
        d0_par2 = cms.vdouble(2.0, 4.0),
        d0_par1 = cms.vdouble(2.0, 4.0),
        preFilterName = cms.string(''),
        minHitsToBypassChecks = cms.uint32(20)
    ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(2),
            max_lostHitFraction = cms.double(1.0),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('tight'),
            minNumberLayers = cms.uint32(5),
            chi2n_par = cms.double(0.3),
            dz_par1 = cms.vdouble(1.4, 4.0),
            dz_par2 = cms.vdouble(1.4, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            min_eta = cms.double(-9999.0),
            nSigmaZ = cms.double(4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(0),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('tobTecStepTight'),
            max_minMissHitOutOrIn = cms.int32(99),
            chi2n_no1Dmod_par = cms.double(9999),
            preFilterName = cms.string('tobTecStepLoose'),
            max_eta = cms.double(9999.0),
            d0_par2 = cms.vdouble(1.5, 4.0),
            d0_par1 = cms.vdouble(1.5, 4.0),
            res_par = cms.vdouble(0.003, 0.001),
            minHitsToBypassChecks = cms.uint32(20)
        ), 
        cms.PSet(
            max_d0 = cms.double(100.0),
            minNumber3DLayers = cms.uint32(2),
            max_lostHitFraction = cms.double(1.0),
            applyAbsCutsIfNoPV = cms.bool(False),
            qualityBit = cms.string('highPurity'),
            minNumberLayers = cms.uint32(5),
            chi2n_par = cms.double(0.2),
            nSigmaZ = cms.double(4.0),
            dz_par2 = cms.vdouble(1.1, 4.0),
            applyAdaptedPVCuts = cms.bool(True),
            min_eta = cms.double(-9999.0),
            dz_par1 = cms.vdouble(1.1, 4.0),
            copyTrajectories = cms.untracked.bool(False),
            vtxNumber = cms.int32(-1),
            keepAllTracks = cms.bool(True),
            maxNumberLostLayers = cms.uint32(0),
            max_relpterr = cms.double(9999.0),
            copyExtras = cms.untracked.bool(True),
            vertexCut = cms.string('ndof>=2&!isFake'),
            max_z0 = cms.double(100.0),
            min_nhits = cms.uint32(0),
            name = cms.string('tobTecStep'),
            max_minMissHitOutOrIn = cms.int32(1),
            chi2n_no1Dmod_par = cms.double(9999),
            res_par = cms.vdouble(0.003, 0.001),
            max_eta = cms.double(9999.0),
            d0_par2 = cms.vdouble(1.2, 4.0),
            d0_par1 = cms.vdouble(1.2, 4.0),
            preFilterName = cms.string('tobTecStepTight'),
            minHitsToBypassChecks = cms.uint32(20)
        )),
    beamspot = cms.InputTag("offlineBeamSpot"),
    vertices = cms.InputTag("pixelVertices"),
    useVtxError = cms.bool(False),
    useVertices = cms.bool(True)
)


process.tobTecStepTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("tobTecStepSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('tobTecStepTrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    onlyPixelHitsForSeedCleaner = cms.bool(True),
    TrajectoryBuilder = cms.string('tobTecStepTrajectoryBuilder'),
    numHitsForSeedCleaner = cms.int32(50)
)


process.tobTecStepTracks = cms.EDProducer("TrackProducer",
    src = cms.InputTag("tobTecStepTrackCandidates"),
    clusterRemovalInfo = cms.InputTag(""),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    Fitter = cms.string('tobTecFlexibleKFFittingSmoother'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    AlgorithmName = cms.string('iter6'),
    alias = cms.untracked.string('ctfWithMaterialTracks'),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithAngleAndTemplate'),
    GeometricInnerState = cms.bool(False),
    Propagator = cms.string('RungeKuttaTrackerPropagator')
)


process.towerMaker = cms.EDProducer("CaloTowersCreator",
    EBSumThreshold = cms.double(0.2),
    MomHBDepth = cms.double(0.2),
    UseEtEBTreshold = cms.bool(False),
    hfInput = cms.InputTag("hfreco"),
    AllowMissingInputs = cms.bool(False),
    MomEEDepth = cms.double(0.0),
    EESumThreshold = cms.double(0.45),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HcalAcceptSeverityLevelForRejectedHit = cms.uint32(9999),
    HBThreshold = cms.double(0.7),
    EcalSeveritiesToBeUsedInBadTowers = cms.vstring(),
    UseEcalRecoveredHits = cms.bool(False),
    MomConstrMethod = cms.int32(1),
    MomHEDepth = cms.double(0.4),
    HcalThreshold = cms.double(-1000.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    UseSymEBTreshold = cms.bool(True),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEWeight = cms.double(1.0),
    UseHO = cms.bool(False),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF1Weight = cms.double(1.0),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBWeight = cms.double(1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOWeight = cms.double(1.0),
    HESWeight = cms.double(1.0),
    HESThreshold = cms.double(0.8),
    hbheInput = cms.InputTag("hbhereco"),
    HF2Weight = cms.double(1.0),
    HF2Threshold = cms.double(0.85),
    HcalAcceptSeverityLevel = cms.uint32(9),
    EEThreshold = cms.double(0.3),
    HOThresholdPlus1 = cms.double(3.5),
    HOThresholdPlus2 = cms.double(3.5),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    hoInput = cms.InputTag("horeco"),
    HF1Threshold = cms.double(0.5),
    HOThresholdMinus1 = cms.double(3.5),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EcutTower = cms.double(-1000.0),
    UseRejectedRecoveredEcalHits = cms.bool(False),
    UseEtEETreshold = cms.bool(False),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EcalRecHitSeveritiesToBeExcluded = cms.vstring('kTime', 
        'kWeird', 
        'kBad'),
    HEDWeight = cms.double(1.0),
    UseSymEETreshold = cms.bool(True),
    HEDThreshold = cms.double(0.8),
    EBThreshold = cms.double(0.07),
    UseRejectedHitsOnly = cms.bool(False),
    UseHcalRecoveredHits = cms.bool(True),
    HOThresholdMinus2 = cms.double(3.5),
    HOThreshold0 = cms.double(1.1),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    UseRejectedRecoveredHcalHits = cms.bool(True),
    MomEBDepth = cms.double(0.3),
    HBWeight = cms.double(1.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0)
)


process.towerMakerPF = cms.EDProducer("CaloTowersCreator",
    EBSumThreshold = cms.double(0.2),
    MomHBDepth = cms.double(0.2),
    UseEtEBTreshold = cms.bool(False),
    hfInput = cms.InputTag("hfreco"),
    AllowMissingInputs = cms.bool(False),
    MomEEDepth = cms.double(0.0),
    EESumThreshold = cms.double(0.45),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HcalAcceptSeverityLevelForRejectedHit = cms.uint32(9999),
    HBThreshold = cms.double(0.4),
    EcalSeveritiesToBeUsedInBadTowers = cms.vstring(),
    UseEcalRecoveredHits = cms.bool(False),
    MomConstrMethod = cms.int32(1),
    MomHEDepth = cms.double(0.4),
    HcalThreshold = cms.double(-1000.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    UseSymEBTreshold = cms.bool(True),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEWeight = cms.double(1.0),
    UseHO = cms.bool(False),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HF1Weight = cms.double(1.0),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBWeight = cms.double(1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOWeight = cms.double(1.0),
    HESWeight = cms.double(1.0),
    HESThreshold = cms.double(0.4),
    hbheInput = cms.InputTag("hbhereco"),
    HF2Weight = cms.double(1.0),
    HF2Threshold = cms.double(1.8),
    HcalAcceptSeverityLevel = cms.uint32(11),
    EEThreshold = cms.double(0.3),
    HOThresholdPlus1 = cms.double(0.8),
    HOThresholdPlus2 = cms.double(0.8),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    hoInput = cms.InputTag("horeco"),
    HF1Threshold = cms.double(1.2),
    HOThresholdMinus1 = cms.double(0.8),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EcutTower = cms.double(-1000.0),
    UseRejectedRecoveredEcalHits = cms.bool(False),
    UseEtEETreshold = cms.bool(False),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EcalRecHitSeveritiesToBeExcluded = cms.vstring('kTime', 
        'kWeird', 
        'kBad'),
    HEDWeight = cms.double(1.0),
    UseSymEETreshold = cms.bool(True),
    HEDThreshold = cms.double(0.4),
    EBThreshold = cms.double(0.07),
    UseRejectedHitsOnly = cms.bool(False),
    UseHcalRecoveredHits = cms.bool(True),
    HOThresholdMinus2 = cms.double(0.8),
    HOThreshold0 = cms.double(0.2),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    UseRejectedRecoveredHcalHits = cms.bool(True),
    MomEBDepth = cms.double(0.3),
    HBWeight = cms.double(1.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0)
)


process.towerMakerWithHO = cms.EDProducer("CaloTowersCreator",
    EBSumThreshold = cms.double(0.2),
    MomHBDepth = cms.double(0.2),
    UseEtEBTreshold = cms.bool(False),
    hfInput = cms.InputTag("hfreco"),
    AllowMissingInputs = cms.bool(False),
    MomEEDepth = cms.double(0.0),
    EESumThreshold = cms.double(0.45),
    HBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HF1Weight = cms.double(1.0),
    HBThreshold = cms.double(0.7),
    EBThreshold = cms.double(0.07),
    EcalSeveritiesToBeUsedInBadTowers = cms.vstring(),
    UseEcalRecoveredHits = cms.bool(False),
    MomConstrMethod = cms.int32(1),
    MomHEDepth = cms.double(0.4),
    HcalThreshold = cms.double(-1000.0),
    HF2Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    UseSymEBTreshold = cms.bool(True),
    EEWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    EEWeight = cms.double(1.0),
    UseHO = cms.bool(True),
    HBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HcalAcceptSeverityLevelForRejectedHit = cms.uint32(9999),
    HF2Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    HEDWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOThresholdPlus1 = cms.double(3.5),
    EBWeight = cms.double(1.0),
    HF1Grid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    HOWeight = cms.double(1.0),
    HESWeight = cms.double(1.0),
    hbheInput = cms.InputTag("hbhereco"),
    HF2Weight = cms.double(1.0),
    HF2Threshold = cms.double(0.85),
    HcalAcceptSeverityLevel = cms.uint32(9),
    EEThreshold = cms.double(0.3),
    HESThreshold = cms.double(0.8),
    HOThresholdPlus2 = cms.double(3.5),
    HF1Weights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    hoInput = cms.InputTag("horeco"),
    HF1Threshold = cms.double(0.5),
    HOThresholdMinus1 = cms.double(3.5),
    HESGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    UseRejectedRecoveredEcalHits = cms.bool(False),
    UseEtEETreshold = cms.bool(False),
    HEDWeight = cms.double(1.0),
    EcalRecHitSeveritiesToBeExcluded = cms.vstring('kTime', 
        'kWeird', 
        'kBad'),
    HESWeights = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0),
    UseSymEETreshold = cms.bool(True),
    HEDThreshold = cms.double(0.8),
    UseRejectedHitsOnly = cms.bool(False),
    EcutTower = cms.double(-1000.0),
    HEDGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    UseHcalRecoveredHits = cms.bool(True),
    HOThresholdMinus2 = cms.double(3.5),
    HOThreshold0 = cms.double(1.1),
    ecalInputs = cms.VInputTag(cms.InputTag("ecalRecHit","EcalRecHitsEB"), cms.InputTag("ecalRecHit","EcalRecHitsEE")),
    UseRejectedRecoveredHcalHits = cms.bool(True),
    MomEBDepth = cms.double(0.3),
    HBWeight = cms.double(1.0),
    HOGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0),
    EBGrid = cms.vdouble(-1.0, 1.0, 10.0, 100.0, 1000.0)
)


process.trackCountingHighEffBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D2nd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.trackCountingHighPurBJetTags = cms.EDProducer("JetTagProducer",
    jetTagComputer = cms.string('trackCounting3D3rd'),
    tagInfos = cms.VInputTag(cms.InputTag("impactParameterTagInfos"))
)


process.trackExtrapolator = cms.EDProducer("TrackExtrapolator",
    trackQuality = cms.string('goodIterative'),
    trackSrc = cms.InputTag("generalTracks")
)


process.trackRefsForJets = cms.EDProducer("ChargedRefCandidateProducer",
    src = cms.InputTag("trackWithVertexRefSelector"),
    particleType = cms.string('pi+')
)


process.trackerDrivenElectronSeeds = cms.EDProducer("GoodSeedProducer",
    HOverPLead_maxValue = cms.double(0.05),
    MaxEOverP = cms.double(3.0),
    Smoother = cms.string('GsfTrajectorySmoother_forPreId'),
    PtThresholdSavePreId = cms.untracked.double(1.0),
    UseQuality = cms.bool(True),
    EOverPLead_minValue = cms.double(0.95),
    ProducePreId = cms.untracked.bool(True),
    PFPSClusterLabel = cms.InputTag("particleFlowClusterPS"),
    ApplyIsolation = cms.bool(False),
    TMVAMethod = cms.string('BDT'),
    MaxEta = cms.double(2.4),
    PFHcalClusterLabel = cms.InputTag("particleFlowClusterHCAL"),
    EtaMap = cms.string('RecoParticleFlow/PFBlockProducer/data/resmap_ECAL_eta.dat'),
    PhiMap = cms.string('RecoParticleFlow/PFBlockProducer/data/resmap_ECAL_phi.dat'),
    EcalStripSumE_deltaPhiOverQ_maxValue = cms.double(0.5),
    PreCkfLabel = cms.string('SeedsForCkf'),
    NHitsInSeed = cms.int32(3),
    Fitter = cms.string('GsfTrajectoryFitter_forPreId'),
    ThresholdFile = cms.string('RecoParticleFlow/PFTracking/data/Threshold.dat'),
    UsePreShower = cms.bool(False),
    MinEOverP = cms.double(0.3),
    PreIdLabel = cms.string('preid'),
    PreGsfLabel = cms.string('SeedsForGsf'),
    EcalStripSumE_minClusEnergy = cms.double(0.1),
    EcalStripSumE_deltaEta = cms.double(0.03),
    PFEcalClusterLabel = cms.InputTag("particleFlowClusterECAL"),
    PSThresholdFile = cms.string('RecoParticleFlow/PFTracking/data/PSThreshold.dat'),
    MinPt = cms.double(2.0),
    TkColList = cms.VInputTag(cms.InputTag("generalTracks")),
    UseTMVA = cms.untracked.bool(True),
    HcalWindow = cms.double(0.184),
    TrackQuality = cms.string('highPurity'),
    Weights = cms.string('RecoParticleFlow/PFTracking/data/BDT_weights_21.txt'),
    MaxPt = cms.double(50.0),
    EcalStripSumE_deltaPhiOverQ_minValue = cms.double(-0.1),
    ClusterThreshold = cms.double(0.5)
)


process.tripletElectronClusterMask = cms.EDProducer("SeedClusterRemover",
    trajectories = cms.InputTag("tripletElectronSeeds"),
    oldClusterRemovalInfo = cms.InputTag("pixelLessStepSeedClusterMask"),
    stripClusters = cms.InputTag("siStripClusters"),
    overrideTrkQuals = cms.InputTag(""),
    pixelClusters = cms.InputTag("siPixelClusters"),
    Common = cms.PSet(
        maxChi2 = cms.double(9.0)
    ),
    TrackQuality = cms.string('highPurity'),
    clusterLessSolution = cms.bool(True)
)


process.tripletElectronSeeds = cms.EDProducer("SeedGeneratorFromRegionHitsEDProducer",
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            maxElement = cms.uint32(100000),
            SeedComparitorPSet = cms.PSet(
                ComponentName = cms.string('none')
            ),
            extraHitRPhitolerance = cms.double(0.032),
            useMultScattering = cms.bool(True),
            phiPreFiltering = cms.double(0.3),
            extraHitRZtolerance = cms.double(0.037),
            ComponentName = cms.string('PixelTripletHLTGenerator')
        ),
        SeedingLayers = cms.string('tripletElectronSeedLayers')
    ),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    ClusterCheckPSet = cms.PSet(
        MaxNumberOfPixelClusters = cms.uint32(40000),
        cut = cms.string('strip < 400000 && pixel < 40000 && (strip < 50000 + 10*pixel) && (pixel < 5000 + 0.1*strip)'),
        PixelClusterCollectionLabel = cms.InputTag("siPixelClusters"),
        MaxNumberOfCosmicClusters = cms.uint32(400000),
        doClusterCheck = cms.bool(True),
        ClusterCollectionLabel = cms.InputTag("siStripClusters")
    ),
    RegionFactoryPSet = cms.PSet(
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot'),
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            originRadius = cms.double(0.02),
            nSigmaZ = cms.double(4.0),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            ptMin = cms.double(1.0)
        )
    ),
    SeedCreatorPSet = cms.PSet(
        MinOneOverPtError = cms.double(1.0),
        OriginTransverseErrorMultiplier = cms.double(1.0),
        SeedMomentumForBOFF = cms.double(5.0),
        propagator = cms.string('PropagatorWithMaterial'),
        ComponentName = cms.string('SeedFromConsecutiveHitsCreator')
    )
)


process.uct2015L1ExtraParticles = cms.EDProducer("UCT2015L1ExtraProducer",
    centralBxOnly = cms.bool(True),
    tauIso = cms.double(0.2),
    muRelIso = cms.double(-999.0),
    muonSource = cms.InputTag("valGmtDigis"),
    jetLabel = cms.InputTag("UCT2015Producer","CorrJetUnpacked"),
    tauLabel = cms.InputTag("UCT2015Producer","RelaxedTauUnpacked"),
    egIso = cms.double(0.2),
    htTotLabel = cms.InputTag("UCT2015Producer","SHTUnpacked"),
    etMissLabel = cms.InputTag("UCT2015Producer","METUnpacked"),
    muFixedIso = cms.double(5.0),
    htMissLabel = cms.InputTag("UCT2015Producer","MHTUnpacked"),
    regionLabel = cms.InputTag("uctDigis"),
    produceMuonParticles = cms.bool(True),
    regionLSB = cms.double(0.5),
    produceCaloParticles = cms.bool(True),
    etTotLabel = cms.InputTag("UCT2015Producer","SETUnpacked"),
    rgnThreshold = cms.double(0.0),
    egLabel = cms.InputTag("UCT2015Producer","RelaxedEGUnpacked")
)


process.uctDigis = cms.EDProducer("L1RCTProducer",
    queryIntervalInLS = cms.uint32(100),
    hcalDigis = cms.VInputTag(cms.InputTag("hackHCALMIPs")),
    ecalDigis = cms.VInputTag(cms.InputTag("ecalDigis","EcalTriggerPrimitives")),
    getFedsFromOmds = cms.bool(False),
    queryDelayInLS = cms.uint32(10),
    useEcal = cms.bool(True),
    useHcal = cms.bool(True),
    BunchCrossings = cms.vint32(0)
)


process.uncleanedHybridSuperClusters = cms.EDProducer("HybridClusterProducer",
    eThreshA = cms.double(0.003),
    basicclusterCollection = cms.string('hybridBarrelBasicClusters'),
    clustershapecollection = cms.string(''),
    ethresh = cms.double(0.1),
    ewing = cms.double(0.0),
    RecHitSeverityToBeExcluded = cms.vstring(),
    posCalcParameters = cms.PSet(
        T0_barl = cms.double(7.4),
        LogWeighted = cms.bool(True),
        T0_endc = cms.double(3.1),
        T0_endcPresh = cms.double(1.2),
        W0 = cms.double(4.2),
        X0 = cms.double(0.89)
    ),
    HybridBarrelSeedThr = cms.double(1.0),
    dynamicPhiRoad = cms.bool(False),
    shapeAssociation = cms.string('hybridShapeAssoc'),
    RecHitFlagToBeExcluded = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    useEtForXi = cms.bool(True),
    step = cms.int32(17),
    eThreshB = cms.double(0.1),
    xi = cms.double(0.0),
    eseed = cms.double(0.35),
    ecalhitproducer = cms.string('ecalRecHit'),
    dynamicEThresh = cms.bool(False),
    ecalhitcollection = cms.string('EcalRecHitsEB'),
    excludeFlagged = cms.bool(False),
    superclusterCollection = cms.string('')
)


process.uncleanedOnlyAllConversions = cms.EDProducer("ConversionProducer",
    bypassPreselGsf = cms.bool(True),
    AllowD0 = cms.bool(True),
    dEtaTrackBC = cms.double(0.2),
    convertedPhotonCollection = cms.string(''),
    AllowRightBC = cms.bool(False),
    bcBarrelCollection = cms.InputTag("hybridSuperClusters","uncleanOnlyHybridSuperClusters"),
    scEndcapProducer = cms.InputTag("uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower"),
    MaxChi2Right = cms.double(10.0),
    primaryVertexProducer = cms.string('offlinePrimaryVerticesWithBS'),
    vtxChi2 = cms.double(0.0005),
    maxTrackRho = cms.double(120.0),
    d0 = cms.double(0.0),
    bypassPreselEcal = cms.bool(False),
    dPhicutForSCmatching = cms.double(0.05),
    AllowOppCharge = cms.bool(True),
    bcEndcapCollection = cms.InputTag("multi5x5SuperClusters","uncleanOnlyMulti5x5EndcapBasicClusters"),
    deltaEta = cms.double(0.4),
    maxDelta = cms.double(0.01),
    HalfwayEta = cms.double(0.1),
    MinApproachLow = cms.double(-0.25),
    AllowDeltaPhi = cms.bool(False),
    maxReducedChiSq = cms.double(225.0),
    maxTrackZ = cms.double(300.0),
    maxNumOfTrackInPU = cms.int32(999999),
    MinApproachHigh = cms.double(1.0),
    AllowSingleLeg = cms.bool(False),
    AllowVertex = cms.bool(True),
    dEtacutForSCmatching = cms.double(0.03),
    DeltaPhi = cms.double(0.2),
    MinHitsRight = cms.int32(2),
    dz = cms.double(5.0),
    maxNbrOfIterations = cms.int32(40),
    AllowDeltaCot = cms.bool(True),
    EnergyBC = cms.double(0.3),
    MinHitsLeft = cms.int32(4),
    DeltaCotTheta = cms.double(0.1),
    src = cms.InputTag("uncleanedOnlyGsfGeneralInOutOutInConversionTrackMerger"),
    EnergyTotalBC = cms.double(0.3),
    UsePvtx = cms.bool(True),
    bypassPreselEcalEcal = cms.bool(True),
    minSCEt = cms.double(10.0),
    AllowTrackBC = cms.bool(False),
    rCut = cms.double(2.0),
    minChiSqImprovement = cms.double(50.0),
    dPhiTrackBC = cms.double(1.0),
    MaxChi2Left = cms.double(10.0),
    AlgorithmName = cms.string('mixed'),
    scBarrelProducer = cms.InputTag("uncleanedOnlyCorrectedHybridSuperClusters"),
    AllowMinApproach = cms.bool(True)
)


process.uncleanedOnlyCkfInOutTracksFromConversions = cms.EDProducer("TrackProducerWithSCAssociation",
    src = cms.InputTag("uncleanedOnlyConversionTrackCandidates","inOutTracksFromConversions"),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string('uncleanedOnlyConversionTrackCandidates'),
    Fitter = cms.string('KFFittingSmootherForInOut'),
    ComponentName = cms.string('uncleanedOnlyCkfInOutTracksFromConversions'),
    MeasurementTracker = cms.string(''),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    trackCandidateSCAssociationCollection = cms.string('inOutTrackCandidateSCAssociationCollection'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    AlgorithmName = cms.string('inOutEcalSeededConv'),
    Propagator = cms.string('alongMomElePropagator'),
    recoTrackSCAssociationCollection = cms.string('inOutTrackSCAssociationCollection')
)


process.uncleanedOnlyCkfOutInTracksFromConversions = cms.EDProducer("TrackProducerWithSCAssociation",
    src = cms.InputTag("uncleanedOnlyConversionTrackCandidates","outInTracksFromConversions"),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string('uncleanedOnlyConversionTrackCandidates'),
    Fitter = cms.string('KFFitterForOutIn'),
    ComponentName = cms.string('uncleanedOnlyCkfOutInTracksFromConversions'),
    MeasurementTracker = cms.string(''),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    trackCandidateSCAssociationCollection = cms.string('outInTrackCandidateSCAssociationCollection'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    AlgorithmName = cms.string('outInEcalSeededConv'),
    Propagator = cms.string('alongMomElePropagator'),
    recoTrackSCAssociationCollection = cms.string('outInTrackSCAssociationCollection')
)


process.uncleanedOnlyConversionTrackCandidates = cms.EDProducer("ConversionTrackCandidateProducer",
    RecHitSeverityToBeExcludedEE = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    scHybridBarrelProducer = cms.InputTag("uncleanedOnlyCorrectedHybridSuperClusters"),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('alongMomElePropagator'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('oppositeToMomElePropagator')
    ),
    inOutTrackCandidateCollection = cms.string('inOutTracksFromConversions'),
    RecHitSeverityToBeExcludedEB = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    useHitsSplitting = cms.bool(False),
    outInTrackCandidateSCAssociationCollection = cms.string('outInTrackCandidateSCAssociationCollection'),
    ValidHitBonus = cms.double(5.0),
    barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    vetoClusteredHits = cms.bool(False),
    bcBarrelCollection = cms.InputTag("hybridSuperClusters","uncleanOnlyHybridSuperClusters"),
    scIslandEndcapProducer = cms.InputTag("uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower"),
    ecalIsoCut_offset = cms.double(999999999),
    hcalTowers = cms.InputTag("towerMaker"),
    RecHitFlagToBeExcludedEB = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    isoEMin = cms.double(0.08),
    isoEtaSlice = cms.double(2.5),
    maxHOverE = cms.double(0.15),
    maxNumOfSeedsOutIn = cms.int32(50),
    bcEndcapCollection = cms.InputTag("multi5x5SuperClusters","uncleanOnlyMulti5x5EndcapBasicClusters"),
    useNumXstals = cms.bool(True),
    RecHitFlagToBeExcludedEE = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    InOutRedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    ecalIsoCut_slope = cms.double(0.0),
    maxNumOfSeedsInOut = cms.int32(50),
    isoEtMin = cms.double(0.0),
    fractionShared = cms.double(0.5),
    minSCEt = cms.double(20.0),
    MissingHitPenalty = cms.double(20.0),
    OutInRedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    MeasurementTrackerName = cms.string(''),
    outInTrackCandidateCollection = cms.string('outInTracksFromConversions'),
    hOverEConeSize = cms.double(0.15),
    inOutTrackCandidateSCAssociationCollection = cms.string('inOutTrackCandidateSCAssociationCollection'),
    endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    isoInnerConeR = cms.double(3.5),
    isoConeR = cms.double(0.4),
    TrajectoryBuilder = cms.string('TrajectoryBuilderForConversions'),
    allowSharedFirstHit = cms.bool(True)
)


process.uncleanedOnlyCorrectedHybridSuperClusters = cms.EDProducer("EgammaSCCorrectionMaker",
    corectedSuperClusterCollection = cms.string(''),
    modeEE = cms.int32(0),
    sigmaElectronicNoise = cms.double(0.03),
    superClusterAlgo = cms.string('Hybrid'),
    modeEB = cms.int32(0),
    applyLocalContCorrection = cms.bool(True),
    rawSuperClusterProducer = cms.InputTag("hybridSuperClusters","uncleanOnlyHybridSuperClusters"),
    energyCorrectorName = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    localContCorrectorName = cms.string('EcalBasicClusterLocalContCorrection'),
    applyEnergyCorrection = cms.bool(True),
    crackCorrectorName = cms.string('EcalClusterCrackCorrection'),
    applyCrackCorrection = cms.bool(True),
    etThresh = cms.double(0.0),
    hyb_fCorrPset = cms.PSet(
        brLinearLowThr = cms.double(1.1),
        fEtEtaVec = cms.vdouble(0, 1.00121, -0.63672, 0, 0, 
            0, 0.5655, 6.457, 0.5081, 8.0, 
            1.023, -0.00181),
        brLinearHighThr = cms.double(8.0),
        fBremVec = cms.vdouble(-0.04382, 0.1169, 0.9267, -0.0009413, 1.419)
    ),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEB")
)


process.uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower = cms.EDProducer("EgammaSCCorrectionMaker",
    corectedSuperClusterCollection = cms.string(''),
    modeEE = cms.int32(0),
    sigmaElectronicNoise = cms.double(0.15),
    superClusterAlgo = cms.string('Multi5x5'),
    modeEB = cms.int32(0),
    applyLocalContCorrection = cms.bool(False),
    rawSuperClusterProducer = cms.InputTag("uncleanedOnlyMulti5x5SuperClustersWithPreshower"),
    energyCorrectorName = cms.string('EcalClusterEnergyCorrectionObjectSpecific'),
    localContCorrectorName = cms.string('EcalBasicClusterLocalContCorrection'),
    applyEnergyCorrection = cms.bool(True),
    fix_fCorrPset = cms.PSet(
        brLinearLowThr = cms.double(0.9),
        fEtEtaVec = cms.vdouble(1, -0.4386, -32.38, 0.6372, 15.67, 
            -0.0928, -2.462, 1.138, 20.93),
        brLinearHighThr = cms.double(6.0),
        fBremVec = cms.vdouble(-0.05228, 0.08738, 0.9508, 0.002677, 1.221)
    ),
    crackCorrectorName = cms.string('EcalClusterCrackCorrection'),
    VerbosityLevel = cms.string('ERROR'),
    applyCrackCorrection = cms.bool(True),
    etThresh = cms.double(0.0),
    recHitProducer = cms.InputTag("ecalRecHit","EcalRecHitsEE")
)


process.uncleanedOnlyElectronCkfTrackCandidates = cms.EDProducer("CkfTrackCandidateMaker",
    src = cms.InputTag("uncleanedOnlyElectronSeeds"),
    maxSeedsBeforeCleaning = cms.uint32(5000),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        numberMeasurementsForFit = cms.int32(4),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    TrajectoryCleaner = cms.string('electronTrajectoryCleanerBySharedHits'),
    cleanTrajectoryAfterInOut = cms.bool(True),
    useHitsSplitting = cms.bool(True),
    RedundantSeedCleaner = cms.string('CachingSeedCleanerBySharedInput'),
    doSeedingRegionRebuilding = cms.bool(True),
    maxNSeeds = cms.uint32(500000),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryBuilder = cms.string('TrajectoryBuilderForElectrons')
)


process.uncleanedOnlyElectronGsfTracks = cms.EDProducer("GsfTrackProducer",
    src = cms.InputTag("uncleanedOnlyElectronCkfTrackCandidates"),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    producer = cms.string(''),
    Fitter = cms.string('GsfElectronFittingSmoother'),
    useHitsSplitting = cms.bool(False),
    MeasurementTracker = cms.string(''),
    GeometricInnerState = cms.bool(False),
    NavigationSchool = cms.string('SimpleNavigationSchool'),
    TrajectoryInEvent = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    AlgorithmName = cms.string('gsf'),
    Propagator = cms.string('fwdGsfElectronPropagator')
)


process.uncleanedOnlyElectronSeeds = cms.EDProducer("ElectronSeedProducer",
    endcapSuperClusters = cms.InputTag("uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower"),
    SeedConfiguration = cms.PSet(
        PhiMax2B = cms.double(0.002),
        hOverEPtMin = cms.double(0.0),
        PhiMax2F = cms.double(0.003),
        searchInTIDTEC = cms.bool(True),
        PhiMin2F = cms.double(-0.003),
        deltaZ1WithVertex = cms.double(25.0),
        HighPtThreshold = cms.double(35.0),
        r2MinF = cms.double(-0.15),
        maxHBarrel = cms.double(0.0),
        DeltaPhi1Low = cms.double(0.23),
        DeltaPhi1High = cms.double(0.08),
        ePhiMin1 = cms.double(-0.125),
        hcalTowers = cms.InputTag("towerMaker"),
        LowPtThreshold = cms.double(5.0),
        maxHOverEBarrel = cms.double(0.15),
        dynamicPhiRoad = cms.bool(True),
        ePhiMax1 = cms.double(0.075),
        measurementTrackerName = cms.string(''),
        SizeWindowENeg = cms.double(0.675),
        nSigmasDeltaZ1 = cms.double(5.0),
        rMaxI = cms.double(0.2),
        maxHEndcaps = cms.double(0.0),
        preFilteredSeeds = cms.bool(False),
        r2MaxF = cms.double(0.15),
        maxHOverEEndcaps = cms.double(0.15),
        pPhiMin1 = cms.double(-0.075),
        initialSeeds = cms.InputTag("newCombinedSeeds"),
        pPhiMax1 = cms.double(0.125),
        SCEtCut = cms.double(4.0),
        z2MaxB = cms.double(0.09),
        fromTrackerSeeds = cms.bool(True),
        hcalRecHits = cms.InputTag("hbhereco"),
        z2MinB = cms.double(-0.09),
        rMinI = cms.double(-0.2),
        hOverEConeSize = cms.double(0.15),
        hOverEHBMinE = cms.double(0.7),
        useRecoVertex = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        vertices = cms.InputTag("offlinePrimaryVerticesWithBS"),
        DeltaPhi2F = cms.double(0.012),
        applyHOverECut = cms.bool(True),
        hOverEHFMinE = cms.double(0.8),
        DeltaPhi2B = cms.double(0.008),
        PhiMin2B = cms.double(-0.002)
    ),
    barrelSuperClusters = cms.InputTag("uncleanedOnlyCorrectedHybridSuperClusters")
)


process.uncleanedOnlyGeneralConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    minConvRadius = cms.double(2.0),
    TrackProducer = cms.string('generalTracks'),
    filterOnConvTrackHyp = cms.bool(True),
    setTrackerOnly = cms.bool(True),
    setArbitratedMerged = cms.bool(True),
    useTrajectory = cms.bool(True),
    setArbitratedEcalSeeded = cms.bool(False)
)


process.uncleanedOnlyGeneralInOutOutInConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1),
    minProb = cms.double(1e-06),
    allowFirstHitShare = cms.bool(True),
    arbitratedMergedPreferCollection = cms.int32(3),
    arbitratedEcalSeededPreferCollection = cms.int32(-1),
    checkCharge = cms.bool(True),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(2),
    TrackProducer2 = cms.string('uncleanedOnlyGeneralConversionTrackProducer'),
    TrackProducer1 = cms.string('uncleanedOnlyInOutOutInConversionTrackMerger')
)


process.uncleanedOnlyGsfConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    setArbitratedMergedEcalGeneral = cms.bool(False),
    minConvRadius = cms.double(2.0),
    TrackProducer = cms.string('uncleanedOnlyElectronGsfTracks'),
    filterOnConvTrackHyp = cms.bool(False),
    setTrackerOnly = cms.bool(False),
    setArbitratedMerged = cms.bool(True),
    useTrajectory = cms.bool(True),
    setArbitratedEcalSeeded = cms.bool(False)
)


process.uncleanedOnlyGsfElectronCores = cms.EDProducer("GsfElectronCoreEcalDrivenProducer",
    ctfTracks = cms.InputTag("generalTracks"),
    gsfTracks = cms.InputTag("uncleanedOnlyElectronGsfTracks"),
    gsfPfRecTracks = cms.InputTag("uncleanedOnlyPfTrackElec"),
    useGsfPfRecTracks = cms.bool(True)
)


process.uncleanedOnlyGsfElectrons = cms.EDProducer("GsfElectronEcalDrivenProducer",
    hOverEPtMin = cms.double(0.0),
    TransientInitialStateEstimatorParameters = cms.PSet(
        propagatorAlongTISE = cms.string('PropagatorWithMaterial'),
        propagatorOppositeTISE = cms.string('PropagatorWithMaterialOpposite')
    ),
    endcapRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    maxSigmaIetaIetaEndcapsPflow = cms.double(999999999.0),
    maxHBarrelPflow = cms.double(0.0),
    minSCEtBarrel = cms.double(4.0),
    recHitSeverityToBeExcludedBarrel = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    etMinEndcaps = cms.double(0.11),
    gsfPfRecTracksTag = cms.InputTag("uncleanedOnlyPfTrackElec"),
    minEOverPBarrelPflow = cms.double(0.0),
    maxHEndcaps = cms.double(0.0),
    eMinBarrel = cms.double(0.095),
    isFiducial = cms.bool(False),
    maxDeltaEtaEndcaps = cms.double(0.02),
    minEOverPBarrel = cms.double(0.0),
    maxVtxDistTk = cms.double(0.2),
    maxFbremBarrel = cms.double(999999999.0),
    ecalDrivenEcalErrorFromClassBasedParameterization = cms.bool(True),
    applyAmbResolution = cms.bool(False),
    minMVAPflow = cms.double(-0.4),
    ctfTracksTag = cms.InputTag("generalTracks"),
    hOverEConeSizePflow = cms.double(0.15),
    recHitSeverityToBeExcludedEndcaps = cms.vstring('kWeird', 
        'kBad', 
        'kTime'),
    minSCEtEndcaps = cms.double(4.0),
    ambSortingStrategy = cms.uint32(1),
    etMinHcal = cms.double(0.0),
    maxFbremEndcaps = cms.double(999999999.0),
    maxEOverPEndcapsPflow = cms.double(999999999.0),
    pfMvaTag = cms.InputTag(""),
    pflowGsfElectronsTag = cms.InputTag(""),
    maxHBarrel = cms.double(0.0),
    intRadiusEcalBarrel = cms.double(3.0),
    recHitFlagsToBeExcludedEndcaps = cms.vstring('kFaultyHardware', 
        'kNeighboursRecovered', 
        'kTowerRecovered', 
        'kDead', 
        'kWeird'),
    minEOverPEndcapsPflow = cms.double(0.0),
    eMinEndcaps = cms.double(0.0),
    maxDeltaEtaEndcapsPflow = cms.double(999999999.0),
    useNumCrystals = cms.bool(True),
    addPflowElectrons = cms.bool(True),
    ctfTracksCheck = cms.bool(True),
    pureTrackerDrivenEcalErrorFromSimpleParameterization = cms.bool(True),
    maxFbremEndcapsPflow = cms.double(999999999.0),
    crackCorrectionFunction = cms.string('EcalClusterCrackCorrection'),
    stripEndcapTk = cms.double(0.015),
    isEndcaps = cms.bool(False),
    seedFromTEC = cms.bool(True),
    maxEOverPBarrel = cms.double(999999999.0),
    maxSigmaIetaIetaBarrelPflow = cms.double(999999999.0),
    hOverEConeSize = cms.double(0.15),
    maxDrbTk = cms.double(999999999.0),
    ecalDrivenEcalEnergyFromClassBasedParameterization = cms.bool(True),
    minSCEtBarrelPflow = cms.double(0.0),
    maxDeltaEtaBarrelPflow = cms.double(999999999.0),
    maxTIPPflow = cms.double(999999999.0),
    minMvaByPassForIsolatedPflow = cms.double(-0.4),
    vetoClustered = cms.bool(False),
    hcalTowers = cms.InputTag("towerMaker"),
    etMinBarrel = cms.double(0.0),
    intRadiusHcal = cms.double(0.15),
    maxHOverEBarrel = cms.double(0.15),
    maxHOverEEndcaps = cms.double(0.15),
    isBarrel = cms.bool(False),
    superClusterErrorFunction = cms.string('EcalClusterEnergyUncertaintyObjectSpecific'),
    isBarrelPflow = cms.bool(False),
    minSCEtEndcapsPflow = cms.double(0.0),
    previousGsfElectronsTag = cms.InputTag(""),
    stripBarrelTk = cms.double(0.015),
    maxHEndcapsPflow = cms.double(0.0),
    maxHOverEEndcapsPflow = cms.double(999999999.0),
    maxDeltaEtaBarrel = cms.double(0.02),
    ambClustersOverlapStrategy = cms.uint32(1),
    maxFbremBarrelPflow = cms.double(999999999.0),
    maxTIP = cms.double(999999999.0),
    maxDeltaPhiBarrelPflow = cms.double(999999999.0),
    ptMinTk = cms.double(0.7),
    intRadiusEcalEndcaps = cms.double(3.0),
    minEOverPEndcaps = cms.double(0.0),
    maxEOverPEndcaps = cms.double(999999999.0),
    maxHOverEBarrelPflow = cms.double(999999999.0),
    maxEOverPBarrelPflow = cms.double(999999999.0),
    maxSigmaIetaIetaEndcaps = cms.double(999999999.0),
    jurassicWidth = cms.double(1.5),
    minMvaByPassForIsolated = cms.double(-0.4),
    barrelRecHitCollectionTag = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    maxSigmaIetaIetaBarrel = cms.double(999999999.0),
    maxDeltaPhiEndcaps = cms.double(0.15),
    intRadiusEndcapTk = cms.double(0.015),
    applyPreselection = cms.bool(False),
    isEndcapsPflow = cms.bool(False),
    minMVA = cms.double(-0.4),
    useGsfPfRecTracks = cms.bool(True),
    gsfElectronCoresTag = cms.InputTag("uncleanedOnlyGsfElectronCores"),
    isFiducialPflow = cms.bool(False),
    beamSpotTag = cms.InputTag("offlineBeamSpot"),
    seedsTag = cms.InputTag("uncleanedOnlyElectronSeeds"),
    maxDeltaPhiBarrel = cms.double(0.15),
    maxDeltaPhiEndcapsPflow = cms.double(999999999.0),
    hOverEPtMinPflow = cms.double(0.0),
    recHitFlagsToBeExcludedBarrel = cms.vstring('kFaultyHardware', 
        'kTowerRecovered', 
        'kDead'),
    intRadiusBarrelTk = cms.double(0.015)
)


process.uncleanedOnlyGsfGeneralInOutOutInConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1),
    minProb = cms.double(1e-06),
    allowFirstHitShare = cms.bool(True),
    arbitratedMergedPreferCollection = cms.int32(2),
    arbitratedEcalSeededPreferCollection = cms.int32(-1),
    checkCharge = cms.bool(True),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(-1),
    TrackProducer2 = cms.string('uncleanedOnlyGsfConversionTrackProducer'),
    TrackProducer1 = cms.string('uncleanedOnlyGeneralInOutOutInConversionTrackMerger')
)


process.uncleanedOnlyInOutConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    minConvRadius = cms.double(2.0),
    TrackProducer = cms.string('uncleanedOnlyCkfInOutTracksFromConversions'),
    filterOnConvTrackHyp = cms.bool(True),
    setTrackerOnly = cms.bool(False),
    setArbitratedMerged = cms.bool(True),
    useTrajectory = cms.bool(True),
    setArbitratedEcalSeeded = cms.bool(True)
)


process.uncleanedOnlyInOutOutInConversionTrackMerger = cms.EDProducer("ConversionTrackMerger",
    ShareFrac = cms.double(0.19),
    outputPreferCollection = cms.int32(-1),
    trackerOnlyPreferCollection = cms.int32(-1),
    minProb = cms.double(1e-06),
    allowFirstHitShare = cms.bool(True),
    arbitratedMergedPreferCollection = cms.int32(3),
    arbitratedEcalSeededPreferCollection = cms.int32(3),
    checkCharge = cms.bool(True),
    arbitratedMergedEcalGeneralPreferCollection = cms.int32(3),
    TrackProducer2 = cms.string('uncleanedOnlyOutInConversionTrackProducer'),
    TrackProducer1 = cms.string('uncleanedOnlyInOutConversionTrackProducer')
)


process.uncleanedOnlyMulti5x5SuperClustersWithPreshower = cms.EDProducer("PreshowerPhiClusterProducer",
    assocSClusterCollection = cms.string(''),
    preshClusterCollectionY = cms.string('preshowerYClusters'),
    preshClusterCollectionX = cms.string('preshowerXClusters'),
    etThresh = cms.double(0.0),
    preshRecHitProducer = cms.InputTag("ecalPreshowerRecHit","EcalRecHitsES"),
    endcapSClusterProducer = cms.InputTag("multi5x5SuperClusters","uncleanOnlyMulti5x5EndcapSuperClusters"),
    esPhiClusterDeltaEta = cms.double(0.15),
    esStripEnergyCut = cms.double(0.0),
    esPhiClusterDeltaPhi = cms.double(0.12)
)


process.uncleanedOnlyOutInConversionTrackProducer = cms.EDProducer("ConversionTrackProducer",
    beamSpotInputTag = cms.InputTag("offlineBeamSpot"),
    setArbitratedMergedEcalGeneral = cms.bool(True),
    minConvRadius = cms.double(2.0),
    TrackProducer = cms.string('uncleanedOnlyCkfOutInTracksFromConversions'),
    filterOnConvTrackHyp = cms.bool(True),
    setTrackerOnly = cms.bool(False),
    setArbitratedMerged = cms.bool(True),
    useTrajectory = cms.bool(True),
    setArbitratedEcalSeeded = cms.bool(True)
)


process.uncleanedOnlyPfConversions = cms.EDProducer("PFConversionProducer",
    conversionCollection = cms.InputTag("allConversions"),
    PrimaryVertexLabel = cms.InputTag("offlinePrimaryVertices")
)


process.uncleanedOnlyPfTrack = cms.EDProducer("PFTrackProducer",
    TrajInEvents = cms.bool(False),
    TkColList = cms.VInputTag(cms.InputTag("generalTracks")),
    PrimaryVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    GsfTracksInEvents = cms.bool(True),
    UseQuality = cms.bool(True),
    GsfTrackModuleLabel = cms.InputTag("uncleanedOnlyElectronGsfTracks"),
    TrackQuality = cms.string('highPurity'),
    MuColl = cms.InputTag("muons1stStep")
)


process.uncleanedOnlyPfTrackElec = cms.EDProducer("PFElecTkProducer",
    TrajInEvents = cms.bool(False),
    maxDPhiBremTangGsfAngularCleaning = cms.double(0.05),
    PFConversions = cms.InputTag("uncleanedOnlyPfConversions"),
    useConversions = cms.bool(False),
    MinSCEnergy = cms.double(4.0),
    PFEcalClusters = cms.InputTag("particleFlowClusterECAL"),
    ModeMomentum = cms.bool(True),
    Propagator = cms.string('fwdElectronPropagator'),
    useV0 = cms.bool(False),
    pf_convBremFinderID_mvaWeightFile = cms.string('RecoParticleFlow/PFTracking/data/MVAnalysis_BDT.weights_convBremFinder_19Apr_IntToFloat.txt'),
    useFifthStepForEcalDrivenGsf = cms.bool(False),
    GsfTrackModuleLabel = cms.InputTag("uncleanedOnlyElectronGsfTracks"),
    MinDPhiGsfSC = cms.double(0.15),
    applyEGSelection = cms.bool(False),
    useNuclear = cms.bool(False),
    Fitter = cms.string('GsfElectronFittingSmoother'),
    applyGsfTrackCleaning = cms.bool(True),
    MinDEtaGsfSC = cms.double(0.06),
    PFNuclear = cms.InputTag("pfDisplacedTrackerVertex"),
    useConvBremFinder = cms.bool(True),
    debugGsfCleaning = cms.bool(False),
    applyAlsoGsfAngularCleaning = cms.bool(True),
    PFV0 = cms.InputTag("pfV0"),
    pf_convBremFinderID_mvaCut = cms.double(0.2),
    useFifthStepForTrackerDrivenGsf = cms.bool(False),
    PrimaryVertexLabel = cms.InputTag("offlinePrimaryVertices"),
    MaxConvBremRecoPT = cms.double(49.0),
    maxDEtaGsfAngularCleaning = cms.double(0.05),
    TTRHBuilder = cms.string('WithTrackAngle'),
    PFRecTrackLabel = cms.InputTag("uncleanedOnlyPfTrack")
)


process.valCscTriggerPrimitiveDigis = cms.EDProducer("CSCTriggerPrimitivesProducer",
    tmbSLHC = cms.PSet(
        mpcBlockMe1a = cms.uint32(0),
        tmbCrossBxAlgorithm = cms.untracked.uint32(1),
        alctTrigEnable = cms.uint32(0),
        tmbDropUsedClcts = cms.untracked.bool(False),
        verbosity = cms.untracked.int32(0),
        matchEarliestClctME11Only = cms.untracked.bool(False),
        tmbL1aWindowSize = cms.uint32(7),
        tmbEarlyTbins = cms.untracked.int32(4),
        clctTrigEnable = cms.uint32(0),
        tmbDropUsedAlcts = cms.untracked.bool(False),
        clctToAlct = cms.untracked.bool(False),
        matchTrigWindowSize = cms.uint32(3),
        tmbReadoutEarliest2 = cms.untracked.bool(False),
        matchEarliestAlctME11Only = cms.untracked.bool(False),
        maxME11LCTs = cms.untracked.uint32(2),
        matchTrigEnable = cms.uint32(1)
    ),
    mpcSLHC = cms.PSet(
        mpcMaxStubs = cms.untracked.uint32(3)
    ),
    clctParamMTCC = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctMinSeparation = cms.uint32(10),
        clctPidThreshPretrig = cms.uint32(2),
        clctFifoTbins = cms.uint32(12),
        verbosity = cms.untracked.int32(0),
        clctNplanesHitPretrig = cms.uint32(4),
        clctHitPersist = cms.uint32(6),
        clctFifoPretrig = cms.uint32(7),
        clctNplanesHitPattern = cms.uint32(1)
    ),
    MaxBX = cms.int32(9),
    debugParameters = cms.untracked.bool(False),
    CSCComparatorDigiProducer = cms.InputTag("muonCSCDigis","MuonCSCComparatorDigi"),
    alctSLHC = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctGhostCancellationSideQuality = cms.untracked.bool(True),
        alctTrigMode = cms.uint32(2),
        verbosity = cms.untracked.int32(0),
        alctDriftDelay = cms.uint32(2),
        alctNplanesHitAccelPretrig = cms.uint32(3),
        alctNarrowMaskForR1 = cms.untracked.bool(True),
        alctL1aWindowWidth = cms.uint32(7),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctHitPersist = cms.untracked.uint32(6),
        alctGhostCancellationBxDepth = cms.untracked.int32(1),
        alctFifoTbins = cms.uint32(16),
        alctNplanesHitPretrig = cms.uint32(3),
        alctEarlyTbins = cms.untracked.int32(4),
        alctUseCorrectedBx = cms.untracked.bool(True),
        alctPretrigDeadtime = cms.untracked.uint32(0),
        alctFifoPretrig = cms.uint32(10)
    ),
    alctParamMTCC = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctTrigMode = cms.uint32(2),
        verbosity = cms.untracked.int32(0),
        alctL1aWindowWidth = cms.uint32(3),
        alctNplanesHitAccelPretrig = cms.uint32(2),
        alctDriftDelay = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctFifoTbins = cms.uint32(16),
        alctNplanesHitPretrig = cms.uint32(2),
        alctFifoPretrig = cms.uint32(10)
    ),
    alctParam07 = cms.PSet(
        alctAccelMode = cms.uint32(0),
        alctTrigMode = cms.uint32(2),
        verbosity = cms.untracked.int32(0),
        alctDriftDelay = cms.uint32(2),
        alctNplanesHitAccelPretrig = cms.uint32(3),
        alctNarrowMaskForR1 = cms.untracked.bool(False),
        alctL1aWindowWidth = cms.uint32(7),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctHitPersist = cms.untracked.uint32(6),
        alctFifoTbins = cms.uint32(16),
        alctNplanesHitPretrig = cms.uint32(3),
        alctEarlyTbins = cms.untracked.int32(4),
        alctFifoPretrig = cms.uint32(10)
    ),
    clctParamOldMC = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctMinSeparation = cms.uint32(10),
        clctPidThreshPretrig = cms.uint32(2),
        clctFifoTbins = cms.uint32(12),
        verbosity = cms.untracked.int32(0),
        clctNplanesHitPretrig = cms.uint32(2),
        clctHitPersist = cms.uint32(6),
        clctFifoPretrig = cms.uint32(7),
        clctNplanesHitPattern = cms.uint32(4)
    ),
    clctSLHC = cms.PSet(
        clctPretriggerTriggerZone = cms.untracked.uint32(5),
        clctMinSeparation = cms.uint32(5),
        clctPidThreshPretrig = cms.uint32(4),
        clctDriftDelay = cms.uint32(2),
        clctFifoTbins = cms.uint32(12),
        verbosity = cms.untracked.int32(0),
        useDynamicStateMachineZone = cms.untracked.bool(True),
        clctNplanesHitPretrig = cms.uint32(3),
        clctHitPersist = cms.uint32(4),
        clctStartBxShift = cms.untracked.int32(0),
        clctStateMachineZone = cms.untracked.uint32(8),
        useDeadTimeZoning = cms.untracked.bool(True),
        clctFifoPretrig = cms.uint32(7),
        clctNplanesHitPattern = cms.uint32(4),
        clctUseCorrectedBx = cms.untracked.bool(True)
    ),
    MinBX = cms.int32(3),
    tmbParam = cms.PSet(
        alctTrigEnable = cms.uint32(0),
        verbosity = cms.untracked.int32(0),
        tmbDropUsedAlcts = cms.untracked.bool(True),
        tmbEarlyTbins = cms.untracked.int32(4),
        mpcBlockMe1a = cms.uint32(0),
        tmbL1aWindowSize = cms.uint32(7),
        matchTrigWindowSize = cms.uint32(7),
        tmbReadoutEarliest2 = cms.untracked.bool(True),
        clctTrigEnable = cms.uint32(0),
        matchTrigEnable = cms.uint32(1)
    ),
    commonParam = cms.PSet(
        gangedME1a = cms.untracked.bool(True),
        isTMB07 = cms.bool(True),
        isMTCC = cms.bool(False),
        isSLHC = cms.untracked.bool(False),
        smartME1aME1b = cms.untracked.bool(False),
        disableME1a = cms.untracked.bool(False),
        disableME42 = cms.untracked.bool(False)
    ),
    CSCWireDigiProducer = cms.InputTag("muonCSCDigis","MuonCSCWireDigi"),
    checkBadChambers_ = cms.untracked.bool(True),
    alctParamOldMC = cms.PSet(
        alctAccelMode = cms.uint32(1),
        alctTrigMode = cms.uint32(3),
        verbosity = cms.untracked.int32(0),
        alctL1aWindowWidth = cms.uint32(5),
        alctNplanesHitAccelPretrig = cms.uint32(2),
        alctDriftDelay = cms.uint32(3),
        alctNplanesHitPattern = cms.uint32(4),
        alctNplanesHitAccelPattern = cms.uint32(4),
        alctFifoTbins = cms.uint32(16),
        alctNplanesHitPretrig = cms.uint32(2),
        alctFifoPretrig = cms.uint32(10)
    ),
    clctParam07 = cms.PSet(
        clctDriftDelay = cms.uint32(2),
        clctMinSeparation = cms.uint32(10),
        clctPidThreshPretrig = cms.uint32(2),
        clctFifoTbins = cms.uint32(12),
        verbosity = cms.untracked.int32(0),
        clctNplanesHitPretrig = cms.uint32(3),
        clctHitPersist = cms.uint32(4),
        clctStartBxShift = cms.untracked.int32(0),
        clctFifoPretrig = cms.uint32(7),
        clctNplanesHitPattern = cms.uint32(4)
    )
)


process.valCsctfDigis = cms.EDProducer("CSCTFCandidateProducer",
    CSCTrackProducer = cms.untracked.InputTag("valCsctfTrackDigis"),
    MuonSorter = cms.PSet(
        MaxBX = cms.int32(9),
        MinBX = cms.int32(3)
    )
)


process.valCsctfTrackDigis = cms.EDProducer("CSCTFTrackProducer",
    isTMB07 = cms.bool(True),
    useDT = cms.bool(True),
    SectorReceiverInput = cms.untracked.InputTag("csctfDigis"),
    DtDirectProd = cms.untracked.InputTag("csctfunpacker","DT"),
    readDtDirect = cms.bool(False),
    DTproducer = cms.untracked.InputTag("dttfDigis"),
    SectorProcessor = cms.PSet(
        MaxBX = cms.int32(9),
        MinBX = cms.int32(3),
        maxdphi13_accp = cms.uint32(64),
        SRLUT = cms.PSet(
            UseMiniLUTs = cms.untracked.bool(True),
            ReadLUTs = cms.untracked.bool(False),
            LUTPath = cms.untracked.string('./'),
            Binary = cms.untracked.bool(False)
        ),
        mindphip_halo = cms.uint32(128),
        AllowALCTonly = cms.bool(False),
        PTLUT = cms.PSet(
            LowQualityFlag = cms.untracked.uint32(4),
            ReadPtLUT = cms.bool(False),
            PtMethod = cms.untracked.uint32(32)
        ),
        QualityEnableME1b = cms.uint32(65535),
        QualityEnableME1c = cms.uint32(65535),
        QualityEnableME1a = cms.uint32(65535),
        QualityEnableME1f = cms.uint32(65535),
        QualityEnableME1d = cms.uint32(65535),
        QualityEnableME1e = cms.uint32(65535),
        QualityEnableME3a = cms.uint32(65535),
        QualityEnableME3b = cms.uint32(65535),
        QualityEnableME3c = cms.uint32(65535),
        maxdphi112_accp = cms.uint32(64),
        rescaleSinglesPhi = cms.bool(True),
        mindeta112_accp = cms.uint32(14),
        maxdeta113_accp = cms.uint32(38),
        maxdeta13_accp = cms.uint32(27),
        maxdphi113_accp = cms.uint32(64),
        EtaMin = cms.vuint32(0, 0, 0, 0, 0, 
            0, 0, 0),
        mindeta12_accp = cms.uint32(12),
        firmwareSP = cms.uint32(20120319),
        maxdphi12_accp = cms.uint32(64),
        trigger_on_ME1a = cms.bool(False),
        mbbPhiOff = cms.uint32(1982),
        mbaPhiOff = cms.uint32(0),
        EtaMax = cms.vuint32(127, 127, 127, 127, 127, 
            24, 24, 127),
        CoreLatency = cms.uint32(7),
        PreTrigger = cms.uint32(2),
        mindetap = cms.uint32(7),
        trigger_on_MB1d = cms.bool(False),
        maxdeta112_accp = cms.uint32(29),
        mindeta13_accp = cms.uint32(13),
        run_core = cms.bool(True),
        firmwareFA = cms.uint32(20091026),
        trigger_on_MB1a = cms.bool(False),
        firmwareDD = cms.uint32(20091026),
        QualityEnableME2c = cms.uint32(65535),
        EtaWindows = cms.vuint32(4, 4, 6, 6, 6, 
            6, 6),
        QualityEnableME2a = cms.uint32(65535),
        trigger_on_ME4 = cms.bool(False),
        initializeFromPSet = cms.bool(False),
        maxdeta12_accp = cms.uint32(17),
        QualityEnableME4a = cms.uint32(65535),
        QualityEnableME4c = cms.uint32(65535),
        straightp = cms.uint32(19),
        gangedME1a = cms.untracked.bool(True),
        trigger_on_ME1b = cms.bool(False),
        AllowCLCTonly = cms.bool(False),
        QualityEnableME4b = cms.uint32(65535),
        widePhi = cms.uint32(0),
        mindetap_halo = cms.uint32(8),
        curvedp = cms.uint32(15),
        singlesTrackOutput = cms.uint32(1),
        isCoreVerbose = cms.bool(False),
        mindphip = cms.uint32(180),
        mindeta113_accp = cms.uint32(21),
        kill_fiber = cms.uint32(0),
        firmwareVM = cms.uint32(20091026),
        trigger_on_ME2 = cms.bool(False),
        BXAdepth = cms.uint32(2),
        trigger_on_ME3 = cms.bool(False),
        QualityEnableME2b = cms.uint32(65535)
    )
)


process.valDtTriggerPrimitiveDigis = cms.EDProducer("DTTrigProd",
    lutDumpFlag = cms.untracked.bool(False),
    debug = cms.untracked.bool(False),
    lutBtic = cms.untracked.int32(31),
    digiTag = cms.InputTag("muonDTDigis"),
    DTTFSectorNumbering = cms.bool(True)
)


process.valDttfDigis = cms.EDProducer("DTTrackFinder",
    Open_LUTs = cms.untracked.bool(False),
    Extrapolation_nbits_PhiB = cms.untracked.int32(8),
    BX_max = cms.untracked.int32(7),
    BX_min = cms.untracked.int32(-9),
    EtaTrackFinder = cms.untracked.bool(True),
    DTDigi_Source = cms.InputTag("dttfDigis"),
    CSCStub_Source = cms.InputTag("valCsctfTrackDigis"),
    Extrapolation_Filter = cms.untracked.int32(1),
    PT_Assignment_nbits_Phi = cms.untracked.int32(12),
    Overlap = cms.untracked.bool(True),
    PT_Assignment_nbits_PhiB = cms.untracked.int32(10),
    Extrapolation_nbits_Phi = cms.untracked.int32(8),
    Extrapolation_21 = cms.untracked.bool(False),
    PHI_Assignment_nbits_PhiB = cms.untracked.int32(10),
    Debug = cms.untracked.int32(0),
    OutOfTime_Filter = cms.untracked.bool(False),
    PHI_Assignment_nbits_Phi = cms.untracked.int32(10),
    CSC_Eta_Cancellation = cms.untracked.bool(False),
    OutOfTime_Filter_Window = cms.untracked.int32(1)
)


process.valEcalTriggerPrimitiveDigis = cms.EDProducer("EcalTrigPrimProducer",
    BarrelOnly = cms.bool(False),
    InstanceEB = cms.string('ebDigis'),
    InstanceEE = cms.string('eeDigis'),
    binOfMaximum = cms.int32(6),
    Famos = cms.bool(False),
    TcpOutput = cms.bool(False),
    Debug = cms.bool(False),
    Label = cms.string('ecalDigis')
)


process.valGctDigis = cms.EDProducer("L1GctEmulator",
    useImprovedTauAlgorithm = cms.bool(True),
    ignoreRCTTauVetoBitsForIsolation = cms.bool(False),
    postSamples = cms.uint32(0),
    preSamples = cms.uint32(0),
    inputLabel = cms.InputTag("gctDigis"),
    writeInternalData = cms.bool(False),
    jetFinderType = cms.string('hardwareJetFinder'),
    hardwareTest = cms.bool(False)
)


process.valGmtDigis = cms.EDProducer("L1MuGlobalMuonTrigger",
    BX_min_readout = cms.int32(-2),
    BX_min = cms.int32(-4),
    CSCCandidates = cms.InputTag("gtDigis","CSC"),
    BX_max = cms.int32(4),
    BX_max_readout = cms.int32(2),
    RPCfCandidates = cms.InputTag("valRpcTriggerDigis","RPCf"),
    Debug = cms.untracked.int32(0),
    RPCbCandidates = cms.InputTag("valRpcTriggerDigis","RPCb"),
    DTCandidates = cms.InputTag("valDttfDigis"),
    WriteLUTsAndRegs = cms.untracked.bool(False),
    SendMipIso = cms.untracked.bool(False),
    MipIsoData = cms.InputTag("gctDigis")
)


process.valGtDigis = cms.EDProducer("L1GlobalTrigger",
    TechnicalTriggersUnprescaled = cms.bool(False),
    ProduceL1GtObjectMapRecord = cms.bool(True),
    AlgorithmTriggersUnmasked = cms.bool(False),
    EmulateBxInEvent = cms.int32(3),
    AlgorithmTriggersUnprescaled = cms.bool(False),
    ProduceL1GtDaqRecord = cms.bool(True),
    ReadTechnicalTriggerRecords = cms.bool(True),
    RecordLength = cms.vint32(3, 0),
    TechnicalTriggersUnmasked = cms.bool(False),
    ProduceL1GtEvmRecord = cms.bool(True),
    GmtInputTag = cms.InputTag("gtDigis"),
    TechnicalTriggersVetoUnmasked = cms.bool(False),
    AlternativeNrBxBoardEvm = cms.uint32(0),
    TechnicalTriggersInputTags = cms.VInputTag(cms.InputTag("valRpcTechTrigDigis"), cms.InputTag("valHcalTechTrigDigis")),
    CastorInputTag = cms.InputTag("castorL1Digis"),
    GctInputTag = cms.InputTag("gctDigis"),
    AlternativeNrBxBoardDaq = cms.uint32(0),
    WritePsbL1GtDaqRecord = cms.bool(True),
    BstLengthBytes = cms.int32(-1)
)


process.valHcalTTPDigis = cms.EDProducer("HcalTTPDigiProducer",
    iEtaMax = cms.int32(41),
    defTT10 = cms.string('hits>=3:hfp>=1:hfm>=1'),
    defTT9 = cms.string('hits>=2:hfp>=1:hfm>=1'),
    defTT8 = cms.string('hits>=2'),
    presamples = cms.int32(2),
    iEtaMin = cms.int32(33),
    fwAlgorithm = cms.int32(1),
    HFSoI = cms.int32(4),
    threshold = cms.uint32(2),
    id = cms.untracked.int32(101),
    samples = cms.int32(5),
    defTTLocal = cms.string('hits>=4'),
    HFDigiCollection = cms.InputTag("hcalDigis"),
    maskedChannels = cms.vuint32()
)


process.valHcalTechTrigDigis = cms.EDProducer("HcalTTPTriggerRecord",
    ttpBitNames = cms.vstring('L1Tech_HCAL_HF_MM_or_PP_or_PM.v0', 
        'L1Tech_HCAL_HF_coincidence_PM.v1', 
        'L1Tech_HCAL_HF_MMP_or_MPP.v0'),
    ttpDigiCollection = cms.InputTag("simHcalTTPDigis"),
    ttpBits = cms.vuint32(8, 9, 10)
)


process.valHcalTriggerPrimitiveDigis = cms.EDProducer("HcalTrigPrimDigiProducer",
    latency = cms.int32(1),
    MinSignalThreshold = cms.uint32(0),
    ZS_threshold = cms.uint32(1),
    PMTNoiseThreshold = cms.uint32(0),
    InputTagFEDRaw = cms.InputTag("rawDataCollector"),
    inputLabel = cms.VInputTag(cms.InputTag("hcalDigis"), cms.InputTag("hcalDigis")),
    numberOfPresamples = cms.int32(2),
    PeakFinderAlgorithm = cms.int32(2),
    numberOfSamples = cms.int32(4),
    weights = cms.vdouble(1.0, 1.0),
    RunZS = cms.bool(False),
    FG_threshold = cms.uint32(12),
    FrontEndFormatError = cms.bool(True),
    peakFilter = cms.bool(True)
)


process.valRctDigis = cms.EDProducer("L1RCTProducer",
    hcalDigis = cms.VInputTag(cms.InputTag("hcalDigis")),
    ecalDigis = cms.VInputTag(cms.InputTag("ecalDigis","EcalTriggerPrimitives")),
    getFedsFromOmds = cms.bool(False),
    queryDelayInLS = cms.uint32(10),
    queryIntervalInLS = cms.uint32(100),
    useEcal = cms.bool(True),
    useHcal = cms.bool(True),
    BunchCrossings = cms.vint32(0)
)


process.valRpcTechTrigDigis = cms.EDProducer("RPCTechnicalTrigger",
    BitNumbers = cms.vuint32(24, 25, 26, 27, 28, 
        29, 30),
    RPCDigiLabel = cms.InputTag("muonRPCDigis"),
    Verbosity = cms.untracked.int32(0),
    UseEventSetup = cms.untracked.int32(0),
    ConfigFile = cms.string('hardware-pseudoconfig.txt'),
    RPCSimLinkInstance = cms.InputTag("RPCDigiSimLink"),
    BitNames = cms.vstring('L1Tech_RPC_TTU_barrel_Cosmics/v0', 
        'L1Tech_RPC_TTU_pointing_Cosmics/v0', 
        'L1Tech_RPC_TTU_RBplus2_Cosmics/v0', 
        'L1Tech_RPC_TTU_RBplus1_Cosmics/v0', 
        'L1Tech_RPC_TTU_RB0_Cosmics/v0', 
        'L1Tech_RPC_TTU_RBminus1_Cosmics/v0', 
        'L1Tech_RPC_TTU_RBminus2_Cosmics/v0'),
    UseRPCSimLink = cms.untracked.int32(0)
)


process.valRpcTriggerDigis = cms.EDProducer("RPCTrigger",
    label = cms.string('muonRPCDigis'),
    RPCTriggerDebug = cms.untracked.int32(0)
)


process.zdcreco = cms.EDProducer("ZdcHitReconstructor",
    digiLabel = cms.InputTag("hcalDigis"),
    setNoiseFlags = cms.bool(True),
    lowGainOffset = cms.int32(1),
    lowGainFrac = cms.double(8.15),
    correctionPhaseNS = cms.double(0.0),
    setSaturationFlags = cms.bool(True),
    correctTiming = cms.bool(True),
    saturationParameters = cms.PSet(
        maxADCvalue = cms.int32(127)
    ),
    dropZSmarkedPassed = cms.bool(True),
    setHSCPFlags = cms.bool(True),
    Subdetector = cms.string('ZDC'),
    AuxTSvec = cms.vint32(4, 5, 6, 7),
    setTimingTrustFlags = cms.bool(False),
    recoMethod = cms.int32(2),
    correctForPhaseContainment = cms.bool(False),
    correctForTimeslew = cms.bool(False)
)


process.electronsWithPresel = cms.EDFilter("GsfElectronSelector",
    src = cms.InputTag("ecalDrivenGsfElectrons"),
    cut = cms.string('pt > 5 && ecalDrivenSeed && passingCutBasedPreselection')
)


process.goodOfflinePrimaryVertices = cms.EDFilter("VertexSelector",
    filter = cms.bool(False),
    src = cms.InputTag("offlinePrimaryVertices"),
    cut = cms.string('!isFake && ndof >= 4.0 && abs(z) <= 24.0 && abs(position.Rho) <= 2.0')
)


process.mvaElectrons = cms.EDFilter("ElectronIdMVABased",
    electronTag = cms.InputTag("electronsWithPresel"),
    thresholdIsoDR03Barrel = cms.double(10.0),
    thresholdEndcap = cms.double(-0.1075),
    thresholdIsoDR03Endcap = cms.double(10.0),
    vertexTag = cms.InputTag("offlinePrimaryVertices"),
    HZZmvaWeightFile = cms.string('RecoEgamma/ElectronIdentification/data/TMVA_BDTSimpleCat_17Feb2011.weights.xml'),
    thresholdBarrel = cms.double(-0.1875)
)


process.offlinePrimaryVerticesWithBS = cms.EDFilter("VertexSelector",
    filter = cms.bool(False),
    src = cms.InputTag("offlinePrimaryVertices","WithBS"),
    cut = cms.string('')
)


process.pfAllChargedHadrons = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    pdgId = cms.vint32(211, -211, 321, -321, 999211, 
        2212, -2212),
    makeClones = cms.bool(True),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfAllChargedParticles = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    pdgId = cms.vint32(211, -211, 321, -321, 999211, 
        2212, -2212, 11, -11, 13, 
        -13),
    makeClones = cms.bool(True),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfAllElectrons = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    pdgId = cms.vint32(11, -11),
    makeClones = cms.bool(True),
    src = cms.InputTag("pfNoMuon")
)


process.pfAllElectronsEI = cms.EDFilter("PFCandidateFwdPtrCollectionStringFilter",
    src = cms.InputTag("pfNoMuon"),
    cut = cms.string('abs(pdgId())==11'),
    makeClones = cms.bool(True)
)


process.pfAllMuons = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    pdgId = cms.vint32(-13, 13),
    makeClones = cms.bool(True),
    src = cms.InputTag("pfNoPileUp")
)


process.pfAllMuonsEI = cms.EDFilter("PFCandidateFwdPtrCollectionStringFilter",
    src = cms.InputTag("pfNoPileUpEI"),
    cut = cms.string('abs(pdgId())==13'),
    makeClones = cms.bool(True)
)


process.pfAllNeutralHadrons = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    pdgId = cms.vint32(111, 130, 310, 2112),
    makeClones = cms.bool(True),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfAllNeutralHadronsAndPhotons = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    pdgId = cms.vint32(22, 111, 130, 310, 2112),
    makeClones = cms.bool(True),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfAllPhotons = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    pdgId = cms.vint32(22),
    makeClones = cms.bool(True),
    src = cms.InputTag("pfNoPileUpIso")
)


process.pfElectronsFromVertex = cms.EDFilter("IPCutPFCandidateSelector",
    d0Cut = cms.double(0.2),
    src = cms.InputTag("pfAllElectrons"),
    dzSigCut = cms.double(99.0),
    d0SigCut = cms.double(99.0),
    vertices = cms.InputTag("offlinePrimaryVertices"),
    dzCut = cms.double(0.5)
)


process.pfElectronsFromVertexEI = cms.EDFilter("IPCutPFCandidateSelector",
    d0Cut = cms.double(0.2),
    src = cms.InputTag("pfAllElectronsEI"),
    dzSigCut = cms.double(99.0),
    vertices = cms.InputTag("offlinePrimaryVertices"),
    d0SigCut = cms.double(99.0),
    dzCut = cms.double(0.5)
)


process.pfIsolatedElectronsEI = cms.EDFilter("PFCandidateFwdPtrCollectionStringFilter",
    src = cms.InputTag("pfElectronsFromVertexEI"),
    cut = cms.string(' pt > 5 & gsfElectronRef.isAvailable() & gsfTrackRef.trackerExpectedHitsInner.numberOfLostHits<2 & gsfElectronRef.pfIsolationVariables().chargedHadronIso + gsfElectronRef.pfIsolationVariables().neutralHadronIso + gsfElectronRef.pfIsolationVariables().photonIso  < 0.2 * pt '),
    makeClones = cms.bool(True)
)


process.pfIsolatedMuonsEI = cms.EDFilter("PFCandidateFwdPtrCollectionStringFilter",
    src = cms.InputTag("pfMuonsFromVertexEI"),
    cut = cms.string('pt > 5 & muonRef.isAvailable() & muonRef.pfIsolationR04().sumChargedHadronPt + muonRef.pfIsolationR04().sumNeutralHadronEt + muonRef.pfIsolationR04().sumPhotonEt  < 0.15 * pt '),
    makeClones = cms.bool(True)
)


process.pfMuonsFromVertex = cms.EDFilter("IPCutPFCandidateSelector",
    d0Cut = cms.double(0.2),
    src = cms.InputTag("pfAllMuons"),
    dzSigCut = cms.double(99.0),
    d0SigCut = cms.double(99.0),
    vertices = cms.InputTag("offlinePrimaryVertices"),
    dzCut = cms.double(0.5)
)


process.pfMuonsFromVertexEI = cms.EDFilter("IPCutPFCandidateSelector",
    d0Cut = cms.double(0.2),
    src = cms.InputTag("pfAllMuonsEI"),
    dzSigCut = cms.double(99.0),
    vertices = cms.InputTag("offlinePrimaryVertices"),
    d0SigCut = cms.double(99.0),
    dzCut = cms.double(0.5)
)


process.pfPileUpAllChargedParticles = cms.EDFilter("PFCandidateFwdPtrCollectionPdgIdFilter",
    pdgId = cms.vint32(211, -211, 321, -321, 999211, 
        2212, -2212, 11, -11, 13, 
        -13),
    makeClones = cms.bool(True),
    src = cms.InputTag("pfPileUpIso")
)


process.pfSelectedElectrons = cms.EDFilter("GenericPFCandidateSelector",
    src = cms.InputTag("particleFlowTmp"),
    cut = cms.string('abs(pdgId())==11')
)


process.pfSelectedPhotons = cms.EDFilter("GenericPFCandidateSelector",
    src = cms.InputTag("particleFlowTmp"),
    cut = cms.string('pdgId()==22 && mva_nothing_gamma>0')
)


process.pfTauPileUpVertices = cms.EDFilter("RecoTauPileUpVertexSelector",
    filter = cms.bool(False),
    src = cms.InputTag("offlinePrimaryVertices"),
    minTrackSumPt = cms.double(5)
)


process.pfTauSelector = cms.EDFilter("PFTauSelector",
    discriminators = cms.VPSet(cms.PSet(
        discriminator = cms.InputTag("fixedConePFTauDiscriminationByIsolation"),
        selectionCut = cms.double(0.5)
    )),
    src = cms.InputTag("fixedConePFTauProducer")
)


process.pfTaus = cms.EDFilter("PFTauSelector",
    discriminators = cms.VPSet(cms.PSet(
        discriminator = cms.InputTag("pfTausDiscriminationByLeadingPionPtCut"),
        selectionCut = cms.double(0.5)
    ), 
        cms.PSet(
            discriminator = cms.InputTag("pfTausDiscriminationByIsolation"),
            selectionCut = cms.double(0.5)
        )),
    src = cms.InputTag("pfTausProducer")
)


process.pfTausEI = cms.EDFilter("PFTauSelector",
    discriminators = cms.VPSet(cms.PSet(
        discriminator = cms.InputTag("pfTausDiscriminationByLeadingPionPtCut"),
        selectionCut = cms.double(0.5)
    ), 
        cms.PSet(
            discriminator = cms.InputTag("pfTausDiscriminationByIsolation"),
            selectionCut = cms.double(0.5)
        )),
    src = cms.InputTag("pfTausProducer")
)


process.recoTauPileUpVertices = cms.EDFilter("RecoTauPileUpVertexSelector",
    filter = cms.bool(False),
    src = cms.InputTag("offlinePrimaryVertices"),
    minTrackSumPt = cms.double(5)
)


process.trackWithVertexRefSelector = cms.EDFilter("TrackWithVertexRefSelector",
    normalizedChi2 = cms.double(999999.0),
    d0Max = cms.double(999.0),
    numberOfValidHits = cms.uint32(0),
    vtxFallback = cms.bool(True),
    copyExtras = cms.untracked.bool(False),
    quality = cms.string('highPurity'),
    nVertices = cms.uint32(0),
    copyTrajectories = cms.untracked.bool(False),
    ptMax = cms.double(500.0),
    zetaVtx = cms.double(1.0),
    numberOfLostHits = cms.uint32(999),
    etaMin = cms.double(0.0),
    vertexTag = cms.InputTag("offlinePrimaryVertices"),
    ptErrorCut = cms.double(0.2),
    ptMin = cms.double(0.3),
    numberOfValidPixelHits = cms.uint32(0),
    rhoVtx = cms.double(0.2),
    dzMax = cms.double(999.0),
    src = cms.InputTag("generalTracks"),
    etaMax = cms.double(5.0),
    useVtx = cms.bool(True)
)


process.MEtoMEComparitor = cms.EDAnalyzer("MEtoMEComparitor",
    Diffgoodness = cms.double(0.1),
    processRef = cms.string('HLT'),
    dirDepth = cms.uint32(1),
    KSgoodness = cms.double(0.9),
    runInstance = cms.string('MEtoEDMConverterRun'),
    MEtoEDMLabel = cms.string('MEtoEDMConverter'),
    autoProcess = cms.bool(True),
    processNew = cms.string('RERECO'),
    OverAllgoodness = cms.double(0.9),
    lumiInstance = cms.string('MEtoEDMConverterLumi')
)


process.l1ProtoBufMaker = cms.EDAnalyzer("L1ProtoBufMaker",
    puMCHist = cms.untracked.string('pileup'),
    puMCFile = cms.untracked.string('data/PUHistS10.root'),
    muonLabel = cms.untracked.InputTag("valGmtDigis"),
    egLabel = cms.untracked.InputTag("uct2015L1ExtraParticles","Relaxed"),
    puDataFile = cms.untracked.string(''),
    menuFilename = cms.string('/storage/phrca/L1Menu/CMSSW_6_1_2_SLHC2/src/L1Trigger/MenuGeneration/test/L1Menu_input_std.txt'),
    tauLabel = cms.untracked.InputTag("uct2015L1ExtraParticles","RelaxedTau"),
    cenJetLabel = cms.untracked.InputTag("uct2015L1ExtraParticles","Jets"),
    isoTauLabel = cms.untracked.InputTag("uct2015L1ExtraParticles","IsolatedTau"),
    puDataHist = cms.untracked.string('pileup'),
    isoEGLabel = cms.untracked.InputTag("uct2015L1ExtraParticles","Isolated"),
    protobufFilename = cms.untracked.string('myTest.pb'),
    hfRingsLabel = cms.untracked.InputTag("l1extraParticles"),
    mhtLabel = cms.untracked.InputTag("uct2015L1ExtraParticles","MHT"),
    gtSource = cms.untracked.InputTag("gtDigis"),
    metLabel = cms.untracked.InputTag("uct2015L1ExtraParticles","MET"),
    doPUWeights = cms.untracked.bool(False),
    doReEmulMuons = cms.untracked.bool(True),
    fwdJetLabel = cms.untracked.InputTag("uct2015L1ExtraParticles","FwdJets"),
    isoTauJetLabel = cms.untracked.InputTag("none")
)


process.output = cms.OutputModule("PoolOutputModule",
    outputCommands = cms.untracked.vstring('keep *'),
    fileName = cms.untracked.string('output.root')
)


process.regionalCosmicTracksSeq = cms.Sequence(process.regionalCosmicTrackerSeeds+process.regionalCosmicCkfTrackCandidates+process.regionalCosmicTracks)


process.ak7JTA = cms.Sequence(process.ak7JetTracksAssociatorAtVertex+process.ak7JetTracksAssociatorAtCaloFace+process.ak7JetExtender)


process.recopixelvertexing = cms.Sequence(process.pixelTracks+process.pixelVertices)


process.btagging = cms.Sequence(process.impactParameterTagInfos+process.trackCountingHighEffBJetTags+process.trackCountingHighPurBJetTags+process.jetProbabilityBJetTags+process.jetBProbabilityBJetTags+process.secondaryVertexTagInfos+process.simpleSecondaryVertexHighEffBJetTags+process.simpleSecondaryVertexHighPurBJetTags+process.combinedSecondaryVertexBJetTags+process.combinedSecondaryVertexMVABJetTags+process.ghostTrackVertexTagInfos+process.ghostTrackBJetTags+process.softElectronCands+process.softElectronTagInfos+process.softElectronByIP3dBJetTags+process.softElectronByPtBJetTags+process.softMuonTagInfos+process.softMuonBJetTags+process.softMuonByIP3dBJetTags+process.softMuonByPtBJetTags)


process.uncleanedOnlyElectrons = cms.Sequence(process.uncleanedOnlyGsfElectronCores+process.uncleanedOnlyGsfElectrons)


process.iterativeCone5JTA = cms.Sequence(process.iterativeCone5JetTracksAssociatorAtVertex+process.iterativeCone5JetTracksAssociatorAtCaloFace+process.iterativeCone5JetExtender)


process.recoTauCommonSequence = cms.Sequence(process.ak5PFJetTracksAssociatorAtVertex+process.recoTauAK5PFJets08Region+process.recoTauPileUpVertices+process.pfRecoTauTagInfoProducer)


process.dtlocalreco = cms.Sequence(process.dt1DRecHits+process.dt4DSegments+process.dt1DCosmicRecHits+process.dt4DCosmicSegments)


process.recoAllTrackJets = cms.Sequence(process.trackWithVertexRefSelector+process.trackRefsForJets+process.sisCone5TrackJets+process.sisCone7TrackJets+process.kt4TrackJets+process.kt6TrackJets+process.iterativeCone5TrackJets+process.ak5TrackJets+process.ak7TrackJets+process.gk5TrackJets+process.gk7TrackJets+process.ca4TrackJets+process.ca6TrackJets)


process.muonSeededStepExtra = cms.Sequence(process.muonSeededTracksInOutSelector+process.muonSeededTracksOutInSelector)


process.pixeltrackerlocalreco = cms.Sequence(process.siPixelClusters+process.siPixelRecHits)


process.deCsc = cms.Sequence(process.valCscTriggerPrimitiveDigis)


process.photonSequence = cms.Sequence(process.photonCore+process.photons)


process.RunTanc = cms.Sequence(process.shrinkingConePFTauDiscriminationByTaNCfrOnePercent+process.shrinkingConePFTauDiscriminationByTaNCfrHalfPercent+process.shrinkingConePFTauDiscriminationByTaNCfrQuarterPercent+process.shrinkingConePFTauDiscriminationByTaNCfrTenthPercent)


process.JetPlusTrackCorrectionsAntiKt5 = cms.Sequence(process.JPTeidTight+process.JetPlusTrackZSPCorJetAntiKt5)


process.beamhaloTracksSeq = cms.Sequence(process.beamhaloTrackerSeeds+process.beamhaloTrackCandidates+process.beamhaloTracks)


process.PixelPairStep = cms.Sequence(process.pixelPairStepClusters+process.pixelPairStepSeeds+process.pixelPairStepTrackCandidates+process.pixelPairStepTracks+process.pixelPairStepSelector)


process.hpsPFTauDiscriminationByChargedIsolationSeq = cms.Sequence(process.hpsPFTauDiscriminationByVLooseChargedIsolation+process.hpsPFTauDiscriminationByLooseChargedIsolation+process.hpsPFTauDiscriminationByMediumChargedIsolation+process.hpsPFTauDiscriminationByTightChargedIsolation)


process.hpsTancTauInitialSequence = cms.Sequence(process.combinatoricRecoTausDiscriminationByLeadingPionPtCut+process.combinatoricRecoTausHPSSelector+process.hpsTancTausSansRefs+process.hpsTancTaus+process.hpsTancTausDiscriminationByLeadingTrackFinding+process.hpsTancTausDiscriminationByLeadingPionPtCut+process.hpsTancTausDiscriminationByLeadingTrackPtCut+process.hpsTancTausDiscriminationByDecayModeSelection)


process.conversionTrackProducers = cms.Sequence(process.generalConversionTrackProducer+process.conversionStepConversionTrackProducer+process.inOutConversionTrackProducer+process.outInConversionTrackProducer+process.gsfConversionTrackProducer)


process.particleFlowTrackWithNuclear = cms.Sequence(process.pfTrack+process.pfTrackElec+process.pfNuclear)


process.vertexreco = cms.Sequence(process.offlinePrimaryVertices+process.offlinePrimaryVerticesWithBS+process.generalV0Candidates)


process.dtlocalreco_with_2DSegments = cms.Sequence(process.dt1DRecHits+process.dt2DSegments+process.dt4DSegments+process.dt1DCosmicRecHits+process.dt2DCosmicSegments+process.dt4DCosmicSegments)


process.particleFlowTrackWithV0 = cms.Sequence(process.pfTrack+process.pfTrackElec+process.pfV0)


process.CastorFullReco = cms.Sequence(process.CastorTowerReco+process.ak7BasicJets+process.ak7CastorJetID)


process.ctfTracksCombinedSeeds = cms.Sequence(process.globalSeedsFromPairsWithVertices+process.globalSeedsFromTriplets+process.globalCombinedSeeds+process.ckfTrackCandidatesCombinedSeeds+process.ctfCombinedSeeds)


process.hpsTancTauDiscriminantSequence = cms.Sequence(process.hpsTancTausDiscriminationByTancRaw+process.hpsTancTausDiscriminationByTanc+process.hpsTancTausDiscriminationByTancVLoose+process.hpsTancTausDiscriminationByTancLoose+process.hpsTancTausDiscriminationByTancMedium+process.hpsTancTausDiscriminationByTancTight+process.hpsTancTausDiscriminationByVLooseIsolation+process.hpsTancTausDiscriminationByLooseIsolation+process.hpsTancTausDiscriminationByMediumIsolation+process.hpsTancTausDiscriminationByTightIsolation+process.hpsTancTausDiscriminationByLooseElectronRejection+process.hpsTancTausDiscriminationByMediumElectronRejection+process.hpsTancTausDiscriminationByTightElectronRejection+process.hpsTancTausDiscriminationByLooseMuonRejection+process.hpsTancTausDiscriminationByTightMuonRejection)


process.endOfProcess = cms.Sequence(process.MEtoEDMConverter)


process.TobTecStep = cms.Sequence(process.tobTecStepClusters+process.tobTecStepSeeds+process.tobTecStepTrackCandidates+process.tobTecStepTracks+process.tobTecStepSelector)


process.hpsPFTauDiscriminationByCombinedIsolationSeqDBSumPtCorr3Hits = cms.Sequence(process.hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr3Hits+process.hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr3Hits+process.hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr3Hits)


process.muonSelectionTypeSequence = cms.Sequence(process.muidTrackerMuonArbitrated+process.muidAllArbitrated+process.muidGlobalMuonPromptTight+process.muidTMLastStationLoose+process.muidTMLastStationTight+process.muidTM2DCompatibilityLoose+process.muidTM2DCompatibilityTight+process.muidTMOneStationLoose+process.muidTMOneStationTight+process.muidTMLastStationOptimizedLowPtLoose+process.muidTMLastStationOptimizedLowPtTight+process.muidGMTkChiCompatibility+process.muidGMStaChiCompatibility+process.muidGMTkKinkTight+process.muidTMLastStationAngLoose+process.muidTMLastStationAngTight+process.muidTMOneStationAngLoose+process.muidTMOneStationAngTight+process.muidRPCMuLoose)


process.RawToDigi = cms.Sequence(process.csctfDigis+process.dttfDigis+process.gctDigis+process.gtDigis+process.gtEvmDigis+process.siPixelDigis+process.siStripDigis+process.ecalDigis+process.ecalPreshowerDigis+process.hcalDigis+process.muonCSCDigis+process.muonDTDigis+process.muonRPCDigis+process.castorDigis+process.scalersRawToDigi)


process.pfJetSequenceEI = cms.Sequence(process.pfJetsEI+process.pfJetsPtrsEI)


process.pfNoPileUpSequence = cms.Sequence(process.pfPileUp+process.pfNoPileUp)


process.MixedTripletStep = cms.Sequence(process.mixedTripletStepClusters+process.mixedTripletStepSeedsA+process.mixedTripletStepSeedsB+process.mixedTripletStepSeeds+process.mixedTripletStepTrackCandidates+process.mixedTripletStepTracks+process.mixedTripletStepSelector+process.mixedTripletStep)


process.ak5JTAExplicit = cms.Sequence(process.ak5JetTracksAssociatorExplicit)


process.allConversionSequence = cms.Sequence(process.allConversions)


process.seldigis = cms.Sequence(process.selectDigi)


process.eIdSequence = cms.Sequence(process.eidRobustLoose+process.eidRobustTight+process.eidRobustHighEnergy+process.eidLoose+process.eidTight)


process.muoncosmicreco1legSTA = cms.Sequence(process.CosmicMuonSeed+process.cosmicMuons1Leg)


process.recoJetAssociationsExplicit = cms.Sequence(process.ak5JTAExplicit)


process.L1Reco = cms.Sequence(process.l1extraParticles+process.l1GtTriggerMenuLite+process.conditionsInEdm+process.l1L1GtObjectMap)


process.recoAllJetIds = cms.Sequence(process.ak5JetID+process.ak7JetID+process.sc5JetID+process.sc7JetID+process.ic5JetID+process.kt4JetID+process.kt6JetID+process.ca4JetID+process.ca6JetID+process.gk5JetID+process.gk7JetID)


process.hpsPFTauDiscriminationByIsolationSeq = cms.Sequence(process.hpsPFTauDiscriminationByVLooseIsolation+process.hpsPFTauDiscriminationByLooseIsolation+process.hpsPFTauDiscriminationByMediumIsolation+process.hpsPFTauDiscriminationByTightIsolation)


process.interestingEgammaIsoDetIds = cms.Sequence(process.interestingEleIsoDetIdEB+process.interestingEleIsoDetIdEE+process.interestingGamIsoDetIdEB+process.interestingGamIsoDetIdEE)


process.uncleanedOnlyCkfTracksFromConversions = cms.Sequence(process.uncleanedOnlyConversionTrackCandidates+process.uncleanedOnlyCkfOutInTracksFromConversions+process.uncleanedOnlyCkfInOutTracksFromConversions)


process.ak5JTA = cms.Sequence(process.ak5JetTracksAssociatorAtVertex+process.ak5JetTracksAssociatorAtCaloFace+process.ak5JetExtender)


process.caloTowersRec = cms.Sequence(process.towerMaker+process.towerMakerWithHO)


process.produceAndDiscriminateShrinkingConePFTaus = cms.Sequence(process.shrinkingConePFTauProducerSansRefs+process.shrinkingConePFTauProducer+process.shrinkingConePFTauDiscriminationByLeadingTrackFinding+process.shrinkingConePFTauDiscriminationByLeadingTrackPtCut+process.shrinkingConePFTauDiscriminationByLeadingPionPtCut+process.shrinkingConePFTauDiscriminationByIsolation+process.shrinkingConePFTauDiscriminationByTrackIsolation+process.shrinkingConePFTauDiscriminationByECALIsolation+process.shrinkingConePFTauDiscriminationByIsolationUsingLeadingPion+process.shrinkingConePFTauDiscriminationByTrackIsolationUsingLeadingPion+process.shrinkingConePFTauDiscriminationByECALIsolationUsingLeadingPion+process.shrinkingConePFTauDiscriminationAgainstElectron+process.shrinkingConePFTauDiscriminationAgainstMuon)


process.pfClusteringPS = cms.Sequence(process.particleFlowRecHitPS+process.particleFlowClusterPS)


process.generalTracksSequence = cms.Sequence(process.duplicateTrackCandidates+process.mergedDuplicateTracks+process.generalTracks)


process.RawToDigi_noTk = cms.Sequence(process.csctfDigis+process.dttfDigis+process.gctDigis+process.gtDigis+process.gtEvmDigis+process.ecalDigis+process.ecalPreshowerDigis+process.hcalDigis+process.muonCSCDigis+process.muonDTDigis+process.muonRPCDigis+process.castorDigis+process.scalersRawToDigi)


process.electronSeeds = cms.Sequence(process.trackerDrivenElectronSeeds+process.ecalDrivenElectronSeeds+process.electronMergedSeeds)


process.muIsoDeposits_ParamGlobalMuonsOld = cms.Sequence(process.muParamGlobalIsoDepositGsTk+process.muParamGlobalIsoDepositCalEcal+process.muParamGlobalIsoDepositCalHcal)


process.uncleanedOnlyPfTracking = cms.Sequence(process.uncleanedOnlyPfTrack+process.uncleanedOnlyPfConversions+process.uncleanedOnlyPfTrackElec)


process.gsfEcalDrivenElectronSequence = cms.Sequence(process.ecalDrivenGsfElectronCores+process.ecalDrivenGsfElectrons)


process.DetachedTripletStep = cms.Sequence(process.detachedTripletStepClusters+process.detachedTripletStepSeeds+process.detachedTripletStepTrackCandidates+process.detachedTripletStepTracks+process.detachedTripletStepSelector+process.detachedTripletStep)


process.uncleanedOnlyConversionTrackMergers = cms.Sequence(process.uncleanedOnlyInOutOutInConversionTrackMerger+process.uncleanedOnlyGeneralInOutOutInConversionTrackMerger+process.uncleanedOnlyGsfGeneralInOutOutInConversionTrackMerger)


process.standAloneMuonSeeds = cms.Sequence(process.ancientMuonSeed)


process.photonPFIsolationDepositsSequence = cms.Sequence(process.phPFIsoDepositCharged+process.phPFIsoDepositChargedAll+process.phPFIsoDepositGamma+process.phPFIsoDepositNeutral+process.phPFIsoDepositPU)


process.electronSeedsSeq = cms.Sequence(process.initialStepSeedClusterMask+process.pixelPairStepSeedClusterMask+process.mixedTripletStepSeedClusterMask+process.pixelLessStepSeedClusterMask+process.tripletElectronSeeds+process.tripletElectronClusterMask+process.pixelPairElectronSeeds+process.stripPairElectronSeeds+process.newCombinedSeeds)


process.hpsPFTauDiscriminationByMVAIsolationSeq = cms.Sequence(process.kt6PFJetsForRhoComputationVoronoi+process.hpsPFTauDiscriminationByIsolationMVAraw+process.hpsPFTauDiscriminationByLooseIsolationMVA+process.hpsPFTauDiscriminationByMediumIsolationMVA+process.hpsPFTauDiscriminationByTightIsolationMVA)


process.hpsPFTauDiscriminationByIsolationSeqDBSumPtCorr = cms.Sequence(process.hpsPFTauDiscriminationByVLooseIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByLooseIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByMediumIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByTightIsolationDBSumPtCorr)


process.pfJetSequence = cms.Sequence(process.pfJets+process.pfJetsPtrs)


process.Conv2Step = cms.Sequence(process.conv2Clusters+process.photonConvTrajSeedFromQuadruplets+process.conv2TrackCandidates+process.conv2StepTracks+process.conv2StepSelector)


process.muoncosmicreco2legsSTA = cms.Sequence(process.CosmicMuonSeed+process.cosmicMuons)


process.pfTausPreSequence = cms.Sequence(process.pfJetTracksAssociatorAtVertex+process.pfTauPFJets08Region+process.pfTauPileUpVertices+process.pfTauTagInfoProducer+process.pfJetsPiZeros+process.pfJetsLegacyTaNCPiZeros+process.pfJetsLegacyHPSPiZeros)


process.L1Reco_L1Extra = cms.Sequence(process.l1extraParticles)


process.ctfTracksPixelLess = cms.Sequence(process.globalPixelLessSeeds+process.ckfTrackCandidatesPixelLess+process.ctfPixelLess)


process.ckfTracksFromConversions = cms.Sequence(process.conversionTrackCandidates+process.ckfOutInTracksFromConversions+process.ckfInOutTracksFromConversions)


process.pfGsfElectronMVASelectionSequence = cms.Sequence(process.electronsWithPresel+process.mvaElectrons)


process.deDt = cms.Sequence(process.valDtTriggerPrimitiveDigis)


process.LowPtTripletStep = cms.Sequence(process.lowPtTripletStepClusters+process.lowPtTripletStepSeeds+process.lowPtTripletStepTrackCandidates+process.lowPtTripletStepTracks+process.lowPtTripletStepSelector)


process.hcalGlobalRecoSequence = cms.Sequence(process.hbhereco)


process.muIsoDeposits_muons = cms.Sequence(process.muIsoDepositTk+process.muIsoDepositCalByAssociatorTowers+process.muIsoDepositJets)


process.deDttf = cms.Sequence(process.valCsctfTrackDigis+process.valDttfDigis+process.muonDtMon)


process.recoJets = cms.Sequence(process.kt4CaloJets+process.kt6CaloJets+process.kt6CaloJetsCentral+process.iterativeCone5CaloJets+process.ak5CaloJets+process.ak7CaloJets)


process.ConvStep = cms.Sequence(process.convClusters+process.photonConvTrajSeedFromSingleLeg+process.convTrackCandidates+process.convStepTracks+process.convStepSelector)


process.reducedEcalRecHitsSequence = cms.Sequence(process.interestingEcalDetIdEB+process.interestingEcalDetIdEBU+process.interestingEcalDetIdEE+process.interestingTrackEcalDetIds+process.reducedEcalRecHitsEB+process.reducedEcalRecHitsEE+process.seldigis+process.reducedEcalRecHitsES)


process.BeamHaloId = cms.Sequence(process.CSCHaloData+process.EcalHaloData+process.HcalHaloData+process.GlobalHaloData+process.BeamHaloSummary)


process.produceShrinkingConeDiscriminationByTauNeuralClassifier = cms.Sequence(process.shrinkingConePFTauDiscriminationByTaNC+process.shrinkingConePFTauDiscriminationByTaNCfrOnePercent+process.shrinkingConePFTauDiscriminationByTaNCfrHalfPercent+process.shrinkingConePFTauDiscriminationByTaNCfrQuarterPercent+process.shrinkingConePFTauDiscriminationByTaNCfrTenthPercent)


process.ecalLocalRecoSequence_nopreshower = cms.Sequence(process.ecalGlobalUncalibRecHit+process.ecalRecHit)


process.TCTau = cms.Sequence(process.caloRecoTauProducer+process.caloRecoTauDiscriminationByLeadingTrackFinding+process.caloRecoTauDiscriminationByLeadingTrackPtCut+process.caloRecoTauDiscriminationByTrackIsolation+process.caloRecoTauDiscriminationByECALIsolation+process.caloRecoTauDiscriminationByIsolation+process.caloRecoTauDiscriminationAgainstElectron+process.caloRecoTauDiscriminationAgainstMuon)


process.cosmicsMuonIdSequence = cms.Sequence(process.cosmicsVetoSeeds+process.cosmicsVetoTrackCandidates+process.cosmicsVetoTracksRaw+process.cosmicsVetoTracks+process.cosmicsVeto)


process.pfNoPileUpJMESequence = cms.Sequence(process.goodOfflinePrimaryVertices+process.pfPileUpJME+process.pfNoPileUpJME)


process.recoTrackJets = cms.Sequence(process.trackWithVertexRefSelector+process.trackRefsForJets+process.ak5TrackJets+process.kt4TrackJets)


process.hcalLocalRecoSequence = cms.Sequence(process.hbheprereco+process.hfreco+process.horeco+process.zdcreco)


process.JetPlusTrackCorrectionsSisCone5 = cms.Sequence(process.JPTeidTight+process.JetPlusTrackZSPCorJetSiscone5)


process.PixelLessStep = cms.Sequence(process.pixelLessStepClusters+process.pixelLessStepSeeds+process.pixelLessStepTrackCandidates+process.pixelLessStepTracks+process.pixelLessStepSelector)


process.electronSequence = cms.Sequence(process.ecalDrivenGsfElectronCores+process.ecalDrivenGsfElectrons+process.gsfElectronCores+process.gsfElectrons)


process.tcMetSequence = cms.Sequence(process.tcMet+process.tcMetWithPFclusters)


process.csclocalreco = cms.Sequence(process.csc2DRecHits+process.cscSegments)


process.endOfProcess_withComparison = cms.Sequence(process.MEtoEDMConverter+process.MEtoMEComparitor)


process.particleFlowLinks = cms.Sequence(process.particleFlow+process.particleFlowPtrs)


process.conversionSequence = cms.Sequence(process.conversions)


process.muIsoDeposits_ParamGlobalMuons = cms.Sequence(process.muParamGlobalIsoDepositTk+process.muParamGlobalIsoDepositCalByAssociatorTowers+process.muParamGlobalIsoDepositJets)


process.jptRecoTauProducer = cms.Sequence(process.JPTeidTight+process.TCTauJetPlusTrackZSPCorJetAntiKt5+process.JPTAntiKt5JetTracksAssociatorAtVertex+process.caloRecoTauTagInfoProducer+process.JPTCaloRecoTauProducer)


process.ValL1MuTriggerPrimitives = cms.Sequence(process.valCscTriggerPrimitiveDigis+process.valDtTriggerPrimitiveDigis)


process.particleFlowSuperClusteringSequence = cms.Sequence(process.particleFlowSuperClusterECAL)


process.globalmuontracking = cms.Sequence(process.globalMuons+process.tevMuons)


process.jetPlusTrackZSPCorJetAntiKt5 = cms.Sequence(process.JetPlusTrackCorrectionsAntiKt5)


process.pfClusteringECAL = cms.Sequence(process.particleFlowRecHitECAL+process.particleFlowClusterECAL)


process.deGct = cms.Sequence(process.valGctDigis)


process.striptrackerlocalreco = cms.Sequence(process.siStripZeroSuppression+process.siStripClusters+process.siStripMatchedRecHits)


process.recoPFMET = cms.Sequence(process.pfMet)


process.recoPFJets = cms.Sequence(process.kt4PFJets+process.kt6PFJets+process.kt6PFJetsCentralChargedPileUp+process.kt6PFJetsCentralNeutral+process.kt6PFJetsCentralNeutralTight+process.fixedGridRhoAll+process.fixedGridRhoFastjetAll+process.iterativeCone5PFJets+process.ak5PFJets+process.ak7PFJets+process.pfNoPileUpJMESequence+process.ak5PFJetsCHS)


process.caloglobalreco = cms.Sequence(process.hcalGlobalRecoSequence)


process.muoncosmicreco2legsHighLevel = cms.Sequence(process.globalCosmicMuons+process.muonsFromCosmics)


process.deHcal = cms.Sequence(process.valHcalTriggerPrimitiveDigis)


process.muonlocalreco = cms.Sequence(process.dtlocalreco+process.csclocalreco+process.rpcRecHits)


process.hpsPFTauDiscriminationByCombinedIsolationSeqDBSumPtCorr = cms.Sequence(process.hpsPFTauDiscriminationByVLooseCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByLooseCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByMediumCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByTightCombinedIsolationDBSumPtCorr)


process.muonSeededStepCore = cms.Sequence(process.muonSeededSeedsInOut+process.muonSeededTrackCandidatesInOut+process.muonSeededTracksInOut+process.muonSeededSeedsOutIn+process.muonSeededTrackCandidatesOutIn+process.muonSeededTracksOutIn)


process.uncleanedOnlyConversionTrackProducers = cms.Sequence(process.uncleanedOnlyGeneralConversionTrackProducer+process.uncleanedOnlyInOutConversionTrackProducer+process.uncleanedOnlyOutInConversionTrackProducer+process.uncleanedOnlyGsfConversionTrackProducer)


process.recoJPTJets = cms.Sequence(process.jetPlusTrackZSPCorJetAntiKt5)


process.deRct = cms.Sequence(process.valRctDigis)


process.muoncosmicreco1legHighLevel = cms.Sequence(process.globalCosmicMuons1Leg+process.muonsFromCosmics1Leg)


process.ValL1MuTrackFinders = cms.Sequence(process.valCsctfTrackDigis+process.valCsctfDigis+process.valDttfDigis)


process.photonIDSequence = cms.Sequence(process.PhotonIDProd)


process.recoJetIds = cms.Sequence(process.ak5JetID+process.ak7JetID+process.ic5JetID+process.kt4JetID+process.kt6JetID)


process.egammareco_woConvPhotons = cms.Sequence(process.electronSequence+process.photonSequence)


process.electronGsfTracking = cms.Sequence(process.electronSeeds+process.electronCkfTrackCandidates+process.electronGsfTracks)


process.recoAllJetsPUOffsetCorr = cms.Sequence(process.sisCone5CaloJetsPUCorr+process.sisCone7CaloJetsPUCorr+process.kt4CaloJetsPUCorr+process.kt6CaloJetsPUCorr+process.kt6CaloJetsCentralPUCorr+process.iterativeCone5CaloJetsPUCorr+process.ak5CaloJetsPUCorr+process.ak7CaloJetsPUCorr+process.gk5CaloJetsPUCorr+process.gk7CaloJetsPUCorr+process.ca4CaloJetsPUCorr+process.ca6CaloJetsPUCorr)


process.particleFlowTrackWithDisplacedVertex = cms.Sequence(process.pfTrack+process.pfConversions+process.pfV0+process.particleFlowDisplacedVertexCandidate+process.particleFlowDisplacedVertex+process.pfDisplacedTrackerVertex+process.pfTrackElec)


process.pfTausBaseSequence = cms.Sequence(process.pfTausProducerSansRefs+process.pfTausProducer+process.pfTausDiscriminationByLeadingTrackFinding+process.pfTausDiscriminationByLeadingPionPtCut+process.pfTausDiscriminationByIsolation)


process.hcalLocalRecoSequenceNZS = cms.Sequence(process.hbherecoMB+process.hfrecoMB+process.horecoMB)


process.gsfElectronSequence = cms.Sequence(process.ecalDrivenGsfElectronCores+process.ecalDrivenGsfElectrons+process.gsfElectronCores+process.gsfElectrons)


process.reducedHcalRecHitsSequence = cms.Sequence(process.reducedHcalRecHits)


process.deGmt = cms.Sequence(process.valGmtDigis)


process.pfClusteringHCALall = cms.Sequence(process.particleFlowClusterHCAL+process.particleFlowClusterHFHAD+process.particleFlowClusterHFEM)


process.InitialStep = cms.Sequence(process.initialStepSeeds+process.initialStepTrackCandidates+process.initialStepTracks+process.initialStepSelector)


process.conversionTrackMergers = cms.Sequence(process.inOutOutInConversionTrackMerger+process.generalConversionStepConversionTrackMerger+process.generalInOutOutInConversionTrackMerger+process.gsfGeneralInOutOutInConversionTrackMerger)


process.JetPlusTrackCorrections = cms.Sequence(process.JPTeidTight+process.JetPlusTrackZSPCorJetIcone5)


process.pfTauEISequence = cms.Sequence(process.pfTausPreSequence+process.pfTausBaseSequence+process.pfTausEI+process.pfTausPtrsEI)


process.pfSortByTypeSequence = cms.Sequence(process.pfAllNeutralHadrons+process.pfAllChargedHadrons+process.pfAllPhotons+process.pfAllChargedParticles+process.pfPileUpAllChargedParticles+process.pfAllNeutralHadronsAndPhotons)


process.ecalLocalRecoSequence = cms.Sequence(process.ecalGlobalUncalibRecHit+process.ecalDetIdToBeRecovered+process.ecalRecHit+process.ecalCompactTrigPrim+process.ecalTPSkim+process.ecalPreshowerRecHit)


process.kt4JTA = cms.Sequence(process.kt4JetTracksAssociatorAtVertex+process.kt4JetTracksAssociatorAtCaloFace+process.kt4JetExtender)


process.pfTrackingGlobalReco = cms.Sequence(process.particleFlowTrackWithDisplacedVertex)


process.multi5x5PreshowerClusteringSequence = cms.Sequence(process.correctedMulti5x5SuperClustersWithPreshower+process.multi5x5PreshowerClusterShape+process.uncleanedOnlyMulti5x5SuperClustersWithPreshower+process.uncleanedOnlyCorrectedMulti5x5SuperClustersWithPreshower)


process.particleFlowTrack = cms.Sequence(process.pfTrack+process.pfTrackElec)


process.recoAllJets = cms.Sequence(process.sisCone5CaloJets+process.sisCone7CaloJets+process.kt4CaloJets+process.kt6CaloJets+process.kt6CaloJetsCentral+process.iterativeCone5CaloJets+process.ak5CaloJets+process.ak7CaloJets+process.gk5CaloJets+process.gk7CaloJets+process.ca4CaloJets+process.ca6CaloJets)


process.JPTJetsCollectionForTCTaus = cms.Sequence(process.jptRecoTauProducer)


process.deEcal = cms.Sequence(process.valEcalTriggerPrimitiveDigis)


process.sisCone5JTA = cms.Sequence(process.sisCone5JetTracksAssociatorAtVertex+process.sisCone5JetTracksAssociatorAtCaloFace+process.sisCone5JetExtender)


process.muontracking_with_SET = cms.Sequence(process.SETMuonSeed+process.standAloneSETMuons+process.globalSETMuons)


process.pfNoPileUpIsoSequence = cms.Sequence(process.pfPileUpIso+process.pfNoPileUpIso)


process.hfEMClusteringSequence = cms.Sequence(process.hfEMClusters+process.hfRecoEcalCandidate)


process.egammareco = cms.Sequence(process.electronSequence+process.conversionSequence+process.photonSequence)


process.produceHPSPFTaus = cms.Sequence(process.hpsSelectionDiscriminator+process.hpsPFTauProducerSansRefs+process.hpsPFTauProducer)


process.GsfGlobalElectronTestSequence = cms.Sequence(process.CkfElectronCandidates+process.GsfGlobalElectronTest)


process.deGt = cms.Sequence(process.valGtDigis)


process.deCsctf = cms.Sequence(process.valCsctfTrackDigis+process.valCsctfDigis+process.muonCscMon)


process.RawToDigi_woGCT = cms.Sequence(process.csctfDigis+process.dttfDigis+process.gtDigis+process.gtEvmDigis+process.siPixelDigis+process.siStripDigis+process.ecalDigis+process.ecalPreshowerDigis+process.hcalDigis+process.muonCSCDigis+process.muonDTDigis+process.muonRPCDigis+process.castorDigis+process.scalersRawToDigi)


process.ValL1TechnicalTriggers = cms.Sequence(process.valRpcTechTrigDigis+process.valHcalTechTrigDigis)


process.uncleanedOnlyTracking = cms.Sequence(process.uncleanedOnlyElectronSeeds+process.uncleanedOnlyElectronCkfTrackCandidates+process.uncleanedOnlyElectronGsfTracks)


process.multi5x5ClusteringSequence = cms.Sequence(process.multi5x5BasicClustersCleaned+process.multi5x5SuperClustersCleaned+process.multi5x5BasicClustersUncleaned+process.multi5x5SuperClustersUncleaned+process.multi5x5SuperClusters+process.multi5x5SuperClustersWithPreshower)


process.jetGlobalReco = cms.Sequence(process.recoJets+process.recoJetIds+process.recoTrackJets)


process.muIsolation_ParamGlobalMuonsOld = cms.Sequence(process.muIsoDeposits_ParamGlobalMuonsOld)


process.muonIdProducerSequence = cms.Sequence(process.glbTrackQual+process.muons1stStep+process.calomuons+process.muonEcalDetIds+process.muonShowerInformation)


process.egammaIsolationSequence = cms.Sequence(process.electronEcalRecHitIsolationLcone+process.electronEcalRecHitIsolationScone+process.electronHcalTowerIsolationLcone+process.electronHcalDepth1TowerIsolationLcone+process.electronHcalDepth2TowerIsolationLcone+process.electronHcalTowerIsolationScone+process.electronHcalDepth1TowerIsolationScone+process.electronHcalDepth2TowerIsolationScone+process.electronTrackIsolationLcone+process.electronTrackIsolationScone)


process.ctfTracksNoOverlaps = cms.Sequence(process.ckfTrackCandidatesNoOverlaps+process.ctfNoOverlaps)


process.rstracks = cms.Sequence(process.roadSearchSeeds+process.roadSearchClouds+process.rsTrackCandidates+process.rsWithMaterialTracks)


process.egammarecoFull_woHFElectrons = cms.Sequence(process.egammareco+process.interestingEgammaIsoDetIds+process.photonIDSequence+process.eIdSequence)


process.muonSeededStepDebug = cms.Sequence(process.muonSeededSeedsOutInAsTracks+process.muonSeededTrackCandidatesOutInAsTracks+process.muonSeededSeedsInOutAsTracks+process.muonSeededTrackCandidatesInOutAsTracks)


process.JetPlusTrackCorrectionsIcone5 = cms.Sequence(process.JPTeidTight+process.JetPlusTrackZSPCorJetIcone5)


process.pfClusteringHO = cms.Sequence(process.particleFlowRecHitHO+process.particleFlowClusterHO)


process.conversionTrackSequenceNoEcalSeeded = cms.Sequence(process.generalConversionTrackProducer+process.gsfConversionTrackProducer+process.gsfGeneralConversionTrackMerger)


process.L1UCT2015 = cms.Sequence(process.hackHCALMIPs+process.uctDigis+process.UCT2015Producer+process.uct2015L1ExtraParticles)


process.siStripElectronSequence = cms.Sequence(process.siStripElectrons+process.egammaCTFFinalFitWithMaterial+process.siStripElectronToTrackAssociator)


process.L1Reco_L1Extra_L1GtRecord = cms.Sequence(process.l1extraParticles+process.l1GtRecord)


process.pfTauSequence = cms.Sequence(process.pfTausPreSequence+process.pfTausBaseSequence+process.pfTaus+process.pfTausPtrs)


process.gsfElectronMergingSequence = cms.Sequence(process.gsfElectronCores+process.gsfElectrons)


process.hybridClusteringSequence = cms.Sequence(process.cleanedHybridSuperClusters+process.uncleanedHybridSuperClusters+process.hybridSuperClusters+process.correctedHybridSuperClusters+process.uncleanedOnlyCorrectedHybridSuperClusters)


process.recoTauHPSTancSequence = cms.Sequence(process.recoTauCommonSequence+process.ak5PFJetsLegacyHPSPiZeros+process.combinatoricRecoTaus+process.hpsTancTauInitialSequence+process.hpsTancTauDiscriminantSequence)


process.deRpc = cms.Sequence(process.valRpcTriggerDigis)


process.doAlldEdXEstimators = cms.Sequence(process.dedxTruncated40+process.dedxHarmonic2+process.dedxDiscrimASmi)


process.produceAndDiscriminateFixedConePFTaus = cms.Sequence(process.fixedConePFTauProducer+process.fixedConePFTauDiscriminationByLeadingTrackFinding+process.fixedConePFTauDiscriminationByLeadingTrackPtCut+process.fixedConePFTauDiscriminationByLeadingPionPtCut+process.fixedConePFTauDiscriminationByIsolation+process.fixedConePFTauDiscriminationByTrackIsolation+process.fixedConePFTauDiscriminationByECALIsolation+process.fixedConePFTauDiscriminationByIsolationUsingLeadingPion+process.fixedConePFTauDiscriminationByTrackIsolationUsingLeadingPion+process.fixedConePFTauDiscriminationByECALIsolationUsingLeadingPion+process.fixedConePFTauDiscriminationAgainstElectron+process.fixedConePFTauDiscriminationAgainstMuon)


process.muonPFIsolationDepositsSequence = cms.Sequence(process.muPFIsoDepositCharged+process.muPFIsoDepositChargedAll+process.muPFIsoDepositGamma+process.muPFIsoDepositNeutral+process.muPFIsoDepositPU)


process.electronPFIsolationDepositsSequence = cms.Sequence(process.elPFIsoDepositCharged+process.elPFIsoDepositChargedAll+process.elPFIsoDepositGamma+process.elPFIsoDepositNeutral+process.elPFIsoDepositPU)


process.doAlldEdXDiscriminators = cms.Sequence(process.dedxDiscrimProd+process.dedxDiscrimBTag+process.dedxDiscrimSmi+process.dedxDiscrimASmi)


process.uncleanedOnlyConversions = cms.Sequence(process.uncleanedOnlyCkfTracksFromConversions+process.uncleanedOnlyConversionTrackProducers+process.uncleanedOnlyConversionTrackMergers+process.uncleanedOnlyAllConversions)


process.muIsolation_ParamGlobalMuons = cms.Sequence(process.muIsoDeposits_ParamGlobalMuons)


process.egammarecoFull = cms.Sequence(process.egammareco+process.interestingEgammaIsoDetIds+process.photonIDSequence+process.eIdSequence+process.hfEMClusteringSequence)


process.standalonemuontracking = cms.Sequence(process.standAloneMuonSeeds+process.standAloneMuons+process.refittedStandAloneMuons)


process.muoncosmicreco = cms.Sequence(process.muoncosmicreco2legsSTA+process.muoncosmicreco1legSTA)


process.muoncosmichighlevelreco = cms.Sequence(process.muoncosmicreco2legsHighLevel+process.muoncosmicreco1legHighLevel+process.cosmicsMuonIdSequence)


process.ValL1Emulator = cms.Sequence(process.valEcalTriggerPrimitiveDigis+process.valHcalTriggerPrimitiveDigis+process.valHcalTTPDigis+process.valRctDigis+process.valGctDigis+process.ValL1MuTriggerPrimitives+process.ValL1MuTrackFinders+process.valRpcTriggerDigis+process.valGmtDigis+process.valHcalTechTrigDigis+process.valGtDigis)


process.ecalClustersNoPFBox = cms.Sequence(process.hybridClusteringSequence+process.multi5x5ClusteringSequence+process.multi5x5PreshowerClusteringSequence)


process.recoTauClassicShrinkingConeMVASequence = cms.Sequence(process.produceShrinkingConeDiscriminationByTauNeuralClassifier)


process.egammarecoWithID = cms.Sequence(process.egammareco+process.photonIDSequence+process.eIdSequence)


process.trackerlocalreco = cms.Sequence(process.pixeltrackerlocalreco+process.striptrackerlocalreco+process.clusterSummaryProducer)


process.egammareco_withPhotonID = cms.Sequence(process.egammareco+process.photonIDSequence)


process.egammaHighLevelRecoPostPF = cms.Sequence(process.gsfElectronMergingSequence+process.interestingEgammaIsoDetIds+process.photonIDSequence+process.eIdSequence+process.hfEMClusteringSequence)


process.conversionTrackSequence = cms.Sequence(process.ckfTracksFromConversions+process.conversionTrackProducers+process.conversionTrackMergers)


process.muonPFIsolationSequence = cms.Sequence(process.muonPFIsolationDepositsSequence+process.muPFIsoValueCharged03+process.muPFMeanDRIsoValueCharged03+process.muPFSumDRIsoValueCharged03+process.muPFIsoValueChargedAll03+process.muPFMeanDRIsoValueChargedAll03+process.muPFSumDRIsoValueChargedAll03+process.muPFIsoValueGamma03+process.muPFMeanDRIsoValueGamma03+process.muPFSumDRIsoValueGamma03+process.muPFIsoValueNeutral03+process.muPFMeanDRIsoValueNeutral03+process.muPFSumDRIsoValueNeutral03+process.muPFIsoValueGammaHighThreshold03+process.muPFMeanDRIsoValueGammaHighThreshold03+process.muPFSumDRIsoValueGammaHighThreshold03+process.muPFIsoValueNeutralHighThreshold03+process.muPFMeanDRIsoValueNeutralHighThreshold03+process.muPFSumDRIsoValueNeutralHighThreshold03+process.muPFIsoValuePU03+process.muPFMeanDRIsoValuePU03+process.muPFSumDRIsoValuePU03+process.muPFIsoValueCharged04+process.muPFMeanDRIsoValueCharged04+process.muPFSumDRIsoValueCharged04+process.muPFIsoValueChargedAll04+process.muPFMeanDRIsoValueChargedAll04+process.muPFSumDRIsoValueChargedAll04+process.muPFIsoValueGamma04+process.muPFMeanDRIsoValueGamma04+process.muPFSumDRIsoValueGamma04+process.muPFIsoValueNeutral04+process.muPFMeanDRIsoValueNeutral04+process.muPFSumDRIsoValueNeutral04+process.muPFIsoValueGammaHighThreshold04+process.muPFMeanDRIsoValueGammaHighThreshold04+process.muPFSumDRIsoValueGammaHighThreshold04+process.muPFIsoValueNeutralHighThreshold04+process.muPFMeanDRIsoValueNeutralHighThreshold04+process.muPFSumDRIsoValueNeutralHighThreshold04+process.muPFIsoValuePU04+process.muPFMeanDRIsoValuePU04+process.muPFSumDRIsoValuePU04)


process.recoJetAssociations = cms.Sequence(process.ic5JetTracksAssociatorAtVertex+process.iterativeCone5JTA+process.kt4JTA+process.ak5JTA+process.ak7JTA)


process.jetPlusTrackZSPCorJetIcone5 = cms.Sequence(process.JetPlusTrackCorrectionsIcone5)


process.muIsolation_muons = cms.Sequence(process.muIsoDeposits_muons)


process.recoTauClassicShrinkingConeSequence = cms.Sequence(process.recoTauCommonSequence+process.ak5PFJetsRecoTauPiZeros+process.produceAndDiscriminateShrinkingConePFTaus)


process.calolocalreco = cms.Sequence(process.ecalLocalRecoSequence+process.hcalLocalRecoSequence)


process.calolocalrecoNZS = cms.Sequence(process.ecalLocalRecoSequence+process.hcalLocalRecoSequence+process.hcalLocalRecoSequenceNZS)


process.muontracking = cms.Sequence(process.standalonemuontracking+process.globalmuontracking)


process.muonSeededStep = cms.Sequence(process.earlyMuons+process.muonSeededStepCore+process.muonSeededStepExtra)


process.reducedRecHits = cms.Sequence(process.reducedEcalRecHitsSequence+process.reducedHcalRecHitsSequence)


process.pfParticleSelectionSequence = cms.Sequence(process.pfNoPileUpIsoSequence+process.pfNoPileUpSequence+process.pfSortByTypeSequence)


process.muonlocalreco_with_2DSegments = cms.Sequence(process.dtlocalreco_with_2DSegments+process.csclocalreco+process.rpcRecHits)


process.ecalClusters = cms.Sequence(process.ecalClustersNoPFBox+process.particleFlowSuperClusteringSequence)


process.egammareco_withIsolation_woConvPhotons = cms.Sequence(process.egammareco_woConvPhotons+process.egammaIsolationSequence)


process.jetPlusTrackZSPCorJetSiscone5 = cms.Sequence(process.JetPlusTrackCorrectionsSisCone5)


process.tautagging = cms.Sequence(process.JPTJetsCollectionForTCTaus+process.TCTau)


process.metreco = cms.Sequence(process.met+process.metNoHF+process.metHO+process.muonMETValueMapProducer+process.corMetGlobalMuons+process.muonTCMETValueMapProducer+process.tcMetSequence+process.BeamHaloId)


process.produceAndDiscriminateHPSPFTaus = cms.Sequence(process.produceHPSPFTaus+process.hpsPFTauDiscriminationByDecayModeFinding+process.hpsPFTauDiscriminationByChargedIsolationSeq+process.hpsPFTauDiscriminationByIsolationSeq+process.hpsPFTauDiscriminationByIsolationSeqDBSumPtCorr+process.hpsPFTauDiscriminationByMVAIsolationSeq+process.hpsPFTauDiscriminationByRawCombinedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByRawChargedIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByRawGammaIsolationDBSumPtCorr+process.hpsPFTauDiscriminationByCombinedIsolationSeqDBSumPtCorr+process.hpsPFTauDiscriminationByCombinedIsolationSeqDBSumPtCorr3Hits+process.hpsPFTauDiscriminationByLooseElectronRejection+process.hpsPFTauDiscriminationByMediumElectronRejection+process.hpsPFTauDiscriminationByTightElectronRejection+process.hpsPFTauDiscriminationByMVAElectronRejection+process.hpsPFTauDiscriminationByMVA2rawElectronRejection+process.hpsPFTauDiscriminationByMVA2VLooseElectronRejection+process.hpsPFTauDiscriminationByMVA2LooseElectronRejection+process.hpsPFTauDiscriminationByMVA2MediumElectronRejection+process.hpsPFTauDiscriminationByMVA2TightElectronRejection+process.hpsPFTauDiscriminationByMVA3rawElectronRejection+process.hpsPFTauDiscriminationByMVA3LooseElectronRejection+process.hpsPFTauDiscriminationByMVA3MediumElectronRejection+process.hpsPFTauDiscriminationByMVA3TightElectronRejection+process.hpsPFTauDiscriminationByMVA3VTightElectronRejection+process.hpsPFTauDiscriminationByDeadECALElectronRejection+process.hpsPFTauDiscriminationByLooseMuonRejection+process.hpsPFTauDiscriminationByMediumMuonRejection+process.hpsPFTauDiscriminationByTightMuonRejection)


process.egammareco_withElectronID = cms.Sequence(process.egammareco+process.eIdSequence)


process.uncleanedOnlyElectronSequence = cms.Sequence(process.uncleanedOnlyTracking+process.uncleanedOnlyConversions+process.uncleanedOnlyPfTracking+process.uncleanedOnlyElectrons)


process.recoTauClassicFixedConeSequence = cms.Sequence(process.recoTauCommonSequence+process.ak5PFJetsRecoTauPiZeros+process.produceAndDiscriminateFixedConePFTaus)


process.L1HardwareValidation = cms.Sequence(process.deEcal+process.deHcal+process.deRct+process.deGct+process.deDt+process.deDttf+process.deCsc+process.deCsctf+process.deRpc+process.deGmt+process.deGt+process.l1compare)


process.EITopPAG = cms.Sequence(process.pfPileUpEI+process.pfPileUpJMEEI+process.pfNoPileUpEI+process.pfNoPileUpJMEEI+process.pfAllMuonsEI+process.pfMuonsFromVertexEI+process.pfIsolatedMuonsEI+process.pfNoMuon+process.pfNoMuonJME+process.pfAllElectronsEI+process.pfElectronsFromVertexEI+process.pfIsolatedElectronsEI+process.pfNoElectron+process.pfNoElectronJME+process.pfJetSequenceEI+process.pfNoJetEI+process.pfTauEISequence+process.pfNoTauEI+process.pfMetEI)


process.recoAllPFJets = cms.Sequence(process.sisCone5PFJets+process.sisCone7PFJets+process.kt4PFJets+process.kt6PFJets+process.kt6PFJetsCentralChargedPileUp+process.kt6PFJetsCentralNeutral+process.kt6PFJetsCentralNeutralTight+process.fixedGridRhoAll+process.fixedGridRhoFastjetAll+process.iterativeCone5PFJets+process.ak5PFJets+process.ak7PFJets+process.ak5PFJetsTrimmed+process.ak5PFJetsPruned+process.ak5PFJetsFiltered+process.ak5PFJetsMassDropFiltered+process.gk5PFJets+process.gk7PFJets+process.ca4PFJets+process.ca6PFJets+process.pfNoPileUpJMESequence+process.ak5PFJetsCHS)


process.pfClusteringHCAL = cms.Sequence(process.particleFlowRecHitHCAL+process.pfClusteringHCALall)


process.pfBasedElectronPhotonIsoSequence = cms.Sequence(process.pfParticleSelectionSequence+process.pfSelectedElectrons+process.electronPFIsolationDepositsSequence+process.elPFIsoValueCharged03PFId+process.elPFIsoValueChargedAll03PFId+process.elPFIsoValueGamma03PFId+process.elPFIsoValueNeutral03PFId+process.elPFIsoValuePU03PFId+process.elPFIsoValueCharged04PFId+process.elPFIsoValueChargedAll04PFId+process.elPFIsoValueGamma04PFId+process.elPFIsoValueNeutral04PFId+process.elPFIsoValuePU04PFId+process.elPFIsoValueCharged03NoPFId+process.elPFIsoValueChargedAll03NoPFId+process.elPFIsoValueGamma03NoPFId+process.elPFIsoValueNeutral03NoPFId+process.elPFIsoValuePU03NoPFId+process.elPFIsoValueCharged04NoPFId+process.elPFIsoValueChargedAll04NoPFId+process.elPFIsoValueGamma04NoPFId+process.elPFIsoValueNeutral04NoPFId+process.elPFIsoValuePU04NoPFId+process.pfSelectedPhotons+process.photonPFIsolationDepositsSequence+process.phPFIsoValueCharged03PFId+process.phPFIsoValueChargedAll03PFId+process.phPFIsoValueGamma03PFId+process.phPFIsoValueNeutral03PFId+process.phPFIsoValuePU03PFId+process.phPFIsoValueCharged04PFId+process.phPFIsoValueChargedAll04PFId+process.phPFIsoValueGamma04PFId+process.phPFIsoValueNeutral04PFId+process.phPFIsoValuePU04PFId)


process.egammaHighLevelRecoPrePF = cms.Sequence(process.gsfEcalDrivenElectronSequence+process.uncleanedOnlyElectronSequence+process.conversionSequence+process.photonSequence)


process.egammareco_withIsolation = cms.Sequence(process.egammareco+process.egammaIsolationSequence)


process.particleFlowClusterWithoutHO = cms.Sequence(process.towerMakerPF+process.pfClusteringECAL+process.pfClusteringHCAL+process.pfClusteringPS)


process.muIsolation = cms.Sequence(process.muIsolation_muons)


process.muonreco_with_SET = cms.Sequence(process.muontracking_with_SET)


process.iterTracking = cms.Sequence(process.InitialStep+process.LowPtTripletStep+process.PixelPairStep+process.DetachedTripletStep+process.MixedTripletStep+process.PixelLessStep+process.TobTecStep+process.earlyGeneralTracks+process.muonSeededStep+process.preDuplicateMergingGeneralTracks+process.generalTracksSequence+process.ConvStep+process.conversionStepTracks)


process.muonreco = cms.Sequence(process.muontracking+process.muonIdProducerSequence)


process.pfElectronTranslatorSequence = cms.Sequence(process.pfBasedElectronPhotonIsoSequence+process.pfElectronTranslator+process.pfElectronInterestingEcalDetIdEB+process.pfElectronInterestingEcalDetIdEE)


process.particleFlowCluster = cms.Sequence(process.towerMakerPF+process.pfClusteringECAL+process.pfClusteringHCAL+process.pfClusteringHO+process.pfClusteringPS)


process.L1HwVal = cms.Sequence(process.L1HardwareValidation)


process.jetHighLevelReco = cms.Sequence(process.recoJetAssociations+process.recoPFJets+process.recoJetAssociationsExplicit+process.recoJPTJets)


process.ckftracks_woBH = cms.Sequence(process.iterTracking+process.electronSeedsSeq+process.doAlldEdXEstimators)


process.metrecoPlusHCALNoise = cms.Sequence(process.metreco+process.hcalnoise)


process.muonshighlevelreco = cms.Sequence(process.muonPFIsolationSequence+process.muons)


process.muonreco_plus_isolation = cms.Sequence(process.muonreco+process.muIsolation)


process.pfPhotonTranslatorSequence = cms.Sequence(process.pfBasedElectronPhotonIsoSequence+process.pfPhotonTranslator+process.pfPhotonInterestingEcalDetIdEB+process.pfPhotonInterestingEcalDetIdEE)


process.egammaGlobalReco = cms.Sequence(process.electronGsfTracking+process.conversionTrackSequence+process.allConversionSequence)


process.recoTauClassicHPSSequence = cms.Sequence(process.recoTauCommonSequence+process.ak5PFJetsLegacyHPSPiZeros+process.combinatoricRecoTaus+process.produceAndDiscriminateHPSPFTaus)


process.localreco_HcalNZS = cms.Sequence(process.trackerlocalreco+process.muonlocalreco+process.calolocalrecoNZS+process.castorreco)


process.localreco = cms.Sequence(process.trackerlocalreco+process.muonlocalreco+process.calolocalreco+process.castorreco)


process.ckftracks = cms.Sequence(process.iterTracking+process.electronSeedsSeq+process.doAlldEdXEstimators)


process.muonGlobalReco = cms.Sequence(process.globalmuontracking+process.muonIdProducerSequence+process.muonSelectionTypeSequence+process.muIsolation+process.muonreco_with_SET)


process.ckftracks_wodEdX = cms.Sequence(process.iterTracking+process.electronSeedsSeq)


process.ckftracks_plus_pixelless = cms.Sequence(process.ckftracks+process.ctfTracksPixelLess)


process.particleFlowReco = cms.Sequence(process.particleFlowTrackWithDisplacedVertex+process.pfGsfElectronMVASelectionSequence+process.particleFlowBlock+process.particleFlowTmp+process.particleFlowTmpPtrs+process.pfElectronTranslatorSequence+process.pfPhotonTranslatorSequence+process.pfParticleSelectionSequence)


process.muonreco_plus_isolation_plus_SET = cms.Sequence(process.muonreco_plus_isolation+process.muonreco_with_SET)


process.muonrecoComplete = cms.Sequence(process.muonreco_plus_isolation_plus_SET+process.muonSelectionTypeSequence)


process.trackingGlobalReco = cms.Sequence(process.ckftracks+process.trackExtrapolator)


process.PFTau = cms.Sequence(process.recoTauCommonSequence+process.recoTauClassicHPSSequence)


process.globalreco = cms.Sequence(process.offlineBeamSpot+process.standalonemuontracking+process.recopixelvertexing+process.trackingGlobalReco+process.hcalGlobalRecoSequence+process.particleFlowCluster+process.ecalClusters+process.caloTowersRec+process.vertexreco+process.egammaGlobalReco+process.jetGlobalReco+process.muonGlobalReco+process.pfTrackingGlobalReco+process.muoncosmicreco+process.CastorFullReco)


process.reconstruction_noTracking = cms.Sequence(process.clusterSummaryProducer+process.muonlocalreco+process.calolocalreco+process.castorreco+process.offlineBeamSpot+process.standalonemuontracking+process.pixelVertices+process.trackExtrapolator+process.hcalGlobalRecoSequence+process.particleFlowCluster+process.ecalClusters+process.caloTowersRec+process.vertexreco+process.ckfTracksFromConversions+process.conversionStepConversionTrackProducer+process.inOutConversionTrackProducer+process.outInConversionTrackProducer+process.inOutOutInConversionTrackMerger+process.generalConversionStepConversionTrackMerger+process.jetGlobalReco+process.muonGlobalReco+process.pfTrackingGlobalReco+process.muoncosmicreco+process.CastorFullReco+process.ecalDrivenGsfElectronCores+process.uncleanedOnlyCkfTracksFromConversions+process.uncleanedOnlyInOutConversionTrackProducer+process.uncleanedOnlyOutInConversionTrackProducer+process.uncleanedOnlyInOutOutInConversionTrackMerger+process.uncleanedOnlyPfConversions+process.conversionSequence+process.photonSequence+process.particleFlowReco+process.gsfElectronCores+process.interestingEgammaIsoDetIds+process.photonIDSequence+process.eIdSequence+process.hfEMClusteringSequence+process.regionalCosmicTracksSeq+process.muoncosmichighlevelreco+process.muonshighlevelreco+process.particleFlowLinks+process.jetHighLevelReco+process.tautagging+process.metrecoPlusHCALNoise+process.btagging+process.recoPFMET+process.PFTau+process.reducedRecHits+process.EITopPAG+process.logErrorHarvester)


process.highlevelreco = cms.Sequence(process.egammaHighLevelRecoPrePF+process.particleFlowReco+process.egammaHighLevelRecoPostPF+process.regionalCosmicTracksSeq+process.muoncosmichighlevelreco+process.muonshighlevelreco+process.particleFlowLinks+process.jetHighLevelReco+process.tautagging+process.metrecoPlusHCALNoise+process.btagging+process.recoPFMET+process.PFTau+process.reducedRecHits)


process.reconstruction_standard_candle = cms.Sequence(process.localreco+process.globalreco+process.vertexreco+process.recoJetAssociations+process.btagging+process.electronSequence+process.photonSequence)


process.reconstruction_fromRECO = cms.Sequence(process.siPixelRecHits+process.siStripMatchedRecHits+process.clusterSummaryProducer+process.dt4DSegments+process.dt4DCosmicSegments+process.cscSegments+process.offlineBeamSpot+process.standalonemuontracking+process.recopixelvertexing+process.trackingGlobalReco+process.particleFlowCluster+process.ecalClusters+process.caloTowersRec+process.vertexreco+process.egammaGlobalReco+process.jetGlobalReco+process.muonGlobalReco+process.pfTrackingGlobalReco+process.muoncosmicreco+process.CastorFullReco+process.egammaHighLevelRecoPrePF+process.particleFlowReco+process.egammaHighLevelRecoPostPF+process.regionalCosmicTracksSeq+process.muoncosmichighlevelreco+process.muonshighlevelreco+process.particleFlowLinks+process.jetHighLevelReco+process.tautagging+process.metreco+process.btagging+process.recoPFMET+process.PFTau+process.interestingEcalDetIdEB+process.interestingEcalDetIdEBU+process.interestingEcalDetIdEE+process.interestingTrackEcalDetIds+process.reducedEcalRecHitsEB+process.reducedEcalRecHitsEE+process.reducedEcalRecHitsES+process.reducedHcalRecHitsSequence+process.EITopPAG+process.logErrorHarvester)


process.reconstruction_fromRECO_noTrackingTest = cms.Sequence(process.clusterSummaryProducer+process.dt4DSegments+process.dt4DCosmicSegments+process.cscSegments+process.offlineBeamSpot+process.standalonemuontracking+process.pixelVertices+process.trackExtrapolator+process.particleFlowCluster+process.ecalClusters+process.caloTowersRec+process.vertexreco+process.egammaGlobalReco+process.jetGlobalReco+process.muonGlobalReco+process.pfTrackingGlobalReco+process.muoncosmicreco+process.CastorFullReco+process.egammaHighLevelRecoPrePF+process.particleFlowReco+process.egammaHighLevelRecoPostPF+process.regionalCosmicTracksSeq+process.muoncosmichighlevelreco+process.muonshighlevelreco+process.particleFlowLinks+process.jetHighLevelReco+process.tautagging+process.metreco+process.btagging+process.recoPFMET+process.PFTau+process.interestingEcalDetIdEB+process.interestingEcalDetIdEBU+process.interestingEcalDetIdEE+process.interestingTrackEcalDetIds+process.reducedEcalRecHitsEB+process.reducedEcalRecHitsEE+process.reducedEcalRecHitsES+process.reducedHcalRecHitsSequence+process.EITopPAG+process.logErrorHarvester)


process.globalreco_plusPL = cms.Sequence(process.globalreco+process.ctfTracksPixelLess)


process.reconstruction_withPixellessTk = cms.Sequence(process.localreco+process.globalreco_plusPL+process.highlevelreco+process.EITopPAG+process.logErrorHarvester)


process.reconstruction_woCosmicMuons = cms.Sequence(process.localreco+process.globalreco+process.highlevelreco+process.EITopPAG+process.logErrorHarvester)


process.reconstruction = cms.Sequence(process.localreco+process.globalreco+process.highlevelreco+process.EITopPAG+process.logErrorHarvester)


process.reconstruction_fromRECO_noTracking = cms.Sequence(process.clusterSummaryProducer+process.dt4DSegments+process.dt4DCosmicSegments+process.cscSegments+process.offlineBeamSpot+process.standalonemuontracking+process.pixelVertices+process.trackExtrapolator+process.particleFlowCluster+process.ecalClusters+process.caloTowersRec+process.vertexreco+process.ckfTracksFromConversions+process.conversionStepConversionTrackProducer+process.inOutConversionTrackProducer+process.outInConversionTrackProducer+process.inOutOutInConversionTrackMerger+process.generalConversionStepConversionTrackMerger+process.jetGlobalReco+process.muonGlobalReco+process.pfTrackingGlobalReco+process.muoncosmicreco+process.CastorFullReco+process.ecalDrivenGsfElectronCores+process.uncleanedOnlyCkfTracksFromConversions+process.uncleanedOnlyInOutConversionTrackProducer+process.uncleanedOnlyOutInConversionTrackProducer+process.uncleanedOnlyInOutOutInConversionTrackMerger+process.uncleanedOnlyPfConversions+process.conversionSequence+process.photonSequence+process.particleFlowReco+process.gsfElectronCores+process.interestingEgammaIsoDetIds+process.photonIDSequence+process.eIdSequence+process.hfEMClusteringSequence+process.regionalCosmicTracksSeq+process.muoncosmichighlevelreco+process.muonshighlevelreco+process.particleFlowLinks+process.jetHighLevelReco+process.tautagging+process.metreco+process.btagging+process.recoPFMET+process.PFTau+process.interestingEcalDetIdEB+process.interestingEcalDetIdEBU+process.interestingEcalDetIdEE+process.interestingTrackEcalDetIds+process.reducedEcalRecHitsEB+process.reducedEcalRecHitsEE+process.reducedEcalRecHitsES+process.reducedHcalRecHitsSequence+process.EITopPAG+process.logErrorHarvester)


process.reconstruction_HcalNZS = cms.Sequence(process.localreco_HcalNZS+process.globalreco+process.highlevelreco+process.EITopPAG+process.logErrorHarvester)


process.p = cms.Path(process.RawToDigi+process.ValL1Emulator+process.l1extraParticles+process.L1UCT2015+process.l1ProtoBufMaker)


process.e = cms.EndPath(process.output)


process.DBService = cms.Service("DBService")


process.DQMStore = cms.Service("DQMStore")


process.MessageLogger = cms.Service("MessageLogger",
    suppressInfo = cms.untracked.vstring(),
    debugs = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    ),
    suppressDebug = cms.untracked.vstring(),
    cout = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    ),
    cerr_stats = cms.untracked.PSet(
        threshold = cms.untracked.string('WARNING'),
        output = cms.untracked.string('cerr'),
        optionalPSet = cms.untracked.bool(True)
    ),
    warnings = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    ),
    default = cms.untracked.PSet(

    ),
    statistics = cms.untracked.vstring('cerr_stats'),
    cerr = cms.untracked.PSet(
        INFO = cms.untracked.PSet(
            limit = cms.untracked.int32(0)
        ),
        noTimeStamps = cms.untracked.bool(False),
        FwkReport = cms.untracked.PSet(
            reportEvery = cms.untracked.int32(1),
            optionalPSet = cms.untracked.bool(True),
            limit = cms.untracked.int32(10000000)
        ),
        default = cms.untracked.PSet(
            limit = cms.untracked.int32(10000000)
        ),
        Root_NoDictionary = cms.untracked.PSet(
            optionalPSet = cms.untracked.bool(True),
            limit = cms.untracked.int32(0)
        ),
        threshold = cms.untracked.string('INFO'),
        FwkJob = cms.untracked.PSet(
            optionalPSet = cms.untracked.bool(True),
            limit = cms.untracked.int32(0)
        ),
        FwkSummary = cms.untracked.PSet(
            reportEvery = cms.untracked.int32(1),
            optionalPSet = cms.untracked.bool(True),
            limit = cms.untracked.int32(10000000)
        ),
        optionalPSet = cms.untracked.bool(True)
    ),
    FrameworkJobReport = cms.untracked.PSet(
        default = cms.untracked.PSet(
            limit = cms.untracked.int32(0)
        ),
        optionalPSet = cms.untracked.bool(True),
        FwkJob = cms.untracked.PSet(
            optionalPSet = cms.untracked.bool(True),
            limit = cms.untracked.int32(10000000)
        )
    ),
    suppressWarning = cms.untracked.vstring('particleFlowDisplacedVertexCandidate'),
    errors = cms.untracked.PSet(
        placeholder = cms.untracked.bool(True)
    ),
    destinations = cms.untracked.vstring('warnings', 
        'errors', 
        'infos', 
        'debugs', 
        'cout', 
        'cerr'),
    debugModules = cms.untracked.vstring(),
    infos = cms.untracked.PSet(
        optionalPSet = cms.untracked.bool(True),
        Root_NoDictionary = cms.untracked.PSet(
            optionalPSet = cms.untracked.bool(True),
            limit = cms.untracked.int32(0)
        ),
        placeholder = cms.untracked.bool(True)
    ),
    categories = cms.untracked.vstring('FwkJob', 
        'FwkReport', 
        'FwkSummary', 
        'Root_NoDictionary'),
    fwkJobReports = cms.untracked.vstring('FrameworkJobReport')
)


process.RandomNumberGeneratorService = cms.Service("RandomNumberGeneratorService",
    horeco = cms.PSet(
        initialSeed = cms.untracked.uint32(541321),
        engineName = cms.untracked.string('TRandom3')
    ),
    paramMuons = cms.PSet(
        initialSeed = cms.untracked.uint32(54525),
        engineName = cms.untracked.string('TRandom3')
    ),
    saveFileName = cms.untracked.string(''),
    hbhereco = cms.PSet(
        initialSeed = cms.untracked.uint32(541321),
        engineName = cms.untracked.string('TRandom3')
    ),
    simSiStripDigiSimLink = cms.PSet(
        initialSeed = cms.untracked.uint32(1234567),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    externalLHEProducer = cms.PSet(
        initialSeed = cms.untracked.uint32(234567),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    famosPileUp = cms.PSet(
        initialSeed = cms.untracked.uint32(918273),
        engineName = cms.untracked.string('TRandom3')
    ),
    simMuonDTDigis = cms.PSet(
        initialSeed = cms.untracked.uint32(1234567),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    siTrackerGaussianSmearingRecHits = cms.PSet(
        initialSeed = cms.untracked.uint32(24680),
        engineName = cms.untracked.string('TRandom3')
    ),
    ecalPreshowerRecHit = cms.PSet(
        initialSeed = cms.untracked.uint32(6541321),
        engineName = cms.untracked.string('TRandom3')
    ),
    generator = cms.PSet(
        initialSeed = cms.untracked.uint32(123456789),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    simMuonRPCDigis = cms.PSet(
        initialSeed = cms.untracked.uint32(1234567),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    hiSignal = cms.PSet(
        initialSeed = cms.untracked.uint32(123456789),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    mix = cms.PSet(
        initialSeed = cms.untracked.uint32(12345),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    VtxSmeared = cms.PSet(
        initialSeed = cms.untracked.uint32(98765432),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    LHCTransport = cms.PSet(
        initialSeed = cms.untracked.uint32(87654321),
        engineName = cms.untracked.string('TRandom3')
    ),
    ecalRecHit = cms.PSet(
        initialSeed = cms.untracked.uint32(654321),
        engineName = cms.untracked.string('TRandom3')
    ),
    mixData = cms.PSet(
        initialSeed = cms.untracked.uint32(12345),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    hiSignalG4SimHits = cms.PSet(
        initialSeed = cms.untracked.uint32(11),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    famosSimHits = cms.PSet(
        initialSeed = cms.untracked.uint32(13579),
        engineName = cms.untracked.string('TRandom3')
    ),
    MuonSimHits = cms.PSet(
        initialSeed = cms.untracked.uint32(987346),
        engineName = cms.untracked.string('TRandom3')
    ),
    g4SimHits = cms.PSet(
        initialSeed = cms.untracked.uint32(11),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    hiSignalLHCTransport = cms.PSet(
        initialSeed = cms.untracked.uint32(88776655),
        engineName = cms.untracked.string('TRandom3')
    ),
    mixGenPU = cms.PSet(
        initialSeed = cms.untracked.uint32(918273),
        engineName = cms.untracked.string('TRandom3')
    ),
    l1ParamMuons = cms.PSet(
        initialSeed = cms.untracked.uint32(6453209),
        engineName = cms.untracked.string('TRandom3')
    ),
    simBeamSpotFilter = cms.PSet(
        initialSeed = cms.untracked.uint32(87654321),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    simMuonCSCDigis = cms.PSet(
        initialSeed = cms.untracked.uint32(11223344),
        engineName = cms.untracked.string('HepJamesRandom')
    ),
    hfreco = cms.PSet(
        initialSeed = cms.untracked.uint32(541321),
        engineName = cms.untracked.string('TRandom3')
    )
)


process.UpdaterService = cms.Service("UpdaterService")


process.AnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    MaxDPhi = cms.double(1.6),
    ComponentName = cms.string('AnalyticalPropagator'),
    PropagationDirection = cms.string('alongMomentum')
)


process.AnyDirectionAnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    MaxDPhi = cms.double(1.6),
    ComponentName = cms.string('AnyDirectionAnalyticalPropagator'),
    PropagationDirection = cms.string('anyDirection')
)


process.AutoMagneticFieldESProducer = cms.ESProducer("AutoMagneticFieldESProducer",
    valueOverride = cms.int32(-1),
    nominalCurrents = cms.untracked.vint32(-1, 0, 9558, 14416, 16819, 
        18268, 19262),
    mapLabels = cms.untracked.vstring('090322_3_8t', 
        '0t', 
        '071212_2t', 
        '071212_3t', 
        '071212_3_5t', 
        '090322_3_8t', 
        '071212_4t'),
    label = cms.untracked.string('')
)


process.BeamHaloMPropagatorAlong = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('alongMomentum'),
    ComponentName = cms.string('BeamHaloMPropagatorAlong'),
    Mass = cms.double(0.105),
    ptMin = cms.double(-1.0),
    MaxDPhi = cms.double(10000),
    useRungeKutta = cms.bool(True)
)


process.BeamHaloMPropagatorOpposite = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('oppositeToMomentum'),
    ComponentName = cms.string('BeamHaloMPropagatorOpposite'),
    Mass = cms.double(0.105),
    ptMin = cms.double(-1.0),
    MaxDPhi = cms.double(10000),
    useRungeKutta = cms.bool(True)
)


process.BeamHaloPropagatorAlong = cms.ESProducer("BeamHaloPropagatorESProducer",
    ComponentName = cms.string('BeamHaloPropagatorAlong'),
    CrossingTrackerPropagator = cms.string('BeamHaloSHPropagatorAlong'),
    PropagationDirection = cms.string('alongMomentum'),
    EndCapTrackerPropagator = cms.string('BeamHaloMPropagatorAlong')
)


process.BeamHaloPropagatorAny = cms.ESProducer("BeamHaloPropagatorESProducer",
    ComponentName = cms.string('BeamHaloPropagatorAny'),
    CrossingTrackerPropagator = cms.string('BeamHaloSHPropagatorAny'),
    PropagationDirection = cms.string('anyDirection'),
    EndCapTrackerPropagator = cms.string('BeamHaloMPropagatorAlong')
)


process.BeamHaloPropagatorOpposite = cms.ESProducer("BeamHaloPropagatorESProducer",
    ComponentName = cms.string('BeamHaloPropagatorOpposite'),
    CrossingTrackerPropagator = cms.string('BeamHaloSHPropagatorOpposite'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    EndCapTrackerPropagator = cms.string('BeamHaloMPropagatorOpposite')
)


process.BeamHaloSHPropagatorAlong = cms.ESProducer("SteppingHelixPropagatorESProducer",
    endcapShiftInZNeg = cms.double(0.0),
    PropagationDirection = cms.string('alongMomentum'),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    NoErrorPropagation = cms.bool(False),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    returnTangentPlane = cms.bool(True),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    ComponentName = cms.string('BeamHaloSHPropagatorAlong'),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    endcapShiftInZPos = cms.double(0.0)
)


process.BeamHaloSHPropagatorAny = cms.ESProducer("SteppingHelixPropagatorESProducer",
    endcapShiftInZNeg = cms.double(0.0),
    PropagationDirection = cms.string('anyDirection'),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    NoErrorPropagation = cms.bool(False),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    returnTangentPlane = cms.bool(True),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    ComponentName = cms.string('BeamHaloSHPropagatorAny'),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    endcapShiftInZPos = cms.double(0.0)
)


process.BeamHaloSHPropagatorOpposite = cms.ESProducer("SteppingHelixPropagatorESProducer",
    endcapShiftInZNeg = cms.double(0.0),
    PropagationDirection = cms.string('oppositeToMomentum'),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    NoErrorPropagation = cms.bool(False),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    returnTangentPlane = cms.bool(True),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    ComponentName = cms.string('BeamHaloSHPropagatorOpposite'),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    endcapShiftInZPos = cms.double(0.0)
)


process.CSCChannelMapperESProducer = cms.ESProducer("CSCChannelMapperESProducer",
    AlgoName = cms.string('CSCChannelMapperStartup')
)


process.CSCGeometryESModule = cms.ESProducer("CSCGeometryESModule",
    appendToDataLabel = cms.string(''),
    useDDD = cms.bool(True),
    debugV = cms.untracked.bool(False),
    useGangedStripsInME1a = cms.bool(True),
    alignmentsLabel = cms.string(''),
    useOnlyWiresInME1a = cms.bool(False),
    useRealWireGeometry = cms.bool(True),
    useCentreTIOffsets = cms.bool(False),
    applyAlignment = cms.bool(True)
)


process.CSCIndexerESProducer = cms.ESProducer("CSCIndexerESProducer",
    AlgoName = cms.string('CSCIndexerStartup')
)


process.CaloGeometryBuilder = cms.ESProducer("CaloGeometryBuilder",
    SelectedCalos = cms.vstring('HCAL', 
        'ZDC', 
        'CASTOR', 
        'EcalBarrel', 
        'EcalEndcap', 
        'EcalPreshower', 
        'TOWER')
)


process.CaloTopologyBuilder = cms.ESProducer("CaloTopologyBuilder")


process.CaloTowerConstituentsMapBuilder = cms.ESProducer("CaloTowerConstituentsMapBuilder",
    appendToDataLabel = cms.string(''),
    MapFile = cms.untracked.string('Geometry/CaloTopology/data/CaloTowerEEGeometric.map.gz')
)


process.CaloTowerHardcodeGeometryEP = cms.ESProducer("CaloTowerHardcodeGeometryEP")


process.CastorDbProducer = cms.ESProducer("CastorDbProducer")


process.CastorHardcodeGeometryEP = cms.ESProducer("CastorHardcodeGeometryEP")


process.Chi2EstimatorForMuRefit = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(100000.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('Chi2EstimatorForMuRefit')
)


process.Chi2EstimatorForMuonTrackLoader = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(100000.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('Chi2EstimatorForMuonTrackLoader')
)


process.Chi2EstimatorForRefit = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(100000.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('Chi2EstimatorForRefit')
)


process.Chi2MeasurementEstimator = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(30.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('Chi2')
)


process.Chi2MeasurementEstimatorForInOut = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(100.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('Chi2ForInOut')
)


process.Chi2MeasurementEstimatorForOutIn = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(500.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('Chi2ForOutIn')
)


process.CkfElectronTrajectoryBuilder = cms.ESProducer("CkfTrajectoryBuilderESProducer",
    propagatorAlong = cms.string('fwdElectronPropagator'),
    trajectoryFilterName = cms.string('ckfBaseTrajectoryFilter'),
    maxCand = cms.int32(5),
    ComponentName = cms.string('CkfElectronTrajectoryBuilder'),
    propagatorOpposite = cms.string('bwdElectronPropagator'),
    MeasurementTrackerName = cms.string(''),
    estimator = cms.string('electronChi2'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    updator = cms.string('KFUpdator'),
    alwaysUseInvalidHits = cms.bool(True),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.CkfTrajectoryBuilder = cms.ESProducer("CkfTrajectoryBuilderESProducer",
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    trajectoryFilterName = cms.string('ckfBaseTrajectoryFilter'),
    maxCand = cms.int32(5),
    ComponentName = cms.string('CkfTrajectoryBuilder'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    MeasurementTrackerName = cms.string(''),
    estimator = cms.string('Chi2'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    updator = cms.string('KFUpdator'),
    alwaysUseInvalidHits = cms.bool(True),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.CkfTrajectoryBuilderBeamHalo = cms.ESProducer("CkfTrajectoryBuilderESProducer",
    propagatorAlong = cms.string('BeamHaloPropagatorAlong'),
    trajectoryFilterName = cms.string('ckfTrajectoryFilterBeamHaloMuon'),
    maxCand = cms.int32(5),
    ComponentName = cms.string('CkfTrajectoryBuilderBH'),
    propagatorOpposite = cms.string('BeamHaloPropagatorOpposite'),
    MeasurementTrackerName = cms.string(''),
    estimator = cms.string('Chi2'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    updator = cms.string('KFUpdator'),
    alwaysUseInvalidHits = cms.bool(True),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.CloseComponentsMerger5D = cms.ESProducer("CloseComponentsMergerESProducer5D",
    ComponentName = cms.string('CloseComponentsMerger5D'),
    MaxComponents = cms.int32(12),
    DistanceMeasure = cms.string('KullbackLeiblerDistance5D')
)


process.CloseComponentsMerger_forPreId = cms.ESProducer("CloseComponentsMergerESProducer5D",
    ComponentName = cms.string('CloseComponentsMerger_forPreId'),
    MaxComponents = cms.int32(4),
    DistanceMeasure = cms.string('KullbackLeiblerDistance5D')
)


process.ClusterShapeHitFilterESProducer = cms.ESProducer("ClusterShapeHitFilterESProducer",
    ComponentName = cms.string('ClusterShapeHitFilter'),
    PixelShapeFile = cms.string('RecoPixelVertexing/PixelLowPtUtilities/data/pixelShape.par')
)


process.ClusterShapeTrajectoryFilterESProducer = cms.ESProducer("ClusterShapeTrajectoryFilterESProducer",
    ComponentName = cms.string('clusterShapeTrajectoryFilter')
)


process.DTGeometryESModule = cms.ESProducer("DTGeometryESModule",
    appendToDataLabel = cms.string(''),
    fromDDD = cms.bool(True),
    applyAlignment = cms.bool(True),
    alignmentsLabel = cms.string('')
)


process.DummyDetLayerGeometry = cms.ESProducer("DetLayerGeometryESProducer",
    ComponentName = cms.string('DummyDetLayerGeometry')
)


process.EcalBarrelGeometryEP = cms.ESProducer("EcalBarrelGeometryEP",
    applyAlignment = cms.bool(False)
)


process.EcalElectronicsMappingBuilder = cms.ESProducer("EcalElectronicsMappingBuilder")


process.EcalEndcapGeometryEP = cms.ESProducer("EcalEndcapGeometryEP",
    applyAlignment = cms.bool(False)
)


process.EcalLaserCorrectionService = cms.ESProducer("EcalLaserCorrectionService")


process.EcalPreshowerGeometryEP = cms.ESProducer("EcalPreshowerGeometryEP",
    applyAlignment = cms.bool(False)
)


process.EcalTrigTowerConstituentsMapBuilder = cms.ESProducer("EcalTrigTowerConstituentsMapBuilder",
    MapFile = cms.untracked.string('Geometry/EcalMapping/data/EndCap_TTMap.txt')
)


process.ElectronChi2 = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(2000.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('ElectronChi2')
)


process.ElectronMaterialEffects = cms.ESProducer("GsfMaterialEffectsESProducer",
    BetheHeitlerParametrization = cms.string('BetheHeitler_cdfmom_nC6_O5.par'),
    EnergyLossUpdator = cms.string('GsfBetheHeitlerUpdator'),
    ComponentName = cms.string('ElectronMaterialEffects'),
    MultipleScatteringUpdator = cms.string('MultipleScatteringUpdator'),
    Mass = cms.double(0.000511),
    BetheHeitlerCorrection = cms.int32(2)
)


process.ElectronMaterialEffects_forPreId = cms.ESProducer("GsfMaterialEffectsESProducer",
    BetheHeitlerParametrization = cms.string('BetheHeitler_cdfmom_nC3_O5.par'),
    EnergyLossUpdator = cms.string('GsfBetheHeitlerUpdator'),
    ComponentName = cms.string('ElectronMaterialEffects_forPreId'),
    MultipleScatteringUpdator = cms.string('MultipleScatteringUpdator'),
    Mass = cms.double(0.000511),
    BetheHeitlerCorrection = cms.int32(2)
)


process.EstimatorForSTA = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(1000.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('Chi2STA')
)


process.FittingSmootherRKP5 = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(20.0),
    LogPixelProbabilityCut = cms.double(-16.0),
    Fitter = cms.string('RKFitter'),
    MinNumberOfHits = cms.int32(4),
    Smoother = cms.string('RKSmoother'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(False),
    ComponentName = cms.string('FittingSmootherRKP5'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.FlexibleKFFittingSmoother = cms.ESProducer("FlexibleKFFittingSmootherESProducer",
    ComponentName = cms.string('FlexibleKFFittingSmoother'),
    standardFitter = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    looperFitter = cms.string('LooperFittingSmoother')
)


process.GlbMuKFFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('GlbMuKFFitter'),
    Estimator = cms.string('Chi2EstimatorForMuRefit'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    minHits = cms.int32(3)
)


process.GlobalDetLayerGeometry = cms.ESProducer("GlobalDetLayerGeometryESProducer",
    ComponentName = cms.string('GlobalDetLayerGeometry')
)


process.GlobalTrackingGeometryESProducer = cms.ESProducer("GlobalTrackingGeometryESProducer")


process.GroupedCkfTrajectoryBuilder = cms.ESProducer("GroupedCkfTrajectoryBuilderESProducer",
    bestHitOnly = cms.bool(True),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    trajectoryFilterName = cms.string('ckfBaseTrajectoryFilter'),
    maxCand = cms.int32(5),
    ComponentName = cms.string('GroupedCkfTrajectoryBuilder'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    inOutTrajectoryFilterName = cms.string('ckfBaseTrajectoryFilter'),
    MeasurementTrackerName = cms.string(''),
    minNrOfHitsForRebuild = cms.int32(5),
    lockHits = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    foundHitBonus = cms.double(5.0),
    updator = cms.string('KFUpdator'),
    alwaysUseInvalidHits = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    requireSeedHitsInRebuild = cms.bool(True),
    useSameTrajFilter = cms.bool(True),
    estimator = cms.string('Chi2'),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.GroupedCkfTrajectoryBuilderP5 = cms.ESProducer("GroupedCkfTrajectoryBuilderESProducer",
    bestHitOnly = cms.bool(True),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    trajectoryFilterName = cms.string('ckfBaseTrajectoryFilterP5'),
    maxCand = cms.int32(5),
    ComponentName = cms.string('GroupedCkfTrajectoryBuilderP5'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    inOutTrajectoryFilterName = cms.string('ckfBaseTrajectoryFilter'),
    MeasurementTrackerName = cms.string(''),
    minNrOfHitsForRebuild = cms.int32(5),
    lockHits = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    foundHitBonus = cms.double(5.0),
    updator = cms.string('KFUpdator'),
    alwaysUseInvalidHits = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    requireSeedHitsInRebuild = cms.bool(True),
    useSameTrajFilter = cms.bool(True),
    estimator = cms.string('Chi2'),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.GsfElectronFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(-1.0),
    LogPixelProbabilityCut = cms.double(-16.0),
    Fitter = cms.string('GsfTrajectoryFitter'),
    MinNumberOfHits = cms.int32(5),
    Smoother = cms.string('GsfTrajectorySmoother'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('GsfElectronFittingSmoother'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.GsfTrajectoryFitter = cms.ESProducer("GsfTrajectoryFitterESProducer",
    Merger = cms.string('CloseComponentsMerger5D'),
    ComponentName = cms.string('GsfTrajectoryFitter'),
    MaterialEffectsUpdator = cms.string('ElectronMaterialEffects'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    GeometricalPropagator = cms.string('fwdAnalyticalPropagator')
)


process.GsfTrajectoryFitter_forPreId = cms.ESProducer("GsfTrajectoryFitterESProducer",
    Merger = cms.string('CloseComponentsMerger_forPreId'),
    ComponentName = cms.string('GsfTrajectoryFitter_forPreId'),
    MaterialEffectsUpdator = cms.string('ElectronMaterialEffects_forPreId'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    GeometricalPropagator = cms.string('fwdAnalyticalPropagator')
)


process.GsfTrajectorySmoother = cms.ESProducer("GsfTrajectorySmootherESProducer",
    ErrorRescaling = cms.double(100.0),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Merger = cms.string('CloseComponentsMerger5D'),
    ComponentName = cms.string('GsfTrajectorySmoother'),
    GeometricalPropagator = cms.string('bwdAnalyticalPropagator'),
    MaterialEffectsUpdator = cms.string('ElectronMaterialEffects')
)


process.GsfTrajectorySmoother_forPreId = cms.ESProducer("GsfTrajectorySmootherESProducer",
    ErrorRescaling = cms.double(100.0),
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    Merger = cms.string('CloseComponentsMerger_forPreId'),
    ComponentName = cms.string('GsfTrajectorySmoother_forPreId'),
    GeometricalPropagator = cms.string('bwdAnalyticalPropagator'),
    MaterialEffectsUpdator = cms.string('ElectronMaterialEffects_forPreId')
)


process.HcalHardcodeGeometryEP = cms.ESProducer("HcalHardcodeGeometryEP",
    HcalReLabel = cms.PSet(
        RelabelRules = cms.untracked.PSet(
            Eta16 = cms.untracked.vint32(1, 1, 2, 2, 2, 
                2, 2, 2, 2, 3, 
                3, 3, 3, 3, 3, 
                3, 3, 3, 3),
            Eta17 = cms.untracked.vint32(1, 1, 2, 2, 3, 
                3, 3, 4, 4, 4, 
                4, 4, 5, 5, 5, 
                5, 5, 5, 5),
            Eta1 = cms.untracked.vint32(1, 2, 2, 2, 3, 
                3, 3, 3, 3, 3, 
                3, 3, 3, 3, 3, 
                3, 3, 3, 3),
            CorrectPhi = cms.untracked.bool(False)
        ),
        RelabelHits = cms.untracked.bool(False)
    )
)


process.HcalTPGCoderULUT = cms.ESProducer("HcalTPGCoderULUT",
    read_FG_LUTs = cms.bool(False),
    FGLUTs = cms.FileInPath('CalibCalorimetry/HcalTPGAlgos/data/HBHE_FG_LUT.dat'),
    MaskBit = cms.int32(32768),
    read_Ascii_LUTs = cms.bool(False),
    read_XML_LUTs = cms.bool(False),
    RCalibFile = cms.FileInPath('CalibCalorimetry/HcalTPGAlgos/data/RecHit-TPG-calib.dat'),
    LUTGenerationMode = cms.bool(False),
    inputLUTs = cms.FileInPath('CalibCalorimetry/HcalTPGAlgos/data/inputLUTcoder_physics.dat'),
    hcalTopologyConstants = cms.PSet(
        maxDepthHE = cms.int32(3),
        maxDepthHB = cms.int32(2),
        mode = cms.string('HcalTopologyMode::LHC')
    )
)


process.HcalTrigTowerGeometryESProducer = cms.ESProducer("HcalTrigTowerGeometryESProducer")


process.KFFitterForRefitInsideOut = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('KFFitterForRefitInsideOut'),
    Estimator = cms.string('Chi2EstimatorForRefit'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    minHits = cms.int32(3)
)


process.KFFitterForRefitOutsideIn = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('KFFitterForRefitOutsideIn'),
    Estimator = cms.string('Chi2EstimatorForRefit'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
    minHits = cms.int32(3)
)


process.KFFittingSmootheForSTA = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(-1.0),
    LogPixelProbabilityCut = cms.double(-16.0),
    Fitter = cms.string('KFFitterSTA'),
    MinNumberOfHits = cms.int32(5),
    Smoother = cms.string('KFSmootherSTA'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFitterSmootherSTA'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.KFFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(-1.0),
    LogPixelProbabilityCut = cms.double(-16.0),
    Fitter = cms.string('KFFitter'),
    MinNumberOfHits = cms.int32(5),
    Smoother = cms.string('KFSmoother'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFittingSmoother'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.KFFittingSmootherBeamHalo = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(-1.0),
    LogPixelProbabilityCut = cms.double(-16.0),
    Fitter = cms.string('KFFitterBH'),
    MinNumberOfHits = cms.int32(5),
    Smoother = cms.string('KFSmootherBH'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFittingSmootherBH'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.KFFittingSmootherForInOut = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(-1.0),
    LogPixelProbabilityCut = cms.double(-16.0),
    Fitter = cms.string('KFFitterForInOut'),
    MinNumberOfHits = cms.int32(3),
    Smoother = cms.string('KFSmootherForInOut'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFittingSmootherForInOut'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.KFFittingSmootherWithOutliersRejectionAndRK = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(20.0),
    LogPixelProbabilityCut = cms.double(-14.0),
    Fitter = cms.string('RKFitter'),
    MinNumberOfHits = cms.int32(3),
    Smoother = cms.string('RKSmoother'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('KFFittingSmootherWithOutliersRejectionAndRK'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.KFSmootherForMuonTrackLoader = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('KFSmootherForMuonTrackLoader'),
    Estimator = cms.string('Chi2EstimatorForMuonTrackLoader'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.KFSmootherForMuonTrackLoaderL3 = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('KFSmootherForMuonTrackLoaderL3'),
    Estimator = cms.string('Chi2EstimatorForMuonTrackLoader'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('SmartPropagatorAnyOpposite'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.KFSmootherForRefitInsideOut = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('KFSmootherForRefitInsideOut'),
    Estimator = cms.string('Chi2EstimatorForRefit'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.KFSmootherForRefitOutsideIn = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('KFSmootherForRefitOutsideIn'),
    Estimator = cms.string('Chi2EstimatorForRefit'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('SmartPropagatorAnyRKOpposite'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.KFSwitching1DUpdatorESProducer = cms.ESProducer("KFSwitching1DUpdatorESProducer",
    ComponentName = cms.string('KFSwitching1DUpdator'),
    doEndCap = cms.bool(False)
)


process.KFTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('KFFitter'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('PropagatorWithMaterial'),
    minHits = cms.int32(3)
)


process.KFTrajectoryFitterBeamHalo = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('KFFitterBH'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('BeamHaloPropagatorAlong'),
    minHits = cms.int32(3)
)


process.KFTrajectoryFitterForInOut = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('KFFitterForInOut'),
    Estimator = cms.string('Chi2ForInOut'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('alongMomElePropagator'),
    minHits = cms.int32(3)
)


process.KFTrajectoryFitterForOutIn = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('KFFitterForOutIn'),
    Estimator = cms.string('Chi2ForOutIn'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('alongMomElePropagator'),
    minHits = cms.int32(3)
)


process.KFTrajectoryFitterForSTA = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('KFFitterSTA'),
    Estimator = cms.string('Chi2STA'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('SteppingHelixPropagatorAny'),
    minHits = cms.int32(3)
)


process.KFTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('KFSmoother'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('PropagatorWithMaterial'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.KFTrajectorySmootherBeamHalo = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('KFSmootherBH'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('BeamHaloPropagatorAlong'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.KFTrajectorySmootherForInOut = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('KFSmootherForInOut'),
    Estimator = cms.string('Chi2ForInOut'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('oppositeToMomElePropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.KFTrajectorySmootherForSTA = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('KFSmootherSTA'),
    Estimator = cms.string('Chi2STA'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('SteppingHelixPropagatorOpposite'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.KFUpdatorESProducer = cms.ESProducer("KFUpdatorESProducer",
    ComponentName = cms.string('KFUpdator')
)


process.KullbackLeiblerDistance5D = cms.ESProducer("DistanceBetweenComponentsESProducer5D",
    ComponentName = cms.string('KullbackLeiblerDistance5D'),
    DistanceMeasure = cms.string('KullbackLeibler')
)


process.L1CaloInputScalesProducer = cms.ESProducer("L1CaloInputScalesProducer",
    L1HcalEtThresholdsPositiveEta = cms.vdouble( (0, 0, 0, 0, 0.70733067, 
        0.88416334, 1.2378287, 1.4146613, 1.591494, 1.7683267, 
        2.121992, 2.2988247, 2.65249, 2.8293227, 3.0061554, 
        3.3598207, 3.5366534, 3.8903187, 4.0671514, 4.4208167, 
        4.774482, 4.9513147, 5.30498, 5.6586454, 5.835478, 
        6.1891434, 6.5428087, 6.896474, 7.2501394, 7.426972, 
        7.7806374, 8.1343027, 8.4879681, 8.8416334, 9.1952987, 
        9.5489641, 9.9026294, 10.256295, 10.60996, 11.140458, 
        11.494123, 11.847789, 12.201454, 12.555119, 12.908785, 
        13.439283, 13.792948, 14.146613, 14.677111, 15.030777, 
        15.384442, 15.91494, 16.268605, 16.799103, 17.152769, 
        17.683267, 18.036932, 18.56743, 18.921095, 19.451593, 
        19.982091, 20.335757, 20.866255, 21.396753, 21.750418, 
        22.280916, 22.811414, 23.341912, 23.87241, 24.226075, 
        24.756573, 25.287071, 25.81757, 26.348068, 26.878566, 
        27.409064, 27.939562, 28.47006, 29.000558, 29.531056, 
        30.061554, 30.592052, 31.299382, 31.82988, 32.360378, 
        32.890876, 33.421374, 34.128705, 34.659203, 35.189701, 
        35.897032, 36.42753, 36.958028, 37.665358, 38.195856, 
        38.903187, 39.433685, 40.141016, 40.671514, 41.378844, 
        41.909342, 42.616673, 43.147171, 43.854502, 44.561832, 
        45.09233, 45.799661, 46.506992, 47.03749, 47.74482, 
        48.452151, 49.159482, 49.866812, 50.39731, 51.104641, 
        51.811972, 52.519302, 53.226633, 53.933964, 54.641294, 
        55.348625, 56.055956, 56.763286, 57.470617, 58.177948, 
        58.885278, 59.592609, 60.29994, 61.00727, 61.714601, 
        62.421932, 63.306095, 64.013426, 64.720756, 65.428087, 
        66.31225, 67.019581, 67.726912, 68.434242, 69.318406, 
        70.025736, 70.9099, 71.61723, 72.324561, 73.208724, 
        73.916055, 74.800218, 75.507549, 76.391712, 77.099043, 
        77.983207, 78.690537, 79.574701, 80.458864, 81.166195, 
        82.050358, 82.934521, 83.641852, 84.526015, 85.410179, 
        86.294342, 87.001673, 87.885836, 88.769999, 89.654163, 
        90.538326, 91.245657, 92.12982, 93.013983, 93.898147, 
        94.78231, 95.666473, 96.550637, 97.4348, 98.318963, 
        99.203127, 100.08729, 100.97145, 102.03245, 102.91661, 
        103.80078, 104.68494, 105.5691, 106.45327, 107.51426, 
        108.39843, 109.28259, 110.34358, 111.22775, 112.11191, 
        113.17291, 114.05707, 114.94123, 116.00223, 116.88639, 
        117.94739, 118.83155, 119.71572, 120.77671, 121.66088, 
        122.72187, 123.78287, 124.66703, 125.72803, 126.61219, 
        127.67319, 128.73418, 129.61835, 130.67934, 131.74034, 
        132.6245, 133.6855, 134.74649, 135.80749, 136.69165, 
        137.75265, 138.81364, 139.87464, 140.93564, 141.99663, 
        143.05763, 143.94179, 145.00279, 146.06378, 147.12478, 
        148.18578, 149.24677, 150.30777, 151.36876, 152.42976, 
        153.49076, 154.72858, 155.78958, 156.85058, 157.91157, 
        158.97257, 160.03356, 161.09456, 162.33239, 163.39339, 
        164.45438, 165.51538, 166.75321, 167.8142, 168.8752, 
        170.11303, 171.17402, 172.23502, 173.47285, 174.53384, 
        175.77167, 176.83267, 177.89366, 179.13149, 180.19249, 
        180.89982, 0, 0, 0, 0, 
        0.70201378, 0.87751722, 1.2285241, 1.4040276, 1.579531, 
        1.7550344, 2.1060413, 2.2815448, 2.6325517, 2.8080551, 
        2.9835586, 3.3345654, 3.5100689, 3.8610758, 4.0365792, 
        4.3875861, 4.738593, 4.9140964, 5.2651033, 5.6161102, 
        5.7916137, 6.1426205, 6.4936274, 6.8446343, 7.1956412, 
        7.3711447, 7.7221515, 8.0731584, 8.4241653, 8.7751722, 
        9.1261791, 9.477186, 9.8281929, 10.1792, 10.530207, 
        11.056717, 11.407724, 11.758731, 12.109738, 12.460745, 
        12.811751, 13.338262, 13.689269, 14.040276, 14.566786, 
        14.917793, 15.2688, 15.79531, 16.146317, 16.672827, 
        17.023834, 17.550344, 17.901351, 18.427862, 18.778869, 
        19.305379, 19.831889, 20.182896, 20.709406, 21.235917, 
        21.586924, 22.113434, 22.639944, 23.166455, 23.692965, 
        24.043972, 24.570482, 25.096993, 25.623503, 26.150013, 
        26.676524, 27.203034, 27.729544, 28.256055, 28.782565, 
        29.309075, 29.835586, 30.362096, 31.06411, 31.59062, 
        32.11713, 32.643641, 33.170151, 33.872165, 34.398675, 
        34.925185, 35.627199, 36.153709, 36.68022, 37.382234, 
        37.908744, 38.610758, 39.137268, 39.839282, 40.365792, 
        41.067806, 41.594316, 42.29633, 42.82284, 43.524854, 
        44.226868, 44.753378, 45.455392, 46.157406, 46.683916, 
        47.38593, 48.087944, 48.789957, 49.491971, 50.018482, 
        50.720495, 51.422509, 52.124523, 52.826537, 53.52855, 
        54.230564, 54.932578, 55.634592, 56.336606, 57.038619, 
        57.740633, 58.442647, 59.144661, 59.846674, 60.548688, 
        61.250702, 61.952716, 62.830233, 63.532247, 64.234261, 
        64.936274, 65.813792, 66.515805, 67.217819, 67.919833, 
        68.79735, 69.499364, 70.376881, 71.078895, 71.780909, 
        72.658426, 73.36044, 74.237957, 74.939971, 75.817488, 
        76.519502, 77.397019, 78.099033, 78.97655, 79.854067, 
        80.556081, 81.433598, 82.311115, 83.013129, 83.890646, 
        84.768164, 85.645681, 86.347695, 87.225212, 88.102729, 
        88.980246, 89.857763, 90.559777, 91.437294, 92.314812, 
        93.192329, 94.069846, 94.947363, 95.824881, 96.702398, 
        97.579915, 98.457432, 99.334949, 100.21247, 101.26549, 
        102.143, 103.02052, 103.89804, 104.77556, 105.65307, 
        106.70609, 107.58361, 108.46113, 109.51415, 110.39167, 
        111.26918, 112.3222, 113.19972, 114.07724, 115.13026, 
        116.00778, 117.0608, 117.93831, 118.81583, 119.86885, 
        120.74637, 121.79939, 122.85241, 123.72993, 124.78295, 
        125.66047, 126.71349, 127.76651, 128.64402, 129.69705, 
        130.75007, 131.62758, 132.6806, 133.73362, 134.78665, 
        135.66416, 136.71718, 137.7702, 138.82322, 139.87624, 
        140.92927, 141.98229, 142.8598, 143.91282, 144.96584, 
        146.01887, 147.07189, 148.12491, 149.17793, 150.23095, 
        151.28397, 152.33699, 153.56551, 154.61853, 155.67155, 
        156.72458, 157.7776, 158.83062, 159.88364, 161.11216, 
        162.16518, 163.2182, 164.27122, 165.49975, 166.55277, 
        167.60579, 168.83431, 169.88733, 170.94035, 172.16888, 
        173.2219, 174.45042, 175.50344, 176.55646, 177.78499, 
        178.83801, 179.54002, 0, 0, 0, 
        0, 0.69157744, 0.86447181, 1.2102605, 1.3831549, 
        1.5560492, 1.7289436, 2.0747323, 2.2476267, 2.5934154, 
        2.7663098, 2.9392041, 3.2849929, 3.4578872, 3.8036759, 
        3.9765703, 4.322359, 4.6681477, 4.8410421, 5.1868308, 
        5.5326196, 5.7055139, 6.0513026, 6.3970914, 6.7428801, 
        7.0886688, 7.2615632, 7.6073519, 7.9531406, 8.2989293, 
        8.6447181, 8.9905068, 9.3362955, 9.6820842, 10.027873, 
        10.373662, 10.892345, 11.238133, 11.583922, 11.929711, 
        12.2755, 12.621288, 13.139971, 13.48576, 13.831549, 
        14.350232, 14.696021, 15.041809, 15.560492, 15.906281, 
        16.424964, 16.770753, 17.289436, 17.635225, 18.153908, 
        18.499697, 19.01838, 19.537063, 19.882852, 20.401535, 
        20.920218, 21.266006, 21.784689, 22.303373, 22.822056, 
        23.340739, 23.686527, 24.205211, 24.723894, 25.242577, 
        25.76126, 26.279943, 26.798626, 27.317309, 27.835992, 
        28.354675, 28.873358, 29.392041, 29.910724, 30.602302, 
        31.120985, 31.639668, 32.158351, 32.677034, 33.368612, 
        33.887295, 34.405978, 35.097555, 35.616238, 36.134921, 
        36.826499, 37.345182, 38.036759, 38.555443, 39.24702, 
        39.765703, 40.45728, 40.975964, 41.667541, 42.186224, 
        42.877802, 43.569379, 44.088062, 44.77964, 45.471217, 
        45.9899, 46.681477, 47.373055, 48.064632, 48.75621, 
        49.274893, 49.96647, 50.658048, 51.349625, 52.041203, 
        52.73278, 53.424358, 54.115935, 54.807512, 55.49909, 
        56.190667, 56.882245, 57.573822, 58.2654, 58.956977, 
        59.648555, 60.340132, 61.031709, 61.896181, 62.587759, 
        63.279336, 63.970914, 64.835385, 65.526963, 66.21854, 
        66.910118, 67.77459, 68.466167, 69.330639, 70.022216, 
        70.713794, 71.578265, 72.269843, 73.134315, 73.825892, 
        74.690364, 75.381941, 76.246413, 76.937991, 77.802462, 
        78.666934, 79.358512, 80.222984, 81.087455, 81.779033, 
        82.643505, 83.507976, 84.372448, 85.064026, 85.928497, 
        86.792969, 87.657441, 88.521913, 89.21349, 90.077962, 
        90.942434, 91.806906, 92.671378, 93.535849, 94.400321, 
        95.264793, 96.129265, 96.993737, 97.858208, 98.72268, 
        99.760046, 100.62452, 101.48899, 102.35346, 103.21793, 
        104.08241, 105.11977, 105.98424, 106.84872, 107.88608, 
        108.75055, 109.61502, 110.65239, 111.51686, 112.38133, 
        113.4187, 114.28317, 115.32054, 116.18501, 117.04948, 
        118.08685, 118.95132, 119.98869, 121.02605, 121.89052, 
        122.92789, 123.79236, 124.82973, 125.86709, 126.73157, 
        127.76893, 128.8063, 129.67077, 130.70814, 131.7455, 
        132.78287, 133.64734, 134.68471, 135.72207, 136.75944, 
        137.79681, 138.83417, 139.87154, 140.73601, 141.77338, 
        142.81074, 143.84811, 144.88547, 145.92284, 146.96021, 
        147.99757, 149.03494, 150.07231, 151.28257, 152.31993, 
        153.3573, 154.39466, 155.43203, 156.4694, 157.50676, 
        158.71702, 159.75439, 160.79176, 161.82912, 163.03938, 
        164.07675, 165.11411, 166.32438, 167.36174, 168.39911, 
        169.60937, 170.64673, 171.85699, 172.89436, 173.93173, 
        175.14199, 176.17935, 176.87093, 0, 0, 
        0, 0, 0.67639901, 0.84549877, 1.1836983, 
        1.352798, 1.5218978, 1.6909975, 2.029197, 2.1982968, 
        2.5364963, 2.7055961, 2.8746958, 3.2128953, 3.3819951, 
        3.7201946, 3.8892943, 4.2274938, 4.5656933, 4.7347931, 
        5.0729926, 5.4111921, 5.5802919, 5.9184914, 6.2566909, 
        6.5948904, 6.9330899, 7.1021896, 7.4403892, 7.7785887, 
        8.1167882, 8.4549877, 8.7931872, 9.1313867, 9.4695862, 
        9.8077857, 10.145985, 10.653284, 10.991484, 11.329683, 
        11.667883, 12.006082, 12.344282, 12.851581, 13.189781, 
        13.52798, 14.03528, 14.373479, 14.711679, 15.218978, 
        15.557177, 16.064477, 16.402676, 16.909975, 17.248175, 
        17.755474, 18.093674, 18.600973, 19.108272, 19.446472, 
        19.953771, 20.46107, 20.79927, 21.306569, 21.813868, 
        22.321167, 22.828467, 23.166666, 23.673965, 24.181265, 
        24.688564, 25.195863, 25.703163, 26.210462, 26.717761, 
        27.22506, 27.73236, 28.239659, 28.746958, 29.254257, 
        29.930656, 30.437956, 30.945255, 31.452554, 31.959853, 
        32.636252, 33.143552, 33.650851, 34.32725, 34.834549, 
        35.341848, 36.018247, 36.525547, 37.201946, 37.709245, 
        38.385644, 38.892943, 39.569342, 40.076642, 40.753041, 
        41.26034, 41.936739, 42.613138, 43.120437, 43.796836, 
        44.473235, 44.980534, 45.656933, 46.333332, 47.009731, 
        47.68613, 48.19343, 48.869829, 49.546228, 50.222627, 
        50.899026, 51.575425, 52.251824, 52.928223, 53.604622, 
        54.281021, 54.95742, 55.633819, 56.310218, 56.986617, 
        57.663016, 58.339415, 59.015814, 59.692213, 60.537712, 
        61.214111, 61.89051, 62.566909, 63.412408, 64.088807, 
        64.765206, 65.441605, 66.287103, 66.963502, 67.809001, 
        68.4854, 69.161799, 70.007298, 70.683697, 71.529196, 
        72.205595, 73.051094, 73.727493, 74.572991, 75.24939, 
        76.094889, 76.940388, 77.616787, 78.462286, 79.307784, 
        79.984183, 80.829682, 81.675181, 82.52068, 83.197079, 
        84.042577, 84.888076, 85.733575, 86.579074, 87.255473, 
        88.100972, 88.94647, 89.791969, 90.637468, 91.482967, 
        92.328465, 93.173964, 94.019463, 94.864962, 95.71046, 
        96.555959, 97.570558, 98.416057, 99.261555, 100.10705, 
        100.95255, 101.79805, 102.81265, 103.65815, 104.50365, 
        105.51825, 106.36374, 107.20924, 108.22384, 109.06934, 
        109.91484, 110.92944, 111.77494, 112.78954, 113.63503, 
        114.48053, 115.49513, 116.34063, 117.35523, 118.36983, 
        119.21533, 120.22992, 121.07542, 122.09002, 123.10462, 
        123.95012, 124.96472, 125.97932, 126.82482, 127.83941, 
        128.85401, 129.86861, 130.71411, 131.72871, 132.74331, 
        133.75791, 134.7725, 135.7871, 136.8017, 137.6472, 
        138.6618, 139.6764, 140.69099, 141.70559, 142.72019, 
        143.73479, 144.74939, 145.76399, 146.77859, 147.96228, 
        148.97688, 149.99148, 151.00608, 152.02068, 153.03528, 
        154.04988, 155.23357, 156.24817, 157.26277, 158.27737, 
        159.46107, 160.47567, 161.49026, 162.67396, 163.68856, 
        164.70316, 165.88686, 166.90146, 168.08515, 169.09975, 
        170.11435, 171.29805, 172.31265, 172.98905, 0, 
        0, 0, 0, 0.6570034, 0.82125425, 
        1.149756, 1.3140068, 1.4782577, 1.6425085, 1.9710102, 
        2.1352611, 2.4637628, 2.6280136, 2.7922645, 3.1207662, 
        3.285017, 3.6135187, 3.7777696, 4.1062713, 4.434773, 
        4.5990238, 4.9275255, 5.2560272, 5.4202781, 5.7487798, 
        6.0772815, 6.4057832, 6.7342849, 6.8985357, 7.2270374, 
        7.5555391, 7.8840408, 8.2125425, 8.5410442, 8.8695459, 
        9.1980476, 9.5265493, 9.855051, 10.347804, 10.676305, 
        11.004807, 11.333309, 11.66181, 11.990312, 12.483065, 
        12.811566, 13.140068, 13.632821, 13.961322, 14.289824, 
        14.782577, 15.111078, 15.603831, 15.932333, 16.425085, 
        16.753587, 17.246339, 17.574841, 18.067594, 18.560346, 
        18.888848, 19.3816, 19.874353, 20.202855, 20.695607, 
        21.18836, 21.681112, 22.173865, 22.502367, 22.995119, 
        23.487872, 23.980624, 24.473377, 24.966129, 25.458882, 
        25.951634, 26.444387, 26.93714, 27.429892, 27.922645, 
        28.415397, 29.072401, 29.565153, 30.057906, 30.550658, 
        31.043411, 31.700414, 32.193167, 32.685919, 33.342923, 
        33.835675, 34.328428, 34.985431, 35.478184, 36.135187, 
        36.62794, 37.284943, 37.777696, 38.434699, 38.927452, 
        39.584455, 40.077208, 40.734211, 41.391214, 41.883967, 
        42.54097, 43.197974, 43.690726, 44.34773, 45.004733, 
        45.661737, 46.31874, 46.811492, 47.468496, 48.125499, 
        48.782503, 49.439506, 50.096509, 50.753513, 51.410516, 
        52.06752, 52.724523, 53.381527, 54.03853, 54.695533, 
        55.352537, 56.00954, 56.666544, 57.323547, 57.98055, 
        58.801805, 59.458808, 60.115811, 60.772815, 61.594069, 
        62.251072, 62.908076, 63.565079, 64.386334, 65.043337, 
        65.864591, 66.521595, 67.178598, 67.999852, 68.656856, 
        69.47811, 70.135113, 70.956368, 71.613371, 72.434625, 
        73.091629, 73.912883, 74.734137, 75.391141, 76.212395, 
        77.033649, 77.690652, 78.511907, 79.333161, 80.154415, 
        80.811419, 81.632673, 82.453927, 83.275181, 84.096436, 
        84.753439, 85.574693, 86.395948, 87.217202, 88.038456, 
        88.85971, 89.680965, 90.502219, 91.323473, 92.144727, 
        92.965982, 93.787236, 94.772741, 95.593995, 96.415249, 
        97.236504, 98.057758, 98.879012, 99.864517, 100.68577, 
        101.50703, 102.49253, 103.31379, 104.13504, 105.12054, 
        105.9418, 106.76305, 107.74856, 108.56981, 109.55532, 
        110.37657, 111.19783, 112.18333, 113.00459, 113.99009, 
        114.9756, 115.79685, 116.78235, 117.60361, 118.58911, 
        119.57462, 120.39587, 121.38138, 122.36688, 123.18814, 
        124.17364, 125.15915, 126.14465, 126.96591, 127.95141, 
        128.93692, 129.92242, 130.90793, 131.89343, 132.87894, 
        133.70019, 134.6857, 135.6712, 136.65671, 137.64221, 
        138.62772, 139.61322, 140.59873, 141.58423, 142.56974, 
        143.71949, 144.705, 145.6905, 146.67601, 147.66151, 
        148.64702, 149.63253, 150.78228, 151.76779, 152.75329, 
        153.7388, 154.88855, 155.87406, 156.85956, 158.00932, 
        158.99482, 159.98033, 161.13008, 162.11559, 163.26535, 
        164.25085, 165.23636, 166.38611, 167.37162, 168.02862, 
        0, 0, 0, 0, 0.63402104, 
        0.7925263, 1.1095368, 1.2680421, 1.4265473, 1.5850526, 
        1.9020631, 2.0605684, 2.3775789, 2.5360842, 2.6945894, 
        3.0115999, 3.1701052, 3.4871157, 3.645621, 3.9626315, 
        4.279642, 4.4381473, 4.7551578, 5.0721683, 5.2306736, 
        5.5476841, 5.8646946, 6.1817051, 6.4987157, 6.6572209, 
        6.9742314, 7.291242, 7.6082525, 7.925263, 8.2422735, 
        8.559284, 8.8762946, 9.1933051, 9.5103156, 9.9858314, 
        10.302842, 10.619852, 10.936863, 11.253873, 11.570884, 
        12.0464, 12.36341, 12.680421, 13.155937, 13.472947, 
        13.789958, 14.265473, 14.582484, 15.058, 15.37501, 
        15.850526, 16.167537, 16.643052, 16.960063, 17.435579, 
        17.911094, 18.228105, 18.703621, 19.179136, 19.496147, 
        19.971663, 20.447179, 20.922694, 21.39821, 21.715221, 
        22.190736, 22.666252, 23.141768, 23.617284, 24.092799, 
        24.568315, 25.043831, 25.519347, 25.994863, 26.470378, 
        26.945894, 27.42141, 28.055431, 28.530947, 29.006463, 
        29.481978, 29.957494, 30.591515, 31.067031, 31.542547, 
        32.176568, 32.652084, 33.127599, 33.76162, 34.237136, 
        34.871157, 35.346673, 35.980694, 36.45621, 37.090231, 
        37.565747, 38.199768, 38.675283, 39.309304, 39.943325, 
        40.418841, 41.052862, 41.686883, 42.162399, 42.79642, 
        43.430441, 44.064462, 44.698483, 45.173999, 45.80802, 
        46.442041, 47.076062, 47.710083, 48.344104, 48.978125, 
        49.612146, 50.246167, 50.880188, 51.514209, 52.14823, 
        52.782252, 53.416273, 54.050294, 54.684315, 55.318336, 
        55.952357, 56.744883, 57.378904, 58.012925, 58.646946, 
        59.439472, 60.073493, 60.707515, 61.341536, 62.134062, 
        62.768083, 63.560609, 64.19463, 64.828651, 65.621178, 
        66.255199, 67.047725, 67.681746, 68.474272, 69.108293, 
        69.90082, 70.534841, 71.327367, 72.119893, 72.753914, 
        73.546441, 74.338967, 74.972988, 75.765514, 76.558041, 
        77.350567, 77.984588, 78.777114, 79.56964, 80.362167, 
        81.154693, 81.788714, 82.58124, 83.373767, 84.166293, 
        84.958819, 85.751346, 86.543872, 87.336398, 88.128924, 
        88.921451, 89.713977, 90.506503, 91.457535, 92.250061, 
        93.042588, 93.835114, 94.62764, 95.420166, 96.371198, 
        97.163724, 97.956251, 98.907282, 99.699808, 100.49233, 
        101.44337, 102.23589, 103.02842, 103.97945, 104.77198, 
        105.72301, 106.51553, 107.30806, 108.25909, 109.05162, 
        110.00265, 110.95368, 111.74621, 112.69724, 113.48977, 
        114.4408, 115.39183, 116.18436, 117.13539, 118.08642, 
        118.87894, 119.82998, 120.78101, 121.73204, 122.52457, 
        123.4756, 124.42663, 125.37766, 126.32869, 127.27972, 
        128.23076, 129.02328, 129.97431, 130.92534, 131.87638, 
        132.82741, 133.77844, 134.72947, 135.6805, 136.63153, 
        137.58257, 138.6921, 139.64313, 140.59417, 141.5452, 
        142.49623, 143.44726, 144.39829, 145.50783, 146.45886, 
        147.40989, 148.36092, 149.47046, 150.42149, 151.37252, 
        152.48206, 153.43309, 154.38412, 155.49366, 156.44469, 
        157.55423, 158.50526, 159.45629, 160.56583, 161.51686, 
        162.15088, 0, 0, 0, 0, 
        0.60814195, 0.76017743, 1.0642484, 1.2162839, 1.3683194, 
        1.5203549, 1.8244258, 1.9764613, 2.2805323, 2.4325678, 
        2.5846033, 2.8886743, 3.0407097, 3.3447807, 3.4968162, 
        3.8008872, 4.1049581, 4.2569936, 4.5610646, 4.8651356, 
        5.0171711, 5.321242, 5.625313, 5.929384, 6.233455, 
        6.3854904, 6.6895614, 6.9936324, 7.2977034, 7.6017743, 
        7.9058453, 8.2099163, 8.5139873, 8.8180582, 9.1221292, 
        9.5782357, 9.8823066, 10.186378, 10.490449, 10.79452, 
        11.098591, 11.554697, 11.858768, 12.162839, 12.618945, 
        12.923016, 13.227087, 13.683194, 13.987265, 14.443371, 
        14.747442, 15.203549, 15.50762, 15.963726, 16.267797, 
        16.723904, 17.18001, 17.484081, 17.940187, 18.396294, 
        18.700365, 19.156471, 19.612578, 20.068684, 20.524791, 
        20.828862, 21.284968, 21.741075, 22.197181, 22.653288, 
        23.109394, 23.5655, 24.021607, 24.477713, 24.93382, 
        25.389926, 25.846033, 26.302139, 26.910281, 27.366388, 
        27.822494, 28.278601, 28.734707, 29.342849, 29.798955, 
        30.255062, 30.863204, 31.31931, 31.775417, 32.383559, 
        32.839665, 33.447807, 33.903914, 34.512056, 34.968162, 
        35.576304, 36.03241, 36.640552, 37.096659, 37.704801, 
        38.312943, 38.769049, 39.377191, 39.985333, 40.44144, 
        41.049581, 41.657723, 42.265865, 42.874007, 43.330114, 
        43.938256, 44.546398, 45.15454, 45.762682, 46.370824, 
        46.978965, 47.587107, 48.195249, 48.803391, 49.411533, 
        50.019675, 50.627817, 51.235959, 51.844101, 52.452243, 
        53.060385, 53.668527, 54.428704, 55.036846, 55.644988, 
        56.25313, 57.013308, 57.62145, 58.229591, 58.837733, 
        59.597911, 60.206053, 60.96623, 61.574372, 62.182514, 
        62.942692, 63.550834, 64.311011, 64.919153, 65.67933, 
        66.287472, 67.04765, 67.655792, 68.415969, 69.176147, 
        69.784288, 70.544466, 71.304643, 71.912785, 72.672963, 
        73.43314, 74.193318, 74.80146, 75.561637, 76.321814, 
        77.081992, 77.842169, 78.450311, 79.210489, 79.970666, 
        80.730844, 81.491021, 82.251198, 83.011376, 83.771553, 
        84.531731, 85.291908, 86.052086, 86.812263, 87.724476, 
        88.484653, 89.244831, 90.005008, 90.765186, 91.525363, 
        92.437576, 93.197753, 93.957931, 94.870144, 95.630321, 
        96.390499, 97.302712, 98.062889, 98.823066, 99.735279, 
        100.49546, 101.40767, 102.16785, 102.92802, 103.84024, 
        104.60041, 105.51263, 106.42484, 107.18502, 108.09723, 
        108.85741, 109.76962, 110.68183, 111.44201, 112.35422, 
        113.26644, 114.02662, 114.93883, 115.85104, 116.76325, 
        117.52343, 118.43564, 119.34786, 120.26007, 121.17228, 
        122.0845, 122.99671, 123.75689, 124.6691, 125.58131, 
        126.49353, 127.40574, 128.31795, 129.23016, 130.14238, 
        131.05459, 131.9668, 133.03105, 133.94326, 134.85548, 
        135.76769, 136.6799, 137.59212, 138.50433, 139.56858, 
        140.48079, 141.393, 142.30522, 143.36946, 144.28168, 
        145.19389, 146.25814, 147.17035, 148.08256, 149.14681, 
        150.05903, 151.12327, 152.03549, 152.9477, 154.01195, 
        154.92416, 155.5323, 0, 0, 0, 
        0, 0.5800716, 0.7250895, 1.0151253, 1.1601432, 
        1.3051611, 1.450179, 1.7402148, 1.8852327, 2.1752685, 
        2.3202864, 2.4653043, 2.7553401, 2.900358, 3.1903938, 
        3.3354117, 3.6254475, 3.9154833, 4.0605012, 4.350537, 
        4.6405728, 4.7855907, 5.0756265, 5.3656623, 5.6556981, 
        5.9457339, 6.0907518, 6.3807876, 6.6708234, 6.9608592, 
        7.250895, 7.5409308, 7.8309666, 8.1210024, 8.4110382, 
        8.701074, 9.1361277, 9.4261635, 9.7161993, 10.006235, 
        10.296271, 10.586307, 11.02136, 11.311396, 11.601432, 
        12.036486, 12.326521, 12.616557, 13.051611, 13.341647, 
        13.7767, 14.066736, 14.50179, 14.791826, 15.226879, 
        15.516915, 15.951969, 16.387023, 16.677058, 17.112112, 
        17.547166, 17.837202, 18.272255, 18.707309, 19.142363, 
        19.577416, 19.867452, 20.302506, 20.73756, 21.172613, 
        21.607667, 22.042721, 22.477774, 22.912828, 23.347882, 
        23.782936, 24.217989, 24.653043, 25.088097, 25.668168, 
        26.103222, 26.538276, 26.973329, 27.408383, 27.988455, 
        28.423508, 28.858562, 29.438634, 29.873687, 30.308741, 
        30.888813, 31.323866, 31.903938, 32.338992, 32.919063, 
        33.354117, 33.934189, 34.369242, 34.949314, 35.384368, 
        35.964439, 36.544511, 36.979564, 37.559636, 38.139708, 
        38.574761, 39.154833, 39.734905, 40.314976, 40.895048, 
        41.330101, 41.910173, 42.490245, 43.070316, 43.650388, 
        44.230459, 44.810531, 45.390603, 45.970674, 46.550746, 
        47.130817, 47.710889, 48.290961, 48.871032, 49.451104, 
        50.031175, 50.611247, 51.191319, 51.916408, 52.49648, 
        53.076551, 53.656623, 54.381712, 54.961784, 55.541856, 
        56.121927, 56.847017, 57.427088, 58.152178, 58.732249, 
        59.312321, 60.037411, 60.617482, 61.342572, 61.922643, 
        62.647733, 63.227804, 63.952894, 64.532965, 65.258055, 
        65.983144, 66.563216, 67.288306, 68.013395, 68.593467, 
        69.318556, 70.043646, 70.768735, 71.348807, 72.073896, 
        72.798986, 73.524075, 74.249165, 74.829236, 75.554326, 
        76.279415, 77.004505, 77.729594, 78.454684, 79.179773, 
        79.904863, 80.629952, 81.355042, 82.080131, 82.805221, 
        83.675328, 84.400418, 85.125507, 85.850597, 86.575686, 
        87.300776, 88.170883, 88.895973, 89.621062, 90.49117, 
        91.216259, 91.941349, 92.811456, 93.536545, 94.261635, 
        95.131742, 95.856832, 96.726939, 97.452029, 98.177118, 
        99.047226, 99.772315, 100.64242, 101.51253, 102.23762, 
        103.10773, 103.83282, 104.70292, 105.57303, 106.29812, 
        107.16823, 108.03834, 108.76342, 109.63353, 110.50364, 
        111.37375, 112.09884, 112.96894, 113.83905, 114.70916, 
        115.57927, 116.44937, 117.31948, 118.04457, 118.91468, 
        119.78479, 120.65489, 121.525, 122.39511, 123.26521, 
        124.13532, 125.00543, 125.87554, 126.89066, 127.76077, 
        128.63088, 129.50098, 130.37109, 131.2412, 132.11131, 
        133.12643, 133.99654, 134.86665, 135.73675, 136.75188, 
        137.62199, 138.49209, 139.50722, 140.37733, 141.24743, 
        142.26256, 143.13267, 144.14779, 145.0179, 145.88801, 
        146.90313, 147.77324, 148.35331, 0, 0, 
        0, 0, 0.55049288, 0.6881161, 0.96336254, 
        1.1009858, 1.238609, 1.3762322, 1.6514786, 1.7891019, 
        2.0643483, 2.2019715, 2.3395948, 2.6148412, 2.7524644, 
        3.0277109, 3.1653341, 3.4405805, 3.715827, 3.8534502, 
        4.1286966, 4.4039431, 4.5415663, 4.8168127, 5.0920592, 
        5.3673056, 5.642552, 5.7801753, 6.0554217, 6.3306682, 
        6.6059146, 6.881161, 7.1564075, 7.4316539, 7.7069004, 
        7.9821468, 8.2573932, 8.6702629, 8.9455093, 9.2207558, 
        9.4960022, 9.7712487, 10.046495, 10.459365, 10.734611, 
        11.009858, 11.422727, 11.697974, 11.97322, 12.38609, 
        12.661336, 13.074206, 13.349452, 13.762322, 14.037569, 
        14.450438, 14.725685, 15.138554, 15.551424, 15.82667, 
        16.23954, 16.65241, 16.927656, 17.340526, 17.753395, 
        18.166265, 18.579135, 18.854381, 19.267251, 19.680121, 
        20.09299, 20.50586, 20.91873, 21.331599, 21.744469, 
        22.157339, 22.570208, 22.983078, 23.395948, 23.808817, 
        24.35931, 24.77218, 25.185049, 25.597919, 26.010789, 
        26.561282, 26.974151, 27.387021, 27.937514, 28.350383, 
        28.763253, 29.313746, 29.726616, 30.277109, 30.689978, 
        31.240471, 31.653341, 32.203834, 32.616703, 33.167196, 
        33.580066, 34.130559, 34.681052, 35.093921, 35.644414, 
        36.194907, 36.607777, 37.15827, 37.708762, 38.259255, 
        38.809748, 39.222618, 39.773111, 40.323604, 40.874097, 
        41.424589, 41.975082, 42.525575, 43.076068, 43.626561, 
        44.177054, 44.727547, 45.27804, 45.828532, 46.379025, 
        46.929518, 47.480011, 48.030504, 48.580997, 49.269113, 
        49.819606, 50.370099, 50.920592, 51.608708, 52.159201, 
        52.709694, 53.260186, 53.948302, 54.498795, 55.186911, 
        55.737404, 56.287897, 56.976013, 57.526506, 58.214622, 
        58.765115, 59.453231, 60.003724, 60.69184, 61.242333, 
        61.930449, 62.618565, 63.169058, 63.857174, 64.54529, 
        65.095783, 65.783899, 66.472016, 67.160132, 67.710625, 
        68.398741, 69.086857, 69.774973, 70.463089, 71.013582, 
        71.701698, 72.389814, 73.07793, 73.766046, 74.454162, 
        75.142278, 75.830395, 76.518511, 77.206627, 77.894743, 
        78.582859, 79.408598, 80.096714, 80.784831, 81.472947, 
        82.161063, 82.849179, 83.674918, 84.363034, 85.05115, 
        85.87689, 86.565006, 87.253122, 88.078861, 88.766977, 
        89.455093, 90.280833, 90.968949, 91.794688, 92.482804, 
        93.17092, 93.99666, 94.684776, 95.510515, 96.336254, 
        97.024371, 97.85011, 98.538226, 99.363965, 100.1897, 
        100.87782, 101.70356, 102.5293, 103.21742, 104.04315, 
        104.86889, 105.69463, 106.38275, 107.20849, 108.03423, 
        108.85997, 109.68571, 110.51145, 111.33719, 112.0253, 
        112.85104, 113.67678, 114.50252, 115.32826, 116.154, 
        116.97974, 117.80548, 118.63122, 119.45696, 120.42032, 
        121.24606, 122.0718, 122.89754, 123.72328, 124.54901, 
        125.37475, 126.33812, 127.16386, 127.9896, 128.81533, 
        129.7787, 130.60444, 131.43018, 132.39354, 133.21928, 
        134.04502, 135.00838, 135.83412, 136.79748, 137.62322, 
        138.44896, 139.41232, 140.23806, 140.78855, 0, 
        0, 0, 0, 0.52003679, 0.65004599, 
        0.91006438, 1.0400736, 1.1700828, 1.300092, 1.5601104, 
        1.6901196, 1.950138, 2.0801472, 2.2101564, 2.4701747, 
        2.6001839, 2.8602023, 2.9902115, 3.2502299, 3.5102483, 
        3.6402575, 3.9002759, 4.1602943, 4.2903035, 4.5503219, 
        4.8103403, 5.0703587, 5.3303771, 5.4603863, 5.7204047, 
        5.9804231, 6.2404415, 6.5004599, 6.7604782, 7.0204966, 
        7.280515, 7.5405334, 7.8005518, 8.1905794, 8.4505978, 
        8.7106162, 8.9706346, 9.230653, 9.4906714, 9.880699, 
        10.140717, 10.400736, 10.790763, 11.050782, 11.3108, 
        11.700828, 11.960846, 12.350874, 12.610892, 13.00092, 
        13.260938, 13.650966, 13.910984, 14.301012, 14.691039, 
        14.951058, 15.341085, 15.731113, 15.991131, 16.381159, 
        16.771186, 17.161214, 17.551242, 17.81126, 18.201288, 
        18.591315, 18.981343, 19.37137, 19.761398, 20.151426, 
        20.541453, 20.931481, 21.321508, 21.711536, 22.101564, 
        22.491591, 23.011628, 23.401655, 23.791683, 24.181711, 
        24.571738, 25.091775, 25.481803, 25.87183, 26.391867, 
        26.781895, 27.171922, 27.691959, 28.081987, 28.602023, 
        28.992051, 29.512088, 29.902115, 30.422152, 30.81218, 
        31.332216, 31.722244, 32.242281, 32.762318, 33.152345, 
        33.672382, 34.192419, 34.582446, 35.102483, 35.62252, 
        36.142557, 36.662594, 37.052621, 37.572658, 38.092695, 
        38.612732, 39.132768, 39.652805, 40.172842, 40.692879, 
        41.212915, 41.732952, 42.252989, 42.773026, 43.293063, 
        43.813099, 44.333136, 44.853173, 45.37321, 45.893247, 
        46.543293, 47.063329, 47.583366, 48.103403, 48.753449, 
        49.273486, 49.793522, 50.313559, 50.963605, 51.483642, 
        52.133688, 52.653725, 53.173762, 53.823808, 54.343844, 
        54.99389, 55.513927, 56.163973, 56.68401, 57.334056, 
        57.854093, 58.504139, 59.154185, 59.674221, 60.324267, 
        60.974313, 61.49435, 62.144396, 62.794442, 63.444488, 
        63.964525, 64.614571, 65.264617, 65.914663, 66.564709, 
        67.084746, 67.734792, 68.384838, 69.034884, 69.68493, 
        70.334976, 70.985022, 71.635068, 72.285114, 72.93516, 
        73.585206, 74.235252, 75.015307, 75.665353, 76.315399, 
        76.965445, 77.615491, 78.265537, 79.045592, 79.695638, 
        80.345684, 81.125739, 81.775785, 82.425831, 83.205886, 
        83.855932, 84.505978, 85.286033, 85.936079, 86.716134, 
        87.36618, 88.016226, 88.796282, 89.446328, 90.226383, 
        91.006438, 91.656484, 92.436539, 93.086585, 93.86664, 
        94.646695, 95.296741, 96.076797, 96.856852, 97.506898, 
        98.286953, 99.067008, 99.847063, 100.49711, 101.27716, 
        102.05722, 102.83727, 103.61733, 104.39739, 105.17744, 
        105.82749, 106.60754, 107.3876, 108.16765, 108.94771, 
        109.72776, 110.50782, 111.28787, 112.06793, 112.84798, 
        113.75805, 114.5381, 115.31816, 116.09821, 116.87827, 
        117.65832, 118.43838, 119.34844, 120.1285, 120.90855, 
        121.68861, 122.59867, 123.37873, 124.15878, 125.06885, 
        125.8489, 126.62896, 127.53902, 128.31908, 129.22914, 
        130.0092, 130.78925, 131.69932, 132.47937, 132.99941, 
        0, 0, 0, 0, 0.4892627, 
        0.61157837, 0.85620972, 0.97852539, 1.1008411, 1.2231567, 
        1.4677881, 1.5901038, 1.8347351, 1.9570508, 2.0793665, 
        2.3239978, 2.4463135, 2.6909448, 2.8132605, 3.0578919, 
        3.3025232, 3.4248389, 3.6694702, 3.9141016, 4.0364172, 
        4.2810486, 4.5256799, 4.7703113, 5.0149426, 5.1372583, 
        5.3818897, 5.626521, 5.8711524, 6.1157837, 6.3604151, 
        6.6050464, 6.8496778, 7.0943091, 7.3389405, 7.7058875, 
        7.9505188, 8.1951502, 8.4397815, 8.6844129, 8.9290442, 
        9.2959912, 9.5406226, 9.7852539, 10.152201, 10.396832, 
        10.641464, 11.008411, 11.253042, 11.619989, 11.86462, 
        12.231567, 12.476199, 12.843146, 13.087777, 13.454724, 
        13.821671, 14.066303, 14.43325, 14.800197, 15.044828, 
        15.411775, 15.778722, 16.145669, 16.512616, 16.757247, 
        17.124194, 17.491141, 17.858088, 18.225035, 18.591982, 
        18.95893, 19.325877, 19.692824, 20.059771, 20.426718, 
        20.793665, 21.160612, 21.649874, 22.016821, 22.383768, 
        22.750715, 23.117662, 23.606925, 23.973872, 24.340819, 
        24.830082, 25.197029, 25.563976, 26.053239, 26.420186, 
        26.909448, 27.276395, 27.765658, 28.132605, 28.621868, 
        28.988815, 29.478077, 29.845025, 30.334287, 30.82355, 
        31.190497, 31.67976, 32.169022, 32.535969, 33.025232, 
        33.514495, 34.003757, 34.49302, 34.859967, 35.34923, 
        35.838493, 36.327755, 36.817018, 37.306281, 37.795543, 
        38.284806, 38.774069, 39.263331, 39.752594, 40.241857, 
        40.73112, 41.220382, 41.709645, 42.198908, 42.68817, 
        43.177433, 43.789011, 44.278274, 44.767537, 45.256799, 
        45.868378, 46.357641, 46.846903, 47.336166, 47.947744, 
        48.437007, 49.048585, 49.537848, 50.027111, 50.638689, 
        51.127952, 51.73953, 52.228793, 52.840371, 53.329634, 
        53.941212, 54.430475, 55.042053, 55.653632, 56.142894, 
        56.754473, 57.366051, 57.855314, 58.466892, 59.078471, 
        59.690049, 60.179312, 60.79089, 61.402468, 62.014047, 
        62.625625, 63.114888, 63.726466, 64.338045, 64.949623, 
        65.561201, 66.17278, 66.784358, 67.395936, 68.007515, 
        68.619093, 69.230672, 69.84225, 70.576144, 71.187722, 
        71.799301, 72.410879, 73.022457, 73.634036, 74.36793, 
        74.979508, 75.591087, 76.324981, 76.936559, 77.548137, 
        78.282031, 78.89361, 79.505188, 80.239082, 80.850661, 
        81.584555, 82.196133, 82.807711, 83.541605, 84.153184, 
        84.887078, 85.620972, 86.23255, 86.966444, 87.578023, 
        88.311917, 89.045811, 89.657389, 90.391283, 91.125177, 
        91.736756, 92.47065, 93.204544, 93.938438, 94.550016, 
        95.28391, 96.017804, 96.751698, 97.485592, 98.219486, 
        98.95338, 99.564959, 100.29885, 101.03275, 101.76664, 
        102.50053, 103.23443, 103.96832, 104.70222, 105.43611, 
        106.17001, 107.02621, 107.76011, 108.494, 109.2279, 
        109.96179, 110.69569, 111.42958, 112.28579, 113.01968, 
        113.75358, 114.48747, 115.34368, 116.07757, 116.81147, 
        117.66768, 118.40157, 119.13547, 119.99168, 120.72557, 
        121.58178, 122.31567, 123.04957, 123.90578, 124.63967, 
        125.12893, 0, 0, 0, 0, 
        0.45864772, 0.57330965, 0.8026335, 0.91729543, 1.0319574, 
        1.1466193, 1.3759432, 1.4906051, 1.7199289, 1.8345909, 
        1.9492528, 2.1785767, 2.2932386, 2.5225624, 2.6372244, 
        2.8665482, 3.0958721, 3.210534, 3.4398579, 3.6691817, 
        3.7838437, 4.0131675, 4.2424914, 4.4718152, 4.7011391, 
        4.815801, 5.0451249, 5.2744487, 5.5037726, 5.7330965, 
        5.9624203, 6.1917442, 6.421068, 6.6503919, 6.8797158, 
        7.2237015, 7.4530254, 7.6823493, 7.9116731, 8.140997, 
        8.3703208, 8.7143066, 8.9436305, 9.1729543, 9.5169401, 
        9.746264, 9.9755878, 10.319574, 10.548897, 10.892883, 
        11.122207, 11.466193, 11.695517, 12.039503, 12.268826, 
        12.612812, 12.956798, 13.186122, 13.530108, 13.874093, 
        14.103417, 14.447403, 14.791389, 15.135375, 15.47936, 
        15.708684, 16.05267, 16.396656, 16.740642, 17.084627, 
        17.428613, 17.772599, 18.116585, 18.460571, 18.804556, 
        19.148542, 19.492528, 19.836514, 20.295161, 20.639147, 
        20.983133, 21.327119, 21.671105, 22.129752, 22.473738, 
        22.817724, 23.276372, 23.620357, 23.964343, 24.422991, 
        24.766977, 25.225624, 25.56961, 26.028258, 26.372244, 
        26.830891, 27.174877, 27.633525, 27.977511, 28.436158, 
        28.894806, 29.238792, 29.69744, 30.156087, 30.500073, 
        30.958721, 31.417369, 31.876016, 32.334664, 32.67865, 
        33.137298, 33.595945, 34.054593, 34.513241, 34.971888, 
        35.430536, 35.889184, 36.347832, 36.806479, 37.265127, 
        37.723775, 38.182422, 38.64107, 39.099718, 39.558366, 
        40.017013, 40.475661, 41.048971, 41.507618, 41.966266, 
        42.424914, 42.998223, 43.456871, 43.915519, 44.374167, 
        44.947476, 45.406124, 45.979434, 46.438081, 46.896729, 
        47.470039, 47.928686, 48.501996, 48.960644, 49.533953, 
        49.992601, 50.565911, 51.024558, 51.597868, 52.171178, 
        52.629825, 53.203135, 53.776445, 54.235093, 54.808402, 
        55.381712, 55.955021, 56.413669, 56.986979, 57.560288, 
        58.133598, 58.706908, 59.165555, 59.738865, 60.312175, 
        60.885484, 61.458794, 62.032104, 62.605413, 63.178723, 
        63.752033, 64.325342, 64.898652, 65.471962, 66.159933, 
        66.733243, 67.306552, 67.879862, 68.453172, 69.026481, 
        69.714453, 70.287763, 70.861072, 71.549044, 72.122353, 
        72.695663, 73.383635, 73.956944, 74.530254, 75.218226, 
        75.791535, 76.479507, 77.052816, 77.626126, 78.314098, 
        78.887407, 79.575379, 80.26335, 80.83666, 81.524632, 
        82.097941, 82.785913, 83.473884, 84.047194, 84.735166, 
        85.423137, 85.996447, 86.684418, 87.37239, 88.060362, 
        88.633671, 89.321643, 90.009614, 90.697586, 91.385558, 
        92.073529, 92.761501, 93.33481, 94.022782, 94.710753, 
        95.398725, 96.086697, 96.774668, 97.46264, 98.150611, 
        98.838583, 99.526555, 100.32919, 101.01716, 101.70513, 
        102.3931, 103.08107, 103.76905, 104.45702, 105.25965, 
        105.94762, 106.63559, 107.32357, 108.1262, 108.81417, 
        109.50214, 110.30478, 110.99275, 111.68072, 112.48335, 
        113.17132, 113.97396, 114.66193, 115.3499, 116.15253, 
        116.84051, 117.29915, 0, 0, 0, 
        0, 0.42858365, 0.53572957, 0.75002139, 0.85716731, 
        0.96431322, 1.0714591, 1.285751, 1.3928969, 1.6071887, 
        1.7143346, 1.8214805, 2.0357724, 2.1429183, 2.3572101, 
        2.464356, 2.6786478, 2.8929397, 3.0000856, 3.2143774, 
        3.4286692, 3.5358151, 3.750107, 3.9643988, 4.1786906, 
        4.3929824, 4.5001284, 4.7144202, 4.928712, 5.1430038, 
        5.3572957, 5.5715875, 5.7858793, 6.0001711, 6.214463, 
        6.4287548, 6.7501925, 6.9644844, 7.1787762, 7.393068, 
        7.6073598, 7.8216517, 8.1430894, 8.3573812, 8.5716731, 
        8.8931108, 9.1074026, 9.3216945, 9.6431322, 9.857424, 
        10.178862, 10.393154, 10.714591, 10.928883, 11.250321, 
        11.464613, 11.78605, 12.107488, 12.32178, 12.643218, 
        12.964656, 13.178947, 13.500385, 13.821823, 14.143261, 
        14.464698, 14.67899, 15.000428, 15.321866, 15.643303, 
        15.964741, 16.286179, 16.607617, 16.929054, 17.250492, 
        17.57193, 17.893368, 18.214805, 18.536243, 18.964827, 
        19.286264, 19.607702, 19.92914, 20.250578, 20.679161, 
        21.000599, 21.322037, 21.75062, 22.072058, 22.393496, 
        22.82208, 23.143517, 23.572101, 23.893539, 24.322122, 
        24.64356, 25.072144, 25.393581, 25.822165, 26.143603, 
        26.572186, 27.00077, 27.322208, 27.750792, 28.179375, 
        28.500813, 28.929397, 29.35798, 29.786564, 30.215148, 
        30.536585, 30.965169, 31.393753, 31.822336, 32.25092, 
        32.679504, 33.108087, 33.536671, 33.965254, 34.393838, 
        34.822422, 35.251005, 35.679589, 36.108173, 36.536756, 
        36.96534, 37.393924, 37.822507, 38.358237, 38.786821, 
        39.215404, 39.643988, 40.179717, 40.608301, 41.036885, 
        41.465468, 42.001198, 42.429782, 42.965511, 43.394095, 
        43.822679, 44.358408, 44.786992, 45.322721, 45.751305, 
        46.287035, 46.715618, 47.251348, 47.679931, 48.215661, 
        48.751391, 49.179974, 49.715704, 50.251433, 50.680017, 
        51.215747, 51.751476, 52.287206, 52.715789, 53.251519, 
        53.787248, 54.322978, 54.858708, 55.287291, 55.823021, 
        56.35875, 56.89448, 57.430209, 57.965939, 58.501669, 
        59.037398, 59.573128, 60.108857, 60.644587, 61.180316, 
        61.823192, 62.358922, 62.894651, 63.430381, 63.96611, 
        64.50184, 65.144715, 65.680445, 66.216174, 66.85905, 
        67.394779, 67.930509, 68.573384, 69.109114, 69.644844, 
        70.287719, 70.823449, 71.466324, 72.002054, 72.537783, 
        73.180659, 73.716388, 74.359264, 75.002139, 75.537869, 
        76.180744, 76.716474, 77.359349, 78.002225, 78.537954, 
        79.18083, 79.823705, 80.359435, 81.00231, 81.645186, 
        82.288061, 82.823791, 83.466666, 84.109542, 84.752417, 
        85.395293, 86.038168, 86.681044, 87.216773, 87.859649, 
        88.502524, 89.1454, 89.788275, 90.431151, 91.074026, 
        91.716902, 92.359777, 93.002653, 93.752674, 94.39555, 
        95.038425, 95.681301, 96.324176, 96.967051, 97.609927, 
        98.359948, 99.002824, 99.645699, 100.28857, 101.0386, 
        101.68147, 102.32435, 103.07437, 103.71724, 104.36012, 
        105.11014, 105.75302, 106.50304, 107.14591, 107.78879, 
        108.53881, 109.18169, 109.61027, 0, 0, 
        0, 0, 0.39937975, 0.49922469, 0.69891457, 
        0.79875951, 0.89860445, 0.99844938, 1.1981393, 1.2979842, 
        1.4976741, 1.597519, 1.697364, 1.8970538, 1.9968988, 
        2.1965886, 2.2964336, 2.4961235, 2.6958133, 2.7956583, 
        2.9953482, 3.195038, 3.294883, 3.4945728, 3.6942627, 
        3.8939526, 4.0936425, 4.1934874, 4.3931773, 4.5928672, 
        4.792557, 4.9922469, 5.1919368, 5.3916267, 5.5913166, 
        5.7910064, 5.9906963, 6.2902311, 6.489921, 6.6896109, 
        6.8893008, 7.0889906, 7.2886805, 7.5882153, 7.7879052, 
        7.9875951, 8.2871299, 8.4868198, 8.6865096, 8.9860445, 
        9.1857343, 9.4852691, 9.684959, 9.9844938, 10.184184, 
        10.483719, 10.683408, 10.982943, 11.282478, 11.482168, 
        11.781703, 12.081238, 12.280927, 12.580462, 12.879997, 
        13.179532, 13.479067, 13.678757, 13.978291, 14.277826, 
        14.577361, 14.876896, 15.176431, 15.475965, 15.7755, 
        16.075035, 16.37457, 16.674105, 16.97364, 17.273174, 
        17.672554, 17.972089, 18.271624, 18.571159, 18.870693, 
        19.270073, 19.569608, 19.869143, 20.268522, 20.568057, 
        20.867592, 21.266972, 21.566507, 21.965886, 22.265421, 
        22.664801, 22.964336, 23.363716, 23.66325, 24.06263, 
        24.362165, 24.761545, 25.160924, 25.460459, 25.859839, 
        26.259219, 26.558754, 26.958133, 27.357513, 27.756893, 
        28.156273, 28.455807, 28.855187, 29.254567, 29.653947, 
        30.053326, 30.452706, 30.852086, 31.251466, 31.650845, 
        32.050225, 32.449605, 32.848985, 33.248364, 33.647744, 
        34.047124, 34.446504, 34.845884, 35.245263, 35.744488, 
        36.143868, 36.543247, 36.942627, 37.441852, 37.841232, 
        38.240611, 38.639991, 39.139216, 39.538596, 40.03782, 
        40.4372, 40.83658, 41.335805, 41.735184, 42.234409, 
        42.633789, 43.133013, 43.532393, 44.031618, 44.430998, 
        44.930222, 45.429447, 45.828827, 46.328051, 46.827276, 
        47.226656, 47.725881, 48.225105, 48.72433, 49.12371, 
        49.622934, 50.122159, 50.621384, 51.120608, 51.519988, 
        52.019213, 52.518438, 53.017662, 53.516887, 54.016112, 
        54.515336, 55.014561, 55.513786, 56.01301, 56.512235, 
        57.01146, 57.610529, 58.109754, 58.608979, 59.108204, 
        59.607428, 60.106653, 60.705723, 61.204947, 61.704172, 
        62.303242, 62.802466, 63.301691, 63.900761, 64.399985, 
        64.89921, 65.49828, 65.997504, 66.596574, 67.095799, 
        67.595023, 68.194093, 68.693318, 69.292387, 69.891457, 
        70.390682, 70.989751, 71.488976, 72.088046, 72.687115, 
        73.18634, 73.785409, 74.384479, 74.883704, 75.482773, 
        76.081843, 76.680913, 77.180137, 77.779207, 78.378277, 
        78.977346, 79.576416, 80.175486, 80.774555, 81.27378, 
        81.87285, 82.471919, 83.070989, 83.670058, 84.269128, 
        84.868198, 85.467267, 86.066337, 86.665407, 87.364321, 
        87.963391, 88.56246, 89.16153, 89.7606, 90.359669, 
        90.958739, 91.657653, 92.256723, 92.855793, 93.454862, 
        94.153777, 94.752847, 95.351916, 96.050831, 96.6499, 
        97.24897, 97.947885, 98.546954, 99.245869, 99.844938, 
        100.44401, 101.14292, 101.74199, 102.14137, 0, 
        0, 0, 0, 0.37126937, 0.46408671, 
        0.64972139, 0.74253873, 0.83535608, 0.92817342, 1.1138081, 
        1.2066254, 1.3922601, 1.4850775, 1.5778948, 1.7635295, 
        1.8563468, 2.0419815, 2.1347989, 2.3204335, 2.5060682, 
        2.5988856, 2.7845203, 2.9701549, 3.0629723, 3.248607, 
        3.4342416, 3.6198763, 3.805511, 3.8983284, 4.083963, 
        4.2695977, 4.4552324, 4.6408671, 4.8265018, 5.0121365, 
        5.1977711, 5.3834058, 5.5690405, 5.8474925, 6.0331272, 
        6.2187619, 6.4043966, 6.5900313, 6.7756659, 7.054118, 
        7.2397527, 7.4253873, 7.7038394, 7.889474, 8.0751087, 
        8.3535608, 8.5391954, 8.8176475, 9.0032821, 9.2817342, 
        9.4673689, 9.7458209, 9.9314556, 10.209908, 10.48836, 
        10.673994, 10.952446, 11.230898, 11.416533, 11.694985, 
        11.973437, 12.251889, 12.530341, 12.715976, 12.994428, 
        13.27288, 13.551332, 13.829784, 14.108236, 14.386688, 
        14.66514, 14.943592, 15.222044, 15.500496, 15.778948, 
        16.0574, 16.428669, 16.707122, 16.985574, 17.264026, 
        17.542478, 17.913747, 18.192199, 18.470651, 18.84192, 
        19.120372, 19.398824, 19.770094, 20.048546, 20.419815, 
        20.698267, 21.069537, 21.347989, 21.719258, 21.99771, 
        22.368979, 22.647431, 23.018701, 23.38997, 23.668422, 
        24.039692, 24.410961, 24.689413, 25.060682, 25.431952, 
        25.803221, 26.17449, 26.452942, 26.824212, 27.195481, 
        27.566751, 27.93802, 28.309289, 28.680559, 29.051828, 
        29.423097, 29.794367, 30.165636, 30.536905, 30.908175, 
        31.279444, 31.650714, 32.021983, 32.393252, 32.764522, 
        33.228608, 33.599878, 33.971147, 34.342416, 34.806503, 
        35.177773, 35.549042, 35.920311, 36.384398, 36.755667, 
        37.219754, 37.591023, 37.962293, 38.426379, 38.797649, 
        39.261736, 39.633005, 40.097092, 40.468361, 40.932448, 
        41.303717, 41.767804, 42.23189, 42.60316, 43.067247, 
        43.531333, 43.902603, 44.366689, 44.830776, 45.294863, 
        45.666132, 46.130219, 46.594306, 47.058392, 47.522479, 
        47.893748, 48.357835, 48.821922, 49.286008, 49.750095, 
        50.214182, 50.678269, 51.142355, 51.606442, 52.070529, 
        52.534615, 52.998702, 53.555606, 54.019693, 54.48378, 
        54.947866, 55.411953, 55.87604, 56.432944, 56.89703, 
        57.361117, 57.918021, 58.382108, 58.846195, 59.403099, 
        59.867185, 60.331272, 60.888176, 61.352263, 61.909167, 
        62.373254, 62.83734, 63.394244, 63.858331, 64.415235, 
        64.972139, 65.436226, 65.99313, 66.457217, 67.014121, 
        67.571025, 68.035112, 68.592016, 69.14892, 69.613006, 
        70.16991, 70.726814, 71.283718, 71.747805, 72.304709, 
        72.861613, 73.418517, 73.975421, 74.532325, 75.089229, 
        75.553316, 76.11022, 76.667124, 77.224028, 77.780932, 
        78.337836, 78.89474, 79.451645, 80.008549, 80.565453, 
        81.215174, 81.772078, 82.328982, 82.885886, 83.44279, 
        83.999694, 84.556598, 85.20632, 85.763224, 86.320128, 
        86.877032, 87.526753, 88.083657, 88.640561, 89.290283, 
        89.847187, 90.404091, 91.053812, 91.610716, 92.260438, 
        92.817342, 93.374246, 94.023967, 94.580871, 94.952141, 
        0, 0, 0, 0, 0.34441886, 
        0.43052357, 0.602733, 0.68883772, 0.77494243, 0.86104714, 
        1.0332566, 1.1193613, 1.2915707, 1.3776754, 1.4637801, 
        1.6359896, 1.7220943, 1.8943037, 1.9804084, 2.1526179, 
        2.3248273, 2.410932, 2.5831414, 2.7553509, 2.8414556, 
        3.013665, 3.1858744, 3.3580839, 3.5302933, 3.616398, 
        3.7886074, 3.9608169, 4.1330263, 4.3052357, 4.4774452, 
        4.6496546, 4.821864, 4.9940734, 5.1662829, 5.424597, 
        5.5968064, 5.7690159, 5.9412253, 6.1134347, 6.2856442, 
        6.5439583, 6.7161677, 6.8883772, 7.1466913, 7.3189007, 
        7.4911102, 7.7494243, 7.9216337, 8.1799479, 8.3521573, 
        8.6104714, 8.7826809, 9.040995, 9.2132044, 9.4715186, 
        9.7298327, 9.9020422, 10.160356, 10.41867, 10.59088, 
        10.849194, 11.107508, 11.365822, 11.624136, 11.796346, 
        12.05466, 12.312974, 12.571288, 12.829602, 13.087917, 
        13.346231, 13.604545, 13.862859, 14.121173, 14.379487, 
        14.637801, 14.896116, 15.240534, 15.498849, 15.757163, 
        16.015477, 16.273791, 16.61821, 16.876524, 17.134838, 
        17.479257, 17.737571, 17.995885, 18.340304, 18.598618, 
        18.943037, 19.201351, 19.54577, 19.804084, 20.148503, 
        20.406817, 20.751236, 21.00955, 21.353969, 21.698388, 
        21.956702, 22.301121, 22.64554, 22.903854, 23.248273, 
        23.592692, 23.937111, 24.281529, 24.539844, 24.884262, 
        25.228681, 25.5731, 25.917519, 26.261938, 26.606357, 
        26.950776, 27.295194, 27.639613, 27.984032, 28.328451, 
        28.67287, 29.017289, 29.361708, 29.706126, 30.050545, 
        30.394964, 30.825488, 31.169907, 31.514325, 31.858744, 
        32.289268, 32.633687, 32.978106, 33.322524, 33.753048, 
        34.097467, 34.52799, 34.872409, 35.216828, 35.647352, 
        35.991771, 36.422294, 36.766713, 37.197237, 37.541656, 
        37.972179, 38.316598, 38.747122, 39.177645, 39.522064, 
        39.952588, 40.383111, 40.72753, 41.158054, 41.588577, 
        42.019101, 42.36352, 42.794043, 43.224567, 43.65509, 
        44.085614, 44.430033, 44.860556, 45.29108, 45.721603, 
        46.152127, 46.582651, 47.013174, 47.443698, 47.874221, 
        48.304745, 48.735268, 49.165792, 49.68242, 50.112944, 
        50.543467, 50.973991, 51.404515, 51.835038, 52.351666, 
        52.78219, 53.212714, 53.729342, 54.159865, 54.590389, 
        55.107017, 55.537541, 55.968064, 56.484693, 56.915216, 
        57.431845, 57.862368, 58.292892, 58.80952, 59.240044, 
        59.756672, 60.2733, 60.703824, 61.220452, 61.650976, 
        62.167604, 62.684232, 63.114756, 63.631384, 64.148012, 
        64.578536, 65.095164, 65.611792, 66.128421, 66.558944, 
        67.075573, 67.592201, 68.108829, 68.625457, 69.142086, 
        69.658714, 70.089238, 70.605866, 71.122494, 71.639122, 
        72.155751, 72.672379, 73.189007, 73.705636, 74.222264, 
        74.738892, 75.341625, 75.858253, 76.374882, 76.89151, 
        77.408138, 77.924767, 78.441395, 79.044128, 79.560756, 
        80.077384, 80.594013, 81.196746, 81.713374, 82.230002, 
        82.832735, 83.349364, 83.865992, 84.468725, 84.985353, 
        85.588086, 86.104714, 86.621343, 87.224076, 87.740704, 
        88.085123, 0, 0, 0, 0, 
        0.31893747, 0.39867184, 0.55814058, 0.63787495, 0.71760932, 
        0.79734368, 0.95681242, 1.0365468, 1.1960155, 1.2757499, 
        1.3554843, 1.514953, 1.5946874, 1.7541561, 1.8338905, 
        1.9933592, 2.1528279, 2.2325623, 2.3920311, 2.5514998, 
        2.6312342, 2.7907029, 2.9501716, 3.1096404, 3.2691091, 
        3.3488435, 3.5083122, 3.6677809, 3.8272497, 3.9867184, 
        4.1461872, 4.3056559, 4.4651246, 4.6245934, 4.7840621, 
        5.0232652, 5.182734, 5.3422027, 5.5016714, 5.6611402, 
        5.8206089, 6.059812, 6.2192807, 6.3787495, 6.6179526, 
        6.7774213, 6.9368901, 7.1760932, 7.3355619, 7.574765, 
        7.7342337, 7.9734368, 8.1329056, 8.3721087, 8.5315774, 
        8.7707805, 9.0099836, 9.1694524, 9.4086555, 9.6478586, 
        9.8073273, 10.04653, 10.285734, 10.524937, 10.76414, 
        10.923608, 11.162812, 11.402015, 11.641218, 11.880421, 
        12.119624, 12.358827, 12.59803, 12.837233, 13.076436, 
        13.31564, 13.554843, 13.794046, 14.112983, 14.352186, 
        14.591389, 14.830593, 15.069796, 15.388733, 15.627936, 
        15.867139, 16.186077, 16.42528, 16.664483, 16.98342, 
        17.222624, 17.541561, 17.780764, 18.099702, 18.338905, 
        18.657842, 18.897045, 19.215983, 19.455186, 19.774123, 
        20.093061, 20.332264, 20.651201, 20.970139, 21.209342, 
        21.528279, 21.847217, 22.166154, 22.485092, 22.724295, 
        23.043232, 23.36217, 23.681107, 24.000045, 24.318982, 
        24.63792, 24.956857, 25.275795, 25.594732, 25.91367, 
        26.232607, 26.551545, 26.870482, 27.18942, 27.508357, 
        27.827295, 28.146232, 28.544904, 28.863841, 29.182779, 
        29.501716, 29.900388, 30.219326, 30.538263, 30.857201, 
        31.255872, 31.57481, 31.973482, 32.292419, 32.611357, 
        33.010029, 33.328966, 33.727638, 34.046575, 34.445247, 
        34.764185, 35.162856, 35.481794, 35.880466, 36.279138, 
        36.598075, 36.996747, 37.395419, 37.714356, 38.113028, 
        38.5117, 38.910372, 39.229309, 39.627981, 40.026653, 
        40.425325, 40.823997, 41.142934, 41.541606, 41.940278, 
        42.33895, 42.737621, 43.136293, 43.534965, 43.933637, 
        44.332309, 44.730981, 45.129653, 45.528324, 46.006731, 
        46.405402, 46.804074, 47.202746, 47.601418, 48.00009, 
        48.478496, 48.877168, 49.27584, 49.754246, 50.152918, 
        50.55159, 51.029996, 51.428668, 51.82734, 52.305746, 
        52.704418, 53.182824, 53.581496, 53.980167, 54.458574, 
        54.857246, 55.335652, 55.814058, 56.21273, 56.691136, 
        57.089808, 57.568214, 58.04662, 58.445292, 58.923698, 
        59.402105, 59.800776, 60.279183, 60.757589, 61.235995, 
        61.634667, 62.113073, 62.591479, 63.069885, 63.548292, 
        64.026698, 64.505104, 64.903776, 65.382182, 65.860588, 
        66.338995, 66.817401, 67.295807, 67.774213, 68.252619, 
        68.731026, 69.209432, 69.767572, 70.245979, 70.724385, 
        71.202791, 71.681197, 72.159603, 72.63801, 73.19615, 
        73.674556, 74.152963, 74.631369, 75.189509, 75.667916, 
        76.146322, 76.704462, 77.182869, 77.661275, 78.219415, 
        78.697822, 79.255962, 79.734368, 80.212775, 80.770915, 
        81.249321, 81.568259, 0, 0, 0.29488721, 
        0.44233082, 0.58977443, 0.73721804, 1.0321053, 1.1795489, 
        1.3269925, 1.4744361, 1.7693233, 1.9167669, 2.2116541, 
        2.3590977, 2.5065413, 2.8014285, 2.9488721, 3.2437594, 
        3.391203, 3.6860902, 3.9809774, 4.128421, 4.4233082, 
        4.7181954, 4.865639, 5.1605263, 5.4554135, 5.7503007, 
        6.0451879, 6.1926315, 6.4875187, 6.7824059, 7.0772932, 
        7.3721804, 7.6670676, 7.9619548, 8.256842, 8.5517292, 
        8.8466164, 9.2889473, 9.5838345, 9.8787217, 10.173609, 
        10.468496, 10.763383, 11.205714, 11.500601, 11.795489, 
        12.237819, 12.532707, 12.827594, 13.269925, 13.564812, 
        14.007143, 14.30203, 14.744361, 15.039248, 15.481579, 
        15.776466, 16.218797, 16.661128, 16.956015, 17.398346, 
        17.840677, 18.135564, 18.577895, 19.020225, 19.462556, 
        19.904887, 20.199774, 20.642105, 21.084436, 21.526767, 
        21.969098, 22.411428, 22.853759, 23.29609, 23.738421, 
        24.180752, 24.623082, 25.065413, 25.507744, 26.097519, 
        26.539849, 26.98218, 27.424511, 27.866842, 28.456616, 
        28.898947, 29.341278, 29.931052, 30.373383, 30.815714, 
        31.405488, 31.847819, 32.437594, 32.879924, 33.469699, 
        33.91203, 34.501804, 34.944135, 35.533909, 35.97624, 
        36.566015, 37.155789, 37.59812, 38.187894, 38.777669, 
        39.22, 39.809774, 40.399548, 40.989323, 41.579097, 
        42.021428, 42.611203, 43.200977, 43.790751, 44.380526, 
        44.9703, 45.560075, 46.149849, 46.739624, 47.329398, 
        47.919172, 48.508947, 49.098721, 49.688496, 50.27827, 
        50.868045, 51.457819, 52.047593, 52.784811, 53.374586, 
        53.96436, 54.554135, 55.291353, 55.881127, 56.470902, 
        57.060676, 57.797894, 58.387669, 59.124887, 59.714661, 
        60.304435, 61.041653, 61.631428, 62.368646, 62.95842, 
        63.695638, 64.285413, 65.022631, 65.612405, 66.349623, 
        67.086841, 67.676616, 68.413834, 69.151052, 69.740826, 
        70.478044, 71.215262, 71.95248, 72.542255, 73.279473, 
        74.016691, 74.753909, 75.491127, 76.080901, 76.818119, 
        77.555338, 78.292556, 79.029774, 79.766992, 80.50421, 
        81.241428, 81.978646, 82.715864, 83.453082, 84.1903, 
        85.074962, 85.81218, 86.549398, 87.286616, 88.023834, 
        88.761052, 89.645713, 90.382931, 91.120149, 92.004811, 
        92.742029, 93.479247, 94.363909, 95.101127, 95.838345, 
        96.723007, 97.460225, 98.344886, 99.082104, 99.819322, 
        100.70398, 101.4412, 102.32586, 103.21053, 103.94774, 
        104.8324, 105.56962, 106.45428, 107.33895, 108.07616, 
        108.96083, 109.84549, 110.58271, 111.46737, 112.35203, 
        113.23669, 113.97391, 114.85857, 115.74323, 116.62789, 
        117.51256, 118.39722, 119.28188, 120.0191, 120.90376, 
        121.78842, 122.67308, 123.55774, 124.4424, 125.32707, 
        126.21173, 127.09639, 127.98105, 129.01316, 129.89782, 
        130.78248, 131.66714, 132.5518, 133.43646, 134.32113, 
        135.35323, 136.23789, 137.12255, 138.00722, 139.03932, 
        139.92398, 140.80865, 141.84075, 142.72541, 143.61007, 
        144.64218, 145.52684, 146.55895, 147.44361, 148.32827, 
        149.36037, 150.24504, 150.83481, 0, 0, 
        0.27229209, 0.40843813, 0.54458417, 0.68073022, 0.9530223, 
        1.0891683, 1.2253144, 1.3614604, 1.6337525, 1.7698986, 
        2.0421906, 2.1783367, 2.3144827, 2.5867748, 2.7229209, 
        2.9952129, 3.131359, 3.4036511, 3.6759432, 3.8120892, 
        4.0843813, 4.3566734, 4.4928194, 4.7651115, 5.0374036, 
        5.3096957, 5.5819878, 5.7181338, 5.9904259, 6.262718, 
        6.5350101, 6.8073022, 7.0795942, 7.3518863, 7.6241784, 
        7.8964705, 8.1687626, 8.5772007, 8.8494928, 9.1217849, 
        9.394077, 9.6663691, 9.9386611, 10.347099, 10.619391, 
        10.891683, 11.300122, 11.572414, 11.844706, 12.253144, 
        12.525436, 12.933874, 13.206166, 13.614604, 13.886896, 
        14.295335, 14.567627, 14.976065, 15.384503, 15.656795, 
        16.065233, 16.473671, 16.745963, 17.154401, 17.56284, 
        17.971278, 18.379716, 18.652008, 19.060446, 19.468884, 
        19.877322, 20.28576, 20.694199, 21.102637, 21.511075, 
        21.919513, 22.327951, 22.736389, 23.144827, 23.553265, 
        24.09785, 24.506288, 24.914726, 25.323164, 25.731602, 
        26.276186, 26.684624, 27.093063, 27.637647, 28.046085, 
        28.454523, 28.999107, 29.407545, 29.952129, 30.360568, 
        30.905152, 31.31359, 31.858174, 32.266612, 32.811196, 
        33.219635, 33.764219, 34.308803, 34.717241, 35.261825, 
        35.806409, 36.214847, 36.759432, 37.304016, 37.8486, 
        38.393184, 38.801622, 39.346206, 39.890791, 40.435375, 
        40.979959, 41.524543, 42.069127, 42.613712, 43.158296, 
        43.70288, 44.247464, 44.792048, 45.336632, 45.881217, 
        46.425801, 46.970385, 47.514969, 48.059553, 48.740283, 
        49.284868, 49.829452, 50.374036, 51.054766, 51.59935, 
        52.143935, 52.688519, 53.369249, 53.913833, 54.594563, 
        55.139147, 55.683732, 56.364462, 56.909046, 57.589776, 
        58.13436, 58.815091, 59.359675, 60.040405, 60.584989, 
        61.265719, 61.94645, 62.491034, 63.171764, 63.852494, 
        64.397078, 65.077809, 65.758539, 66.439269, 66.983853, 
        67.664583, 68.345314, 69.026044, 69.706774, 70.251358, 
        70.932088, 71.612819, 72.293549, 72.974279, 73.655009, 
        74.33574, 75.01647, 75.6972, 76.37793, 77.05866, 
        77.739391, 78.556267, 79.236997, 79.917727, 80.598458, 
        81.279188, 81.959918, 82.776794, 83.457524, 84.138255, 
        84.955131, 85.635861, 86.316591, 87.133468, 87.814198, 
        88.494928, 89.311804, 89.992535, 90.809411, 91.490141, 
        92.170871, 92.987747, 93.668478, 94.485354, 95.30223, 
        95.98296, 96.799837, 97.480567, 98.297443, 99.114319, 
        99.79505, 100.61193, 101.4288, 102.10953, 102.92641, 
        103.74328, 104.56016, 105.24089, 106.05777, 106.87464, 
        107.69152, 108.5084, 109.32527, 110.14215, 110.82288, 
        111.63976, 112.45663, 113.27351, 114.09038, 114.90726, 
        115.72414, 116.54101, 117.35789, 118.17477, 119.12779, 
        119.94466, 120.76154, 121.57842, 122.39529, 123.21217, 
        124.02905, 124.98207, 125.79894, 126.61582, 127.4327, 
        128.38572, 129.20259, 130.01947, 130.97249, 131.78937, 
        132.60625, 133.55927, 134.37614, 135.32917, 136.14604, 
        136.96292, 137.91594, 138.73282, 139.2774, 0, 
        0, 0.25114638, 0.37671957, 0.50229277, 0.62786596, 
        0.87901234, 1.0045855, 1.1301587, 1.2557319, 1.5068783, 
        1.6324515, 1.8835979, 2.0091711, 2.1347443, 2.3858906, 
        2.5114638, 2.7626102, 2.8881834, 3.1393298, 3.3904762, 
        3.5160494, 3.7671957, 4.0183421, 4.1439153, 4.3950617, 
        4.6462081, 4.8973545, 5.1485009, 5.274074, 5.5252204, 
        5.7763668, 6.0275132, 6.2786596, 6.529806, 6.7809523, 
        7.0320987, 7.2832451, 7.5343915, 7.9111111, 8.1622574, 
        8.4134038, 8.6645502, 8.9156966, 9.166843, 9.5435626, 
        9.7947089, 10.045855, 10.422575, 10.673721, 10.924868, 
        11.301587, 11.552734, 11.929453, 12.1806, 12.557319, 
        12.808466, 13.185185, 13.436331, 13.813051, 14.189771, 
        14.440917, 14.817637, 15.194356, 15.445503, 15.822222, 
        16.198942, 16.575661, 16.952381, 17.203527, 17.580247, 
        17.956966, 18.333686, 18.710406, 19.087125, 19.463845, 
        19.840564, 20.217284, 20.594003, 20.970723, 21.347443, 
        21.724162, 22.226455, 22.603174, 22.979894, 23.356614, 
        23.733333, 24.235626, 24.612346, 24.989065, 25.491358, 
        25.868077, 26.244797, 26.74709, 27.123809, 27.626102, 
        28.002822, 28.505114, 28.881834, 29.384127, 29.760846, 
        30.263139, 30.639859, 31.142151, 31.644444, 32.021164, 
        32.523457, 33.025749, 33.402469, 33.904762, 34.407054, 
        34.909347, 35.41164, 35.78836, 36.290652, 36.792945, 
        37.295238, 37.797531, 38.299823, 38.802116, 39.304409, 
        39.806702, 40.308994, 40.811287, 41.31358, 41.815873, 
        42.318166, 42.820458, 43.322751, 43.825044, 44.327337, 
        44.955203, 45.457495, 45.959788, 46.462081, 47.089947, 
        47.59224, 48.094532, 48.596825, 49.224691, 49.726984, 
        50.35485, 50.857143, 51.359435, 51.987301, 52.489594, 
        53.11746, 53.619753, 54.247619, 54.749911, 55.377777, 
        55.88007, 56.507936, 57.135802, 57.638095, 58.265961, 
        58.893827, 59.39612, 60.023986, 60.651851, 61.279717, 
        61.78201, 62.409876, 63.037742, 63.665608, 64.293474, 
        64.795767, 65.423633, 66.051499, 66.679365, 67.307231, 
        67.935097, 68.562963, 69.190829, 69.818694, 70.44656, 
        71.074426, 71.702292, 72.455731, 73.083597, 73.711463, 
        74.339329, 74.967195, 75.595061, 76.3485, 76.976366, 
        77.604232, 78.357671, 78.985537, 79.613403, 80.366843, 
        80.994709, 81.622574, 82.376014, 83.00388, 83.757319, 
        84.385185, 85.013051, 85.76649, 86.394356, 87.147795, 
        87.901234, 88.5291, 89.282539, 89.910405, 90.663844, 
        91.417283, 92.045149, 92.798589, 93.552028, 94.179894, 
        94.933333, 95.686772, 96.440211, 97.068077, 97.821516, 
        98.574955, 99.328394, 100.08183, 100.83527, 101.58871, 
        102.21658, 102.97002, 103.72346, 104.4769, 105.23033, 
        105.98377, 106.73721, 107.49065, 108.24409, 108.99753, 
        109.87654, 110.62998, 111.38342, 112.13686, 112.8903, 
        113.64374, 114.39718, 115.27619, 116.02963, 116.78307, 
        117.53651, 118.41552, 119.16896, 119.9224, 120.80141, 
        121.55485, 122.30829, 123.1873, 123.94074, 124.81975, 
        125.57319, 126.32663, 127.20564, 127.95908, 128.46137, 
        0, 0, 0.23109399, 0.34664098, 0.46218798, 
        0.57773497, 0.80882896, 0.92437596, 1.039923, 1.1554699, 
        1.3865639, 1.5021109, 1.7332049, 1.8487519, 1.9642989, 
        2.1953929, 2.3109399, 2.5420339, 2.6575809, 2.8886749, 
        3.1197689, 3.2353159, 3.4664098, 3.6975038, 3.8130508, 
        4.0441448, 4.2752388, 4.5063328, 4.7374268, 4.8529738, 
        5.0840678, 5.3151618, 5.5462558, 5.7773497, 6.0084437, 
        6.2395377, 6.4706317, 6.7017257, 6.9328197, 7.2794607, 
        7.5105547, 7.7416487, 7.9727426, 8.2038366, 8.4349306, 
        8.7815716, 9.0126656, 9.2437596, 9.5904006, 9.8214946, 
        10.052589, 10.39923, 10.630324, 10.976965, 11.208059, 
        11.554699, 11.785793, 12.132434, 12.363528, 12.710169, 
        13.05681, 13.287904, 13.634545, 13.981186, 14.21228, 
        14.558921, 14.905562, 15.252203, 15.598844, 15.829938, 
        16.176579, 16.52322, 16.869861, 17.216502, 17.563143, 
        17.909784, 18.256425, 18.603066, 18.949707, 19.296348, 
        19.642989, 19.98963, 20.451818, 20.798459, 21.1451, 
        21.491741, 21.838382, 22.30057, 22.647211, 22.993852, 
        23.45604, 23.802681, 24.149322, 24.61151, 24.958151, 
        25.420339, 25.76698, 26.229168, 26.575809, 27.037997, 
        27.384638, 27.846826, 28.193467, 28.655655, 29.117843, 
        29.464484, 29.926672, 30.38886, 30.735501, 31.197689, 
        31.659877, 32.122065, 32.584253, 32.930894, 33.393082, 
        33.85527, 34.317457, 34.779645, 35.241833, 35.704021, 
        36.166209, 36.628397, 37.090585, 37.552773, 38.014961, 
        38.477149, 38.939337, 39.401525, 39.863713, 40.325901, 
        40.788089, 41.365824, 41.828012, 42.2902, 42.752388, 
        43.330123, 43.792311, 44.254499, 44.716687, 45.294422, 
        45.75661, 46.334345, 46.796533, 47.258721, 47.836456, 
        48.298644, 48.876379, 49.338567, 49.916302, 50.37849, 
        50.956225, 51.418413, 51.996148, 52.573883, 53.036071, 
        53.613806, 54.191541, 54.653729, 55.231464, 55.809199, 
        56.386934, 56.849121, 57.426856, 58.004591, 58.582326, 
        59.160061, 59.622249, 60.199984, 60.777719, 61.355454, 
        61.933189, 62.510924, 63.088659, 63.666394, 64.244129, 
        64.821864, 65.399599, 65.977334, 66.670616, 67.248351, 
        67.826086, 68.403821, 68.981556, 69.559291, 70.252573, 
        70.830308, 71.408043, 72.101325, 72.67906, 73.256795, 
        73.950077, 74.527812, 75.105547, 75.798829, 76.376564, 
        77.069846, 77.647581, 78.225316, 78.918598, 79.496332, 
        80.189614, 80.882896, 81.460631, 82.153913, 82.731648, 
        83.42493, 84.118212, 84.695947, 85.389229, 86.082511, 
        86.660246, 87.353528, 88.04681, 88.740092, 89.317827, 
        90.011109, 90.704391, 91.397673, 92.090955, 92.784237, 
        93.477519, 94.055254, 94.748536, 95.441818, 96.1351, 
        96.828382, 97.521664, 98.214946, 98.908228, 99.60151, 
        100.29479, 101.10362, 101.7969, 102.49018, 103.18347, 
        103.87675, 104.57003, 105.26331, 106.07214, 106.76542, 
        107.45871, 108.15199, 108.96082, 109.6541, 110.34738, 
        111.15621, 111.84949, 112.54277, 113.3516, 114.04488, 
        114.85371, 115.54699, 116.24028, 117.04911, 117.74239, 
        118.20458, 0, 0, 0.2111512, 0.3167268, 
        0.4223024, 0.527878, 0.7390292, 0.8446048, 0.9501804, 
        1.055756, 1.2669072, 1.3724828, 1.583634, 1.6892096, 
        1.7947852, 2.0059364, 2.111512, 2.3226632, 2.4282388, 
        2.63939, 2.8505412, 2.9561168, 3.167268, 3.3784192, 
        3.4839948, 3.695146, 3.9062972, 4.1174484, 4.3285996, 
        4.4341752, 4.6453264, 4.8564776, 5.0676288, 5.27878, 
        5.4899312, 5.7010824, 5.9122336, 6.1233848, 6.334536, 
        6.6512628, 6.862414, 7.0735652, 7.2847164, 7.4958676, 
        7.7070188, 8.0237456, 8.2348968, 8.446048, 8.7627748, 
        8.973926, 9.1850772, 9.501804, 9.7129552, 10.029682, 
        10.240833, 10.55756, 10.768711, 11.085438, 11.296589, 
        11.613316, 11.930043, 12.141194, 12.457921, 12.774648, 
        12.985799, 13.302526, 13.619252, 13.935979, 14.252706, 
        14.463857, 14.780584, 15.097311, 15.414038, 15.730764, 
        16.047491, 16.364218, 16.680945, 16.997672, 17.314398, 
        17.631125, 17.947852, 18.264579, 18.686881, 19.003608, 
        19.320335, 19.637062, 19.953788, 20.376091, 20.692818, 
        21.009544, 21.431847, 21.748574, 22.0653, 22.487603, 
        22.80433, 23.226632, 23.543359, 23.965661, 24.282388, 
        24.70469, 25.021417, 25.44372, 25.760446, 26.182749, 
        26.605051, 26.921778, 27.34408, 27.766383, 28.08311, 
        28.505412, 28.927714, 29.350017, 29.772319, 30.089046, 
        30.511348, 30.933651, 31.355953, 31.778256, 32.200558, 
        32.62286, 33.045163, 33.467465, 33.889768, 34.31207, 
        34.734372, 35.156675, 35.578977, 36.00128, 36.423582, 
        36.845884, 37.268187, 37.796065, 38.218367, 38.64067, 
        39.062972, 39.59085, 40.013152, 40.435455, 40.857757, 
        41.385635, 41.807938, 42.335816, 42.758118, 43.18042, 
        43.708298, 44.130601, 44.658479, 45.080781, 45.608659, 
        46.030962, 46.55884, 46.981142, 47.50902, 48.036898, 
        48.4592, 48.987078, 49.514956, 49.937259, 50.465137, 
        50.993015, 51.520893, 51.943195, 52.471073, 52.998951, 
        53.526829, 54.054707, 54.47701, 55.004888, 55.532766, 
        56.060644, 56.588522, 57.1164, 57.644278, 58.172156, 
        58.700034, 59.227912, 59.75579, 60.283668, 60.917121, 
        61.444999, 61.972877, 62.500755, 63.028633, 63.556511, 
        64.189965, 64.717843, 65.245721, 65.879174, 66.407052, 
        66.93493, 67.568384, 68.096262, 68.62414, 69.257594, 
        69.785472, 70.418925, 70.946803, 71.474681, 72.108135, 
        72.636013, 73.269466, 73.90292, 74.430798, 75.064252, 
        75.59213, 76.225583, 76.859037, 77.386915, 78.020368, 
        78.653822, 79.1817, 79.815154, 80.448607, 81.082061, 
        81.609939, 82.243392, 82.876846, 83.5103, 84.143753, 
        84.777207, 85.41066, 85.938538, 86.571992, 87.205446, 
        87.838899, 88.472353, 89.105806, 89.73926, 90.372714, 
        91.006167, 91.639621, 92.37865, 93.012104, 93.645557, 
        94.279011, 94.912464, 95.545918, 96.179372, 96.918401, 
        97.551854, 98.185308, 98.818762, 99.557791, 100.19124, 
        100.8247, 101.56373, 102.19718, 102.83063, 103.56966, 
        104.20312, 104.94215, 105.5756, 106.20905, 106.94808, 
        107.58154, 108.00384, 0, 0, 0.19065189, 
        0.28597784, 0.38130379, 0.47662974, 0.66728163, 0.76260758, 
        0.85793353, 0.95325947, 1.1439114, 1.2392373, 1.4298892, 
        1.5252152, 1.6205411, 1.811193, 1.9065189, 2.0971708, 
        2.1924968, 2.3831487, 2.5738006, 2.6691265, 2.8597784, 
        3.0504303, 3.1457563, 3.3364082, 3.5270601, 3.7177119, 
        3.9083638, 4.0036898, 4.1943417, 4.3849936, 4.5756455, 
        4.7662974, 4.9569493, 5.1476012, 5.3382531, 5.5289049, 
        5.7195568, 6.0055347, 6.1961866, 6.3868385, 6.5774904, 
        6.7681423, 6.9587942, 7.244772, 7.4354239, 7.6260758, 
        7.9120536, 8.1027055, 8.2933574, 8.5793353, 8.7699872, 
        9.055965, 9.2466169, 9.5325947, 9.7232466, 10.009224, 
        10.199876, 10.485854, 10.771832, 10.962484, 11.248462, 
        11.53444, 11.725092, 12.011069, 12.297047, 12.583025, 
        12.869003, 13.059655, 13.345633, 13.63161, 13.917588, 
        14.203566, 14.489544, 14.775522, 15.0615, 15.347478, 
        15.633455, 15.919433, 16.205411, 16.491389, 16.872693, 
        17.158671, 17.444648, 17.730626, 18.016604, 18.397908, 
        18.683886, 18.969864, 19.351167, 19.637145, 19.923123, 
        20.304427, 20.590405, 20.971708, 21.257686, 21.63899, 
        21.924968, 22.306272, 22.59225, 22.973553, 23.259531, 
        23.640835, 24.022139, 24.308117, 24.68942, 25.070724, 
        25.356702, 25.738006, 26.11931, 26.500613, 26.881917, 
        27.167895, 27.549199, 27.930503, 28.311806, 28.69311, 
        29.074414, 29.455718, 29.837022, 30.218325, 30.599629, 
        30.980933, 31.362237, 31.74354, 32.124844, 32.506148, 
        32.887452, 33.268756, 33.650059, 34.126689, 34.507993, 
        34.889297, 35.270601, 35.74723, 36.128534, 36.509838, 
        36.891142, 37.367771, 37.749075, 38.225705, 38.607009, 
        38.988312, 39.464942, 39.846246, 40.322876, 40.70418, 
        41.180809, 41.562113, 42.038743, 42.420047, 42.896676, 
        43.373306, 43.75461, 44.23124, 44.707869, 45.089173, 
        45.565803, 46.042433, 46.519062, 46.900366, 47.376996, 
        47.853626, 48.330255, 48.806885, 49.188189, 49.664819, 
        50.141448, 50.618078, 51.094708, 51.571338, 52.047967, 
        52.524597, 53.001227, 53.477856, 53.954486, 54.431116, 
        55.003072, 55.479701, 55.956331, 56.432961, 56.909591, 
        57.38622, 57.958176, 58.434806, 58.911435, 59.483391, 
        59.960021, 60.436651, 61.008606, 61.485236, 61.961866, 
        62.533821, 63.010451, 63.582407, 64.059037, 64.535666, 
        65.107622, 65.584252, 66.156207, 66.728163, 67.204793, 
        67.776749, 68.253378, 68.825334, 69.39729, 69.873919, 
        70.445875, 71.017831, 71.494461, 72.066416, 72.638372, 
        73.210328, 73.686957, 74.258913, 74.830869, 75.402824, 
        75.97478, 76.546736, 77.118691, 77.595321, 78.167277, 
        78.739233, 79.311188, 79.883144, 80.4551, 81.027055, 
        81.599011, 82.170967, 82.742922, 83.410204, 83.98216, 
        84.554115, 85.126071, 85.698027, 86.269982, 86.841938, 
        87.50922, 88.081175, 88.653131, 89.225087, 89.892368, 
        90.464324, 91.03628, 91.703561, 92.275517, 92.847473, 
        93.514754, 94.08671, 94.753992, 95.325947, 95.897903, 
        96.565185, 97.13714, 97.518444, 0, 0, 
        0.16959733, 0.254396, 0.33919467, 0.42399333, 0.59359067, 
        0.67838933, 0.763188, 0.84798667, 1.017584, 1.1023827, 
        1.27198, 1.3567787, 1.4415773, 1.6111747, 1.6959733, 
        1.8655707, 1.9503693, 2.1199667, 2.289564, 2.3743627, 
        2.54396, 2.7135573, 2.798356, 2.9679533, 3.1375507, 
        3.307148, 3.4767453, 3.561544, 3.7311413, 3.9007387, 
        4.070336, 4.2399333, 4.4095307, 4.579128, 4.7487253, 
        4.9183227, 5.08792, 5.342316, 5.5119133, 5.6815107, 
        5.851108, 6.0207053, 6.1903027, 6.4446987, 6.614296, 
        6.7838933, 7.0382893, 7.2078867, 7.377484, 7.63188, 
        7.8014773, 8.0558733, 8.2254707, 8.4798667, 8.649464, 
        8.90386, 9.0734573, 9.3278533, 9.5822493, 9.7518467, 
        10.006243, 10.260639, 10.430236, 10.684632, 10.939028, 
        11.193424, 11.44782, 11.617417, 11.871813, 12.126209, 
        12.380605, 12.635001, 12.889397, 13.143793, 13.398189, 
        13.652585, 13.906981, 14.161377, 14.415773, 14.670169, 
        15.009364, 15.26376, 15.518156, 15.772552, 16.026948, 
        16.366143, 16.620539, 16.874935, 17.214129, 17.468525, 
        17.722921, 18.062116, 18.316512, 18.655707, 18.910103, 
        19.249297, 19.503693, 19.842888, 20.097284, 20.436479, 
        20.690875, 21.030069, 21.369264, 21.62366, 21.962855, 
        22.302049, 22.556445, 22.89564, 23.234835, 23.574029, 
        23.913224, 24.16762, 24.506815, 24.846009, 25.185204, 
        25.524399, 25.863593, 26.202788, 26.541983, 26.881177, 
        27.220372, 27.559567, 27.898761, 28.237956, 28.577151, 
        28.916345, 29.25554, 29.594735, 29.933929, 30.357923, 
        30.697117, 31.036312, 31.375507, 31.7995, 32.138695, 
        32.477889, 32.817084, 33.241077, 33.580272, 34.004265, 
        34.34346, 34.682655, 35.106648, 35.445843, 35.869836, 
        36.209031, 36.633024, 36.972219, 37.396212, 37.735407, 
        38.1594, 38.583393, 38.922588, 39.346581, 39.770575, 
        40.109769, 40.533763, 40.957756, 41.381749, 41.720944, 
        42.144937, 42.568931, 42.992924, 43.416917, 43.756112, 
        44.180105, 44.604099, 45.028092, 45.452085, 45.876079, 
        46.300072, 46.724065, 47.148059, 47.572052, 47.996045, 
        48.420039, 48.928831, 49.352824, 49.776817, 50.200811, 
        50.624804, 51.048797, 51.557589, 51.981583, 52.405576, 
        52.914368, 53.338361, 53.762355, 54.271147, 54.69514, 
        55.119133, 55.627925, 56.051919, 56.560711, 56.984704, 
        57.408697, 57.917489, 58.341483, 58.850275, 59.359067, 
        59.78306, 60.291852, 60.715845, 61.224637, 61.733429, 
        62.157423, 62.666215, 63.175007, 63.599, 64.107792, 
        64.616584, 65.125376, 65.549369, 66.058161, 66.566953, 
        67.075745, 67.584537, 68.093329, 68.602121, 69.026115, 
        69.534907, 70.043699, 70.552491, 71.061283, 71.570075, 
        72.078867, 72.587659, 73.096451, 73.605243, 74.198833, 
        74.707625, 75.216417, 75.725209, 76.234001, 76.742793, 
        77.251585, 77.845176, 78.353968, 78.86276, 79.371552, 
        79.965143, 80.473935, 80.982727, 81.576317, 82.085109, 
        82.593901, 83.187492, 83.696284, 84.289875, 84.798667, 
        85.307459, 85.901049, 86.409841, 86.749036, 0, 
        0, 0.1473171, 0.22097565, 0.2946342, 0.36829274, 
        0.51560984, 0.58926839, 0.66292694, 0.73658549, 0.88390259, 
        0.95756113, 1.1048782, 1.1785368, 1.2521953, 1.3995124, 
        1.473171, 1.6204881, 1.6941466, 1.8414637, 1.9887808, 
        2.0624394, 2.2097565, 2.3570736, 2.4307321, 2.5780492, 
        2.7253663, 2.8726834, 3.0200005, 3.0936591, 3.2409761, 
        3.3882932, 3.5356103, 3.6829274, 3.8302445, 3.9775616, 
        4.1248787, 4.2721958, 4.4195129, 4.6404886, 4.7878057, 
        4.9351228, 5.0824399, 5.229757, 5.3770741, 5.5980497, 
        5.7453668, 5.8926839, 6.1136596, 6.2609766, 6.4082937, 
        6.6292694, 6.7765865, 6.9975621, 7.1448792, 7.3658549, 
        7.513172, 7.7341476, 7.8814647, 8.1024404, 8.323416, 
        8.4707331, 8.6917088, 8.9126844, 9.0600015, 9.2809772, 
        9.5019528, 9.7229284, 9.9439041, 10.091221, 10.312197, 
        10.533172, 10.754148, 10.975124, 11.196099, 11.417075, 
        11.638051, 11.859026, 12.080002, 12.300978, 12.521953, 
        12.742929, 13.037563, 13.258539, 13.479514, 13.70049, 
        13.921466, 14.2161, 14.437076, 14.658051, 14.952685, 
        15.173661, 15.394637, 15.689271, 15.910247, 16.204881, 
        16.425856, 16.720491, 16.941466, 17.2361, 17.457076, 
        17.75171, 17.972686, 18.26732, 18.561954, 18.78293, 
        19.077564, 19.372198, 19.593174, 19.887808, 20.182442, 
        20.477077, 20.771711, 20.992686, 21.287321, 21.581955, 
        21.876589, 22.171223, 22.465857, 22.760492, 23.055126, 
        23.34976, 23.644394, 23.939028, 24.233663, 24.528297, 
        24.822931, 25.117565, 25.412199, 25.706834, 26.001468, 
        26.36976, 26.664395, 26.959029, 27.253663, 27.621956, 
        27.91659, 28.211224, 28.505858, 28.874151, 29.168785, 
        29.537078, 29.831712, 30.126346, 30.494639, 30.789273, 
        31.157566, 31.4522, 31.820493, 32.115127, 32.48342, 
        32.778054, 33.146347, 33.51464, 33.809274, 34.177567, 
        34.545859, 34.840494, 35.208786, 35.577079, 35.945372, 
        36.240006, 36.608299, 36.976592, 37.344884, 37.713177, 
        38.007811, 38.376104, 38.744397, 39.112689, 39.480982, 
        39.849275, 40.217568, 40.58586, 40.954153, 41.322446, 
        41.690739, 42.059031, 42.500983, 42.869275, 43.237568, 
        43.605861, 43.974154, 44.342446, 44.784398, 45.15269, 
        45.520983, 45.962934, 46.331227, 46.69952, 47.141471, 
        47.509764, 47.878057, 48.320008, 48.688301, 49.130252, 
        49.498545, 49.866838, 50.308789, 50.677082, 51.119033, 
        51.560984, 51.929277, 52.371228, 52.739521, 53.181472, 
        53.623424, 53.991716, 54.433668, 54.875619, 55.243912, 
        55.685863, 56.127814, 56.569765, 56.938058, 57.38001, 
        57.821961, 58.263912, 58.705863, 59.147815, 59.589766, 
        59.958059, 60.40001, 60.841961, 61.283913, 61.725864, 
        62.167815, 62.609766, 63.051718, 63.493669, 63.93562, 
        64.45123, 64.893182, 65.335133, 65.777084, 66.219035, 
        66.660987, 67.102938, 67.618548, 68.060499, 68.50245, 
        68.944402, 69.460012, 69.901963, 70.343914, 70.859524, 
        71.301475, 71.743427, 72.259036, 72.700988, 73.216598, 
        73.658549, 74.1005, 74.61611, 75.058061, 75.352695, 
        0, 0, 0.12541802, 0.18812703, 0.25083604, 
        0.31354505, 0.43896307, 0.50167207, 0.56438108, 0.62709009, 
        0.75250811, 0.81521712, 0.94063514, 1.0033441, 1.0660532, 
        1.1914712, 1.2541802, 1.3795982, 1.4423072, 1.5677252, 
        1.6931433, 1.7558523, 1.8812703, 2.0066883, 2.0693973, 
        2.1948153, 2.3202333, 2.4456514, 2.5710694, 2.6337784, 
        2.7591964, 2.8846144, 3.0100324, 3.1354505, 3.2608685, 
        3.3862865, 3.5117045, 3.6371225, 3.7625406, 3.9506676, 
        4.0760856, 4.2015036, 4.3269216, 4.4523397, 4.5777577, 
        4.7658847, 4.8913027, 5.0167207, 5.2048478, 5.3302658, 
        5.4556838, 5.6438108, 5.7692289, 5.9573559, 6.0827739, 
        6.2709009, 6.396319, 6.584446, 6.709864, 6.897991, 
        7.0861181, 7.2115361, 7.3996631, 7.5877901, 7.7132081, 
        7.9013352, 8.0894622, 8.2775892, 8.4657163, 8.5911343, 
        8.7792613, 8.9673883, 9.1555154, 9.3436424, 9.5317694, 
        9.7198964, 9.9080235, 10.096151, 10.284278, 10.472405, 
        10.660532, 10.848659, 11.099495, 11.287622, 11.475749, 
        11.663876, 11.852003, 12.102839, 12.290966, 12.479093, 
        12.729929, 12.918056, 13.106183, 13.357019, 13.545146, 
        13.795982, 13.984109, 14.234945, 14.423072, 14.673908, 
        14.862035, 15.112871, 15.300998, 15.551834, 15.80267, 
        15.990797, 16.241633, 16.492469, 16.680596, 16.931433, 
        17.182269, 17.433105, 17.683941, 17.872068, 18.122904, 
        18.37374, 18.624576, 18.875412, 19.126248, 19.377084, 
        19.62792, 19.878756, 20.129592, 20.380428, 20.631264, 
        20.8821, 21.132936, 21.383772, 21.634608, 21.885444, 
        22.13628, 22.449825, 22.700661, 22.951497, 23.202333, 
        23.515878, 23.766715, 24.017551, 24.268387, 24.581932, 
        24.832768, 25.146313, 25.397149, 25.647985, 25.96153, 
        26.212366, 26.525911, 26.776747, 27.090292, 27.341128, 
        27.654673, 27.905509, 28.219054, 28.532599, 28.783435, 
        29.09698, 29.410525, 29.661361, 29.974906, 30.288452, 
        30.601997, 30.852833, 31.166378, 31.479923, 31.793468, 
        32.107013, 32.357849, 32.671394, 32.984939, 33.298484, 
        33.612029, 33.925574, 34.239119, 34.552664, 34.866209, 
        35.179754, 35.493299, 35.806844, 36.183098, 36.496643, 
        36.810188, 37.123734, 37.437279, 37.750824, 38.127078, 
        38.440623, 38.754168, 39.130422, 39.443967, 39.757512, 
        40.133766, 40.447311, 40.760856, 41.13711, 41.450655, 
        41.826909, 42.140454, 42.453999, 42.830253, 43.143798, 
        43.520052, 43.896307, 44.209852, 44.586106, 44.899651, 
        45.275905, 45.652159, 45.965704, 46.341958, 46.718212, 
        47.031757, 47.408011, 47.784265, 48.160519, 48.474064, 
        48.850318, 49.226572, 49.602826, 49.97908, 50.355334, 
        50.731589, 51.045134, 51.421388, 51.797642, 52.173896, 
        52.55015, 52.926404, 53.302658, 53.678912, 54.055166, 
        54.43142, 54.870383, 55.246637, 55.622891, 55.999145, 
        56.375399, 56.751653, 57.127907, 57.566871, 57.943125, 
        58.319379, 58.695633, 59.134596, 59.51085, 59.887104, 
        60.326067, 60.702321, 61.078575, 61.517538, 61.893792, 
        62.332755, 62.709009, 63.085263, 63.524226, 63.90048, 
        64.151317, 0, 0.13401506, 0.26803012, 0.40204518, 
        0.53606024, 0.67007529, 0.93810541, 1.0721205, 1.2061355, 
        1.3401506, 1.6081807, 1.7421958, 2.0102259, 2.1442409, 
        2.278256, 2.5462861, 2.6803012, 2.9483313, 3.0823464, 
        3.3503765, 3.6184066, 3.7524216, 4.0204518, 4.2884819, 
        4.4224969, 4.6905271, 4.9585572, 5.2265873, 5.4946174, 
        5.6286325, 5.8966626, 6.1646927, 6.4327228, 6.7007529, 
        6.9687831, 7.2368132, 7.5048433, 7.7728734, 8.0409035, 
        8.4429487, 8.7109788, 8.9790089, 9.2470391, 9.5150692, 
        9.7830993, 10.185144, 10.453175, 10.721205, 11.12325, 
        11.39128, 11.65931, 12.061355, 12.329385, 12.731431, 
        12.999461, 13.401506, 13.669536, 14.071581, 14.339611, 
        14.741656, 15.143702, 15.411732, 15.813777, 16.215822, 
        16.483852, 16.885897, 17.287943, 17.689988, 18.092033, 
        18.360063, 18.762108, 19.164153, 19.566199, 19.968244, 
        20.370289, 20.772334, 21.174379, 21.576424, 21.97847, 
        22.380515, 22.78256, 23.184605, 23.720665, 24.122711, 
        24.524756, 24.926801, 25.328846, 25.864906, 26.266952, 
        26.668997, 27.205057, 27.607102, 28.009147, 28.545208, 
        28.947253, 29.483313, 29.885358, 30.421418, 30.823464, 
        31.359524, 31.761569, 32.297629, 32.699674, 33.235735, 
        33.771795, 34.17384, 34.7099, 35.24596, 35.648006, 
        36.184066, 36.720126, 37.256186, 37.792247, 38.194292, 
        38.730352, 39.266412, 39.802472, 40.338533, 40.874593, 
        41.410653, 41.946713, 42.482774, 43.018834, 43.554894, 
        44.090954, 44.627015, 45.163075, 45.699135, 46.235195, 
        46.771256, 47.307316, 47.977391, 48.513451, 49.049512, 
        49.585572, 50.255647, 50.791707, 51.327768, 51.863828, 
        52.533903, 53.069963, 53.740039, 54.276099, 54.812159, 
        55.482234, 56.018295, 56.68837, 57.22443, 57.894505, 
        58.430566, 59.100641, 59.636701, 60.306776, 60.976852, 
        61.512912, 62.182987, 62.853063, 63.389123, 64.059198, 
        64.729273, 65.399349, 65.935409, 66.605484, 67.27556, 
        67.945635, 68.61571, 69.15177, 69.821846, 70.491921, 
        71.161996, 71.832072, 72.502147, 73.172222, 73.842297, 
        74.512373, 75.182448, 75.852523, 76.522599, 77.326689, 
        77.996764, 78.66684, 79.336915, 80.00699, 80.677065, 
        81.481156, 82.151231, 82.821306, 83.625397, 84.295472, 
        84.965547, 85.769638, 86.439713, 87.109788, 87.913879, 
        88.583954, 89.388044, 90.05812, 90.728195, 91.532285, 
        92.20236, 93.006451, 93.810541, 94.480616, 95.284707, 
        95.954782, 96.758872, 97.562963, 98.233038, 99.037128, 
        99.841219, 100.51129, 101.31538, 102.11947, 102.92357, 
        103.59364, 104.39773, 105.20182, 106.00591, 106.81, 
        107.61409, 108.41818, 109.08826, 109.89235, 110.69644, 
        111.50053, 112.30462, 113.10871, 113.9128, 114.71689, 
        115.52098, 116.32507, 117.26318, 118.06727, 118.87136, 
        119.67545, 120.47954, 121.28363, 122.08772, 123.02582, 
        123.82991, 124.634, 125.4381, 126.3762, 127.18029, 
        127.98438, 128.92249, 129.72658, 130.53067, 131.46877, 
        132.27286, 133.21097, 134.01506, 134.81915, 135.75725, 
        136.56134, 137.09741, 0, 0.10460836, 0.20921672, 
        0.31382508, 0.41843344, 0.5230418, 0.73225853, 0.83686689, 
        0.94147525, 1.0460836, 1.2553003, 1.3599087, 1.5691254, 
        1.6737338, 1.7783421, 1.9875589, 2.0921672, 2.3013839, 
        2.4059923, 2.615209, 2.8244257, 2.9290341, 3.1382508, 
        3.3474675, 3.4520759, 3.6612926, 3.8705094, 4.0797261, 
        4.2889428, 4.3935512, 4.6027679, 4.8119846, 5.0212013, 
        5.230418, 5.4396348, 5.6488515, 5.8580682, 6.0672849, 
        6.2765017, 6.5903267, 6.7995435, 7.0087602, 7.2179769, 
        7.4271936, 7.6364103, 7.9502354, 8.1594522, 8.3686689, 
        8.682494, 8.8917107, 9.1009274, 9.4147525, 9.6239692, 
        9.9377943, 10.147011, 10.460836, 10.670053, 10.983878, 
        11.193095, 11.50692, 11.820745, 12.029962, 12.343787, 
        12.657612, 12.866828, 13.180653, 13.494479, 13.808304, 
        14.122129, 14.331345, 14.645171, 14.958996, 15.272821, 
        15.586646, 15.900471, 16.214296, 16.528121, 16.841946, 
        17.155771, 17.469596, 17.783421, 18.097246, 18.51568, 
        18.829505, 19.14333, 19.457155, 19.77098, 20.189414, 
        20.503239, 20.817064, 21.235497, 21.549322, 21.863147, 
        22.281581, 22.595406, 23.013839, 23.327664, 23.746098, 
        24.059923, 24.478356, 24.792182, 25.210615, 25.52444, 
        25.942874, 26.361307, 26.675132, 27.093565, 27.511999, 
        27.825824, 28.244257, 28.662691, 29.081124, 29.499558, 
        29.813383, 30.231816, 30.65025, 31.068683, 31.487117, 
        31.90555, 32.323984, 32.742417, 33.16085, 33.579284, 
        33.997717, 34.416151, 34.834584, 35.253018, 35.671451, 
        36.089885, 36.508318, 36.926751, 37.449793, 37.868227, 
        38.28666, 38.705094, 39.228135, 39.646569, 40.065002, 
        40.483436, 41.006477, 41.424911, 41.947953, 42.366386, 
        42.78482, 43.307861, 43.726295, 44.249337, 44.66777, 
        45.190812, 45.609245, 46.132287, 46.550721, 47.073762, 
        47.596804, 48.015238, 48.538279, 49.061321, 49.479755, 
        50.002797, 50.525838, 51.04888, 51.467314, 51.990355, 
        52.513397, 53.036439, 53.559481, 53.977914, 54.500956, 
        55.023998, 55.54704, 56.070081, 56.593123, 57.116165, 
        57.639207, 58.162249, 58.68529, 59.208332, 59.731374, 
        60.359024, 60.882066, 61.405108, 61.92815, 62.451191, 
        62.974233, 63.601883, 64.124925, 64.647967, 65.275617, 
        65.798659, 66.321701, 66.949351, 67.472393, 67.995435, 
        68.623085, 69.146127, 69.773777, 70.296819, 70.81986, 
        71.447511, 71.970552, 72.598202, 73.225853, 73.748894, 
        74.376545, 74.899586, 75.527237, 76.154887, 76.677929, 
        77.305579, 77.933229, 78.456271, 79.083921, 79.711571, 
        80.339221, 80.862263, 81.489913, 82.117563, 82.745213, 
        83.372864, 84.000514, 84.628164, 85.151206, 85.778856, 
        86.406506, 87.034156, 87.661806, 88.289457, 88.917107, 
        89.544757, 90.172407, 90.800057, 91.532316, 92.159966, 
        92.787616, 93.415266, 94.042916, 94.670567, 95.298217, 
        96.030475, 96.658125, 97.285776, 97.913426, 98.645684, 
        99.273335, 99.900985, 100.63324, 101.26089, 101.88854, 
        102.6208, 103.24845, 103.98071, 104.60836, 105.23601, 
        105.96827, 106.59592, 107.01435, 0, 0.5, 
        1, 1.5, 2, 2.5, 3, 
        3.5, 4, 4.5, 5, 5.5, 
        6, 6.5, 7, 7.5, 8, 
        8.5, 9, 9.5, 10, 10.5, 
        11, 11.5, 12, 12.5, 13, 
        13.5, 14, 14.5, 15, 15.5, 
        16, 16.5, 17, 17.5, 18, 
        18.5, 19, 19.5, 20, 20.5, 
        21, 21.5, 22, 22.5, 23, 
        23.5, 24, 24.5, 25, 25.5, 
        26, 26.5, 27, 27.5, 28, 
        28.5, 29, 29.5, 30, 30.5, 
        31, 31.5, 32, 32.5, 33, 
        33.5, 34, 34.5, 35, 35.5, 
        36, 36.5, 37, 37.5, 38, 
        38.5, 39, 39.5, 40, 40.5, 
        41, 41.5, 42, 42.5, 43, 
        43.5, 44, 44.5, 45, 45.5, 
        46, 46.5, 47, 47.5, 48, 
        48.5, 49, 49.5, 50, 50.5, 
        51, 51.5, 52, 52.5, 53, 
        53.5, 54, 54.5, 55, 55.5, 
        56, 56.5, 57, 57.5, 58, 
        58.5, 59, 59.5, 60, 60.5, 
        61, 61.5, 62, 62.5, 63, 
        63.5, 64, 64.5, 65, 65.5, 
        66, 66.5, 67, 67.5, 68, 
        68.5, 69, 69.5, 70, 70.5, 
        71, 71.5, 72, 72.5, 73, 
        73.5, 74, 74.5, 75, 75.5, 
        76, 76.5, 77, 77.5, 78, 
        78.5, 79, 79.5, 80, 80.5, 
        81, 81.5, 82, 82.5, 83, 
        83.5, 84, 84.5, 85, 85.5, 
        86, 86.5, 87, 87.5, 88, 
        88.5, 89, 89.5, 90, 90.5, 
        91, 91.5, 92, 92.5, 93, 
        93.5, 94, 94.5, 95, 95.5, 
        96, 96.5, 97, 97.5, 98, 
        98.5, 99, 99.5, 100, 100.5, 
        101, 101.5, 102, 102.5, 103, 
        103.5, 104, 104.5, 105, 105.5, 
        106, 106.5, 107, 107.5, 108, 
        108.5, 109, 109.5, 110, 110.5, 
        111, 111.5, 112, 112.5, 113, 
        113.5, 114, 114.5, 115, 115.5, 
        116, 116.5, 117, 117.5, 118, 
        118.5, 119, 119.5, 120, 120.5, 
        121, 121.5, 122, 122.5, 123, 
        123.5, 124, 124.5, 125, 125.5, 
        126, 126.5, 127, 127.5, 0, 
        0.5, 1, 1.5, 2, 2.5, 
        3, 3.5, 4, 4.5, 5, 
        5.5, 6, 6.5, 7, 7.5, 
        8, 8.5, 9, 9.5, 10, 
        10.5, 11, 11.5, 12, 12.5, 
        13, 13.5, 14, 14.5, 15, 
        15.5, 16, 16.5, 17, 17.5, 
        18, 18.5, 19, 19.5, 20, 
        20.5, 21, 21.5, 22, 22.5, 
        23, 23.5, 24, 24.5, 25, 
        25.5, 26, 26.5, 27, 27.5, 
        28, 28.5, 29, 29.5, 30, 
        30.5, 31, 31.5, 32, 32.5, 
        33, 33.5, 34, 34.5, 35, 
        35.5, 36, 36.5, 37, 37.5, 
        38, 38.5, 39, 39.5, 40, 
        40.5, 41, 41.5, 42, 42.5, 
        43, 43.5, 44, 44.5, 45, 
        45.5, 46, 46.5, 47, 47.5, 
        48, 48.5, 49, 49.5, 50, 
        50.5, 51, 51.5, 52, 52.5, 
        53, 53.5, 54, 54.5, 55, 
        55.5, 56, 56.5, 57, 57.5, 
        58, 58.5, 59, 59.5, 60, 
        60.5, 61, 61.5, 62, 62.5, 
        63, 63.5, 64, 64.5, 65, 
        65.5, 66, 66.5, 67, 67.5, 
        68, 68.5, 69, 69.5, 70, 
        70.5, 71, 71.5, 72, 72.5, 
        73, 73.5, 74, 74.5, 75, 
        75.5, 76, 76.5, 77, 77.5, 
        78, 78.5, 79, 79.5, 80, 
        80.5, 81, 81.5, 82, 82.5, 
        83, 83.5, 84, 84.5, 85, 
        85.5, 86, 86.5, 87, 87.5, 
        88, 88.5, 89, 89.5, 90, 
        90.5, 91, 91.5, 92, 92.5, 
        93, 93.5, 94, 94.5, 95, 
        95.5, 96, 96.5, 97, 97.5, 
        98, 98.5, 99, 99.5, 100, 
        100.5, 101, 101.5, 102, 102.5, 
        103, 103.5, 104, 104.5, 105, 
        105.5, 106, 106.5, 107, 107.5, 
        108, 108.5, 109, 109.5, 110, 
        110.5, 111, 111.5, 112, 112.5, 
        113, 113.5, 114, 114.5, 115, 
        115.5, 116, 116.5, 117, 117.5, 
        118, 118.5, 119, 119.5, 120, 
        120.5, 121, 121.5, 122, 122.5, 
        123, 123.5, 124, 124.5, 125, 
        125.5, 126, 126.5, 127, 127.5, 
        0, 0.5, 1, 1.5, 2, 
        2.5, 3, 3.5, 4, 4.5, 
        5, 5.5, 6, 6.5, 7, 
        7.5, 8, 8.5, 9, 9.5, 
        10, 10.5, 11, 11.5, 12, 
        12.5, 13, 13.5, 14, 14.5, 
        15, 15.5, 16, 16.5, 17, 
        17.5, 18, 18.5, 19, 19.5, 
        20, 20.5, 21, 21.5, 22, 
        22.5, 23, 23.5, 24, 24.5, 
        25, 25.5, 26, 26.5, 27, 
        27.5, 28, 28.5, 29, 29.5, 
        30, 30.5, 31, 31.5, 32, 
        32.5, 33, 33.5, 34, 34.5, 
        35, 35.5, 36, 36.5, 37, 
        37.5, 38, 38.5, 39, 39.5, 
        40, 40.5, 41, 41.5, 42, 
        42.5, 43, 43.5, 44, 44.5, 
        45, 45.5, 46, 46.5, 47, 
        47.5, 48, 48.5, 49, 49.5, 
        50, 50.5, 51, 51.5, 52, 
        52.5, 53, 53.5, 54, 54.5, 
        55, 55.5, 56, 56.5, 57, 
        57.5, 58, 58.5, 59, 59.5, 
        60, 60.5, 61, 61.5, 62, 
        62.5, 63, 63.5, 64, 64.5, 
        65, 65.5, 66, 66.5, 67, 
        67.5, 68, 68.5, 69, 69.5, 
        70, 70.5, 71, 71.5, 72, 
        72.5, 73, 73.5, 74, 74.5, 
        75, 75.5, 76, 76.5, 77, 
        77.5, 78, 78.5, 79, 79.5, 
        80, 80.5, 81, 81.5, 82, 
        82.5, 83, 83.5, 84, 84.5, 
        85, 85.5, 86, 86.5, 87, 
        87.5, 88, 88.5, 89, 89.5, 
        90, 90.5, 91, 91.5, 92, 
        92.5, 93, 93.5, 94, 94.5, 
        95, 95.5, 96, 96.5, 97, 
        97.5, 98, 98.5, 99, 99.5, 
        100, 100.5, 101, 101.5, 102, 
        102.5, 103, 103.5, 104, 104.5, 
        105, 105.5, 106, 106.5, 107, 
        107.5, 108, 108.5, 109, 109.5, 
        110, 110.5, 111, 111.5, 112, 
        112.5, 113, 113.5, 114, 114.5, 
        115, 115.5, 116, 116.5, 117, 
        117.5, 118, 118.5, 119, 119.5, 
        120, 120.5, 121, 121.5, 122, 
        122.5, 123, 123.5, 124, 124.5, 
        125, 125.5, 126, 126.5, 127, 
        127.5, 0, 0.5, 1, 1.5, 
        2, 2.5, 3, 3.5, 4, 
        4.5, 5, 5.5, 6, 6.5, 
        7, 7.5, 8, 8.5, 9, 
        9.5, 10, 10.5, 11, 11.5, 
        12, 12.5, 13, 13.5, 14, 
        14.5, 15, 15.5, 16, 16.5, 
        17, 17.5, 18, 18.5, 19, 
        19.5, 20, 20.5, 21, 21.5, 
        22, 22.5, 23, 23.5, 24, 
        24.5, 25, 25.5, 26, 26.5, 
        27, 27.5, 28, 28.5, 29, 
        29.5, 30, 30.5, 31, 31.5, 
        32, 32.5, 33, 33.5, 34, 
        34.5, 35, 35.5, 36, 36.5, 
        37, 37.5, 38, 38.5, 39, 
        39.5, 40, 40.5, 41, 41.5, 
        42, 42.5, 43, 43.5, 44, 
        44.5, 45, 45.5, 46, 46.5, 
        47, 47.5, 48, 48.5, 49, 
        49.5, 50, 50.5, 51, 51.5, 
        52, 52.5, 53, 53.5, 54, 
        54.5, 55, 55.5, 56, 56.5, 
        57, 57.5, 58, 58.5, 59, 
        59.5, 60, 60.5, 61, 61.5, 
        62, 62.5, 63, 63.5, 64, 
        64.5, 65, 65.5, 66, 66.5, 
        67, 67.5, 68, 68.5, 69, 
        69.5, 70, 70.5, 71, 71.5, 
        72, 72.5, 73, 73.5, 74, 
        74.5, 75, 75.5, 76, 76.5, 
        77, 77.5, 78, 78.5, 79, 
        79.5, 80, 80.5, 81, 81.5, 
        82, 82.5, 83, 83.5, 84, 
        84.5, 85, 85.5, 86, 86.5, 
        87, 87.5, 88, 88.5, 89, 
        89.5, 90, 90.5, 91, 91.5, 
        92, 92.5, 93, 93.5, 94, 
        94.5, 95, 95.5, 96, 96.5, 
        97, 97.5, 98, 98.5, 99, 
        99.5, 100, 100.5, 101, 101.5, 
        102, 102.5, 103, 103.5, 104, 
        104.5, 105, 105.5, 106, 106.5, 
        107, 107.5, 108, 108.5, 109, 
        109.5, 110, 110.5, 111, 111.5, 
        112, 112.5, 113, 113.5, 114, 
        114.5, 115, 115.5, 116, 116.5, 
        117, 117.5, 118, 118.5, 119, 
        119.5, 120, 120.5, 121, 121.5, 
        122, 122.5, 123, 123.5, 124, 
        124.5, 125, 125.5, 126, 126.5, 
        127, 127.5 ) ),
    L1HcalEtThresholdsNegativeEta = cms.vdouble( (0, 0, 0, 0, 0.70733067, 
        0.88416334, 1.2378287, 1.4146613, 1.591494, 1.7683267, 
        2.121992, 2.2988247, 2.65249, 2.8293227, 3.0061554, 
        3.3598207, 3.5366534, 3.8903187, 4.0671514, 4.4208167, 
        4.774482, 4.9513147, 5.30498, 5.6586454, 5.835478, 
        6.1891434, 6.5428087, 6.896474, 7.2501394, 7.426972, 
        7.7806374, 8.1343027, 8.4879681, 8.8416334, 9.1952987, 
        9.5489641, 9.9026294, 10.256295, 10.60996, 11.140458, 
        11.494123, 11.847789, 12.201454, 12.555119, 12.908785, 
        13.439283, 13.792948, 14.146613, 14.677111, 15.030777, 
        15.384442, 15.91494, 16.268605, 16.799103, 17.152769, 
        17.683267, 18.036932, 18.56743, 18.921095, 19.451593, 
        19.982091, 20.335757, 20.866255, 21.396753, 21.750418, 
        22.280916, 22.811414, 23.341912, 23.87241, 24.226075, 
        24.756573, 25.287071, 25.81757, 26.348068, 26.878566, 
        27.409064, 27.939562, 28.47006, 29.000558, 29.531056, 
        30.061554, 30.592052, 31.299382, 31.82988, 32.360378, 
        32.890876, 33.421374, 34.128705, 34.659203, 35.189701, 
        35.897032, 36.42753, 36.958028, 37.665358, 38.195856, 
        38.903187, 39.433685, 40.141016, 40.671514, 41.378844, 
        41.909342, 42.616673, 43.147171, 43.854502, 44.561832, 
        45.09233, 45.799661, 46.506992, 47.03749, 47.74482, 
        48.452151, 49.159482, 49.866812, 50.39731, 51.104641, 
        51.811972, 52.519302, 53.226633, 53.933964, 54.641294, 
        55.348625, 56.055956, 56.763286, 57.470617, 58.177948, 
        58.885278, 59.592609, 60.29994, 61.00727, 61.714601, 
        62.421932, 63.306095, 64.013426, 64.720756, 65.428087, 
        66.31225, 67.019581, 67.726912, 68.434242, 69.318406, 
        70.025736, 70.9099, 71.61723, 72.324561, 73.208724, 
        73.916055, 74.800218, 75.507549, 76.391712, 77.099043, 
        77.983207, 78.690537, 79.574701, 80.458864, 81.166195, 
        82.050358, 82.934521, 83.641852, 84.526015, 85.410179, 
        86.294342, 87.001673, 87.885836, 88.769999, 89.654163, 
        90.538326, 91.245657, 92.12982, 93.013983, 93.898147, 
        94.78231, 95.666473, 96.550637, 97.4348, 98.318963, 
        99.203127, 100.08729, 100.97145, 102.03245, 102.91661, 
        103.80078, 104.68494, 105.5691, 106.45327, 107.51426, 
        108.39843, 109.28259, 110.34358, 111.22775, 112.11191, 
        113.17291, 114.05707, 114.94123, 116.00223, 116.88639, 
        117.94739, 118.83155, 119.71572, 120.77671, 121.66088, 
        122.72187, 123.78287, 124.66703, 125.72803, 126.61219, 
        127.67319, 128.73418, 129.61835, 130.67934, 131.74034, 
        132.6245, 133.6855, 134.74649, 135.80749, 136.69165, 
        137.75265, 138.81364, 139.87464, 140.93564, 141.99663, 
        143.05763, 143.94179, 145.00279, 146.06378, 147.12478, 
        148.18578, 149.24677, 150.30777, 151.36876, 152.42976, 
        153.49076, 154.72858, 155.78958, 156.85058, 157.91157, 
        158.97257, 160.03356, 161.09456, 162.33239, 163.39339, 
        164.45438, 165.51538, 166.75321, 167.8142, 168.8752, 
        170.11303, 171.17402, 172.23502, 173.47285, 174.53384, 
        175.77167, 176.83267, 177.89366, 179.13149, 180.19249, 
        180.89982, 0, 0, 0, 0, 
        0.70201378, 0.87751722, 1.2285241, 1.4040276, 1.579531, 
        1.7550344, 2.1060413, 2.2815448, 2.6325517, 2.8080551, 
        2.9835586, 3.3345654, 3.5100689, 3.8610758, 4.0365792, 
        4.3875861, 4.738593, 4.9140964, 5.2651033, 5.6161102, 
        5.7916137, 6.1426205, 6.4936274, 6.8446343, 7.1956412, 
        7.3711447, 7.7221515, 8.0731584, 8.4241653, 8.7751722, 
        9.1261791, 9.477186, 9.8281929, 10.1792, 10.530207, 
        11.056717, 11.407724, 11.758731, 12.109738, 12.460745, 
        12.811751, 13.338262, 13.689269, 14.040276, 14.566786, 
        14.917793, 15.2688, 15.79531, 16.146317, 16.672827, 
        17.023834, 17.550344, 17.901351, 18.427862, 18.778869, 
        19.305379, 19.831889, 20.182896, 20.709406, 21.235917, 
        21.586924, 22.113434, 22.639944, 23.166455, 23.692965, 
        24.043972, 24.570482, 25.096993, 25.623503, 26.150013, 
        26.676524, 27.203034, 27.729544, 28.256055, 28.782565, 
        29.309075, 29.835586, 30.362096, 31.06411, 31.59062, 
        32.11713, 32.643641, 33.170151, 33.872165, 34.398675, 
        34.925185, 35.627199, 36.153709, 36.68022, 37.382234, 
        37.908744, 38.610758, 39.137268, 39.839282, 40.365792, 
        41.067806, 41.594316, 42.29633, 42.82284, 43.524854, 
        44.226868, 44.753378, 45.455392, 46.157406, 46.683916, 
        47.38593, 48.087944, 48.789957, 49.491971, 50.018482, 
        50.720495, 51.422509, 52.124523, 52.826537, 53.52855, 
        54.230564, 54.932578, 55.634592, 56.336606, 57.038619, 
        57.740633, 58.442647, 59.144661, 59.846674, 60.548688, 
        61.250702, 61.952716, 62.830233, 63.532247, 64.234261, 
        64.936274, 65.813792, 66.515805, 67.217819, 67.919833, 
        68.79735, 69.499364, 70.376881, 71.078895, 71.780909, 
        72.658426, 73.36044, 74.237957, 74.939971, 75.817488, 
        76.519502, 77.397019, 78.099033, 78.97655, 79.854067, 
        80.556081, 81.433598, 82.311115, 83.013129, 83.890646, 
        84.768164, 85.645681, 86.347695, 87.225212, 88.102729, 
        88.980246, 89.857763, 90.559777, 91.437294, 92.314812, 
        93.192329, 94.069846, 94.947363, 95.824881, 96.702398, 
        97.579915, 98.457432, 99.334949, 100.21247, 101.26549, 
        102.143, 103.02052, 103.89804, 104.77556, 105.65307, 
        106.70609, 107.58361, 108.46113, 109.51415, 110.39167, 
        111.26918, 112.3222, 113.19972, 114.07724, 115.13026, 
        116.00778, 117.0608, 117.93831, 118.81583, 119.86885, 
        120.74637, 121.79939, 122.85241, 123.72993, 124.78295, 
        125.66047, 126.71349, 127.76651, 128.64402, 129.69705, 
        130.75007, 131.62758, 132.6806, 133.73362, 134.78665, 
        135.66416, 136.71718, 137.7702, 138.82322, 139.87624, 
        140.92927, 141.98229, 142.8598, 143.91282, 144.96584, 
        146.01887, 147.07189, 148.12491, 149.17793, 150.23095, 
        151.28397, 152.33699, 153.56551, 154.61853, 155.67155, 
        156.72458, 157.7776, 158.83062, 159.88364, 161.11216, 
        162.16518, 163.2182, 164.27122, 165.49975, 166.55277, 
        167.60579, 168.83431, 169.88733, 170.94035, 172.16888, 
        173.2219, 174.45042, 175.50344, 176.55646, 177.78499, 
        178.83801, 179.54002, 0, 0, 0, 
        0, 0.69157744, 0.86447181, 1.2102605, 1.3831549, 
        1.5560492, 1.7289436, 2.0747323, 2.2476267, 2.5934154, 
        2.7663098, 2.9392041, 3.2849929, 3.4578872, 3.8036759, 
        3.9765703, 4.322359, 4.6681477, 4.8410421, 5.1868308, 
        5.5326196, 5.7055139, 6.0513026, 6.3970914, 6.7428801, 
        7.0886688, 7.2615632, 7.6073519, 7.9531406, 8.2989293, 
        8.6447181, 8.9905068, 9.3362955, 9.6820842, 10.027873, 
        10.373662, 10.892345, 11.238133, 11.583922, 11.929711, 
        12.2755, 12.621288, 13.139971, 13.48576, 13.831549, 
        14.350232, 14.696021, 15.041809, 15.560492, 15.906281, 
        16.424964, 16.770753, 17.289436, 17.635225, 18.153908, 
        18.499697, 19.01838, 19.537063, 19.882852, 20.401535, 
        20.920218, 21.266006, 21.784689, 22.303373, 22.822056, 
        23.340739, 23.686527, 24.205211, 24.723894, 25.242577, 
        25.76126, 26.279943, 26.798626, 27.317309, 27.835992, 
        28.354675, 28.873358, 29.392041, 29.910724, 30.602302, 
        31.120985, 31.639668, 32.158351, 32.677034, 33.368612, 
        33.887295, 34.405978, 35.097555, 35.616238, 36.134921, 
        36.826499, 37.345182, 38.036759, 38.555443, 39.24702, 
        39.765703, 40.45728, 40.975964, 41.667541, 42.186224, 
        42.877802, 43.569379, 44.088062, 44.77964, 45.471217, 
        45.9899, 46.681477, 47.373055, 48.064632, 48.75621, 
        49.274893, 49.96647, 50.658048, 51.349625, 52.041203, 
        52.73278, 53.424358, 54.115935, 54.807512, 55.49909, 
        56.190667, 56.882245, 57.573822, 58.2654, 58.956977, 
        59.648555, 60.340132, 61.031709, 61.896181, 62.587759, 
        63.279336, 63.970914, 64.835385, 65.526963, 66.21854, 
        66.910118, 67.77459, 68.466167, 69.330639, 70.022216, 
        70.713794, 71.578265, 72.269843, 73.134315, 73.825892, 
        74.690364, 75.381941, 76.246413, 76.937991, 77.802462, 
        78.666934, 79.358512, 80.222984, 81.087455, 81.779033, 
        82.643505, 83.507976, 84.372448, 85.064026, 85.928497, 
        86.792969, 87.657441, 88.521913, 89.21349, 90.077962, 
        90.942434, 91.806906, 92.671378, 93.535849, 94.400321, 
        95.264793, 96.129265, 96.993737, 97.858208, 98.72268, 
        99.760046, 100.62452, 101.48899, 102.35346, 103.21793, 
        104.08241, 105.11977, 105.98424, 106.84872, 107.88608, 
        108.75055, 109.61502, 110.65239, 111.51686, 112.38133, 
        113.4187, 114.28317, 115.32054, 116.18501, 117.04948, 
        118.08685, 118.95132, 119.98869, 121.02605, 121.89052, 
        122.92789, 123.79236, 124.82973, 125.86709, 126.73157, 
        127.76893, 128.8063, 129.67077, 130.70814, 131.7455, 
        132.78287, 133.64734, 134.68471, 135.72207, 136.75944, 
        137.79681, 138.83417, 139.87154, 140.73601, 141.77338, 
        142.81074, 143.84811, 144.88547, 145.92284, 146.96021, 
        147.99757, 149.03494, 150.07231, 151.28257, 152.31993, 
        153.3573, 154.39466, 155.43203, 156.4694, 157.50676, 
        158.71702, 159.75439, 160.79176, 161.82912, 163.03938, 
        164.07675, 165.11411, 166.32438, 167.36174, 168.39911, 
        169.60937, 170.64673, 171.85699, 172.89436, 173.93173, 
        175.14199, 176.17935, 176.87093, 0, 0, 
        0, 0, 0.67639901, 0.84549877, 1.1836983, 
        1.352798, 1.5218978, 1.6909975, 2.029197, 2.1982968, 
        2.5364963, 2.7055961, 2.8746958, 3.2128953, 3.3819951, 
        3.7201946, 3.8892943, 4.2274938, 4.5656933, 4.7347931, 
        5.0729926, 5.4111921, 5.5802919, 5.9184914, 6.2566909, 
        6.5948904, 6.9330899, 7.1021896, 7.4403892, 7.7785887, 
        8.1167882, 8.4549877, 8.7931872, 9.1313867, 9.4695862, 
        9.8077857, 10.145985, 10.653284, 10.991484, 11.329683, 
        11.667883, 12.006082, 12.344282, 12.851581, 13.189781, 
        13.52798, 14.03528, 14.373479, 14.711679, 15.218978, 
        15.557177, 16.064477, 16.402676, 16.909975, 17.248175, 
        17.755474, 18.093674, 18.600973, 19.108272, 19.446472, 
        19.953771, 20.46107, 20.79927, 21.306569, 21.813868, 
        22.321167, 22.828467, 23.166666, 23.673965, 24.181265, 
        24.688564, 25.195863, 25.703163, 26.210462, 26.717761, 
        27.22506, 27.73236, 28.239659, 28.746958, 29.254257, 
        29.930656, 30.437956, 30.945255, 31.452554, 31.959853, 
        32.636252, 33.143552, 33.650851, 34.32725, 34.834549, 
        35.341848, 36.018247, 36.525547, 37.201946, 37.709245, 
        38.385644, 38.892943, 39.569342, 40.076642, 40.753041, 
        41.26034, 41.936739, 42.613138, 43.120437, 43.796836, 
        44.473235, 44.980534, 45.656933, 46.333332, 47.009731, 
        47.68613, 48.19343, 48.869829, 49.546228, 50.222627, 
        50.899026, 51.575425, 52.251824, 52.928223, 53.604622, 
        54.281021, 54.95742, 55.633819, 56.310218, 56.986617, 
        57.663016, 58.339415, 59.015814, 59.692213, 60.537712, 
        61.214111, 61.89051, 62.566909, 63.412408, 64.088807, 
        64.765206, 65.441605, 66.287103, 66.963502, 67.809001, 
        68.4854, 69.161799, 70.007298, 70.683697, 71.529196, 
        72.205595, 73.051094, 73.727493, 74.572991, 75.24939, 
        76.094889, 76.940388, 77.616787, 78.462286, 79.307784, 
        79.984183, 80.829682, 81.675181, 82.52068, 83.197079, 
        84.042577, 84.888076, 85.733575, 86.579074, 87.255473, 
        88.100972, 88.94647, 89.791969, 90.637468, 91.482967, 
        92.328465, 93.173964, 94.019463, 94.864962, 95.71046, 
        96.555959, 97.570558, 98.416057, 99.261555, 100.10705, 
        100.95255, 101.79805, 102.81265, 103.65815, 104.50365, 
        105.51825, 106.36374, 107.20924, 108.22384, 109.06934, 
        109.91484, 110.92944, 111.77494, 112.78954, 113.63503, 
        114.48053, 115.49513, 116.34063, 117.35523, 118.36983, 
        119.21533, 120.22992, 121.07542, 122.09002, 123.10462, 
        123.95012, 124.96472, 125.97932, 126.82482, 127.83941, 
        128.85401, 129.86861, 130.71411, 131.72871, 132.74331, 
        133.75791, 134.7725, 135.7871, 136.8017, 137.6472, 
        138.6618, 139.6764, 140.69099, 141.70559, 142.72019, 
        143.73479, 144.74939, 145.76399, 146.77859, 147.96228, 
        148.97688, 149.99148, 151.00608, 152.02068, 153.03528, 
        154.04988, 155.23357, 156.24817, 157.26277, 158.27737, 
        159.46107, 160.47567, 161.49026, 162.67396, 163.68856, 
        164.70316, 165.88686, 166.90146, 168.08515, 169.09975, 
        170.11435, 171.29805, 172.31265, 172.98905, 0, 
        0, 0, 0, 0.6570034, 0.82125425, 
        1.149756, 1.3140068, 1.4782577, 1.6425085, 1.9710102, 
        2.1352611, 2.4637628, 2.6280136, 2.7922645, 3.1207662, 
        3.285017, 3.6135187, 3.7777696, 4.1062713, 4.434773, 
        4.5990238, 4.9275255, 5.2560272, 5.4202781, 5.7487798, 
        6.0772815, 6.4057832, 6.7342849, 6.8985357, 7.2270374, 
        7.5555391, 7.8840408, 8.2125425, 8.5410442, 8.8695459, 
        9.1980476, 9.5265493, 9.855051, 10.347804, 10.676305, 
        11.004807, 11.333309, 11.66181, 11.990312, 12.483065, 
        12.811566, 13.140068, 13.632821, 13.961322, 14.289824, 
        14.782577, 15.111078, 15.603831, 15.932333, 16.425085, 
        16.753587, 17.246339, 17.574841, 18.067594, 18.560346, 
        18.888848, 19.3816, 19.874353, 20.202855, 20.695607, 
        21.18836, 21.681112, 22.173865, 22.502367, 22.995119, 
        23.487872, 23.980624, 24.473377, 24.966129, 25.458882, 
        25.951634, 26.444387, 26.93714, 27.429892, 27.922645, 
        28.415397, 29.072401, 29.565153, 30.057906, 30.550658, 
        31.043411, 31.700414, 32.193167, 32.685919, 33.342923, 
        33.835675, 34.328428, 34.985431, 35.478184, 36.135187, 
        36.62794, 37.284943, 37.777696, 38.434699, 38.927452, 
        39.584455, 40.077208, 40.734211, 41.391214, 41.883967, 
        42.54097, 43.197974, 43.690726, 44.34773, 45.004733, 
        45.661737, 46.31874, 46.811492, 47.468496, 48.125499, 
        48.782503, 49.439506, 50.096509, 50.753513, 51.410516, 
        52.06752, 52.724523, 53.381527, 54.03853, 54.695533, 
        55.352537, 56.00954, 56.666544, 57.323547, 57.98055, 
        58.801805, 59.458808, 60.115811, 60.772815, 61.594069, 
        62.251072, 62.908076, 63.565079, 64.386334, 65.043337, 
        65.864591, 66.521595, 67.178598, 67.999852, 68.656856, 
        69.47811, 70.135113, 70.956368, 71.613371, 72.434625, 
        73.091629, 73.912883, 74.734137, 75.391141, 76.212395, 
        77.033649, 77.690652, 78.511907, 79.333161, 80.154415, 
        80.811419, 81.632673, 82.453927, 83.275181, 84.096436, 
        84.753439, 85.574693, 86.395948, 87.217202, 88.038456, 
        88.85971, 89.680965, 90.502219, 91.323473, 92.144727, 
        92.965982, 93.787236, 94.772741, 95.593995, 96.415249, 
        97.236504, 98.057758, 98.879012, 99.864517, 100.68577, 
        101.50703, 102.49253, 103.31379, 104.13504, 105.12054, 
        105.9418, 106.76305, 107.74856, 108.56981, 109.55532, 
        110.37657, 111.19783, 112.18333, 113.00459, 113.99009, 
        114.9756, 115.79685, 116.78235, 117.60361, 118.58911, 
        119.57462, 120.39587, 121.38138, 122.36688, 123.18814, 
        124.17364, 125.15915, 126.14465, 126.96591, 127.95141, 
        128.93692, 129.92242, 130.90793, 131.89343, 132.87894, 
        133.70019, 134.6857, 135.6712, 136.65671, 137.64221, 
        138.62772, 139.61322, 140.59873, 141.58423, 142.56974, 
        143.71949, 144.705, 145.6905, 146.67601, 147.66151, 
        148.64702, 149.63253, 150.78228, 151.76779, 152.75329, 
        153.7388, 154.88855, 155.87406, 156.85956, 158.00932, 
        158.99482, 159.98033, 161.13008, 162.11559, 163.26535, 
        164.25085, 165.23636, 166.38611, 167.37162, 168.02862, 
        0, 0, 0, 0, 0.63402104, 
        0.7925263, 1.1095368, 1.2680421, 1.4265473, 1.5850526, 
        1.9020631, 2.0605684, 2.3775789, 2.5360842, 2.6945894, 
        3.0115999, 3.1701052, 3.4871157, 3.645621, 3.9626315, 
        4.279642, 4.4381473, 4.7551578, 5.0721683, 5.2306736, 
        5.5476841, 5.8646946, 6.1817051, 6.4987157, 6.6572209, 
        6.9742314, 7.291242, 7.6082525, 7.925263, 8.2422735, 
        8.559284, 8.8762946, 9.1933051, 9.5103156, 9.9858314, 
        10.302842, 10.619852, 10.936863, 11.253873, 11.570884, 
        12.0464, 12.36341, 12.680421, 13.155937, 13.472947, 
        13.789958, 14.265473, 14.582484, 15.058, 15.37501, 
        15.850526, 16.167537, 16.643052, 16.960063, 17.435579, 
        17.911094, 18.228105, 18.703621, 19.179136, 19.496147, 
        19.971663, 20.447179, 20.922694, 21.39821, 21.715221, 
        22.190736, 22.666252, 23.141768, 23.617284, 24.092799, 
        24.568315, 25.043831, 25.519347, 25.994863, 26.470378, 
        26.945894, 27.42141, 28.055431, 28.530947, 29.006463, 
        29.481978, 29.957494, 30.591515, 31.067031, 31.542547, 
        32.176568, 32.652084, 33.127599, 33.76162, 34.237136, 
        34.871157, 35.346673, 35.980694, 36.45621, 37.090231, 
        37.565747, 38.199768, 38.675283, 39.309304, 39.943325, 
        40.418841, 41.052862, 41.686883, 42.162399, 42.79642, 
        43.430441, 44.064462, 44.698483, 45.173999, 45.80802, 
        46.442041, 47.076062, 47.710083, 48.344104, 48.978125, 
        49.612146, 50.246167, 50.880188, 51.514209, 52.14823, 
        52.782252, 53.416273, 54.050294, 54.684315, 55.318336, 
        55.952357, 56.744883, 57.378904, 58.012925, 58.646946, 
        59.439472, 60.073493, 60.707515, 61.341536, 62.134062, 
        62.768083, 63.560609, 64.19463, 64.828651, 65.621178, 
        66.255199, 67.047725, 67.681746, 68.474272, 69.108293, 
        69.90082, 70.534841, 71.327367, 72.119893, 72.753914, 
        73.546441, 74.338967, 74.972988, 75.765514, 76.558041, 
        77.350567, 77.984588, 78.777114, 79.56964, 80.362167, 
        81.154693, 81.788714, 82.58124, 83.373767, 84.166293, 
        84.958819, 85.751346, 86.543872, 87.336398, 88.128924, 
        88.921451, 89.713977, 90.506503, 91.457535, 92.250061, 
        93.042588, 93.835114, 94.62764, 95.420166, 96.371198, 
        97.163724, 97.956251, 98.907282, 99.699808, 100.49233, 
        101.44337, 102.23589, 103.02842, 103.97945, 104.77198, 
        105.72301, 106.51553, 107.30806, 108.25909, 109.05162, 
        110.00265, 110.95368, 111.74621, 112.69724, 113.48977, 
        114.4408, 115.39183, 116.18436, 117.13539, 118.08642, 
        118.87894, 119.82998, 120.78101, 121.73204, 122.52457, 
        123.4756, 124.42663, 125.37766, 126.32869, 127.27972, 
        128.23076, 129.02328, 129.97431, 130.92534, 131.87638, 
        132.82741, 133.77844, 134.72947, 135.6805, 136.63153, 
        137.58257, 138.6921, 139.64313, 140.59417, 141.5452, 
        142.49623, 143.44726, 144.39829, 145.50783, 146.45886, 
        147.40989, 148.36092, 149.47046, 150.42149, 151.37252, 
        152.48206, 153.43309, 154.38412, 155.49366, 156.44469, 
        157.55423, 158.50526, 159.45629, 160.56583, 161.51686, 
        162.15088, 0, 0, 0, 0, 
        0.60814195, 0.76017743, 1.0642484, 1.2162839, 1.3683194, 
        1.5203549, 1.8244258, 1.9764613, 2.2805323, 2.4325678, 
        2.5846033, 2.8886743, 3.0407097, 3.3447807, 3.4968162, 
        3.8008872, 4.1049581, 4.2569936, 4.5610646, 4.8651356, 
        5.0171711, 5.321242, 5.625313, 5.929384, 6.233455, 
        6.3854904, 6.6895614, 6.9936324, 7.2977034, 7.6017743, 
        7.9058453, 8.2099163, 8.5139873, 8.8180582, 9.1221292, 
        9.5782357, 9.8823066, 10.186378, 10.490449, 10.79452, 
        11.098591, 11.554697, 11.858768, 12.162839, 12.618945, 
        12.923016, 13.227087, 13.683194, 13.987265, 14.443371, 
        14.747442, 15.203549, 15.50762, 15.963726, 16.267797, 
        16.723904, 17.18001, 17.484081, 17.940187, 18.396294, 
        18.700365, 19.156471, 19.612578, 20.068684, 20.524791, 
        20.828862, 21.284968, 21.741075, 22.197181, 22.653288, 
        23.109394, 23.5655, 24.021607, 24.477713, 24.93382, 
        25.389926, 25.846033, 26.302139, 26.910281, 27.366388, 
        27.822494, 28.278601, 28.734707, 29.342849, 29.798955, 
        30.255062, 30.863204, 31.31931, 31.775417, 32.383559, 
        32.839665, 33.447807, 33.903914, 34.512056, 34.968162, 
        35.576304, 36.03241, 36.640552, 37.096659, 37.704801, 
        38.312943, 38.769049, 39.377191, 39.985333, 40.44144, 
        41.049581, 41.657723, 42.265865, 42.874007, 43.330114, 
        43.938256, 44.546398, 45.15454, 45.762682, 46.370824, 
        46.978965, 47.587107, 48.195249, 48.803391, 49.411533, 
        50.019675, 50.627817, 51.235959, 51.844101, 52.452243, 
        53.060385, 53.668527, 54.428704, 55.036846, 55.644988, 
        56.25313, 57.013308, 57.62145, 58.229591, 58.837733, 
        59.597911, 60.206053, 60.96623, 61.574372, 62.182514, 
        62.942692, 63.550834, 64.311011, 64.919153, 65.67933, 
        66.287472, 67.04765, 67.655792, 68.415969, 69.176147, 
        69.784288, 70.544466, 71.304643, 71.912785, 72.672963, 
        73.43314, 74.193318, 74.80146, 75.561637, 76.321814, 
        77.081992, 77.842169, 78.450311, 79.210489, 79.970666, 
        80.730844, 81.491021, 82.251198, 83.011376, 83.771553, 
        84.531731, 85.291908, 86.052086, 86.812263, 87.724476, 
        88.484653, 89.244831, 90.005008, 90.765186, 91.525363, 
        92.437576, 93.197753, 93.957931, 94.870144, 95.630321, 
        96.390499, 97.302712, 98.062889, 98.823066, 99.735279, 
        100.49546, 101.40767, 102.16785, 102.92802, 103.84024, 
        104.60041, 105.51263, 106.42484, 107.18502, 108.09723, 
        108.85741, 109.76962, 110.68183, 111.44201, 112.35422, 
        113.26644, 114.02662, 114.93883, 115.85104, 116.76325, 
        117.52343, 118.43564, 119.34786, 120.26007, 121.17228, 
        122.0845, 122.99671, 123.75689, 124.6691, 125.58131, 
        126.49353, 127.40574, 128.31795, 129.23016, 130.14238, 
        131.05459, 131.9668, 133.03105, 133.94326, 134.85548, 
        135.76769, 136.6799, 137.59212, 138.50433, 139.56858, 
        140.48079, 141.393, 142.30522, 143.36946, 144.28168, 
        145.19389, 146.25814, 147.17035, 148.08256, 149.14681, 
        150.05903, 151.12327, 152.03549, 152.9477, 154.01195, 
        154.92416, 155.5323, 0, 0, 0, 
        0, 0.5800716, 0.7250895, 1.0151253, 1.1601432, 
        1.3051611, 1.450179, 1.7402148, 1.8852327, 2.1752685, 
        2.3202864, 2.4653043, 2.7553401, 2.900358, 3.1903938, 
        3.3354117, 3.6254475, 3.9154833, 4.0605012, 4.350537, 
        4.6405728, 4.7855907, 5.0756265, 5.3656623, 5.6556981, 
        5.9457339, 6.0907518, 6.3807876, 6.6708234, 6.9608592, 
        7.250895, 7.5409308, 7.8309666, 8.1210024, 8.4110382, 
        8.701074, 9.1361277, 9.4261635, 9.7161993, 10.006235, 
        10.296271, 10.586307, 11.02136, 11.311396, 11.601432, 
        12.036486, 12.326521, 12.616557, 13.051611, 13.341647, 
        13.7767, 14.066736, 14.50179, 14.791826, 15.226879, 
        15.516915, 15.951969, 16.387023, 16.677058, 17.112112, 
        17.547166, 17.837202, 18.272255, 18.707309, 19.142363, 
        19.577416, 19.867452, 20.302506, 20.73756, 21.172613, 
        21.607667, 22.042721, 22.477774, 22.912828, 23.347882, 
        23.782936, 24.217989, 24.653043, 25.088097, 25.668168, 
        26.103222, 26.538276, 26.973329, 27.408383, 27.988455, 
        28.423508, 28.858562, 29.438634, 29.873687, 30.308741, 
        30.888813, 31.323866, 31.903938, 32.338992, 32.919063, 
        33.354117, 33.934189, 34.369242, 34.949314, 35.384368, 
        35.964439, 36.544511, 36.979564, 37.559636, 38.139708, 
        38.574761, 39.154833, 39.734905, 40.314976, 40.895048, 
        41.330101, 41.910173, 42.490245, 43.070316, 43.650388, 
        44.230459, 44.810531, 45.390603, 45.970674, 46.550746, 
        47.130817, 47.710889, 48.290961, 48.871032, 49.451104, 
        50.031175, 50.611247, 51.191319, 51.916408, 52.49648, 
        53.076551, 53.656623, 54.381712, 54.961784, 55.541856, 
        56.121927, 56.847017, 57.427088, 58.152178, 58.732249, 
        59.312321, 60.037411, 60.617482, 61.342572, 61.922643, 
        62.647733, 63.227804, 63.952894, 64.532965, 65.258055, 
        65.983144, 66.563216, 67.288306, 68.013395, 68.593467, 
        69.318556, 70.043646, 70.768735, 71.348807, 72.073896, 
        72.798986, 73.524075, 74.249165, 74.829236, 75.554326, 
        76.279415, 77.004505, 77.729594, 78.454684, 79.179773, 
        79.904863, 80.629952, 81.355042, 82.080131, 82.805221, 
        83.675328, 84.400418, 85.125507, 85.850597, 86.575686, 
        87.300776, 88.170883, 88.895973, 89.621062, 90.49117, 
        91.216259, 91.941349, 92.811456, 93.536545, 94.261635, 
        95.131742, 95.856832, 96.726939, 97.452029, 98.177118, 
        99.047226, 99.772315, 100.64242, 101.51253, 102.23762, 
        103.10773, 103.83282, 104.70292, 105.57303, 106.29812, 
        107.16823, 108.03834, 108.76342, 109.63353, 110.50364, 
        111.37375, 112.09884, 112.96894, 113.83905, 114.70916, 
        115.57927, 116.44937, 117.31948, 118.04457, 118.91468, 
        119.78479, 120.65489, 121.525, 122.39511, 123.26521, 
        124.13532, 125.00543, 125.87554, 126.89066, 127.76077, 
        128.63088, 129.50098, 130.37109, 131.2412, 132.11131, 
        133.12643, 133.99654, 134.86665, 135.73675, 136.75188, 
        137.62199, 138.49209, 139.50722, 140.37733, 141.24743, 
        142.26256, 143.13267, 144.14779, 145.0179, 145.88801, 
        146.90313, 147.77324, 148.35331, 0, 0, 
        0, 0, 0.55049288, 0.6881161, 0.96336254, 
        1.1009858, 1.238609, 1.3762322, 1.6514786, 1.7891019, 
        2.0643483, 2.2019715, 2.3395948, 2.6148412, 2.7524644, 
        3.0277109, 3.1653341, 3.4405805, 3.715827, 3.8534502, 
        4.1286966, 4.4039431, 4.5415663, 4.8168127, 5.0920592, 
        5.3673056, 5.642552, 5.7801753, 6.0554217, 6.3306682, 
        6.6059146, 6.881161, 7.1564075, 7.4316539, 7.7069004, 
        7.9821468, 8.2573932, 8.6702629, 8.9455093, 9.2207558, 
        9.4960022, 9.7712487, 10.046495, 10.459365, 10.734611, 
        11.009858, 11.422727, 11.697974, 11.97322, 12.38609, 
        12.661336, 13.074206, 13.349452, 13.762322, 14.037569, 
        14.450438, 14.725685, 15.138554, 15.551424, 15.82667, 
        16.23954, 16.65241, 16.927656, 17.340526, 17.753395, 
        18.166265, 18.579135, 18.854381, 19.267251, 19.680121, 
        20.09299, 20.50586, 20.91873, 21.331599, 21.744469, 
        22.157339, 22.570208, 22.983078, 23.395948, 23.808817, 
        24.35931, 24.77218, 25.185049, 25.597919, 26.010789, 
        26.561282, 26.974151, 27.387021, 27.937514, 28.350383, 
        28.763253, 29.313746, 29.726616, 30.277109, 30.689978, 
        31.240471, 31.653341, 32.203834, 32.616703, 33.167196, 
        33.580066, 34.130559, 34.681052, 35.093921, 35.644414, 
        36.194907, 36.607777, 37.15827, 37.708762, 38.259255, 
        38.809748, 39.222618, 39.773111, 40.323604, 40.874097, 
        41.424589, 41.975082, 42.525575, 43.076068, 43.626561, 
        44.177054, 44.727547, 45.27804, 45.828532, 46.379025, 
        46.929518, 47.480011, 48.030504, 48.580997, 49.269113, 
        49.819606, 50.370099, 50.920592, 51.608708, 52.159201, 
        52.709694, 53.260186, 53.948302, 54.498795, 55.186911, 
        55.737404, 56.287897, 56.976013, 57.526506, 58.214622, 
        58.765115, 59.453231, 60.003724, 60.69184, 61.242333, 
        61.930449, 62.618565, 63.169058, 63.857174, 64.54529, 
        65.095783, 65.783899, 66.472016, 67.160132, 67.710625, 
        68.398741, 69.086857, 69.774973, 70.463089, 71.013582, 
        71.701698, 72.389814, 73.07793, 73.766046, 74.454162, 
        75.142278, 75.830395, 76.518511, 77.206627, 77.894743, 
        78.582859, 79.408598, 80.096714, 80.784831, 81.472947, 
        82.161063, 82.849179, 83.674918, 84.363034, 85.05115, 
        85.87689, 86.565006, 87.253122, 88.078861, 88.766977, 
        89.455093, 90.280833, 90.968949, 91.794688, 92.482804, 
        93.17092, 93.99666, 94.684776, 95.510515, 96.336254, 
        97.024371, 97.85011, 98.538226, 99.363965, 100.1897, 
        100.87782, 101.70356, 102.5293, 103.21742, 104.04315, 
        104.86889, 105.69463, 106.38275, 107.20849, 108.03423, 
        108.85997, 109.68571, 110.51145, 111.33719, 112.0253, 
        112.85104, 113.67678, 114.50252, 115.32826, 116.154, 
        116.97974, 117.80548, 118.63122, 119.45696, 120.42032, 
        121.24606, 122.0718, 122.89754, 123.72328, 124.54901, 
        125.37475, 126.33812, 127.16386, 127.9896, 128.81533, 
        129.7787, 130.60444, 131.43018, 132.39354, 133.21928, 
        134.04502, 135.00838, 135.83412, 136.79748, 137.62322, 
        138.44896, 139.41232, 140.23806, 140.78855, 0, 
        0, 0, 0, 0.52003679, 0.65004599, 
        0.91006438, 1.0400736, 1.1700828, 1.300092, 1.5601104, 
        1.6901196, 1.950138, 2.0801472, 2.2101564, 2.4701747, 
        2.6001839, 2.8602023, 2.9902115, 3.2502299, 3.5102483, 
        3.6402575, 3.9002759, 4.1602943, 4.2903035, 4.5503219, 
        4.8103403, 5.0703587, 5.3303771, 5.4603863, 5.7204047, 
        5.9804231, 6.2404415, 6.5004599, 6.7604782, 7.0204966, 
        7.280515, 7.5405334, 7.8005518, 8.1905794, 8.4505978, 
        8.7106162, 8.9706346, 9.230653, 9.4906714, 9.880699, 
        10.140717, 10.400736, 10.790763, 11.050782, 11.3108, 
        11.700828, 11.960846, 12.350874, 12.610892, 13.00092, 
        13.260938, 13.650966, 13.910984, 14.301012, 14.691039, 
        14.951058, 15.341085, 15.731113, 15.991131, 16.381159, 
        16.771186, 17.161214, 17.551242, 17.81126, 18.201288, 
        18.591315, 18.981343, 19.37137, 19.761398, 20.151426, 
        20.541453, 20.931481, 21.321508, 21.711536, 22.101564, 
        22.491591, 23.011628, 23.401655, 23.791683, 24.181711, 
        24.571738, 25.091775, 25.481803, 25.87183, 26.391867, 
        26.781895, 27.171922, 27.691959, 28.081987, 28.602023, 
        28.992051, 29.512088, 29.902115, 30.422152, 30.81218, 
        31.332216, 31.722244, 32.242281, 32.762318, 33.152345, 
        33.672382, 34.192419, 34.582446, 35.102483, 35.62252, 
        36.142557, 36.662594, 37.052621, 37.572658, 38.092695, 
        38.612732, 39.132768, 39.652805, 40.172842, 40.692879, 
        41.212915, 41.732952, 42.252989, 42.773026, 43.293063, 
        43.813099, 44.333136, 44.853173, 45.37321, 45.893247, 
        46.543293, 47.063329, 47.583366, 48.103403, 48.753449, 
        49.273486, 49.793522, 50.313559, 50.963605, 51.483642, 
        52.133688, 52.653725, 53.173762, 53.823808, 54.343844, 
        54.99389, 55.513927, 56.163973, 56.68401, 57.334056, 
        57.854093, 58.504139, 59.154185, 59.674221, 60.324267, 
        60.974313, 61.49435, 62.144396, 62.794442, 63.444488, 
        63.964525, 64.614571, 65.264617, 65.914663, 66.564709, 
        67.084746, 67.734792, 68.384838, 69.034884, 69.68493, 
        70.334976, 70.985022, 71.635068, 72.285114, 72.93516, 
        73.585206, 74.235252, 75.015307, 75.665353, 76.315399, 
        76.965445, 77.615491, 78.265537, 79.045592, 79.695638, 
        80.345684, 81.125739, 81.775785, 82.425831, 83.205886, 
        83.855932, 84.505978, 85.286033, 85.936079, 86.716134, 
        87.36618, 88.016226, 88.796282, 89.446328, 90.226383, 
        91.006438, 91.656484, 92.436539, 93.086585, 93.86664, 
        94.646695, 95.296741, 96.076797, 96.856852, 97.506898, 
        98.286953, 99.067008, 99.847063, 100.49711, 101.27716, 
        102.05722, 102.83727, 103.61733, 104.39739, 105.17744, 
        105.82749, 106.60754, 107.3876, 108.16765, 108.94771, 
        109.72776, 110.50782, 111.28787, 112.06793, 112.84798, 
        113.75805, 114.5381, 115.31816, 116.09821, 116.87827, 
        117.65832, 118.43838, 119.34844, 120.1285, 120.90855, 
        121.68861, 122.59867, 123.37873, 124.15878, 125.06885, 
        125.8489, 126.62896, 127.53902, 128.31908, 129.22914, 
        130.0092, 130.78925, 131.69932, 132.47937, 132.99941, 
        0, 0, 0, 0, 0.4892627, 
        0.61157837, 0.85620972, 0.97852539, 1.1008411, 1.2231567, 
        1.4677881, 1.5901038, 1.8347351, 1.9570508, 2.0793665, 
        2.3239978, 2.4463135, 2.6909448, 2.8132605, 3.0578919, 
        3.3025232, 3.4248389, 3.6694702, 3.9141016, 4.0364172, 
        4.2810486, 4.5256799, 4.7703113, 5.0149426, 5.1372583, 
        5.3818897, 5.626521, 5.8711524, 6.1157837, 6.3604151, 
        6.6050464, 6.8496778, 7.0943091, 7.3389405, 7.7058875, 
        7.9505188, 8.1951502, 8.4397815, 8.6844129, 8.9290442, 
        9.2959912, 9.5406226, 9.7852539, 10.152201, 10.396832, 
        10.641464, 11.008411, 11.253042, 11.619989, 11.86462, 
        12.231567, 12.476199, 12.843146, 13.087777, 13.454724, 
        13.821671, 14.066303, 14.43325, 14.800197, 15.044828, 
        15.411775, 15.778722, 16.145669, 16.512616, 16.757247, 
        17.124194, 17.491141, 17.858088, 18.225035, 18.591982, 
        18.95893, 19.325877, 19.692824, 20.059771, 20.426718, 
        20.793665, 21.160612, 21.649874, 22.016821, 22.383768, 
        22.750715, 23.117662, 23.606925, 23.973872, 24.340819, 
        24.830082, 25.197029, 25.563976, 26.053239, 26.420186, 
        26.909448, 27.276395, 27.765658, 28.132605, 28.621868, 
        28.988815, 29.478077, 29.845025, 30.334287, 30.82355, 
        31.190497, 31.67976, 32.169022, 32.535969, 33.025232, 
        33.514495, 34.003757, 34.49302, 34.859967, 35.34923, 
        35.838493, 36.327755, 36.817018, 37.306281, 37.795543, 
        38.284806, 38.774069, 39.263331, 39.752594, 40.241857, 
        40.73112, 41.220382, 41.709645, 42.198908, 42.68817, 
        43.177433, 43.789011, 44.278274, 44.767537, 45.256799, 
        45.868378, 46.357641, 46.846903, 47.336166, 47.947744, 
        48.437007, 49.048585, 49.537848, 50.027111, 50.638689, 
        51.127952, 51.73953, 52.228793, 52.840371, 53.329634, 
        53.941212, 54.430475, 55.042053, 55.653632, 56.142894, 
        56.754473, 57.366051, 57.855314, 58.466892, 59.078471, 
        59.690049, 60.179312, 60.79089, 61.402468, 62.014047, 
        62.625625, 63.114888, 63.726466, 64.338045, 64.949623, 
        65.561201, 66.17278, 66.784358, 67.395936, 68.007515, 
        68.619093, 69.230672, 69.84225, 70.576144, 71.187722, 
        71.799301, 72.410879, 73.022457, 73.634036, 74.36793, 
        74.979508, 75.591087, 76.324981, 76.936559, 77.548137, 
        78.282031, 78.89361, 79.505188, 80.239082, 80.850661, 
        81.584555, 82.196133, 82.807711, 83.541605, 84.153184, 
        84.887078, 85.620972, 86.23255, 86.966444, 87.578023, 
        88.311917, 89.045811, 89.657389, 90.391283, 91.125177, 
        91.736756, 92.47065, 93.204544, 93.938438, 94.550016, 
        95.28391, 96.017804, 96.751698, 97.485592, 98.219486, 
        98.95338, 99.564959, 100.29885, 101.03275, 101.76664, 
        102.50053, 103.23443, 103.96832, 104.70222, 105.43611, 
        106.17001, 107.02621, 107.76011, 108.494, 109.2279, 
        109.96179, 110.69569, 111.42958, 112.28579, 113.01968, 
        113.75358, 114.48747, 115.34368, 116.07757, 116.81147, 
        117.66768, 118.40157, 119.13547, 119.99168, 120.72557, 
        121.58178, 122.31567, 123.04957, 123.90578, 124.63967, 
        125.12893, 0, 0, 0, 0, 
        0.45864772, 0.57330965, 0.8026335, 0.91729543, 1.0319574, 
        1.1466193, 1.3759432, 1.4906051, 1.7199289, 1.8345909, 
        1.9492528, 2.1785767, 2.2932386, 2.5225624, 2.6372244, 
        2.8665482, 3.0958721, 3.210534, 3.4398579, 3.6691817, 
        3.7838437, 4.0131675, 4.2424914, 4.4718152, 4.7011391, 
        4.815801, 5.0451249, 5.2744487, 5.5037726, 5.7330965, 
        5.9624203, 6.1917442, 6.421068, 6.6503919, 6.8797158, 
        7.2237015, 7.4530254, 7.6823493, 7.9116731, 8.140997, 
        8.3703208, 8.7143066, 8.9436305, 9.1729543, 9.5169401, 
        9.746264, 9.9755878, 10.319574, 10.548897, 10.892883, 
        11.122207, 11.466193, 11.695517, 12.039503, 12.268826, 
        12.612812, 12.956798, 13.186122, 13.530108, 13.874093, 
        14.103417, 14.447403, 14.791389, 15.135375, 15.47936, 
        15.708684, 16.05267, 16.396656, 16.740642, 17.084627, 
        17.428613, 17.772599, 18.116585, 18.460571, 18.804556, 
        19.148542, 19.492528, 19.836514, 20.295161, 20.639147, 
        20.983133, 21.327119, 21.671105, 22.129752, 22.473738, 
        22.817724, 23.276372, 23.620357, 23.964343, 24.422991, 
        24.766977, 25.225624, 25.56961, 26.028258, 26.372244, 
        26.830891, 27.174877, 27.633525, 27.977511, 28.436158, 
        28.894806, 29.238792, 29.69744, 30.156087, 30.500073, 
        30.958721, 31.417369, 31.876016, 32.334664, 32.67865, 
        33.137298, 33.595945, 34.054593, 34.513241, 34.971888, 
        35.430536, 35.889184, 36.347832, 36.806479, 37.265127, 
        37.723775, 38.182422, 38.64107, 39.099718, 39.558366, 
        40.017013, 40.475661, 41.048971, 41.507618, 41.966266, 
        42.424914, 42.998223, 43.456871, 43.915519, 44.374167, 
        44.947476, 45.406124, 45.979434, 46.438081, 46.896729, 
        47.470039, 47.928686, 48.501996, 48.960644, 49.533953, 
        49.992601, 50.565911, 51.024558, 51.597868, 52.171178, 
        52.629825, 53.203135, 53.776445, 54.235093, 54.808402, 
        55.381712, 55.955021, 56.413669, 56.986979, 57.560288, 
        58.133598, 58.706908, 59.165555, 59.738865, 60.312175, 
        60.885484, 61.458794, 62.032104, 62.605413, 63.178723, 
        63.752033, 64.325342, 64.898652, 65.471962, 66.159933, 
        66.733243, 67.306552, 67.879862, 68.453172, 69.026481, 
        69.714453, 70.287763, 70.861072, 71.549044, 72.122353, 
        72.695663, 73.383635, 73.956944, 74.530254, 75.218226, 
        75.791535, 76.479507, 77.052816, 77.626126, 78.314098, 
        78.887407, 79.575379, 80.26335, 80.83666, 81.524632, 
        82.097941, 82.785913, 83.473884, 84.047194, 84.735166, 
        85.423137, 85.996447, 86.684418, 87.37239, 88.060362, 
        88.633671, 89.321643, 90.009614, 90.697586, 91.385558, 
        92.073529, 92.761501, 93.33481, 94.022782, 94.710753, 
        95.398725, 96.086697, 96.774668, 97.46264, 98.150611, 
        98.838583, 99.526555, 100.32919, 101.01716, 101.70513, 
        102.3931, 103.08107, 103.76905, 104.45702, 105.25965, 
        105.94762, 106.63559, 107.32357, 108.1262, 108.81417, 
        109.50214, 110.30478, 110.99275, 111.68072, 112.48335, 
        113.17132, 113.97396, 114.66193, 115.3499, 116.15253, 
        116.84051, 117.29915, 0, 0, 0, 
        0, 0.42858365, 0.53572957, 0.75002139, 0.85716731, 
        0.96431322, 1.0714591, 1.285751, 1.3928969, 1.6071887, 
        1.7143346, 1.8214805, 2.0357724, 2.1429183, 2.3572101, 
        2.464356, 2.6786478, 2.8929397, 3.0000856, 3.2143774, 
        3.4286692, 3.5358151, 3.750107, 3.9643988, 4.1786906, 
        4.3929824, 4.5001284, 4.7144202, 4.928712, 5.1430038, 
        5.3572957, 5.5715875, 5.7858793, 6.0001711, 6.214463, 
        6.4287548, 6.7501925, 6.9644844, 7.1787762, 7.393068, 
        7.6073598, 7.8216517, 8.1430894, 8.3573812, 8.5716731, 
        8.8931108, 9.1074026, 9.3216945, 9.6431322, 9.857424, 
        10.178862, 10.393154, 10.714591, 10.928883, 11.250321, 
        11.464613, 11.78605, 12.107488, 12.32178, 12.643218, 
        12.964656, 13.178947, 13.500385, 13.821823, 14.143261, 
        14.464698, 14.67899, 15.000428, 15.321866, 15.643303, 
        15.964741, 16.286179, 16.607617, 16.929054, 17.250492, 
        17.57193, 17.893368, 18.214805, 18.536243, 18.964827, 
        19.286264, 19.607702, 19.92914, 20.250578, 20.679161, 
        21.000599, 21.322037, 21.75062, 22.072058, 22.393496, 
        22.82208, 23.143517, 23.572101, 23.893539, 24.322122, 
        24.64356, 25.072144, 25.393581, 25.822165, 26.143603, 
        26.572186, 27.00077, 27.322208, 27.750792, 28.179375, 
        28.500813, 28.929397, 29.35798, 29.786564, 30.215148, 
        30.536585, 30.965169, 31.393753, 31.822336, 32.25092, 
        32.679504, 33.108087, 33.536671, 33.965254, 34.393838, 
        34.822422, 35.251005, 35.679589, 36.108173, 36.536756, 
        36.96534, 37.393924, 37.822507, 38.358237, 38.786821, 
        39.215404, 39.643988, 40.179717, 40.608301, 41.036885, 
        41.465468, 42.001198, 42.429782, 42.965511, 43.394095, 
        43.822679, 44.358408, 44.786992, 45.322721, 45.751305, 
        46.287035, 46.715618, 47.251348, 47.679931, 48.215661, 
        48.751391, 49.179974, 49.715704, 50.251433, 50.680017, 
        51.215747, 51.751476, 52.287206, 52.715789, 53.251519, 
        53.787248, 54.322978, 54.858708, 55.287291, 55.823021, 
        56.35875, 56.89448, 57.430209, 57.965939, 58.501669, 
        59.037398, 59.573128, 60.108857, 60.644587, 61.180316, 
        61.823192, 62.358922, 62.894651, 63.430381, 63.96611, 
        64.50184, 65.144715, 65.680445, 66.216174, 66.85905, 
        67.394779, 67.930509, 68.573384, 69.109114, 69.644844, 
        70.287719, 70.823449, 71.466324, 72.002054, 72.537783, 
        73.180659, 73.716388, 74.359264, 75.002139, 75.537869, 
        76.180744, 76.716474, 77.359349, 78.002225, 78.537954, 
        79.18083, 79.823705, 80.359435, 81.00231, 81.645186, 
        82.288061, 82.823791, 83.466666, 84.109542, 84.752417, 
        85.395293, 86.038168, 86.681044, 87.216773, 87.859649, 
        88.502524, 89.1454, 89.788275, 90.431151, 91.074026, 
        91.716902, 92.359777, 93.002653, 93.752674, 94.39555, 
        95.038425, 95.681301, 96.324176, 96.967051, 97.609927, 
        98.359948, 99.002824, 99.645699, 100.28857, 101.0386, 
        101.68147, 102.32435, 103.07437, 103.71724, 104.36012, 
        105.11014, 105.75302, 106.50304, 107.14591, 107.78879, 
        108.53881, 109.18169, 109.61027, 0, 0, 
        0, 0, 0.39937975, 0.49922469, 0.69891457, 
        0.79875951, 0.89860445, 0.99844938, 1.1981393, 1.2979842, 
        1.4976741, 1.597519, 1.697364, 1.8970538, 1.9968988, 
        2.1965886, 2.2964336, 2.4961235, 2.6958133, 2.7956583, 
        2.9953482, 3.195038, 3.294883, 3.4945728, 3.6942627, 
        3.8939526, 4.0936425, 4.1934874, 4.3931773, 4.5928672, 
        4.792557, 4.9922469, 5.1919368, 5.3916267, 5.5913166, 
        5.7910064, 5.9906963, 6.2902311, 6.489921, 6.6896109, 
        6.8893008, 7.0889906, 7.2886805, 7.5882153, 7.7879052, 
        7.9875951, 8.2871299, 8.4868198, 8.6865096, 8.9860445, 
        9.1857343, 9.4852691, 9.684959, 9.9844938, 10.184184, 
        10.483719, 10.683408, 10.982943, 11.282478, 11.482168, 
        11.781703, 12.081238, 12.280927, 12.580462, 12.879997, 
        13.179532, 13.479067, 13.678757, 13.978291, 14.277826, 
        14.577361, 14.876896, 15.176431, 15.475965, 15.7755, 
        16.075035, 16.37457, 16.674105, 16.97364, 17.273174, 
        17.672554, 17.972089, 18.271624, 18.571159, 18.870693, 
        19.270073, 19.569608, 19.869143, 20.268522, 20.568057, 
        20.867592, 21.266972, 21.566507, 21.965886, 22.265421, 
        22.664801, 22.964336, 23.363716, 23.66325, 24.06263, 
        24.362165, 24.761545, 25.160924, 25.460459, 25.859839, 
        26.259219, 26.558754, 26.958133, 27.357513, 27.756893, 
        28.156273, 28.455807, 28.855187, 29.254567, 29.653947, 
        30.053326, 30.452706, 30.852086, 31.251466, 31.650845, 
        32.050225, 32.449605, 32.848985, 33.248364, 33.647744, 
        34.047124, 34.446504, 34.845884, 35.245263, 35.744488, 
        36.143868, 36.543247, 36.942627, 37.441852, 37.841232, 
        38.240611, 38.639991, 39.139216, 39.538596, 40.03782, 
        40.4372, 40.83658, 41.335805, 41.735184, 42.234409, 
        42.633789, 43.133013, 43.532393, 44.031618, 44.430998, 
        44.930222, 45.429447, 45.828827, 46.328051, 46.827276, 
        47.226656, 47.725881, 48.225105, 48.72433, 49.12371, 
        49.622934, 50.122159, 50.621384, 51.120608, 51.519988, 
        52.019213, 52.518438, 53.017662, 53.516887, 54.016112, 
        54.515336, 55.014561, 55.513786, 56.01301, 56.512235, 
        57.01146, 57.610529, 58.109754, 58.608979, 59.108204, 
        59.607428, 60.106653, 60.705723, 61.204947, 61.704172, 
        62.303242, 62.802466, 63.301691, 63.900761, 64.399985, 
        64.89921, 65.49828, 65.997504, 66.596574, 67.095799, 
        67.595023, 68.194093, 68.693318, 69.292387, 69.891457, 
        70.390682, 70.989751, 71.488976, 72.088046, 72.687115, 
        73.18634, 73.785409, 74.384479, 74.883704, 75.482773, 
        76.081843, 76.680913, 77.180137, 77.779207, 78.378277, 
        78.977346, 79.576416, 80.175486, 80.774555, 81.27378, 
        81.87285, 82.471919, 83.070989, 83.670058, 84.269128, 
        84.868198, 85.467267, 86.066337, 86.665407, 87.364321, 
        87.963391, 88.56246, 89.16153, 89.7606, 90.359669, 
        90.958739, 91.657653, 92.256723, 92.855793, 93.454862, 
        94.153777, 94.752847, 95.351916, 96.050831, 96.6499, 
        97.24897, 97.947885, 98.546954, 99.245869, 99.844938, 
        100.44401, 101.14292, 101.74199, 102.14137, 0, 
        0, 0, 0, 0.37126937, 0.46408671, 
        0.64972139, 0.74253873, 0.83535608, 0.92817342, 1.1138081, 
        1.2066254, 1.3922601, 1.4850775, 1.5778948, 1.7635295, 
        1.8563468, 2.0419815, 2.1347989, 2.3204335, 2.5060682, 
        2.5988856, 2.7845203, 2.9701549, 3.0629723, 3.248607, 
        3.4342416, 3.6198763, 3.805511, 3.8983284, 4.083963, 
        4.2695977, 4.4552324, 4.6408671, 4.8265018, 5.0121365, 
        5.1977711, 5.3834058, 5.5690405, 5.8474925, 6.0331272, 
        6.2187619, 6.4043966, 6.5900313, 6.7756659, 7.054118, 
        7.2397527, 7.4253873, 7.7038394, 7.889474, 8.0751087, 
        8.3535608, 8.5391954, 8.8176475, 9.0032821, 9.2817342, 
        9.4673689, 9.7458209, 9.9314556, 10.209908, 10.48836, 
        10.673994, 10.952446, 11.230898, 11.416533, 11.694985, 
        11.973437, 12.251889, 12.530341, 12.715976, 12.994428, 
        13.27288, 13.551332, 13.829784, 14.108236, 14.386688, 
        14.66514, 14.943592, 15.222044, 15.500496, 15.778948, 
        16.0574, 16.428669, 16.707122, 16.985574, 17.264026, 
        17.542478, 17.913747, 18.192199, 18.470651, 18.84192, 
        19.120372, 19.398824, 19.770094, 20.048546, 20.419815, 
        20.698267, 21.069537, 21.347989, 21.719258, 21.99771, 
        22.368979, 22.647431, 23.018701, 23.38997, 23.668422, 
        24.039692, 24.410961, 24.689413, 25.060682, 25.431952, 
        25.803221, 26.17449, 26.452942, 26.824212, 27.195481, 
        27.566751, 27.93802, 28.309289, 28.680559, 29.051828, 
        29.423097, 29.794367, 30.165636, 30.536905, 30.908175, 
        31.279444, 31.650714, 32.021983, 32.393252, 32.764522, 
        33.228608, 33.599878, 33.971147, 34.342416, 34.806503, 
        35.177773, 35.549042, 35.920311, 36.384398, 36.755667, 
        37.219754, 37.591023, 37.962293, 38.426379, 38.797649, 
        39.261736, 39.633005, 40.097092, 40.468361, 40.932448, 
        41.303717, 41.767804, 42.23189, 42.60316, 43.067247, 
        43.531333, 43.902603, 44.366689, 44.830776, 45.294863, 
        45.666132, 46.130219, 46.594306, 47.058392, 47.522479, 
        47.893748, 48.357835, 48.821922, 49.286008, 49.750095, 
        50.214182, 50.678269, 51.142355, 51.606442, 52.070529, 
        52.534615, 52.998702, 53.555606, 54.019693, 54.48378, 
        54.947866, 55.411953, 55.87604, 56.432944, 56.89703, 
        57.361117, 57.918021, 58.382108, 58.846195, 59.403099, 
        59.867185, 60.331272, 60.888176, 61.352263, 61.909167, 
        62.373254, 62.83734, 63.394244, 63.858331, 64.415235, 
        64.972139, 65.436226, 65.99313, 66.457217, 67.014121, 
        67.571025, 68.035112, 68.592016, 69.14892, 69.613006, 
        70.16991, 70.726814, 71.283718, 71.747805, 72.304709, 
        72.861613, 73.418517, 73.975421, 74.532325, 75.089229, 
        75.553316, 76.11022, 76.667124, 77.224028, 77.780932, 
        78.337836, 78.89474, 79.451645, 80.008549, 80.565453, 
        81.215174, 81.772078, 82.328982, 82.885886, 83.44279, 
        83.999694, 84.556598, 85.20632, 85.763224, 86.320128, 
        86.877032, 87.526753, 88.083657, 88.640561, 89.290283, 
        89.847187, 90.404091, 91.053812, 91.610716, 92.260438, 
        92.817342, 93.374246, 94.023967, 94.580871, 94.952141, 
        0, 0, 0, 0, 0.34441886, 
        0.43052357, 0.602733, 0.68883772, 0.77494243, 0.86104714, 
        1.0332566, 1.1193613, 1.2915707, 1.3776754, 1.4637801, 
        1.6359896, 1.7220943, 1.8943037, 1.9804084, 2.1526179, 
        2.3248273, 2.410932, 2.5831414, 2.7553509, 2.8414556, 
        3.013665, 3.1858744, 3.3580839, 3.5302933, 3.616398, 
        3.7886074, 3.9608169, 4.1330263, 4.3052357, 4.4774452, 
        4.6496546, 4.821864, 4.9940734, 5.1662829, 5.424597, 
        5.5968064, 5.7690159, 5.9412253, 6.1134347, 6.2856442, 
        6.5439583, 6.7161677, 6.8883772, 7.1466913, 7.3189007, 
        7.4911102, 7.7494243, 7.9216337, 8.1799479, 8.3521573, 
        8.6104714, 8.7826809, 9.040995, 9.2132044, 9.4715186, 
        9.7298327, 9.9020422, 10.160356, 10.41867, 10.59088, 
        10.849194, 11.107508, 11.365822, 11.624136, 11.796346, 
        12.05466, 12.312974, 12.571288, 12.829602, 13.087917, 
        13.346231, 13.604545, 13.862859, 14.121173, 14.379487, 
        14.637801, 14.896116, 15.240534, 15.498849, 15.757163, 
        16.015477, 16.273791, 16.61821, 16.876524, 17.134838, 
        17.479257, 17.737571, 17.995885, 18.340304, 18.598618, 
        18.943037, 19.201351, 19.54577, 19.804084, 20.148503, 
        20.406817, 20.751236, 21.00955, 21.353969, 21.698388, 
        21.956702, 22.301121, 22.64554, 22.903854, 23.248273, 
        23.592692, 23.937111, 24.281529, 24.539844, 24.884262, 
        25.228681, 25.5731, 25.917519, 26.261938, 26.606357, 
        26.950776, 27.295194, 27.639613, 27.984032, 28.328451, 
        28.67287, 29.017289, 29.361708, 29.706126, 30.050545, 
        30.394964, 30.825488, 31.169907, 31.514325, 31.858744, 
        32.289268, 32.633687, 32.978106, 33.322524, 33.753048, 
        34.097467, 34.52799, 34.872409, 35.216828, 35.647352, 
        35.991771, 36.422294, 36.766713, 37.197237, 37.541656, 
        37.972179, 38.316598, 38.747122, 39.177645, 39.522064, 
        39.952588, 40.383111, 40.72753, 41.158054, 41.588577, 
        42.019101, 42.36352, 42.794043, 43.224567, 43.65509, 
        44.085614, 44.430033, 44.860556, 45.29108, 45.721603, 
        46.152127, 46.582651, 47.013174, 47.443698, 47.874221, 
        48.304745, 48.735268, 49.165792, 49.68242, 50.112944, 
        50.543467, 50.973991, 51.404515, 51.835038, 52.351666, 
        52.78219, 53.212714, 53.729342, 54.159865, 54.590389, 
        55.107017, 55.537541, 55.968064, 56.484693, 56.915216, 
        57.431845, 57.862368, 58.292892, 58.80952, 59.240044, 
        59.756672, 60.2733, 60.703824, 61.220452, 61.650976, 
        62.167604, 62.684232, 63.114756, 63.631384, 64.148012, 
        64.578536, 65.095164, 65.611792, 66.128421, 66.558944, 
        67.075573, 67.592201, 68.108829, 68.625457, 69.142086, 
        69.658714, 70.089238, 70.605866, 71.122494, 71.639122, 
        72.155751, 72.672379, 73.189007, 73.705636, 74.222264, 
        74.738892, 75.341625, 75.858253, 76.374882, 76.89151, 
        77.408138, 77.924767, 78.441395, 79.044128, 79.560756, 
        80.077384, 80.594013, 81.196746, 81.713374, 82.230002, 
        82.832735, 83.349364, 83.865992, 84.468725, 84.985353, 
        85.588086, 86.104714, 86.621343, 87.224076, 87.740704, 
        88.085123, 0, 0, 0, 0, 
        0.31893747, 0.39867184, 0.55814058, 0.63787495, 0.71760932, 
        0.79734368, 0.95681242, 1.0365468, 1.1960155, 1.2757499, 
        1.3554843, 1.514953, 1.5946874, 1.7541561, 1.8338905, 
        1.9933592, 2.1528279, 2.2325623, 2.3920311, 2.5514998, 
        2.6312342, 2.7907029, 2.9501716, 3.1096404, 3.2691091, 
        3.3488435, 3.5083122, 3.6677809, 3.8272497, 3.9867184, 
        4.1461872, 4.3056559, 4.4651246, 4.6245934, 4.7840621, 
        5.0232652, 5.182734, 5.3422027, 5.5016714, 5.6611402, 
        5.8206089, 6.059812, 6.2192807, 6.3787495, 6.6179526, 
        6.7774213, 6.9368901, 7.1760932, 7.3355619, 7.574765, 
        7.7342337, 7.9734368, 8.1329056, 8.3721087, 8.5315774, 
        8.7707805, 9.0099836, 9.1694524, 9.4086555, 9.6478586, 
        9.8073273, 10.04653, 10.285734, 10.524937, 10.76414, 
        10.923608, 11.162812, 11.402015, 11.641218, 11.880421, 
        12.119624, 12.358827, 12.59803, 12.837233, 13.076436, 
        13.31564, 13.554843, 13.794046, 14.112983, 14.352186, 
        14.591389, 14.830593, 15.069796, 15.388733, 15.627936, 
        15.867139, 16.186077, 16.42528, 16.664483, 16.98342, 
        17.222624, 17.541561, 17.780764, 18.099702, 18.338905, 
        18.657842, 18.897045, 19.215983, 19.455186, 19.774123, 
        20.093061, 20.332264, 20.651201, 20.970139, 21.209342, 
        21.528279, 21.847217, 22.166154, 22.485092, 22.724295, 
        23.043232, 23.36217, 23.681107, 24.000045, 24.318982, 
        24.63792, 24.956857, 25.275795, 25.594732, 25.91367, 
        26.232607, 26.551545, 26.870482, 27.18942, 27.508357, 
        27.827295, 28.146232, 28.544904, 28.863841, 29.182779, 
        29.501716, 29.900388, 30.219326, 30.538263, 30.857201, 
        31.255872, 31.57481, 31.973482, 32.292419, 32.611357, 
        33.010029, 33.328966, 33.727638, 34.046575, 34.445247, 
        34.764185, 35.162856, 35.481794, 35.880466, 36.279138, 
        36.598075, 36.996747, 37.395419, 37.714356, 38.113028, 
        38.5117, 38.910372, 39.229309, 39.627981, 40.026653, 
        40.425325, 40.823997, 41.142934, 41.541606, 41.940278, 
        42.33895, 42.737621, 43.136293, 43.534965, 43.933637, 
        44.332309, 44.730981, 45.129653, 45.528324, 46.006731, 
        46.405402, 46.804074, 47.202746, 47.601418, 48.00009, 
        48.478496, 48.877168, 49.27584, 49.754246, 50.152918, 
        50.55159, 51.029996, 51.428668, 51.82734, 52.305746, 
        52.704418, 53.182824, 53.581496, 53.980167, 54.458574, 
        54.857246, 55.335652, 55.814058, 56.21273, 56.691136, 
        57.089808, 57.568214, 58.04662, 58.445292, 58.923698, 
        59.402105, 59.800776, 60.279183, 60.757589, 61.235995, 
        61.634667, 62.113073, 62.591479, 63.069885, 63.548292, 
        64.026698, 64.505104, 64.903776, 65.382182, 65.860588, 
        66.338995, 66.817401, 67.295807, 67.774213, 68.252619, 
        68.731026, 69.209432, 69.767572, 70.245979, 70.724385, 
        71.202791, 71.681197, 72.159603, 72.63801, 73.19615, 
        73.674556, 74.152963, 74.631369, 75.189509, 75.667916, 
        76.146322, 76.704462, 77.182869, 77.661275, 78.219415, 
        78.697822, 79.255962, 79.734368, 80.212775, 80.770915, 
        81.249321, 81.568259, 0, 0, 0.29488721, 
        0.44233082, 0.58977443, 0.73721804, 1.0321053, 1.1795489, 
        1.3269925, 1.4744361, 1.7693233, 1.9167669, 2.2116541, 
        2.3590977, 2.5065413, 2.8014285, 2.9488721, 3.2437594, 
        3.391203, 3.6860902, 3.9809774, 4.128421, 4.4233082, 
        4.7181954, 4.865639, 5.1605263, 5.4554135, 5.7503007, 
        6.0451879, 6.1926315, 6.4875187, 6.7824059, 7.0772932, 
        7.3721804, 7.6670676, 7.9619548, 8.256842, 8.5517292, 
        8.8466164, 9.2889473, 9.5838345, 9.8787217, 10.173609, 
        10.468496, 10.763383, 11.205714, 11.500601, 11.795489, 
        12.237819, 12.532707, 12.827594, 13.269925, 13.564812, 
        14.007143, 14.30203, 14.744361, 15.039248, 15.481579, 
        15.776466, 16.218797, 16.661128, 16.956015, 17.398346, 
        17.840677, 18.135564, 18.577895, 19.020225, 19.462556, 
        19.904887, 20.199774, 20.642105, 21.084436, 21.526767, 
        21.969098, 22.411428, 22.853759, 23.29609, 23.738421, 
        24.180752, 24.623082, 25.065413, 25.507744, 26.097519, 
        26.539849, 26.98218, 27.424511, 27.866842, 28.456616, 
        28.898947, 29.341278, 29.931052, 30.373383, 30.815714, 
        31.405488, 31.847819, 32.437594, 32.879924, 33.469699, 
        33.91203, 34.501804, 34.944135, 35.533909, 35.97624, 
        36.566015, 37.155789, 37.59812, 38.187894, 38.777669, 
        39.22, 39.809774, 40.399548, 40.989323, 41.579097, 
        42.021428, 42.611203, 43.200977, 43.790751, 44.380526, 
        44.9703, 45.560075, 46.149849, 46.739624, 47.329398, 
        47.919172, 48.508947, 49.098721, 49.688496, 50.27827, 
        50.868045, 51.457819, 52.047593, 52.784811, 53.374586, 
        53.96436, 54.554135, 55.291353, 55.881127, 56.470902, 
        57.060676, 57.797894, 58.387669, 59.124887, 59.714661, 
        60.304435, 61.041653, 61.631428, 62.368646, 62.95842, 
        63.695638, 64.285413, 65.022631, 65.612405, 66.349623, 
        67.086841, 67.676616, 68.413834, 69.151052, 69.740826, 
        70.478044, 71.215262, 71.95248, 72.542255, 73.279473, 
        74.016691, 74.753909, 75.491127, 76.080901, 76.818119, 
        77.555338, 78.292556, 79.029774, 79.766992, 80.50421, 
        81.241428, 81.978646, 82.715864, 83.453082, 84.1903, 
        85.074962, 85.81218, 86.549398, 87.286616, 88.023834, 
        88.761052, 89.645713, 90.382931, 91.120149, 92.004811, 
        92.742029, 93.479247, 94.363909, 95.101127, 95.838345, 
        96.723007, 97.460225, 98.344886, 99.082104, 99.819322, 
        100.70398, 101.4412, 102.32586, 103.21053, 103.94774, 
        104.8324, 105.56962, 106.45428, 107.33895, 108.07616, 
        108.96083, 109.84549, 110.58271, 111.46737, 112.35203, 
        113.23669, 113.97391, 114.85857, 115.74323, 116.62789, 
        117.51256, 118.39722, 119.28188, 120.0191, 120.90376, 
        121.78842, 122.67308, 123.55774, 124.4424, 125.32707, 
        126.21173, 127.09639, 127.98105, 129.01316, 129.89782, 
        130.78248, 131.66714, 132.5518, 133.43646, 134.32113, 
        135.35323, 136.23789, 137.12255, 138.00722, 139.03932, 
        139.92398, 140.80865, 141.84075, 142.72541, 143.61007, 
        144.64218, 145.52684, 146.55895, 147.44361, 148.32827, 
        149.36037, 150.24504, 150.83481, 0, 0, 
        0.27229209, 0.40843813, 0.54458417, 0.68073022, 0.9530223, 
        1.0891683, 1.2253144, 1.3614604, 1.6337525, 1.7698986, 
        2.0421906, 2.1783367, 2.3144827, 2.5867748, 2.7229209, 
        2.9952129, 3.131359, 3.4036511, 3.6759432, 3.8120892, 
        4.0843813, 4.3566734, 4.4928194, 4.7651115, 5.0374036, 
        5.3096957, 5.5819878, 5.7181338, 5.9904259, 6.262718, 
        6.5350101, 6.8073022, 7.0795942, 7.3518863, 7.6241784, 
        7.8964705, 8.1687626, 8.5772007, 8.8494928, 9.1217849, 
        9.394077, 9.6663691, 9.9386611, 10.347099, 10.619391, 
        10.891683, 11.300122, 11.572414, 11.844706, 12.253144, 
        12.525436, 12.933874, 13.206166, 13.614604, 13.886896, 
        14.295335, 14.567627, 14.976065, 15.384503, 15.656795, 
        16.065233, 16.473671, 16.745963, 17.154401, 17.56284, 
        17.971278, 18.379716, 18.652008, 19.060446, 19.468884, 
        19.877322, 20.28576, 20.694199, 21.102637, 21.511075, 
        21.919513, 22.327951, 22.736389, 23.144827, 23.553265, 
        24.09785, 24.506288, 24.914726, 25.323164, 25.731602, 
        26.276186, 26.684624, 27.093063, 27.637647, 28.046085, 
        28.454523, 28.999107, 29.407545, 29.952129, 30.360568, 
        30.905152, 31.31359, 31.858174, 32.266612, 32.811196, 
        33.219635, 33.764219, 34.308803, 34.717241, 35.261825, 
        35.806409, 36.214847, 36.759432, 37.304016, 37.8486, 
        38.393184, 38.801622, 39.346206, 39.890791, 40.435375, 
        40.979959, 41.524543, 42.069127, 42.613712, 43.158296, 
        43.70288, 44.247464, 44.792048, 45.336632, 45.881217, 
        46.425801, 46.970385, 47.514969, 48.059553, 48.740283, 
        49.284868, 49.829452, 50.374036, 51.054766, 51.59935, 
        52.143935, 52.688519, 53.369249, 53.913833, 54.594563, 
        55.139147, 55.683732, 56.364462, 56.909046, 57.589776, 
        58.13436, 58.815091, 59.359675, 60.040405, 60.584989, 
        61.265719, 61.94645, 62.491034, 63.171764, 63.852494, 
        64.397078, 65.077809, 65.758539, 66.439269, 66.983853, 
        67.664583, 68.345314, 69.026044, 69.706774, 70.251358, 
        70.932088, 71.612819, 72.293549, 72.974279, 73.655009, 
        74.33574, 75.01647, 75.6972, 76.37793, 77.05866, 
        77.739391, 78.556267, 79.236997, 79.917727, 80.598458, 
        81.279188, 81.959918, 82.776794, 83.457524, 84.138255, 
        84.955131, 85.635861, 86.316591, 87.133468, 87.814198, 
        88.494928, 89.311804, 89.992535, 90.809411, 91.490141, 
        92.170871, 92.987747, 93.668478, 94.485354, 95.30223, 
        95.98296, 96.799837, 97.480567, 98.297443, 99.114319, 
        99.79505, 100.61193, 101.4288, 102.10953, 102.92641, 
        103.74328, 104.56016, 105.24089, 106.05777, 106.87464, 
        107.69152, 108.5084, 109.32527, 110.14215, 110.82288, 
        111.63976, 112.45663, 113.27351, 114.09038, 114.90726, 
        115.72414, 116.54101, 117.35789, 118.17477, 119.12779, 
        119.94466, 120.76154, 121.57842, 122.39529, 123.21217, 
        124.02905, 124.98207, 125.79894, 126.61582, 127.4327, 
        128.38572, 129.20259, 130.01947, 130.97249, 131.78937, 
        132.60625, 133.55927, 134.37614, 135.32917, 136.14604, 
        136.96292, 137.91594, 138.73282, 139.2774, 0, 
        0, 0.25114638, 0.37671957, 0.50229277, 0.62786596, 
        0.87901234, 1.0045855, 1.1301587, 1.2557319, 1.5068783, 
        1.6324515, 1.8835979, 2.0091711, 2.1347443, 2.3858906, 
        2.5114638, 2.7626102, 2.8881834, 3.1393298, 3.3904762, 
        3.5160494, 3.7671957, 4.0183421, 4.1439153, 4.3950617, 
        4.6462081, 4.8973545, 5.1485009, 5.274074, 5.5252204, 
        5.7763668, 6.0275132, 6.2786596, 6.529806, 6.7809523, 
        7.0320987, 7.2832451, 7.5343915, 7.9111111, 8.1622574, 
        8.4134038, 8.6645502, 8.9156966, 9.166843, 9.5435626, 
        9.7947089, 10.045855, 10.422575, 10.673721, 10.924868, 
        11.301587, 11.552734, 11.929453, 12.1806, 12.557319, 
        12.808466, 13.185185, 13.436331, 13.813051, 14.189771, 
        14.440917, 14.817637, 15.194356, 15.445503, 15.822222, 
        16.198942, 16.575661, 16.952381, 17.203527, 17.580247, 
        17.956966, 18.333686, 18.710406, 19.087125, 19.463845, 
        19.840564, 20.217284, 20.594003, 20.970723, 21.347443, 
        21.724162, 22.226455, 22.603174, 22.979894, 23.356614, 
        23.733333, 24.235626, 24.612346, 24.989065, 25.491358, 
        25.868077, 26.244797, 26.74709, 27.123809, 27.626102, 
        28.002822, 28.505114, 28.881834, 29.384127, 29.760846, 
        30.263139, 30.639859, 31.142151, 31.644444, 32.021164, 
        32.523457, 33.025749, 33.402469, 33.904762, 34.407054, 
        34.909347, 35.41164, 35.78836, 36.290652, 36.792945, 
        37.295238, 37.797531, 38.299823, 38.802116, 39.304409, 
        39.806702, 40.308994, 40.811287, 41.31358, 41.815873, 
        42.318166, 42.820458, 43.322751, 43.825044, 44.327337, 
        44.955203, 45.457495, 45.959788, 46.462081, 47.089947, 
        47.59224, 48.094532, 48.596825, 49.224691, 49.726984, 
        50.35485, 50.857143, 51.359435, 51.987301, 52.489594, 
        53.11746, 53.619753, 54.247619, 54.749911, 55.377777, 
        55.88007, 56.507936, 57.135802, 57.638095, 58.265961, 
        58.893827, 59.39612, 60.023986, 60.651851, 61.279717, 
        61.78201, 62.409876, 63.037742, 63.665608, 64.293474, 
        64.795767, 65.423633, 66.051499, 66.679365, 67.307231, 
        67.935097, 68.562963, 69.190829, 69.818694, 70.44656, 
        71.074426, 71.702292, 72.455731, 73.083597, 73.711463, 
        74.339329, 74.967195, 75.595061, 76.3485, 76.976366, 
        77.604232, 78.357671, 78.985537, 79.613403, 80.366843, 
        80.994709, 81.622574, 82.376014, 83.00388, 83.757319, 
        84.385185, 85.013051, 85.76649, 86.394356, 87.147795, 
        87.901234, 88.5291, 89.282539, 89.910405, 90.663844, 
        91.417283, 92.045149, 92.798589, 93.552028, 94.179894, 
        94.933333, 95.686772, 96.440211, 97.068077, 97.821516, 
        98.574955, 99.328394, 100.08183, 100.83527, 101.58871, 
        102.21658, 102.97002, 103.72346, 104.4769, 105.23033, 
        105.98377, 106.73721, 107.49065, 108.24409, 108.99753, 
        109.87654, 110.62998, 111.38342, 112.13686, 112.8903, 
        113.64374, 114.39718, 115.27619, 116.02963, 116.78307, 
        117.53651, 118.41552, 119.16896, 119.9224, 120.80141, 
        121.55485, 122.30829, 123.1873, 123.94074, 124.81975, 
        125.57319, 126.32663, 127.20564, 127.95908, 128.46137, 
        0, 0, 0.23109399, 0.34664098, 0.46218798, 
        0.57773497, 0.80882896, 0.92437596, 1.039923, 1.1554699, 
        1.3865639, 1.5021109, 1.7332049, 1.8487519, 1.9642989, 
        2.1953929, 2.3109399, 2.5420339, 2.6575809, 2.8886749, 
        3.1197689, 3.2353159, 3.4664098, 3.6975038, 3.8130508, 
        4.0441448, 4.2752388, 4.5063328, 4.7374268, 4.8529738, 
        5.0840678, 5.3151618, 5.5462558, 5.7773497, 6.0084437, 
        6.2395377, 6.4706317, 6.7017257, 6.9328197, 7.2794607, 
        7.5105547, 7.7416487, 7.9727426, 8.2038366, 8.4349306, 
        8.7815716, 9.0126656, 9.2437596, 9.5904006, 9.8214946, 
        10.052589, 10.39923, 10.630324, 10.976965, 11.208059, 
        11.554699, 11.785793, 12.132434, 12.363528, 12.710169, 
        13.05681, 13.287904, 13.634545, 13.981186, 14.21228, 
        14.558921, 14.905562, 15.252203, 15.598844, 15.829938, 
        16.176579, 16.52322, 16.869861, 17.216502, 17.563143, 
        17.909784, 18.256425, 18.603066, 18.949707, 19.296348, 
        19.642989, 19.98963, 20.451818, 20.798459, 21.1451, 
        21.491741, 21.838382, 22.30057, 22.647211, 22.993852, 
        23.45604, 23.802681, 24.149322, 24.61151, 24.958151, 
        25.420339, 25.76698, 26.229168, 26.575809, 27.037997, 
        27.384638, 27.846826, 28.193467, 28.655655, 29.117843, 
        29.464484, 29.926672, 30.38886, 30.735501, 31.197689, 
        31.659877, 32.122065, 32.584253, 32.930894, 33.393082, 
        33.85527, 34.317457, 34.779645, 35.241833, 35.704021, 
        36.166209, 36.628397, 37.090585, 37.552773, 38.014961, 
        38.477149, 38.939337, 39.401525, 39.863713, 40.325901, 
        40.788089, 41.365824, 41.828012, 42.2902, 42.752388, 
        43.330123, 43.792311, 44.254499, 44.716687, 45.294422, 
        45.75661, 46.334345, 46.796533, 47.258721, 47.836456, 
        48.298644, 48.876379, 49.338567, 49.916302, 50.37849, 
        50.956225, 51.418413, 51.996148, 52.573883, 53.036071, 
        53.613806, 54.191541, 54.653729, 55.231464, 55.809199, 
        56.386934, 56.849121, 57.426856, 58.004591, 58.582326, 
        59.160061, 59.622249, 60.199984, 60.777719, 61.355454, 
        61.933189, 62.510924, 63.088659, 63.666394, 64.244129, 
        64.821864, 65.399599, 65.977334, 66.670616, 67.248351, 
        67.826086, 68.403821, 68.981556, 69.559291, 70.252573, 
        70.830308, 71.408043, 72.101325, 72.67906, 73.256795, 
        73.950077, 74.527812, 75.105547, 75.798829, 76.376564, 
        77.069846, 77.647581, 78.225316, 78.918598, 79.496332, 
        80.189614, 80.882896, 81.460631, 82.153913, 82.731648, 
        83.42493, 84.118212, 84.695947, 85.389229, 86.082511, 
        86.660246, 87.353528, 88.04681, 88.740092, 89.317827, 
        90.011109, 90.704391, 91.397673, 92.090955, 92.784237, 
        93.477519, 94.055254, 94.748536, 95.441818, 96.1351, 
        96.828382, 97.521664, 98.214946, 98.908228, 99.60151, 
        100.29479, 101.10362, 101.7969, 102.49018, 103.18347, 
        103.87675, 104.57003, 105.26331, 106.07214, 106.76542, 
        107.45871, 108.15199, 108.96082, 109.6541, 110.34738, 
        111.15621, 111.84949, 112.54277, 113.3516, 114.04488, 
        114.85371, 115.54699, 116.24028, 117.04911, 117.74239, 
        118.20458, 0, 0, 0.2111512, 0.3167268, 
        0.4223024, 0.527878, 0.7390292, 0.8446048, 0.9501804, 
        1.055756, 1.2669072, 1.3724828, 1.583634, 1.6892096, 
        1.7947852, 2.0059364, 2.111512, 2.3226632, 2.4282388, 
        2.63939, 2.8505412, 2.9561168, 3.167268, 3.3784192, 
        3.4839948, 3.695146, 3.9062972, 4.1174484, 4.3285996, 
        4.4341752, 4.6453264, 4.8564776, 5.0676288, 5.27878, 
        5.4899312, 5.7010824, 5.9122336, 6.1233848, 6.334536, 
        6.6512628, 6.862414, 7.0735652, 7.2847164, 7.4958676, 
        7.7070188, 8.0237456, 8.2348968, 8.446048, 8.7627748, 
        8.973926, 9.1850772, 9.501804, 9.7129552, 10.029682, 
        10.240833, 10.55756, 10.768711, 11.085438, 11.296589, 
        11.613316, 11.930043, 12.141194, 12.457921, 12.774648, 
        12.985799, 13.302526, 13.619252, 13.935979, 14.252706, 
        14.463857, 14.780584, 15.097311, 15.414038, 15.730764, 
        16.047491, 16.364218, 16.680945, 16.997672, 17.314398, 
        17.631125, 17.947852, 18.264579, 18.686881, 19.003608, 
        19.320335, 19.637062, 19.953788, 20.376091, 20.692818, 
        21.009544, 21.431847, 21.748574, 22.0653, 22.487603, 
        22.80433, 23.226632, 23.543359, 23.965661, 24.282388, 
        24.70469, 25.021417, 25.44372, 25.760446, 26.182749, 
        26.605051, 26.921778, 27.34408, 27.766383, 28.08311, 
        28.505412, 28.927714, 29.350017, 29.772319, 30.089046, 
        30.511348, 30.933651, 31.355953, 31.778256, 32.200558, 
        32.62286, 33.045163, 33.467465, 33.889768, 34.31207, 
        34.734372, 35.156675, 35.578977, 36.00128, 36.423582, 
        36.845884, 37.268187, 37.796065, 38.218367, 38.64067, 
        39.062972, 39.59085, 40.013152, 40.435455, 40.857757, 
        41.385635, 41.807938, 42.335816, 42.758118, 43.18042, 
        43.708298, 44.130601, 44.658479, 45.080781, 45.608659, 
        46.030962, 46.55884, 46.981142, 47.50902, 48.036898, 
        48.4592, 48.987078, 49.514956, 49.937259, 50.465137, 
        50.993015, 51.520893, 51.943195, 52.471073, 52.998951, 
        53.526829, 54.054707, 54.47701, 55.004888, 55.532766, 
        56.060644, 56.588522, 57.1164, 57.644278, 58.172156, 
        58.700034, 59.227912, 59.75579, 60.283668, 60.917121, 
        61.444999, 61.972877, 62.500755, 63.028633, 63.556511, 
        64.189965, 64.717843, 65.245721, 65.879174, 66.407052, 
        66.93493, 67.568384, 68.096262, 68.62414, 69.257594, 
        69.785472, 70.418925, 70.946803, 71.474681, 72.108135, 
        72.636013, 73.269466, 73.90292, 74.430798, 75.064252, 
        75.59213, 76.225583, 76.859037, 77.386915, 78.020368, 
        78.653822, 79.1817, 79.815154, 80.448607, 81.082061, 
        81.609939, 82.243392, 82.876846, 83.5103, 84.143753, 
        84.777207, 85.41066, 85.938538, 86.571992, 87.205446, 
        87.838899, 88.472353, 89.105806, 89.73926, 90.372714, 
        91.006167, 91.639621, 92.37865, 93.012104, 93.645557, 
        94.279011, 94.912464, 95.545918, 96.179372, 96.918401, 
        97.551854, 98.185308, 98.818762, 99.557791, 100.19124, 
        100.8247, 101.56373, 102.19718, 102.83063, 103.56966, 
        104.20312, 104.94215, 105.5756, 106.20905, 106.94808, 
        107.58154, 108.00384, 0, 0, 0.19065189, 
        0.28597784, 0.38130379, 0.47662974, 0.66728163, 0.76260758, 
        0.85793353, 0.95325947, 1.1439114, 1.2392373, 1.4298892, 
        1.5252152, 1.6205411, 1.811193, 1.9065189, 2.0971708, 
        2.1924968, 2.3831487, 2.5738006, 2.6691265, 2.8597784, 
        3.0504303, 3.1457563, 3.3364082, 3.5270601, 3.7177119, 
        3.9083638, 4.0036898, 4.1943417, 4.3849936, 4.5756455, 
        4.7662974, 4.9569493, 5.1476012, 5.3382531, 5.5289049, 
        5.7195568, 6.0055347, 6.1961866, 6.3868385, 6.5774904, 
        6.7681423, 6.9587942, 7.244772, 7.4354239, 7.6260758, 
        7.9120536, 8.1027055, 8.2933574, 8.5793353, 8.7699872, 
        9.055965, 9.2466169, 9.5325947, 9.7232466, 10.009224, 
        10.199876, 10.485854, 10.771832, 10.962484, 11.248462, 
        11.53444, 11.725092, 12.011069, 12.297047, 12.583025, 
        12.869003, 13.059655, 13.345633, 13.63161, 13.917588, 
        14.203566, 14.489544, 14.775522, 15.0615, 15.347478, 
        15.633455, 15.919433, 16.205411, 16.491389, 16.872693, 
        17.158671, 17.444648, 17.730626, 18.016604, 18.397908, 
        18.683886, 18.969864, 19.351167, 19.637145, 19.923123, 
        20.304427, 20.590405, 20.971708, 21.257686, 21.63899, 
        21.924968, 22.306272, 22.59225, 22.973553, 23.259531, 
        23.640835, 24.022139, 24.308117, 24.68942, 25.070724, 
        25.356702, 25.738006, 26.11931, 26.500613, 26.881917, 
        27.167895, 27.549199, 27.930503, 28.311806, 28.69311, 
        29.074414, 29.455718, 29.837022, 30.218325, 30.599629, 
        30.980933, 31.362237, 31.74354, 32.124844, 32.506148, 
        32.887452, 33.268756, 33.650059, 34.126689, 34.507993, 
        34.889297, 35.270601, 35.74723, 36.128534, 36.509838, 
        36.891142, 37.367771, 37.749075, 38.225705, 38.607009, 
        38.988312, 39.464942, 39.846246, 40.322876, 40.70418, 
        41.180809, 41.562113, 42.038743, 42.420047, 42.896676, 
        43.373306, 43.75461, 44.23124, 44.707869, 45.089173, 
        45.565803, 46.042433, 46.519062, 46.900366, 47.376996, 
        47.853626, 48.330255, 48.806885, 49.188189, 49.664819, 
        50.141448, 50.618078, 51.094708, 51.571338, 52.047967, 
        52.524597, 53.001227, 53.477856, 53.954486, 54.431116, 
        55.003072, 55.479701, 55.956331, 56.432961, 56.909591, 
        57.38622, 57.958176, 58.434806, 58.911435, 59.483391, 
        59.960021, 60.436651, 61.008606, 61.485236, 61.961866, 
        62.533821, 63.010451, 63.582407, 64.059037, 64.535666, 
        65.107622, 65.584252, 66.156207, 66.728163, 67.204793, 
        67.776749, 68.253378, 68.825334, 69.39729, 69.873919, 
        70.445875, 71.017831, 71.494461, 72.066416, 72.638372, 
        73.210328, 73.686957, 74.258913, 74.830869, 75.402824, 
        75.97478, 76.546736, 77.118691, 77.595321, 78.167277, 
        78.739233, 79.311188, 79.883144, 80.4551, 81.027055, 
        81.599011, 82.170967, 82.742922, 83.410204, 83.98216, 
        84.554115, 85.126071, 85.698027, 86.269982, 86.841938, 
        87.50922, 88.081175, 88.653131, 89.225087, 89.892368, 
        90.464324, 91.03628, 91.703561, 92.275517, 92.847473, 
        93.514754, 94.08671, 94.753992, 95.325947, 95.897903, 
        96.565185, 97.13714, 97.518444, 0, 0, 
        0.16959733, 0.254396, 0.33919467, 0.42399333, 0.59359067, 
        0.67838933, 0.763188, 0.84798667, 1.017584, 1.1023827, 
        1.27198, 1.3567787, 1.4415773, 1.6111747, 1.6959733, 
        1.8655707, 1.9503693, 2.1199667, 2.289564, 2.3743627, 
        2.54396, 2.7135573, 2.798356, 2.9679533, 3.1375507, 
        3.307148, 3.4767453, 3.561544, 3.7311413, 3.9007387, 
        4.070336, 4.2399333, 4.4095307, 4.579128, 4.7487253, 
        4.9183227, 5.08792, 5.342316, 5.5119133, 5.6815107, 
        5.851108, 6.0207053, 6.1903027, 6.4446987, 6.614296, 
        6.7838933, 7.0382893, 7.2078867, 7.377484, 7.63188, 
        7.8014773, 8.0558733, 8.2254707, 8.4798667, 8.649464, 
        8.90386, 9.0734573, 9.3278533, 9.5822493, 9.7518467, 
        10.006243, 10.260639, 10.430236, 10.684632, 10.939028, 
        11.193424, 11.44782, 11.617417, 11.871813, 12.126209, 
        12.380605, 12.635001, 12.889397, 13.143793, 13.398189, 
        13.652585, 13.906981, 14.161377, 14.415773, 14.670169, 
        15.009364, 15.26376, 15.518156, 15.772552, 16.026948, 
        16.366143, 16.620539, 16.874935, 17.214129, 17.468525, 
        17.722921, 18.062116, 18.316512, 18.655707, 18.910103, 
        19.249297, 19.503693, 19.842888, 20.097284, 20.436479, 
        20.690875, 21.030069, 21.369264, 21.62366, 21.962855, 
        22.302049, 22.556445, 22.89564, 23.234835, 23.574029, 
        23.913224, 24.16762, 24.506815, 24.846009, 25.185204, 
        25.524399, 25.863593, 26.202788, 26.541983, 26.881177, 
        27.220372, 27.559567, 27.898761, 28.237956, 28.577151, 
        28.916345, 29.25554, 29.594735, 29.933929, 30.357923, 
        30.697117, 31.036312, 31.375507, 31.7995, 32.138695, 
        32.477889, 32.817084, 33.241077, 33.580272, 34.004265, 
        34.34346, 34.682655, 35.106648, 35.445843, 35.869836, 
        36.209031, 36.633024, 36.972219, 37.396212, 37.735407, 
        38.1594, 38.583393, 38.922588, 39.346581, 39.770575, 
        40.109769, 40.533763, 40.957756, 41.381749, 41.720944, 
        42.144937, 42.568931, 42.992924, 43.416917, 43.756112, 
        44.180105, 44.604099, 45.028092, 45.452085, 45.876079, 
        46.300072, 46.724065, 47.148059, 47.572052, 47.996045, 
        48.420039, 48.928831, 49.352824, 49.776817, 50.200811, 
        50.624804, 51.048797, 51.557589, 51.981583, 52.405576, 
        52.914368, 53.338361, 53.762355, 54.271147, 54.69514, 
        55.119133, 55.627925, 56.051919, 56.560711, 56.984704, 
        57.408697, 57.917489, 58.341483, 58.850275, 59.359067, 
        59.78306, 60.291852, 60.715845, 61.224637, 61.733429, 
        62.157423, 62.666215, 63.175007, 63.599, 64.107792, 
        64.616584, 65.125376, 65.549369, 66.058161, 66.566953, 
        67.075745, 67.584537, 68.093329, 68.602121, 69.026115, 
        69.534907, 70.043699, 70.552491, 71.061283, 71.570075, 
        72.078867, 72.587659, 73.096451, 73.605243, 74.198833, 
        74.707625, 75.216417, 75.725209, 76.234001, 76.742793, 
        77.251585, 77.845176, 78.353968, 78.86276, 79.371552, 
        79.965143, 80.473935, 80.982727, 81.576317, 82.085109, 
        82.593901, 83.187492, 83.696284, 84.289875, 84.798667, 
        85.307459, 85.901049, 86.409841, 86.749036, 0, 
        0, 0.1473171, 0.22097565, 0.2946342, 0.36829274, 
        0.51560984, 0.58926839, 0.66292694, 0.73658549, 0.88390259, 
        0.95756113, 1.1048782, 1.1785368, 1.2521953, 1.3995124, 
        1.473171, 1.6204881, 1.6941466, 1.8414637, 1.9887808, 
        2.0624394, 2.2097565, 2.3570736, 2.4307321, 2.5780492, 
        2.7253663, 2.8726834, 3.0200005, 3.0936591, 3.2409761, 
        3.3882932, 3.5356103, 3.6829274, 3.8302445, 3.9775616, 
        4.1248787, 4.2721958, 4.4195129, 4.6404886, 4.7878057, 
        4.9351228, 5.0824399, 5.229757, 5.3770741, 5.5980497, 
        5.7453668, 5.8926839, 6.1136596, 6.2609766, 6.4082937, 
        6.6292694, 6.7765865, 6.9975621, 7.1448792, 7.3658549, 
        7.513172, 7.7341476, 7.8814647, 8.1024404, 8.323416, 
        8.4707331, 8.6917088, 8.9126844, 9.0600015, 9.2809772, 
        9.5019528, 9.7229284, 9.9439041, 10.091221, 10.312197, 
        10.533172, 10.754148, 10.975124, 11.196099, 11.417075, 
        11.638051, 11.859026, 12.080002, 12.300978, 12.521953, 
        12.742929, 13.037563, 13.258539, 13.479514, 13.70049, 
        13.921466, 14.2161, 14.437076, 14.658051, 14.952685, 
        15.173661, 15.394637, 15.689271, 15.910247, 16.204881, 
        16.425856, 16.720491, 16.941466, 17.2361, 17.457076, 
        17.75171, 17.972686, 18.26732, 18.561954, 18.78293, 
        19.077564, 19.372198, 19.593174, 19.887808, 20.182442, 
        20.477077, 20.771711, 20.992686, 21.287321, 21.581955, 
        21.876589, 22.171223, 22.465857, 22.760492, 23.055126, 
        23.34976, 23.644394, 23.939028, 24.233663, 24.528297, 
        24.822931, 25.117565, 25.412199, 25.706834, 26.001468, 
        26.36976, 26.664395, 26.959029, 27.253663, 27.621956, 
        27.91659, 28.211224, 28.505858, 28.874151, 29.168785, 
        29.537078, 29.831712, 30.126346, 30.494639, 30.789273, 
        31.157566, 31.4522, 31.820493, 32.115127, 32.48342, 
        32.778054, 33.146347, 33.51464, 33.809274, 34.177567, 
        34.545859, 34.840494, 35.208786, 35.577079, 35.945372, 
        36.240006, 36.608299, 36.976592, 37.344884, 37.713177, 
        38.007811, 38.376104, 38.744397, 39.112689, 39.480982, 
        39.849275, 40.217568, 40.58586, 40.954153, 41.322446, 
        41.690739, 42.059031, 42.500983, 42.869275, 43.237568, 
        43.605861, 43.974154, 44.342446, 44.784398, 45.15269, 
        45.520983, 45.962934, 46.331227, 46.69952, 47.141471, 
        47.509764, 47.878057, 48.320008, 48.688301, 49.130252, 
        49.498545, 49.866838, 50.308789, 50.677082, 51.119033, 
        51.560984, 51.929277, 52.371228, 52.739521, 53.181472, 
        53.623424, 53.991716, 54.433668, 54.875619, 55.243912, 
        55.685863, 56.127814, 56.569765, 56.938058, 57.38001, 
        57.821961, 58.263912, 58.705863, 59.147815, 59.589766, 
        59.958059, 60.40001, 60.841961, 61.283913, 61.725864, 
        62.167815, 62.609766, 63.051718, 63.493669, 63.93562, 
        64.45123, 64.893182, 65.335133, 65.777084, 66.219035, 
        66.660987, 67.102938, 67.618548, 68.060499, 68.50245, 
        68.944402, 69.460012, 69.901963, 70.343914, 70.859524, 
        71.301475, 71.743427, 72.259036, 72.700988, 73.216598, 
        73.658549, 74.1005, 74.61611, 75.058061, 75.352695, 
        0, 0, 0.12541802, 0.18812703, 0.25083604, 
        0.31354505, 0.43896307, 0.50167207, 0.56438108, 0.62709009, 
        0.75250811, 0.81521712, 0.94063514, 1.0033441, 1.0660532, 
        1.1914712, 1.2541802, 1.3795982, 1.4423072, 1.5677252, 
        1.6931433, 1.7558523, 1.8812703, 2.0066883, 2.0693973, 
        2.1948153, 2.3202333, 2.4456514, 2.5710694, 2.6337784, 
        2.7591964, 2.8846144, 3.0100324, 3.1354505, 3.2608685, 
        3.3862865, 3.5117045, 3.6371225, 3.7625406, 3.9506676, 
        4.0760856, 4.2015036, 4.3269216, 4.4523397, 4.5777577, 
        4.7658847, 4.8913027, 5.0167207, 5.2048478, 5.3302658, 
        5.4556838, 5.6438108, 5.7692289, 5.9573559, 6.0827739, 
        6.2709009, 6.396319, 6.584446, 6.709864, 6.897991, 
        7.0861181, 7.2115361, 7.3996631, 7.5877901, 7.7132081, 
        7.9013352, 8.0894622, 8.2775892, 8.4657163, 8.5911343, 
        8.7792613, 8.9673883, 9.1555154, 9.3436424, 9.5317694, 
        9.7198964, 9.9080235, 10.096151, 10.284278, 10.472405, 
        10.660532, 10.848659, 11.099495, 11.287622, 11.475749, 
        11.663876, 11.852003, 12.102839, 12.290966, 12.479093, 
        12.729929, 12.918056, 13.106183, 13.357019, 13.545146, 
        13.795982, 13.984109, 14.234945, 14.423072, 14.673908, 
        14.862035, 15.112871, 15.300998, 15.551834, 15.80267, 
        15.990797, 16.241633, 16.492469, 16.680596, 16.931433, 
        17.182269, 17.433105, 17.683941, 17.872068, 18.122904, 
        18.37374, 18.624576, 18.875412, 19.126248, 19.377084, 
        19.62792, 19.878756, 20.129592, 20.380428, 20.631264, 
        20.8821, 21.132936, 21.383772, 21.634608, 21.885444, 
        22.13628, 22.449825, 22.700661, 22.951497, 23.202333, 
        23.515878, 23.766715, 24.017551, 24.268387, 24.581932, 
        24.832768, 25.146313, 25.397149, 25.647985, 25.96153, 
        26.212366, 26.525911, 26.776747, 27.090292, 27.341128, 
        27.654673, 27.905509, 28.219054, 28.532599, 28.783435, 
        29.09698, 29.410525, 29.661361, 29.974906, 30.288452, 
        30.601997, 30.852833, 31.166378, 31.479923, 31.793468, 
        32.107013, 32.357849, 32.671394, 32.984939, 33.298484, 
        33.612029, 33.925574, 34.239119, 34.552664, 34.866209, 
        35.179754, 35.493299, 35.806844, 36.183098, 36.496643, 
        36.810188, 37.123734, 37.437279, 37.750824, 38.127078, 
        38.440623, 38.754168, 39.130422, 39.443967, 39.757512, 
        40.133766, 40.447311, 40.760856, 41.13711, 41.450655, 
        41.826909, 42.140454, 42.453999, 42.830253, 43.143798, 
        43.520052, 43.896307, 44.209852, 44.586106, 44.899651, 
        45.275905, 45.652159, 45.965704, 46.341958, 46.718212, 
        47.031757, 47.408011, 47.784265, 48.160519, 48.474064, 
        48.850318, 49.226572, 49.602826, 49.97908, 50.355334, 
        50.731589, 51.045134, 51.421388, 51.797642, 52.173896, 
        52.55015, 52.926404, 53.302658, 53.678912, 54.055166, 
        54.43142, 54.870383, 55.246637, 55.622891, 55.999145, 
        56.375399, 56.751653, 57.127907, 57.566871, 57.943125, 
        58.319379, 58.695633, 59.134596, 59.51085, 59.887104, 
        60.326067, 60.702321, 61.078575, 61.517538, 61.893792, 
        62.332755, 62.709009, 63.085263, 63.524226, 63.90048, 
        64.151317, 0, 0.13401506, 0.26803012, 0.40204518, 
        0.53606024, 0.67007529, 0.93810541, 1.0721205, 1.2061355, 
        1.3401506, 1.6081807, 1.7421958, 2.0102259, 2.1442409, 
        2.278256, 2.5462861, 2.6803012, 2.9483313, 3.0823464, 
        3.3503765, 3.6184066, 3.7524216, 4.0204518, 4.2884819, 
        4.4224969, 4.6905271, 4.9585572, 5.2265873, 5.4946174, 
        5.6286325, 5.8966626, 6.1646927, 6.4327228, 6.7007529, 
        6.9687831, 7.2368132, 7.5048433, 7.7728734, 8.0409035, 
        8.4429487, 8.7109788, 8.9790089, 9.2470391, 9.5150692, 
        9.7830993, 10.185144, 10.453175, 10.721205, 11.12325, 
        11.39128, 11.65931, 12.061355, 12.329385, 12.731431, 
        12.999461, 13.401506, 13.669536, 14.071581, 14.339611, 
        14.741656, 15.143702, 15.411732, 15.813777, 16.215822, 
        16.483852, 16.885897, 17.287943, 17.689988, 18.092033, 
        18.360063, 18.762108, 19.164153, 19.566199, 19.968244, 
        20.370289, 20.772334, 21.174379, 21.576424, 21.97847, 
        22.380515, 22.78256, 23.184605, 23.720665, 24.122711, 
        24.524756, 24.926801, 25.328846, 25.864906, 26.266952, 
        26.668997, 27.205057, 27.607102, 28.009147, 28.545208, 
        28.947253, 29.483313, 29.885358, 30.421418, 30.823464, 
        31.359524, 31.761569, 32.297629, 32.699674, 33.235735, 
        33.771795, 34.17384, 34.7099, 35.24596, 35.648006, 
        36.184066, 36.720126, 37.256186, 37.792247, 38.194292, 
        38.730352, 39.266412, 39.802472, 40.338533, 40.874593, 
        41.410653, 41.946713, 42.482774, 43.018834, 43.554894, 
        44.090954, 44.627015, 45.163075, 45.699135, 46.235195, 
        46.771256, 47.307316, 47.977391, 48.513451, 49.049512, 
        49.585572, 50.255647, 50.791707, 51.327768, 51.863828, 
        52.533903, 53.069963, 53.740039, 54.276099, 54.812159, 
        55.482234, 56.018295, 56.68837, 57.22443, 57.894505, 
        58.430566, 59.100641, 59.636701, 60.306776, 60.976852, 
        61.512912, 62.182987, 62.853063, 63.389123, 64.059198, 
        64.729273, 65.399349, 65.935409, 66.605484, 67.27556, 
        67.945635, 68.61571, 69.15177, 69.821846, 70.491921, 
        71.161996, 71.832072, 72.502147, 73.172222, 73.842297, 
        74.512373, 75.182448, 75.852523, 76.522599, 77.326689, 
        77.996764, 78.66684, 79.336915, 80.00699, 80.677065, 
        81.481156, 82.151231, 82.821306, 83.625397, 84.295472, 
        84.965547, 85.769638, 86.439713, 87.109788, 87.913879, 
        88.583954, 89.388044, 90.05812, 90.728195, 91.532285, 
        92.20236, 93.006451, 93.810541, 94.480616, 95.284707, 
        95.954782, 96.758872, 97.562963, 98.233038, 99.037128, 
        99.841219, 100.51129, 101.31538, 102.11947, 102.92357, 
        103.59364, 104.39773, 105.20182, 106.00591, 106.81, 
        107.61409, 108.41818, 109.08826, 109.89235, 110.69644, 
        111.50053, 112.30462, 113.10871, 113.9128, 114.71689, 
        115.52098, 116.32507, 117.26318, 118.06727, 118.87136, 
        119.67545, 120.47954, 121.28363, 122.08772, 123.02582, 
        123.82991, 124.634, 125.4381, 126.3762, 127.18029, 
        127.98438, 128.92249, 129.72658, 130.53067, 131.46877, 
        132.27286, 133.21097, 134.01506, 134.81915, 135.75725, 
        136.56134, 137.09741, 0, 0.10460836, 0.20921672, 
        0.31382508, 0.41843344, 0.5230418, 0.73225853, 0.83686689, 
        0.94147525, 1.0460836, 1.2553003, 1.3599087, 1.5691254, 
        1.6737338, 1.7783421, 1.9875589, 2.0921672, 2.3013839, 
        2.4059923, 2.615209, 2.8244257, 2.9290341, 3.1382508, 
        3.3474675, 3.4520759, 3.6612926, 3.8705094, 4.0797261, 
        4.2889428, 4.3935512, 4.6027679, 4.8119846, 5.0212013, 
        5.230418, 5.4396348, 5.6488515, 5.8580682, 6.0672849, 
        6.2765017, 6.5903267, 6.7995435, 7.0087602, 7.2179769, 
        7.4271936, 7.6364103, 7.9502354, 8.1594522, 8.3686689, 
        8.682494, 8.8917107, 9.1009274, 9.4147525, 9.6239692, 
        9.9377943, 10.147011, 10.460836, 10.670053, 10.983878, 
        11.193095, 11.50692, 11.820745, 12.029962, 12.343787, 
        12.657612, 12.866828, 13.180653, 13.494479, 13.808304, 
        14.122129, 14.331345, 14.645171, 14.958996, 15.272821, 
        15.586646, 15.900471, 16.214296, 16.528121, 16.841946, 
        17.155771, 17.469596, 17.783421, 18.097246, 18.51568, 
        18.829505, 19.14333, 19.457155, 19.77098, 20.189414, 
        20.503239, 20.817064, 21.235497, 21.549322, 21.863147, 
        22.281581, 22.595406, 23.013839, 23.327664, 23.746098, 
        24.059923, 24.478356, 24.792182, 25.210615, 25.52444, 
        25.942874, 26.361307, 26.675132, 27.093565, 27.511999, 
        27.825824, 28.244257, 28.662691, 29.081124, 29.499558, 
        29.813383, 30.231816, 30.65025, 31.068683, 31.487117, 
        31.90555, 32.323984, 32.742417, 33.16085, 33.579284, 
        33.997717, 34.416151, 34.834584, 35.253018, 35.671451, 
        36.089885, 36.508318, 36.926751, 37.449793, 37.868227, 
        38.28666, 38.705094, 39.228135, 39.646569, 40.065002, 
        40.483436, 41.006477, 41.424911, 41.947953, 42.366386, 
        42.78482, 43.307861, 43.726295, 44.249337, 44.66777, 
        45.190812, 45.609245, 46.132287, 46.550721, 47.073762, 
        47.596804, 48.015238, 48.538279, 49.061321, 49.479755, 
        50.002797, 50.525838, 51.04888, 51.467314, 51.990355, 
        52.513397, 53.036439, 53.559481, 53.977914, 54.500956, 
        55.023998, 55.54704, 56.070081, 56.593123, 57.116165, 
        57.639207, 58.162249, 58.68529, 59.208332, 59.731374, 
        60.359024, 60.882066, 61.405108, 61.92815, 62.451191, 
        62.974233, 63.601883, 64.124925, 64.647967, 65.275617, 
        65.798659, 66.321701, 66.949351, 67.472393, 67.995435, 
        68.623085, 69.146127, 69.773777, 70.296819, 70.81986, 
        71.447511, 71.970552, 72.598202, 73.225853, 73.748894, 
        74.376545, 74.899586, 75.527237, 76.154887, 76.677929, 
        77.305579, 77.933229, 78.456271, 79.083921, 79.711571, 
        80.339221, 80.862263, 81.489913, 82.117563, 82.745213, 
        83.372864, 84.000514, 84.628164, 85.151206, 85.778856, 
        86.406506, 87.034156, 87.661806, 88.289457, 88.917107, 
        89.544757, 90.172407, 90.800057, 91.532316, 92.159966, 
        92.787616, 93.415266, 94.042916, 94.670567, 95.298217, 
        96.030475, 96.658125, 97.285776, 97.913426, 98.645684, 
        99.273335, 99.900985, 100.63324, 101.26089, 101.88854, 
        102.6208, 103.24845, 103.98071, 104.60836, 105.23601, 
        105.96827, 106.59592, 107.01435, 0, 0.5, 
        1, 1.5, 2, 2.5, 3, 
        3.5, 4, 4.5, 5, 5.5, 
        6, 6.5, 7, 7.5, 8, 
        8.5, 9, 9.5, 10, 10.5, 
        11, 11.5, 12, 12.5, 13, 
        13.5, 14, 14.5, 15, 15.5, 
        16, 16.5, 17, 17.5, 18, 
        18.5, 19, 19.5, 20, 20.5, 
        21, 21.5, 22, 22.5, 23, 
        23.5, 24, 24.5, 25, 25.5, 
        26, 26.5, 27, 27.5, 28, 
        28.5, 29, 29.5, 30, 30.5, 
        31, 31.5, 32, 32.5, 33, 
        33.5, 34, 34.5, 35, 35.5, 
        36, 36.5, 37, 37.5, 38, 
        38.5, 39, 39.5, 40, 40.5, 
        41, 41.5, 42, 42.5, 43, 
        43.5, 44, 44.5, 45, 45.5, 
        46, 46.5, 47, 47.5, 48, 
        48.5, 49, 49.5, 50, 50.5, 
        51, 51.5, 52, 52.5, 53, 
        53.5, 54, 54.5, 55, 55.5, 
        56, 56.5, 57, 57.5, 58, 
        58.5, 59, 59.5, 60, 60.5, 
        61, 61.5, 62, 62.5, 63, 
        63.5, 64, 64.5, 65, 65.5, 
        66, 66.5, 67, 67.5, 68, 
        68.5, 69, 69.5, 70, 70.5, 
        71, 71.5, 72, 72.5, 73, 
        73.5, 74, 74.5, 75, 75.5, 
        76, 76.5, 77, 77.5, 78, 
        78.5, 79, 79.5, 80, 80.5, 
        81, 81.5, 82, 82.5, 83, 
        83.5, 84, 84.5, 85, 85.5, 
        86, 86.5, 87, 87.5, 88, 
        88.5, 89, 89.5, 90, 90.5, 
        91, 91.5, 92, 92.5, 93, 
        93.5, 94, 94.5, 95, 95.5, 
        96, 96.5, 97, 97.5, 98, 
        98.5, 99, 99.5, 100, 100.5, 
        101, 101.5, 102, 102.5, 103, 
        103.5, 104, 104.5, 105, 105.5, 
        106, 106.5, 107, 107.5, 108, 
        108.5, 109, 109.5, 110, 110.5, 
        111, 111.5, 112, 112.5, 113, 
        113.5, 114, 114.5, 115, 115.5, 
        116, 116.5, 117, 117.5, 118, 
        118.5, 119, 119.5, 120, 120.5, 
        121, 121.5, 122, 122.5, 123, 
        123.5, 124, 124.5, 125, 125.5, 
        126, 126.5, 127, 127.5, 0, 
        0.5, 1, 1.5, 2, 2.5, 
        3, 3.5, 4, 4.5, 5, 
        5.5, 6, 6.5, 7, 7.5, 
        8, 8.5, 9, 9.5, 10, 
        10.5, 11, 11.5, 12, 12.5, 
        13, 13.5, 14, 14.5, 15, 
        15.5, 16, 16.5, 17, 17.5, 
        18, 18.5, 19, 19.5, 20, 
        20.5, 21, 21.5, 22, 22.5, 
        23, 23.5, 24, 24.5, 25, 
        25.5, 26, 26.5, 27, 27.5, 
        28, 28.5, 29, 29.5, 30, 
        30.5, 31, 31.5, 32, 32.5, 
        33, 33.5, 34, 34.5, 35, 
        35.5, 36, 36.5, 37, 37.5, 
        38, 38.5, 39, 39.5, 40, 
        40.5, 41, 41.5, 42, 42.5, 
        43, 43.5, 44, 44.5, 45, 
        45.5, 46, 46.5, 47, 47.5, 
        48, 48.5, 49, 49.5, 50, 
        50.5, 51, 51.5, 52, 52.5, 
        53, 53.5, 54, 54.5, 55, 
        55.5, 56, 56.5, 57, 57.5, 
        58, 58.5, 59, 59.5, 60, 
        60.5, 61, 61.5, 62, 62.5, 
        63, 63.5, 64, 64.5, 65, 
        65.5, 66, 66.5, 67, 67.5, 
        68, 68.5, 69, 69.5, 70, 
        70.5, 71, 71.5, 72, 72.5, 
        73, 73.5, 74, 74.5, 75, 
        75.5, 76, 76.5, 77, 77.5, 
        78, 78.5, 79, 79.5, 80, 
        80.5, 81, 81.5, 82, 82.5, 
        83, 83.5, 84, 84.5, 85, 
        85.5, 86, 86.5, 87, 87.5, 
        88, 88.5, 89, 89.5, 90, 
        90.5, 91, 91.5, 92, 92.5, 
        93, 93.5, 94, 94.5, 95, 
        95.5, 96, 96.5, 97, 97.5, 
        98, 98.5, 99, 99.5, 100, 
        100.5, 101, 101.5, 102, 102.5, 
        103, 103.5, 104, 104.5, 105, 
        105.5, 106, 106.5, 107, 107.5, 
        108, 108.5, 109, 109.5, 110, 
        110.5, 111, 111.5, 112, 112.5, 
        113, 113.5, 114, 114.5, 115, 
        115.5, 116, 116.5, 117, 117.5, 
        118, 118.5, 119, 119.5, 120, 
        120.5, 121, 121.5, 122, 122.5, 
        123, 123.5, 124, 124.5, 125, 
        125.5, 126, 126.5, 127, 127.5, 
        0, 0.5, 1, 1.5, 2, 
        2.5, 3, 3.5, 4, 4.5, 
        5, 5.5, 6, 6.5, 7, 
        7.5, 8, 8.5, 9, 9.5, 
        10, 10.5, 11, 11.5, 12, 
        12.5, 13, 13.5, 14, 14.5, 
        15, 15.5, 16, 16.5, 17, 
        17.5, 18, 18.5, 19, 19.5, 
        20, 20.5, 21, 21.5, 22, 
        22.5, 23, 23.5, 24, 24.5, 
        25, 25.5, 26, 26.5, 27, 
        27.5, 28, 28.5, 29, 29.5, 
        30, 30.5, 31, 31.5, 32, 
        32.5, 33, 33.5, 34, 34.5, 
        35, 35.5, 36, 36.5, 37, 
        37.5, 38, 38.5, 39, 39.5, 
        40, 40.5, 41, 41.5, 42, 
        42.5, 43, 43.5, 44, 44.5, 
        45, 45.5, 46, 46.5, 47, 
        47.5, 48, 48.5, 49, 49.5, 
        50, 50.5, 51, 51.5, 52, 
        52.5, 53, 53.5, 54, 54.5, 
        55, 55.5, 56, 56.5, 57, 
        57.5, 58, 58.5, 59, 59.5, 
        60, 60.5, 61, 61.5, 62, 
        62.5, 63, 63.5, 64, 64.5, 
        65, 65.5, 66, 66.5, 67, 
        67.5, 68, 68.5, 69, 69.5, 
        70, 70.5, 71, 71.5, 72, 
        72.5, 73, 73.5, 74, 74.5, 
        75, 75.5, 76, 76.5, 77, 
        77.5, 78, 78.5, 79, 79.5, 
        80, 80.5, 81, 81.5, 82, 
        82.5, 83, 83.5, 84, 84.5, 
        85, 85.5, 86, 86.5, 87, 
        87.5, 88, 88.5, 89, 89.5, 
        90, 90.5, 91, 91.5, 92, 
        92.5, 93, 93.5, 94, 94.5, 
        95, 95.5, 96, 96.5, 97, 
        97.5, 98, 98.5, 99, 99.5, 
        100, 100.5, 101, 101.5, 102, 
        102.5, 103, 103.5, 104, 104.5, 
        105, 105.5, 106, 106.5, 107, 
        107.5, 108, 108.5, 109, 109.5, 
        110, 110.5, 111, 111.5, 112, 
        112.5, 113, 113.5, 114, 114.5, 
        115, 115.5, 116, 116.5, 117, 
        117.5, 118, 118.5, 119, 119.5, 
        120, 120.5, 121, 121.5, 122, 
        122.5, 123, 123.5, 124, 124.5, 
        125, 125.5, 126, 126.5, 127, 
        127.5, 0, 0.5, 1, 1.5, 
        2, 2.5, 3, 3.5, 4, 
        4.5, 5, 5.5, 6, 6.5, 
        7, 7.5, 8, 8.5, 9, 
        9.5, 10, 10.5, 11, 11.5, 
        12, 12.5, 13, 13.5, 14, 
        14.5, 15, 15.5, 16, 16.5, 
        17, 17.5, 18, 18.5, 19, 
        19.5, 20, 20.5, 21, 21.5, 
        22, 22.5, 23, 23.5, 24, 
        24.5, 25, 25.5, 26, 26.5, 
        27, 27.5, 28, 28.5, 29, 
        29.5, 30, 30.5, 31, 31.5, 
        32, 32.5, 33, 33.5, 34, 
        34.5, 35, 35.5, 36, 36.5, 
        37, 37.5, 38, 38.5, 39, 
        39.5, 40, 40.5, 41, 41.5, 
        42, 42.5, 43, 43.5, 44, 
        44.5, 45, 45.5, 46, 46.5, 
        47, 47.5, 48, 48.5, 49, 
        49.5, 50, 50.5, 51, 51.5, 
        52, 52.5, 53, 53.5, 54, 
        54.5, 55, 55.5, 56, 56.5, 
        57, 57.5, 58, 58.5, 59, 
        59.5, 60, 60.5, 61, 61.5, 
        62, 62.5, 63, 63.5, 64, 
        64.5, 65, 65.5, 66, 66.5, 
        67, 67.5, 68, 68.5, 69, 
        69.5, 70, 70.5, 71, 71.5, 
        72, 72.5, 73, 73.5, 74, 
        74.5, 75, 75.5, 76, 76.5, 
        77, 77.5, 78, 78.5, 79, 
        79.5, 80, 80.5, 81, 81.5, 
        82, 82.5, 83, 83.5, 84, 
        84.5, 85, 85.5, 86, 86.5, 
        87, 87.5, 88, 88.5, 89, 
        89.5, 90, 90.5, 91, 91.5, 
        92, 92.5, 93, 93.5, 94, 
        94.5, 95, 95.5, 96, 96.5, 
        97, 97.5, 98, 98.5, 99, 
        99.5, 100, 100.5, 101, 101.5, 
        102, 102.5, 103, 103.5, 104, 
        104.5, 105, 105.5, 106, 106.5, 
        107, 107.5, 108, 108.5, 109, 
        109.5, 110, 110.5, 111, 111.5, 
        112, 112.5, 113, 113.5, 114, 
        114.5, 115, 115.5, 116, 116.5, 
        117, 117.5, 118, 118.5, 119, 
        119.5, 120, 120.5, 121, 121.5, 
        122, 122.5, 123, 123.5, 124, 
        124.5, 125, 125.5, 126, 126.5, 
        127, 127.5 ) ),
    L1EcalEtThresholdsNegativeEta = cms.vdouble( (0, 0.5, 1, 1.5, 2, 
        2.5, 3, 3.5, 4, 4.5, 
        5, 5.5, 6, 6.5, 7, 
        7.5, 8, 8.5, 9, 9.5, 
        10, 10.5, 11, 11.5, 12, 
        12.5, 13, 13.5, 14, 14.5, 
        15, 15.5, 16, 16.5, 17, 
        17.5, 18, 18.5, 19, 19.5, 
        20, 20.5, 21, 21.5, 22, 
        22.5, 23, 23.5, 24, 24.5, 
        25, 25.5, 26, 26.5, 27, 
        27.5, 28, 28.5, 29, 29.5, 
        30, 30.5, 31, 31.5, 32, 
        32.5, 33, 33.5, 34, 34.5, 
        35, 35.5, 36, 36.5, 37, 
        37.5, 38, 38.5, 39, 39.5, 
        40, 40.5, 41, 41.5, 42, 
        42.5, 43, 43.5, 44, 44.5, 
        45, 45.5, 46, 46.5, 47, 
        47.5, 48, 48.5, 49, 49.5, 
        50, 50.5, 51, 51.5, 52, 
        52.5, 53, 53.5, 54, 54.5, 
        55, 55.5, 56, 56.5, 57, 
        57.5, 58, 58.5, 59, 59.5, 
        60, 60.5, 61, 61.5, 62, 
        62.5, 63, 63.5, 64, 64.5, 
        65, 65.5, 66, 66.5, 67, 
        67.5, 68, 68.5, 69, 69.5, 
        70, 70.5, 71, 71.5, 72, 
        72.5, 73, 73.5, 74, 74.5, 
        75, 75.5, 76, 76.5, 77, 
        77.5, 78, 78.5, 79, 79.5, 
        80, 80.5, 81, 81.5, 82, 
        82.5, 83, 83.5, 84, 84.5, 
        85, 85.5, 86, 86.5, 87, 
        87.5, 88, 88.5, 89, 89.5, 
        90, 90.5, 91, 91.5, 92, 
        92.5, 93, 93.5, 94, 94.5, 
        95, 95.5, 96, 96.5, 97, 
        97.5, 98, 98.5, 99, 99.5, 
        100, 100.5, 101, 101.5, 102, 
        102.5, 103, 103.5, 104, 104.5, 
        105, 105.5, 106, 106.5, 107, 
        107.5, 108, 108.5, 109, 109.5, 
        110, 110.5, 111, 111.5, 112, 
        112.5, 113, 113.5, 114, 114.5, 
        115, 115.5, 116, 116.5, 117, 
        117.5, 118, 118.5, 119, 119.5, 
        120, 120.5, 121, 121.5, 122, 
        122.5, 123, 123.5, 124, 124.5, 
        125, 125.5, 126, 126.5, 127, 
        127.5, 0, 0.5, 1, 1.5, 
        2, 2.5, 3, 3.5, 4, 
        4.5, 5, 5.5, 6, 6.5, 
        7, 7.5, 8, 8.5, 9, 
        9.5, 10, 10.5, 11, 11.5, 
        12, 12.5, 13, 13.5, 14, 
        14.5, 15, 15.5, 16, 16.5, 
        17, 17.5, 18, 18.5, 19, 
        19.5, 20, 20.5, 21, 21.5, 
        22, 22.5, 23, 23.5, 24, 
        24.5, 25, 25.5, 26, 26.5, 
        27, 27.5, 28, 28.5, 29, 
        29.5, 30, 30.5, 31, 31.5, 
        32, 32.5, 33, 33.5, 34, 
        34.5, 35, 35.5, 36, 36.5, 
        37, 37.5, 38, 38.5, 39, 
        39.5, 40, 40.5, 41, 41.5, 
        42, 42.5, 43, 43.5, 44, 
        44.5, 45, 45.5, 46, 46.5, 
        47, 47.5, 48, 48.5, 49, 
        49.5, 50, 50.5, 51, 51.5, 
        52, 52.5, 53, 53.5, 54, 
        54.5, 55, 55.5, 56, 56.5, 
        57, 57.5, 58, 58.5, 59, 
        59.5, 60, 60.5, 61, 61.5, 
        62, 62.5, 63, 63.5, 64, 
        64.5, 65, 65.5, 66, 66.5, 
        67, 67.5, 68, 68.5, 69, 
        69.5, 70, 70.5, 71, 71.5, 
        72, 72.5, 73, 73.5, 74, 
        74.5, 75, 75.5, 76, 76.5, 
        77, 77.5, 78, 78.5, 79, 
        79.5, 80, 80.5, 81, 81.5, 
        82, 82.5, 83, 83.5, 84, 
        84.5, 85, 85.5, 86, 86.5, 
        87, 87.5, 88, 88.5, 89, 
        89.5, 90, 90.5, 91, 91.5, 
        92, 92.5, 93, 93.5, 94, 
        94.5, 95, 95.5, 96, 96.5, 
        97, 97.5, 98, 98.5, 99, 
        99.5, 100, 100.5, 101, 101.5, 
        102, 102.5, 103, 103.5, 104, 
        104.5, 105, 105.5, 106, 106.5, 
        107, 107.5, 108, 108.5, 109, 
        109.5, 110, 110.5, 111, 111.5, 
        112, 112.5, 113, 113.5, 114, 
        114.5, 115, 115.5, 116, 116.5, 
        117, 117.5, 118, 118.5, 119, 
        119.5, 120, 120.5, 121, 121.5, 
        122, 122.5, 123, 123.5, 124, 
        124.5, 125, 125.5, 126, 126.5, 
        127, 127.5, 0, 0.5, 1, 
        1.5, 2, 2.5, 3, 3.5, 
        4, 4.5, 5, 5.5, 6, 
        6.5, 7, 7.5, 8, 8.5, 
        9, 9.5, 10, 10.5, 11, 
        11.5, 12, 12.5, 13, 13.5, 
        14, 14.5, 15, 15.5, 16, 
        16.5, 17, 17.5, 18, 18.5, 
        19, 19.5, 20, 20.5, 21, 
        21.5, 22, 22.5, 23, 23.5, 
        24, 24.5, 25, 25.5, 26, 
        26.5, 27, 27.5, 28, 28.5, 
        29, 29.5, 30, 30.5, 31, 
        31.5, 32, 32.5, 33, 33.5, 
        34, 34.5, 35, 35.5, 36, 
        36.5, 37, 37.5, 38, 38.5, 
        39, 39.5, 40, 40.5, 41, 
        41.5, 42, 42.5, 43, 43.5, 
        44, 44.5, 45, 45.5, 46, 
        46.5, 47, 47.5, 48, 48.5, 
        49, 49.5, 50, 50.5, 51, 
        51.5, 52, 52.5, 53, 53.5, 
        54, 54.5, 55, 55.5, 56, 
        56.5, 57, 57.5, 58, 58.5, 
        59, 59.5, 60, 60.5, 61, 
        61.5, 62, 62.5, 63, 63.5, 
        64, 64.5, 65, 65.5, 66, 
        66.5, 67, 67.5, 68, 68.5, 
        69, 69.5, 70, 70.5, 71, 
        71.5, 72, 72.5, 73, 73.5, 
        74, 74.5, 75, 75.5, 76, 
        76.5, 77, 77.5, 78, 78.5, 
        79, 79.5, 80, 80.5, 81, 
        81.5, 82, 82.5, 83, 83.5, 
        84, 84.5, 85, 85.5, 86, 
        86.5, 87, 87.5, 88, 88.5, 
        89, 89.5, 90, 90.5, 91, 
        91.5, 92, 92.5, 93, 93.5, 
        94, 94.5, 95, 95.5, 96, 
        96.5, 97, 97.5, 98, 98.5, 
        99, 99.5, 100, 100.5, 101, 
        101.5, 102, 102.5, 103, 103.5, 
        104, 104.5, 105, 105.5, 106, 
        106.5, 107, 107.5, 108, 108.5, 
        109, 109.5, 110, 110.5, 111, 
        111.5, 112, 112.5, 113, 113.5, 
        114, 114.5, 115, 115.5, 116, 
        116.5, 117, 117.5, 118, 118.5, 
        119, 119.5, 120, 120.5, 121, 
        121.5, 122, 122.5, 123, 123.5, 
        124, 124.5, 125, 125.5, 126, 
        126.5, 127, 127.5, 0, 0.5, 
        1, 1.5, 2, 2.5, 3, 
        3.5, 4, 4.5, 5, 5.5, 
        6, 6.5, 7, 7.5, 8, 
        8.5, 9, 9.5, 10, 10.5, 
        11, 11.5, 12, 12.5, 13, 
        13.5, 14, 14.5, 15, 15.5, 
        16, 16.5, 17, 17.5, 18, 
        18.5, 19, 19.5, 20, 20.5, 
        21, 21.5, 22, 22.5, 23, 
        23.5, 24, 24.5, 25, 25.5, 
        26, 26.5, 27, 27.5, 28, 
        28.5, 29, 29.5, 30, 30.5, 
        31, 31.5, 32, 32.5, 33, 
        33.5, 34, 34.5, 35, 35.5, 
        36, 36.5, 37, 37.5, 38, 
        38.5, 39, 39.5, 40, 40.5, 
        41, 41.5, 42, 42.5, 43, 
        43.5, 44, 44.5, 45, 45.5, 
        46, 46.5, 47, 47.5, 48, 
        48.5, 49, 49.5, 50, 50.5, 
        51, 51.5, 52, 52.5, 53, 
        53.5, 54, 54.5, 55, 55.5, 
        56, 56.5, 57, 57.5, 58, 
        58.5, 59, 59.5, 60, 60.5, 
        61, 61.5, 62, 62.5, 63, 
        63.5, 64, 64.5, 65, 65.5, 
        66, 66.5, 67, 67.5, 68, 
        68.5, 69, 69.5, 70, 70.5, 
        71, 71.5, 72, 72.5, 73, 
        73.5, 74, 74.5, 75, 75.5, 
        76, 76.5, 77, 77.5, 78, 
        78.5, 79, 79.5, 80, 80.5, 
        81, 81.5, 82, 82.5, 83, 
        83.5, 84, 84.5, 85, 85.5, 
        86, 86.5, 87, 87.5, 88, 
        88.5, 89, 89.5, 90, 90.5, 
        91, 91.5, 92, 92.5, 93, 
        93.5, 94, 94.5, 95, 95.5, 
        96, 96.5, 97, 97.5, 98, 
        98.5, 99, 99.5, 100, 100.5, 
        101, 101.5, 102, 102.5, 103, 
        103.5, 104, 104.5, 105, 105.5, 
        106, 106.5, 107, 107.5, 108, 
        108.5, 109, 109.5, 110, 110.5, 
        111, 111.5, 112, 112.5, 113, 
        113.5, 114, 114.5, 115, 115.5, 
        116, 116.5, 117, 117.5, 118, 
        118.5, 119, 119.5, 120, 120.5, 
        121, 121.5, 122, 122.5, 123, 
        123.5, 124, 124.5, 125, 125.5, 
        126, 126.5, 127, 127.5, 0, 
        0.5, 1, 1.5, 2, 2.5, 
        3, 3.5, 4, 4.5, 5, 
        5.5, 6, 6.5, 7, 7.5, 
        8, 8.5, 9, 9.5, 10, 
        10.5, 11, 11.5, 12, 12.5, 
        13, 13.5, 14, 14.5, 15, 
        15.5, 16, 16.5, 17, 17.5, 
        18, 18.5, 19, 19.5, 20, 
        20.5, 21, 21.5, 22, 22.5, 
        23, 23.5, 24, 24.5, 25, 
        25.5, 26, 26.5, 27, 27.5, 
        28, 28.5, 29, 29.5, 30, 
        30.5, 31, 31.5, 32, 32.5, 
        33, 33.5, 34, 34.5, 35, 
        35.5, 36, 36.5, 37, 37.5, 
        38, 38.5, 39, 39.5, 40, 
        40.5, 41, 41.5, 42, 42.5, 
        43, 43.5, 44, 44.5, 45, 
        45.5, 46, 46.5, 47, 47.5, 
        48, 48.5, 49, 49.5, 50, 
        50.5, 51, 51.5, 52, 52.5, 
        53, 53.5, 54, 54.5, 55, 
        55.5, 56, 56.5, 57, 57.5, 
        58, 58.5, 59, 59.5, 60, 
        60.5, 61, 61.5, 62, 62.5, 
        63, 63.5, 64, 64.5, 65, 
        65.5, 66, 66.5, 67, 67.5, 
        68, 68.5, 69, 69.5, 70, 
        70.5, 71, 71.5, 72, 72.5, 
        73, 73.5, 74, 74.5, 75, 
        75.5, 76, 76.5, 77, 77.5, 
        78, 78.5, 79, 79.5, 80, 
        80.5, 81, 81.5, 82, 82.5, 
        83, 83.5, 84, 84.5, 85, 
        85.5, 86, 86.5, 87, 87.5, 
        88, 88.5, 89, 89.5, 90, 
        90.5, 91, 91.5, 92, 92.5, 
        93, 93.5, 94, 94.5, 95, 
        95.5, 96, 96.5, 97, 97.5, 
        98, 98.5, 99, 99.5, 100, 
        100.5, 101, 101.5, 102, 102.5, 
        103, 103.5, 104, 104.5, 105, 
        105.5, 106, 106.5, 107, 107.5, 
        108, 108.5, 109, 109.5, 110, 
        110.5, 111, 111.5, 112, 112.5, 
        113, 113.5, 114, 114.5, 115, 
        115.5, 116, 116.5, 117, 117.5, 
        118, 118.5, 119, 119.5, 120, 
        120.5, 121, 121.5, 122, 122.5, 
        123, 123.5, 124, 124.5, 125, 
        125.5, 126, 126.5, 127, 127.5, 
        0, 0.5, 1, 1.5, 2, 
        2.5, 3, 3.5, 4, 4.5, 
        5, 5.5, 6, 6.5, 7, 
        7.5, 8, 8.5, 9, 9.5, 
        10, 10.5, 11, 11.5, 12, 
        12.5, 13, 13.5, 14, 14.5, 
        15, 15.5, 16, 16.5, 17, 
        17.5, 18, 18.5, 19, 19.5, 
        20, 20.5, 21, 21.5, 22, 
        22.5, 23, 23.5, 24, 24.5, 
        25, 25.5, 26, 26.5, 27, 
        27.5, 28, 28.5, 29, 29.5, 
        30, 30.5, 31, 31.5, 32, 
        32.5, 33, 33.5, 34, 34.5, 
        35, 35.5, 36, 36.5, 37, 
        37.5, 38, 38.5, 39, 39.5, 
        40, 40.5, 41, 41.5, 42, 
        42.5, 43, 43.5, 44, 44.5, 
        45, 45.5, 46, 46.5, 47, 
        47.5, 48, 48.5, 49, 49.5, 
        50, 50.5, 51, 51.5, 52, 
        52.5, 53, 53.5, 54, 54.5, 
        55, 55.5, 56, 56.5, 57, 
        57.5, 58, 58.5, 59, 59.5, 
        60, 60.5, 61, 61.5, 62, 
        62.5, 63, 63.5, 64, 64.5, 
        65, 65.5, 66, 66.5, 67, 
        67.5, 68, 68.5, 69, 69.5, 
        70, 70.5, 71, 71.5, 72, 
        72.5, 73, 73.5, 74, 74.5, 
        75, 75.5, 76, 76.5, 77, 
        77.5, 78, 78.5, 79, 79.5, 
        80, 80.5, 81, 81.5, 82, 
        82.5, 83, 83.5, 84, 84.5, 
        85, 85.5, 86, 86.5, 87, 
        87.5, 88, 88.5, 89, 89.5, 
        90, 90.5, 91, 91.5, 92, 
        92.5, 93, 93.5, 94, 94.5, 
        95, 95.5, 96, 96.5, 97, 
        97.5, 98, 98.5, 99, 99.5, 
        100, 100.5, 101, 101.5, 102, 
        102.5, 103, 103.5, 104, 104.5, 
        105, 105.5, 106, 106.5, 107, 
        107.5, 108, 108.5, 109, 109.5, 
        110, 110.5, 111, 111.5, 112, 
        112.5, 113, 113.5, 114, 114.5, 
        115, 115.5, 116, 116.5, 117, 
        117.5, 118, 118.5, 119, 119.5, 
        120, 120.5, 121, 121.5, 122, 
        122.5, 123, 123.5, 124, 124.5, 
        125, 125.5, 126, 126.5, 127, 
        127.5, 0, 0.5, 1, 1.5, 
        2, 2.5, 3, 3.5, 4, 
        4.5, 5, 5.5, 6, 6.5, 
        7, 7.5, 8, 8.5, 9, 
        9.5, 10, 10.5, 11, 11.5, 
        12, 12.5, 13, 13.5, 14, 
        14.5, 15, 15.5, 16, 16.5, 
        17, 17.5, 18, 18.5, 19, 
        19.5, 20, 20.5, 21, 21.5, 
        22, 22.5, 23, 23.5, 24, 
        24.5, 25, 25.5, 26, 26.5, 
        27, 27.5, 28, 28.5, 29, 
        29.5, 30, 30.5, 31, 31.5, 
        32, 32.5, 33, 33.5, 34, 
        34.5, 35, 35.5, 36, 36.5, 
        37, 37.5, 38, 38.5, 39, 
        39.5, 40, 40.5, 41, 41.5, 
        42, 42.5, 43, 43.5, 44, 
        44.5, 45, 45.5, 46, 46.5, 
        47, 47.5, 48, 48.5, 49, 
        49.5, 50, 50.5, 51, 51.5, 
        52, 52.5, 53, 53.5, 54, 
        54.5, 55, 55.5, 56, 56.5, 
        57, 57.5, 58, 58.5, 59, 
        59.5, 60, 60.5, 61, 61.5, 
        62, 62.5, 63, 63.5, 64, 
        64.5, 65, 65.5, 66, 66.5, 
        67, 67.5, 68, 68.5, 69, 
        69.5, 70, 70.5, 71, 71.5, 
        72, 72.5, 73, 73.5, 74, 
        74.5, 75, 75.5, 76, 76.5, 
        77, 77.5, 78, 78.5, 79, 
        79.5, 80, 80.5, 81, 81.5, 
        82, 82.5, 83, 83.5, 84, 
        84.5, 85, 85.5, 86, 86.5, 
        87, 87.5, 88, 88.5, 89, 
        89.5, 90, 90.5, 91, 91.5, 
        92, 92.5, 93, 93.5, 94, 
        94.5, 95, 95.5, 96, 96.5, 
        97, 97.5, 98, 98.5, 99, 
        99.5, 100, 100.5, 101, 101.5, 
        102, 102.5, 103, 103.5, 104, 
        104.5, 105, 105.5, 106, 106.5, 
        107, 107.5, 108, 108.5, 109, 
        109.5, 110, 110.5, 111, 111.5, 
        112, 112.5, 113, 113.5, 114, 
        114.5, 115, 115.5, 116, 116.5, 
        117, 117.5, 118, 118.5, 119, 
        119.5, 120, 120.5, 121, 121.5, 
        122, 122.5, 123, 123.5, 124, 
        124.5, 125, 125.5, 126, 126.5, 
        127, 127.5, 0, 0.5, 1, 
        1.5, 2, 2.5, 3, 3.5, 
        4, 4.5, 5, 5.5, 6, 
        6.5, 7, 7.5, 8, 8.5, 
        9, 9.5, 10, 10.5, 11, 
        11.5, 12, 12.5, 13, 13.5, 
        14, 14.5, 15, 15.5, 16, 
        16.5, 17, 17.5, 18, 18.5, 
        19, 19.5, 20, 20.5, 21, 
        21.5, 22, 22.5, 23, 23.5, 
        24, 24.5, 25, 25.5, 26, 
        26.5, 27, 27.5, 28, 28.5, 
        29, 29.5, 30, 30.5, 31, 
        31.5, 32, 32.5, 33, 33.5, 
        34, 34.5, 35, 35.5, 36, 
        36.5, 37, 37.5, 38, 38.5, 
        39, 39.5, 40, 40.5, 41, 
        41.5, 42, 42.5, 43, 43.5, 
        44, 44.5, 45, 45.5, 46, 
        46.5, 47, 47.5, 48, 48.5, 
        49, 49.5, 50, 50.5, 51, 
        51.5, 52, 52.5, 53, 53.5, 
        54, 54.5, 55, 55.5, 56, 
        56.5, 57, 57.5, 58, 58.5, 
        59, 59.5, 60, 60.5, 61, 
        61.5, 62, 62.5, 63, 63.5, 
        64, 64.5, 65, 65.5, 66, 
        66.5, 67, 67.5, 68, 68.5, 
        69, 69.5, 70, 70.5, 71, 
        71.5, 72, 72.5, 73, 73.5, 
        74, 74.5, 75, 75.5, 76, 
        76.5, 77, 77.5, 78, 78.5, 
        79, 79.5, 80, 80.5, 81, 
        81.5, 82, 82.5, 83, 83.5, 
        84, 84.5, 85, 85.5, 86, 
        86.5, 87, 87.5, 88, 88.5, 
        89, 89.5, 90, 90.5, 91, 
        91.5, 92, 92.5, 93, 93.5, 
        94, 94.5, 95, 95.5, 96, 
        96.5, 97, 97.5, 98, 98.5, 
        99, 99.5, 100, 100.5, 101, 
        101.5, 102, 102.5, 103, 103.5, 
        104, 104.5, 105, 105.5, 106, 
        106.5, 107, 107.5, 108, 108.5, 
        109, 109.5, 110, 110.5, 111, 
        111.5, 112, 112.5, 113, 113.5, 
        114, 114.5, 115, 115.5, 116, 
        116.5, 117, 117.5, 118, 118.5, 
        119, 119.5, 120, 120.5, 121, 
        121.5, 122, 122.5, 123, 123.5, 
        124, 124.5, 125, 125.5, 126, 
        126.5, 127, 127.5, 0, 0.5, 
        1, 1.5, 2, 2.5, 3, 
        3.5, 4, 4.5, 5, 5.5, 
        6, 6.5, 7, 7.5, 8, 
        8.5, 9, 9.5, 10, 10.5, 
        11, 11.5, 12, 12.5, 13, 
        13.5, 14, 14.5, 15, 15.5, 
        16, 16.5, 17, 17.5, 18, 
        18.5, 19, 19.5, 20, 20.5, 
        21, 21.5, 22, 22.5, 23, 
        23.5, 24, 24.5, 25, 25.5, 
        26, 26.5, 27, 27.5, 28, 
        28.5, 29, 29.5, 30, 30.5, 
        31, 31.5, 32, 32.5, 33, 
        33.5, 34, 34.5, 35, 35.5, 
        36, 36.5, 37, 37.5, 38, 
        38.5, 39, 39.5, 40, 40.5, 
        41, 41.5, 42, 42.5, 43, 
        43.5, 44, 44.5, 45, 45.5, 
        46, 46.5, 47, 47.5, 48, 
        48.5, 49, 49.5, 50, 50.5, 
        51, 51.5, 52, 52.5, 53, 
        53.5, 54, 54.5, 55, 55.5, 
        56, 56.5, 57, 57.5, 58, 
        58.5, 59, 59.5, 60, 60.5, 
        61, 61.5, 62, 62.5, 63, 
        63.5, 64, 64.5, 65, 65.5, 
        66, 66.5, 67, 67.5, 68, 
        68.5, 69, 69.5, 70, 70.5, 
        71, 71.5, 72, 72.5, 73, 
        73.5, 74, 74.5, 75, 75.5, 
        76, 76.5, 77, 77.5, 78, 
        78.5, 79, 79.5, 80, 80.5, 
        81, 81.5, 82, 82.5, 83, 
        83.5, 84, 84.5, 85, 85.5, 
        86, 86.5, 87, 87.5, 88, 
        88.5, 89, 89.5, 90, 90.5, 
        91, 91.5, 92, 92.5, 93, 
        93.5, 94, 94.5, 95, 95.5, 
        96, 96.5, 97, 97.5, 98, 
        98.5, 99, 99.5, 100, 100.5, 
        101, 101.5, 102, 102.5, 103, 
        103.5, 104, 104.5, 105, 105.5, 
        106, 106.5, 107, 107.5, 108, 
        108.5, 109, 109.5, 110, 110.5, 
        111, 111.5, 112, 112.5, 113, 
        113.5, 114, 114.5, 115, 115.5, 
        116, 116.5, 117, 117.5, 118, 
        118.5, 119, 119.5, 120, 120.5, 
        121, 121.5, 122, 122.5, 123, 
        123.5, 124, 124.5, 125, 125.5, 
        126, 126.5, 127, 127.5, 0, 
        0.5, 1, 1.5, 2, 2.5, 
        3, 3.5, 4, 4.5, 5, 
        5.5, 6, 6.5, 7, 7.5, 
        8, 8.5, 9, 9.5, 10, 
        10.5, 11, 11.5, 12, 12.5, 
        13, 13.5, 14, 14.5, 15, 
        15.5, 16, 16.5, 17, 17.5, 
        18, 18.5, 19, 19.5, 20, 
        20.5, 21, 21.5, 22, 22.5, 
        23, 23.5, 24, 24.5, 25, 
        25.5, 26, 26.5, 27, 27.5, 
        28, 28.5, 29, 29.5, 30, 
        30.5, 31, 31.5, 32, 32.5, 
        33, 33.5, 34, 34.5, 35, 
        35.5, 36, 36.5, 37, 37.5, 
        38, 38.5, 39, 39.5, 40, 
        40.5, 41, 41.5, 42, 42.5, 
        43, 43.5, 44, 44.5, 45, 
        45.5, 46, 46.5, 47, 47.5, 
        48, 48.5, 49, 49.5, 50, 
        50.5, 51, 51.5, 52, 52.5, 
        53, 53.5, 54, 54.5, 55, 
        55.5, 56, 56.5, 57, 57.5, 
        58, 58.5, 59, 59.5, 60, 
        60.5, 61, 61.5, 62, 62.5, 
        63, 63.5, 64, 64.5, 65, 
        65.5, 66, 66.5, 67, 67.5, 
        68, 68.5, 69, 69.5, 70, 
        70.5, 71, 71.5, 72, 72.5, 
        73, 73.5, 74, 74.5, 75, 
        75.5, 76, 76.5, 77, 77.5, 
        78, 78.5, 79, 79.5, 80, 
        80.5, 81, 81.5, 82, 82.5, 
        83, 83.5, 84, 84.5, 85, 
        85.5, 86, 86.5, 87, 87.5, 
        88, 88.5, 89, 89.5, 90, 
        90.5, 91, 91.5, 92, 92.5, 
        93, 93.5, 94, 94.5, 95, 
        95.5, 96, 96.5, 97, 97.5, 
        98, 98.5, 99, 99.5, 100, 
        100.5, 101, 101.5, 102, 102.5, 
        103, 103.5, 104, 104.5, 105, 
        105.5, 106, 106.5, 107, 107.5, 
        108, 108.5, 109, 109.5, 110, 
        110.5, 111, 111.5, 112, 112.5, 
        113, 113.5, 114, 114.5, 115, 
        115.5, 116, 116.5, 117, 117.5, 
        118, 118.5, 119, 119.5, 120, 
        120.5, 121, 121.5, 122, 122.5, 
        123, 123.5, 124, 124.5, 125, 
        125.5, 126, 126.5, 127, 127.5, 
        0, 0.5, 1, 1.5, 2, 
        2.5, 3, 3.5, 4, 4.5, 
        5, 5.5, 6, 6.5, 7, 
        7.5, 8, 8.5, 9, 9.5, 
        10, 10.5, 11, 11.5, 12, 
        12.5, 13, 13.5, 14, 14.5, 
        15, 15.5, 16, 16.5, 17, 
        17.5, 18, 18.5, 19, 19.5, 
        20, 20.5, 21, 21.5, 22, 
        22.5, 23, 23.5, 24, 24.5, 
        25, 25.5, 26, 26.5, 27, 
        27.5, 28, 28.5, 29, 29.5, 
        30, 30.5, 31, 31.5, 32, 
        32.5, 33, 33.5, 34, 34.5, 
        35, 35.5, 36, 36.5, 37, 
        37.5, 38, 38.5, 39, 39.5, 
        40, 40.5, 41, 41.5, 42, 
        42.5, 43, 43.5, 44, 44.5, 
        45, 45.5, 46, 46.5, 47, 
        47.5, 48, 48.5, 49, 49.5, 
        50, 50.5, 51, 51.5, 52, 
        52.5, 53, 53.5, 54, 54.5, 
        55, 55.5, 56, 56.5, 57, 
        57.5, 58, 58.5, 59, 59.5, 
        60, 60.5, 61, 61.5, 62, 
        62.5, 63, 63.5, 64, 64.5, 
        65, 65.5, 66, 66.5, 67, 
        67.5, 68, 68.5, 69, 69.5, 
        70, 70.5, 71, 71.5, 72, 
        72.5, 73, 73.5, 74, 74.5, 
        75, 75.5, 76, 76.5, 77, 
        77.5, 78, 78.5, 79, 79.5, 
        80, 80.5, 81, 81.5, 82, 
        82.5, 83, 83.5, 84, 84.5, 
        85, 85.5, 86, 86.5, 87, 
        87.5, 88, 88.5, 89, 89.5, 
        90, 90.5, 91, 91.5, 92, 
        92.5, 93, 93.5, 94, 94.5, 
        95, 95.5, 96, 96.5, 97, 
        97.5, 98, 98.5, 99, 99.5, 
        100, 100.5, 101, 101.5, 102, 
        102.5, 103, 103.5, 104, 104.5, 
        105, 105.5, 106, 106.5, 107, 
        107.5, 108, 108.5, 109, 109.5, 
        110, 110.5, 111, 111.5, 112, 
        112.5, 113, 113.5, 114, 114.5, 
        115, 115.5, 116, 116.5, 117, 
        117.5, 118, 118.5, 119, 119.5, 
        120, 120.5, 121, 121.5, 122, 
        122.5, 123, 123.5, 124, 124.5, 
        125, 125.5, 126, 126.5, 127, 
        127.5, 0, 0.5, 1, 1.5, 
        2, 2.5, 3, 3.5, 4, 
        4.5, 5, 5.5, 6, 6.5, 
        7, 7.5, 8, 8.5, 9, 
        9.5, 10, 10.5, 11, 11.5, 
        12, 12.5, 13, 13.5, 14, 
        14.5, 15, 15.5, 16, 16.5, 
        17, 17.5, 18, 18.5, 19, 
        19.5, 20, 20.5, 21, 21.5, 
        22, 22.5, 23, 23.5, 24, 
        24.5, 25, 25.5, 26, 26.5, 
        27, 27.5, 28, 28.5, 29, 
        29.5, 30, 30.5, 31, 31.5, 
        32, 32.5, 33, 33.5, 34, 
        34.5, 35, 35.5, 36, 36.5, 
        37, 37.5, 38, 38.5, 39, 
        39.5, 40, 40.5, 41, 41.5, 
        42, 42.5, 43, 43.5, 44, 
        44.5, 45, 45.5, 46, 46.5, 
        47, 47.5, 48, 48.5, 49, 
        49.5, 50, 50.5, 51, 51.5, 
        52, 52.5, 53, 53.5, 54, 
        54.5, 55, 55.5, 56, 56.5, 
        57, 57.5, 58, 58.5, 59, 
        59.5, 60, 60.5, 61, 61.5, 
        62, 62.5, 63, 63.5, 64, 
        64.5, 65, 65.5, 66, 66.5, 
        67, 67.5, 68, 68.5, 69, 
        69.5, 70, 70.5, 71, 71.5, 
        72, 72.5, 73, 73.5, 74, 
        74.5, 75, 75.5, 76, 76.5, 
        77, 77.5, 78, 78.5, 79, 
        79.5, 80, 80.5, 81, 81.5, 
        82, 82.5, 83, 83.5, 84, 
        84.5, 85, 85.5, 86, 86.5, 
        87, 87.5, 88, 88.5, 89, 
        89.5, 90, 90.5, 91, 91.5, 
        92, 92.5, 93, 93.5, 94, 
        94.5, 95, 95.5, 96, 96.5, 
        97, 97.5, 98, 98.5, 99, 
        99.5, 100, 100.5, 101, 101.5, 
        102, 102.5, 103, 103.5, 104, 
        104.5, 105, 105.5, 106, 106.5, 
        107, 107.5, 108, 108.5, 109, 
        109.5, 110, 110.5, 111, 111.5, 
        112, 112.5, 113, 113.5, 114, 
        114.5, 115, 115.5, 116, 116.5, 
        117, 117.5, 118, 118.5, 119, 
        119.5, 120, 120.5, 121, 121.5, 
        122, 122.5, 123, 123.5, 124, 
        124.5, 125, 125.5, 126, 126.5, 
        127, 127.5, 0, 0.5, 1, 
        1.5, 2, 2.5, 3, 3.5, 
        4, 4.5, 5, 5.5, 6, 
        6.5, 7, 7.5, 8, 8.5, 
        9, 9.5, 10, 10.5, 11, 
        11.5, 12, 12.5, 13, 13.5, 
        14, 14.5, 15, 15.5, 16, 
        16.5, 17, 17.5, 18, 18.5, 
        19, 19.5, 20, 20.5, 21, 
        21.5, 22, 22.5, 23, 23.5, 
        24, 24.5, 25, 25.5, 26, 
        26.5, 27, 27.5, 28, 28.5, 
        29, 29.5, 30, 30.5, 31, 
        31.5, 32, 32.5, 33, 33.5, 
        34, 34.5, 35, 35.5, 36, 
        36.5, 37, 37.5, 38, 38.5, 
        39, 39.5, 40, 40.5, 41, 
        41.5, 42, 42.5, 43, 43.5, 
        44, 44.5, 45, 45.5, 46, 
        46.5, 47, 47.5, 48, 48.5, 
        49, 49.5, 50, 50.5, 51, 
        51.5, 52, 52.5, 53, 53.5, 
        54, 54.5, 55, 55.5, 56, 
        56.5, 57, 57.5, 58, 58.5, 
        59, 59.5, 60, 60.5, 61, 
        61.5, 62, 62.5, 63, 63.5, 
        64, 64.5, 65, 65.5, 66, 
        66.5, 67, 67.5, 68, 68.5, 
        69, 69.5, 70, 70.5, 71, 
        71.5, 72, 72.5, 73, 73.5, 
        74, 74.5, 75, 75.5, 76, 
        76.5, 77, 77.5, 78, 78.5, 
        79, 79.5, 80, 80.5, 81, 
        81.5, 82, 82.5, 83, 83.5, 
        84, 84.5, 85, 85.5, 86, 
        86.5, 87, 87.5, 88, 88.5, 
        89, 89.5, 90, 90.5, 91, 
        91.5, 92, 92.5, 93, 93.5, 
        94, 94.5, 95, 95.5, 96, 
        96.5, 97, 97.5, 98, 98.5, 
        99, 99.5, 100, 100.5, 101, 
        101.5, 102, 102.5, 103, 103.5, 
        104, 104.5, 105, 105.5, 106, 
        106.5, 107, 107.5, 108, 108.5, 
        109, 109.5, 110, 110.5, 111, 
        111.5, 112, 112.5, 113, 113.5, 
        114, 114.5, 115, 115.5, 116, 
        116.5, 117, 117.5, 118, 118.5, 
        119, 119.5, 120, 120.5, 121, 
        121.5, 122, 122.5, 123, 123.5, 
        124, 124.5, 125, 125.5, 126, 
        126.5, 127, 127.5, 0, 0.5, 
        1, 1.5, 2, 2.5, 3, 
        3.5, 4, 4.5, 5, 5.5, 
        6, 6.5, 7, 7.5, 8, 
        8.5, 9, 9.5, 10, 10.5, 
        11, 11.5, 12, 12.5, 13, 
        13.5, 14, 14.5, 15, 15.5, 
        16, 16.5, 17, 17.5, 18, 
        18.5, 19, 19.5, 20, 20.5, 
        21, 21.5, 22, 22.5, 23, 
        23.5, 24, 24.5, 25, 25.5, 
        26, 26.5, 27, 27.5, 28, 
        28.5, 29, 29.5, 30, 30.5, 
        31, 31.5, 32, 32.5, 33, 
        33.5, 34, 34.5, 35, 35.5, 
        36, 36.5, 37, 37.5, 38, 
        38.5, 39, 39.5, 40, 40.5, 
        41, 41.5, 42, 42.5, 43, 
        43.5, 44, 44.5, 45, 45.5, 
        46, 46.5, 47, 47.5, 48, 
        48.5, 49, 49.5, 50, 50.5, 
        51, 51.5, 52, 52.5, 53, 
        53.5, 54, 54.5, 55, 55.5, 
        56, 56.5, 57, 57.5, 58, 
        58.5, 59, 59.5, 60, 60.5, 
        61, 61.5, 62, 62.5, 63, 
        63.5, 64, 64.5, 65, 65.5, 
        66, 66.5, 67, 67.5, 68, 
        68.5, 69, 69.5, 70, 70.5, 
        71, 71.5, 72, 72.5, 73, 
        73.5, 74, 74.5, 75, 75.5, 
        76, 76.5, 77, 77.5, 78, 
        78.5, 79, 79.5, 80, 80.5, 
        81, 81.5, 82, 82.5, 83, 
        83.5, 84, 84.5, 85, 85.5, 
        86, 86.5, 87, 87.5, 88, 
        88.5, 89, 89.5, 90, 90.5, 
        91, 91.5, 92, 92.5, 93, 
        93.5, 94, 94.5, 95, 95.5, 
        96, 96.5, 97, 97.5, 98, 
        98.5, 99, 99.5, 100, 100.5, 
        101, 101.5, 102, 102.5, 103, 
        103.5, 104, 104.5, 105, 105.5, 
        106, 106.5, 107, 107.5, 108, 
        108.5, 109, 109.5, 110, 110.5, 
        111, 111.5, 112, 112.5, 113, 
        113.5, 114, 114.5, 115, 115.5, 
        116, 116.5, 117, 117.5, 118, 
        118.5, 119, 119.5, 120, 120.5, 
        121, 121.5, 122, 122.5, 123, 
        123.5, 124, 124.5, 125, 125.5, 
        126, 126.5, 127, 127.5, 0, 
        0.5, 1, 1.5, 2, 2.5, 
        3, 3.5, 4, 4.5, 5, 
        5.5, 6, 6.5, 7, 7.5, 
        8, 8.5, 9, 9.5, 10, 
        10.5, 11, 11.5, 12, 12.5, 
        13, 13.5, 14, 14.5, 15, 
        15.5, 16, 16.5, 17, 17.5, 
        18, 18.5, 19, 19.5, 20, 
        20.5, 21, 21.5, 22, 22.5, 
        23, 23.5, 24, 24.5, 25, 
        25.5, 26, 26.5, 27, 27.5, 
        28, 28.5, 29, 29.5, 30, 
        30.5, 31, 31.5, 32, 32.5, 
        33, 33.5, 34, 34.5, 35, 
        35.5, 36, 36.5, 37, 37.5, 
        38, 38.5, 39, 39.5, 40, 
        40.5, 41, 41.5, 42, 42.5, 
        43, 43.5, 44, 44.5, 45, 
        45.5, 46, 46.5, 47, 47.5, 
        48, 48.5, 49, 49.5, 50, 
        50.5, 51, 51.5, 52, 52.5, 
        53, 53.5, 54, 54.5, 55, 
        55.5, 56, 56.5, 57, 57.5, 
        58, 58.5, 59, 59.5, 60, 
        60.5, 61, 61.5, 62, 62.5, 
        63, 63.5, 64, 64.5, 65, 
        65.5, 66, 66.5, 67, 67.5, 
        68, 68.5, 69, 69.5, 70, 
        70.5, 71, 71.5, 72, 72.5, 
        73, 73.5, 74, 74.5, 75, 
        75.5, 76, 76.5, 77, 77.5, 
        78, 78.5, 79, 79.5, 80, 
        80.5, 81, 81.5, 82, 82.5, 
        83, 83.5, 84, 84.5, 85, 
        85.5, 86, 86.5, 87, 87.5, 
        88, 88.5, 89, 89.5, 90, 
        90.5, 91, 91.5, 92, 92.5, 
        93, 93.5, 94, 94.5, 95, 
        95.5, 96, 96.5, 97, 97.5, 
        98, 98.5, 99, 99.5, 100, 
        100.5, 101, 101.5, 102, 102.5, 
        103, 103.5, 104, 104.5, 105, 
        105.5, 106, 106.5, 107, 107.5, 
        108, 108.5, 109, 109.5, 110, 
        110.5, 111, 111.5, 112, 112.5, 
        113, 113.5, 114, 114.5, 115, 
        115.5, 116, 116.5, 117, 117.5, 
        118, 118.5, 119, 119.5, 120, 
        120.5, 121, 121.5, 122, 122.5, 
        123, 123.5, 124, 124.5, 125, 
        125.5, 126, 126.5, 127, 127.5, 
        0, 0.5, 1, 1.5, 2, 
        2.5, 3, 3.5, 4, 4.5, 
        5, 5.5, 6, 6.5, 7, 
        7.5, 8, 8.5, 9, 9.5, 
        10, 10.5, 11, 11.5, 12, 
        12.5, 13, 13.5, 14, 14.5, 
        15, 15.5, 16, 16.5, 17, 
        17.5, 18, 18.5, 19, 19.5, 
        20, 20.5, 21, 21.5, 22, 
        22.5, 23, 23.5, 24, 24.5, 
        25, 25.5, 26, 26.5, 27, 
        27.5, 28, 28.5, 29, 29.5, 
        30, 30.5, 31, 31.5, 32, 
        32.5, 33, 33.5, 34, 34.5, 
        35, 35.5, 36, 36.5, 37, 
        37.5, 38, 38.5, 39, 39.5, 
        40, 40.5, 41, 41.5, 42, 
        42.5, 43, 43.5, 44, 44.5, 
        45, 45.5, 46, 46.5, 47, 
        47.5, 48, 48.5, 49, 49.5, 
        50, 50.5, 51, 51.5, 52, 
        52.5, 53, 53.5, 54, 54.5, 
        55, 55.5, 56, 56.5, 57, 
        57.5, 58, 58.5, 59, 59.5, 
        60, 60.5, 61, 61.5, 62, 
        62.5, 63, 63.5, 64, 64.5, 
        65, 65.5, 66, 66.5, 67, 
        67.5, 68, 68.5, 69, 69.5, 
        70, 70.5, 71, 71.5, 72, 
        72.5, 73, 73.5, 74, 74.5, 
        75, 75.5, 76, 76.5, 77, 
        77.5, 78, 78.5, 79, 79.5, 
        80, 80.5, 81, 81.5, 82, 
        82.5, 83, 83.5, 84, 84.5, 
        85, 85.5, 86, 86.5, 87, 
        87.5, 88, 88.5, 89, 89.5, 
        90, 90.5, 91, 91.5, 92, 
        92.5, 93, 93.5, 94, 94.5, 
        95, 95.5, 96, 96.5, 97, 
        97.5, 98, 98.5, 99, 99.5, 
        100, 100.5, 101, 101.5, 102, 
        102.5, 103, 103.5, 104, 104.5, 
        105, 105.5, 106, 106.5, 107, 
        107.5, 108, 108.5, 109, 109.5, 
        110, 110.5, 111, 111.5, 112, 
        112.5, 113, 113.5, 114, 114.5, 
        115, 115.5, 116, 116.5, 117, 
        117.5, 118, 118.5, 119, 119.5, 
        120, 120.5, 121, 121.5, 122, 
        122.5, 123, 123.5, 124, 124.5, 
        125, 125.5, 126, 126.5, 127, 
        127.5, 0, 0.5, 1, 1.5, 
        2, 2.5, 3, 3.5, 4, 
        4.5, 5, 5.5, 6, 6.5, 
        7, 7.5, 8, 8.5, 9, 
        9.5, 10, 10.5, 11, 11.5, 
        12, 12.5, 13, 13.5, 14, 
        14.5, 15, 15.5, 16, 16.5, 
        17, 17.5, 18, 18.5, 19, 
        19.5, 20, 20.5, 21, 21.5, 
        22, 22.5, 23, 23.5, 24, 
        24.5, 25, 25.5, 26, 26.5, 
        27, 27.5, 28, 28.5, 29, 
        29.5, 30, 30.5, 31, 31.5, 
        32, 32.5, 33, 33.5, 34, 
        34.5, 35, 35.5, 36, 36.5, 
        37, 37.5, 38, 38.5, 39, 
        39.5, 40, 40.5, 41, 41.5, 
        42, 42.5, 43, 43.5, 44, 
        44.5, 45, 45.5, 46, 46.5, 
        47, 47.5, 48, 48.5, 49, 
        49.5, 50, 50.5, 51, 51.5, 
        52, 52.5, 53, 53.5, 54, 
        54.5, 55, 55.5, 56, 56.5, 
        57, 57.5, 58, 58.5, 59, 
        59.5, 60, 60.5, 61, 61.5, 
        62, 62.5, 63, 63.5, 64, 
        64.5, 65, 65.5, 66, 66.5, 
        67, 67.5, 68, 68.5, 69, 
        69.5, 70, 70.5, 71, 71.5, 
        72, 72.5, 73, 73.5, 74, 
        74.5, 75, 75.5, 76, 76.5, 
        77, 77.5, 78, 78.5, 79, 
        79.5, 80, 80.5, 81, 81.5, 
        82, 82.5, 83, 83.5, 84, 
        84.5, 85, 85.5, 86, 86.5, 
        87, 87.5, 88, 88.5, 89, 
        89.5, 90, 90.5, 91, 91.5, 
        92, 92.5, 93, 93.5, 94, 
        94.5, 95, 95.5, 96, 96.5, 
        97, 97.5, 98, 98.5, 99, 
        99.5, 100, 100.5, 101, 101.5, 
        102, 102.5, 103, 103.5, 104, 
        104.5, 105, 105.5, 106, 106.5, 
        107, 107.5, 108, 108.5, 109, 
        109.5, 110, 110.5, 111, 111.5, 
        112, 112.5, 113, 113.5, 114, 
        114.5, 115, 115.5, 116, 116.5, 
        117, 117.5, 118, 118.5, 119, 
        119.5, 120, 120.5, 121, 121.5, 
        122, 122.5, 123, 123.5, 124, 
        124.5, 125, 125.5, 126, 126.5, 
        127, 127.5, 0, 0.5, 1, 
        1.5, 2, 2.5, 3, 3.5, 
        4, 4.5, 5, 5.5, 6, 
        6.5, 7, 7.5, 8, 8.5, 
        9, 9.5, 10, 10.5, 11, 
        11.5, 12, 12.5, 13, 13.5, 
        14, 14.5, 15, 15.5, 16, 
        16.5, 17, 17.5, 18, 18.5, 
        19, 19.5, 20, 20.5, 21, 
        21.5, 22, 22.5, 23, 23.5, 
        24, 24.5, 25, 25.5, 26, 
        26.5, 27, 27.5, 28, 28.5, 
        29, 29.5, 30, 30.5, 31, 
        31.5, 32, 32.5, 33, 33.5, 
        34, 34.5, 35, 35.5, 36, 
        36.5, 37, 37.5, 38, 38.5, 
        39, 39.5, 40, 40.5, 41, 
        41.5, 42, 42.5, 43, 43.5, 
        44, 44.5, 45, 45.5, 46, 
        46.5, 47, 47.5, 48, 48.5, 
        49, 49.5, 50, 50.5, 51, 
        51.5, 52, 52.5, 53, 53.5, 
        54, 54.5, 55, 55.5, 56, 
        56.5, 57, 57.5, 58, 58.5, 
        59, 59.5, 60, 60.5, 61, 
        61.5, 62, 62.5, 63, 63.5, 
        64, 64.5, 65, 65.5, 66, 
        66.5, 67, 67.5, 68, 68.5, 
        69, 69.5, 70, 70.5, 71, 
        71.5, 72, 72.5, 73, 73.5, 
        74, 74.5, 75, 75.5, 76, 
        76.5, 77, 77.5, 78, 78.5, 
        79, 79.5, 80, 80.5, 81, 
        81.5, 82, 82.5, 83, 83.5, 
        84, 84.5, 85, 85.5, 86, 
        86.5, 87, 87.5, 88, 88.5, 
        89, 89.5, 90, 90.5, 91, 
        91.5, 92, 92.5, 93, 93.5, 
        94, 94.5, 95, 95.5, 96, 
        96.5, 97, 97.5, 98, 98.5, 
        99, 99.5, 100, 100.5, 101, 
        101.5, 102, 102.5, 103, 103.5, 
        104, 104.5, 105, 105.5, 106, 
        106.5, 107, 107.5, 108, 108.5, 
        109, 109.5, 110, 110.5, 111, 
        111.5, 112, 112.5, 113, 113.5, 
        114, 114.5, 115, 115.5, 116, 
        116.5, 117, 117.5, 118, 118.5, 
        119, 119.5, 120, 120.5, 121, 
        121.5, 122, 122.5, 123, 123.5, 
        124, 124.5, 125, 125.5, 126, 
        126.5, 127, 127.5, 0, 0.5, 
        1, 1.5, 2, 2.5, 3, 
        3.5, 4, 4.5, 5, 5.5, 
        6, 6.5, 7, 7.5, 8, 
        8.5, 9, 9.5, 10, 10.5, 
        11, 11.5, 12, 12.5, 13, 
        13.5, 14, 14.5, 15, 15.5, 
        16, 16.5, 17, 17.5, 18, 
        18.5, 19, 19.5, 20, 20.5, 
        21, 21.5, 22, 22.5, 23, 
        23.5, 24, 24.5, 25, 25.5, 
        26, 26.5, 27, 27.5, 28, 
        28.5, 29, 29.5, 30, 30.5, 
        31, 31.5, 32, 32.5, 33, 
        33.5, 34, 34.5, 35, 35.5, 
        36, 36.5, 37, 37.5, 38, 
        38.5, 39, 39.5, 40, 40.5, 
        41, 41.5, 42, 42.5, 43, 
        43.5, 44, 44.5, 45, 45.5, 
        46, 46.5, 47, 47.5, 48, 
        48.5, 49, 49.5, 50, 50.5, 
        51, 51.5, 52, 52.5, 53, 
        53.5, 54, 54.5, 55, 55.5, 
        56, 56.5, 57, 57.5, 58, 
        58.5, 59, 59.5, 60, 60.5, 
        61, 61.5, 62, 62.5, 63, 
        63.5, 64, 64.5, 65, 65.5, 
        66, 66.5, 67, 67.5, 68, 
        68.5, 69, 69.5, 70, 70.5, 
        71, 71.5, 72, 72.5, 73, 
        73.5, 74, 74.5, 75, 75.5, 
        76, 76.5, 77, 77.5, 78, 
        78.5, 79, 79.5, 80, 80.5, 
        81, 81.5, 82, 82.5, 83, 
        83.5, 84, 84.5, 85, 85.5, 
        86, 86.5, 87, 87.5, 88, 
        88.5, 89, 89.5, 90, 90.5, 
        91, 91.5, 92, 92.5, 93, 
        93.5, 94, 94.5, 95, 95.5, 
        96, 96.5, 97, 97.5, 98, 
        98.5, 99, 99.5, 100, 100.5, 
        101, 101.5, 102, 102.5, 103, 
        103.5, 104, 104.5, 105, 105.5, 
        106, 106.5, 107, 107.5, 108, 
        108.5, 109, 109.5, 110, 110.5, 
        111, 111.5, 112, 112.5, 113, 
        113.5, 114, 114.5, 115, 115.5, 
        116, 116.5, 117, 117.5, 118, 
        118.5, 119, 119.5, 120, 120.5, 
        121, 121.5, 122, 122.5, 123, 
        123.5, 124, 124.5, 125, 125.5, 
        126, 126.5, 127, 127.5, 0, 
        0.5, 1, 1.5, 2, 2.5, 
        3, 3.5, 4, 4.5, 5, 
        5.5, 6, 6.5, 7, 7.5, 
        8, 8.5, 9, 9.5, 10, 
        10.5, 11, 11.5, 12, 12.5, 
        13, 13.5, 14, 14.5, 15, 
        15.5, 16, 16.5, 17, 17.5, 
        18, 18.5, 19, 19.5, 20, 
        20.5, 21, 21.5, 22, 22.5, 
        23, 23.5, 24, 24.5, 25, 
        25.5, 26, 26.5, 27, 27.5, 
        28, 28.5, 29, 29.5, 30, 
        30.5, 31, 31.5, 32, 32.5, 
        33, 33.5, 34, 34.5, 35, 
        35.5, 36, 36.5, 37, 37.5, 
        38, 38.5, 39, 39.5, 40, 
        40.5, 41, 41.5, 42, 42.5, 
        43, 43.5, 44, 44.5, 45, 
        45.5, 46, 46.5, 47, 47.5, 
        48, 48.5, 49, 49.5, 50, 
        50.5, 51, 51.5, 52, 52.5, 
        53, 53.5, 54, 54.5, 55, 
        55.5, 56, 56.5, 57, 57.5, 
        58, 58.5, 59, 59.5, 60, 
        60.5, 61, 61.5, 62, 62.5, 
        63, 63.5, 64, 64.5, 65, 
        65.5, 66, 66.5, 67, 67.5, 
        68, 68.5, 69, 69.5, 70, 
        70.5, 71, 71.5, 72, 72.5, 
        73, 73.5, 74, 74.5, 75, 
        75.5, 76, 76.5, 77, 77.5, 
        78, 78.5, 79, 79.5, 80, 
        80.5, 81, 81.5, 82, 82.5, 
        83, 83.5, 84, 84.5, 85, 
        85.5, 86, 86.5, 87, 87.5, 
        88, 88.5, 89, 89.5, 90, 
        90.5, 91, 91.5, 92, 92.5, 
        93, 93.5, 94, 94.5, 95, 
        95.5, 96, 96.5, 97, 97.5, 
        98, 98.5, 99, 99.5, 100, 
        100.5, 101, 101.5, 102, 102.5, 
        103, 103.5, 104, 104.5, 105, 
        105.5, 106, 106.5, 107, 107.5, 
        108, 108.5, 109, 109.5, 110, 
        110.5, 111, 111.5, 112, 112.5, 
        113, 113.5, 114, 114.5, 115, 
        115.5, 116, 116.5, 117, 117.5, 
        118, 118.5, 119, 119.5, 120, 
        120.5, 121, 121.5, 122, 122.5, 
        123, 123.5, 124, 124.5, 125, 
        125.5, 126, 126.5, 127, 127.5, 
        0, 0.5, 1, 1.5, 2, 
        2.5, 3, 3.5, 4, 4.5, 
        5, 5.5, 6, 6.5, 7, 
        7.5, 8, 8.5, 9, 9.5, 
        10, 10.5, 11, 11.5, 12, 
        12.5, 13, 13.5, 14, 14.5, 
        15, 15.5, 16, 16.5, 17, 
        17.5, 18, 18.5, 19, 19.5, 
        20, 20.5, 21, 21.5, 22, 
        22.5, 23, 23.5, 24, 24.5, 
        25, 25.5, 26, 26.5, 27, 
        27.5, 28, 28.5, 29, 29.5, 
        30, 30.5, 31, 31.5, 32, 
        32.5, 33, 33.5, 34, 34.5, 
        35, 35.5, 36, 36.5, 37, 
        37.5, 38, 38.5, 39, 39.5, 
        40, 40.5, 41, 41.5, 42, 
        42.5, 43, 43.5, 44, 44.5, 
        45, 45.5, 46, 46.5, 47, 
        47.5, 48, 48.5, 49, 49.5, 
        50, 50.5, 51, 51.5, 52, 
        52.5, 53, 53.5, 54, 54.5, 
        55, 55.5, 56, 56.5, 57, 
        57.5, 58, 58.5, 59, 59.5, 
        60, 60.5, 61, 61.5, 62, 
        62.5, 63, 63.5, 64, 64.5, 
        65, 65.5, 66, 66.5, 67, 
        67.5, 68, 68.5, 69, 69.5, 
        70, 70.5, 71, 71.5, 72, 
        72.5, 73, 73.5, 74, 74.5, 
        75, 75.5, 76, 76.5, 77, 
        77.5, 78, 78.5, 79, 79.5, 
        80, 80.5, 81, 81.5, 82, 
        82.5, 83, 83.5, 84, 84.5, 
        85, 85.5, 86, 86.5, 87, 
        87.5, 88, 88.5, 89, 89.5, 
        90, 90.5, 91, 91.5, 92, 
        92.5, 93, 93.5, 94, 94.5, 
        95, 95.5, 96, 96.5, 97, 
        97.5, 98, 98.5, 99, 99.5, 
        100, 100.5, 101, 101.5, 102, 
        102.5, 103, 103.5, 104, 104.5, 
        105, 105.5, 106, 106.5, 107, 
        107.5, 108, 108.5, 109, 109.5, 
        110, 110.5, 111, 111.5, 112, 
        112.5, 113, 113.5, 114, 114.5, 
        115, 115.5, 116, 116.5, 117, 
        117.5, 118, 118.5, 119, 119.5, 
        120, 120.5, 121, 121.5, 122, 
        122.5, 123, 123.5, 124, 124.5, 
        125, 125.5, 126, 126.5, 127, 
        127.5, 0, 0.5, 1, 1.5, 
        2, 2.5, 3, 3.5, 4, 
        4.5, 5, 5.5, 6, 6.5, 
        7, 7.5, 8, 8.5, 9, 
        9.5, 10, 10.5, 11, 11.5, 
        12, 12.5, 13, 13.5, 14, 
        14.5, 15, 15.5, 16, 16.5, 
        17, 17.5, 18, 18.5, 19, 
        19.5, 20, 20.5, 21, 21.5, 
        22, 22.5, 23, 23.5, 24, 
        24.5, 25, 25.5, 26, 26.5, 
        27, 27.5, 28, 28.5, 29, 
        29.5, 30, 30.5, 31, 31.5, 
        32, 32.5, 33, 33.5, 34, 
        34.5, 35, 35.5, 36, 36.5, 
        37, 37.5, 38, 38.5, 39, 
        39.5, 40, 40.5, 41, 41.5, 
        42, 42.5, 43, 43.5, 44, 
        44.5, 45, 45.5, 46, 46.5, 
        47, 47.5, 48, 48.5, 49, 
        49.5, 50, 50.5, 51, 51.5, 
        52, 52.5, 53, 53.5, 54, 
        54.5, 55, 55.5, 56, 56.5, 
        57, 57.5, 58, 58.5, 59, 
        59.5, 60, 60.5, 61, 61.5, 
        62, 62.5, 63, 63.5, 64, 
        64.5, 65, 65.5, 66, 66.5, 
        67, 67.5, 68, 68.5, 69, 
        69.5, 70, 70.5, 71, 71.5, 
        72, 72.5, 73, 73.5, 74, 
        74.5, 75, 75.5, 76, 76.5, 
        77, 77.5, 78, 78.5, 79, 
        79.5, 80, 80.5, 81, 81.5, 
        82, 82.5, 83, 83.5, 84, 
        84.5, 85, 85.5, 86, 86.5, 
        87, 87.5, 88, 88.5, 89, 
        89.5, 90, 90.5, 91, 91.5, 
        92, 92.5, 93, 93.5, 94, 
        94.5, 95, 95.5, 96, 96.5, 
        97, 97.5, 98, 98.5, 99, 
        99.5, 100, 100.5, 101, 101.5, 
        102, 102.5, 103, 103.5, 104, 
        104.5, 105, 105.5, 106, 106.5, 
        107, 107.5, 108, 108.5, 109, 
        109.5, 110, 110.5, 111, 111.5, 
        112, 112.5, 113, 113.5, 114, 
        114.5, 115, 115.5, 116, 116.5, 
        117, 117.5, 118, 118.5, 119, 
        119.5, 120, 120.5, 121, 121.5, 
        122, 122.5, 123, 123.5, 124, 
        124.5, 125, 125.5, 126, 126.5, 
        127, 127.5, 0, 0.5, 1, 
        1.5, 2, 2.5, 3, 3.5, 
        4, 4.5, 5, 5.5, 6, 
        6.5, 7, 7.5, 8, 8.5, 
        9, 9.5, 10, 10.5, 11, 
        11.5, 12, 12.5, 13, 13.5, 
        14, 14.5, 15, 15.5, 16, 
        16.5, 17, 17.5, 18, 18.5, 
        19, 19.5, 20, 20.5, 21, 
        21.5, 22, 22.5, 23, 23.5, 
        24, 24.5, 25, 25.5, 26, 
        26.5, 27, 27.5, 28, 28.5, 
        29, 29.5, 30, 30.5, 31, 
        31.5, 32, 32.5, 33, 33.5, 
        34, 34.5, 35, 35.5, 36, 
        36.5, 37, 37.5, 38, 38.5, 
        39, 39.5, 40, 40.5, 41, 
        41.5, 42, 42.5, 43, 43.5, 
        44, 44.5, 45, 45.5, 46, 
        46.5, 47, 47.5, 48, 48.5, 
        49, 49.5, 50, 50.5, 51, 
        51.5, 52, 52.5, 53, 53.5, 
        54, 54.5, 55, 55.5, 56, 
        56.5, 57, 57.5, 58, 58.5, 
        59, 59.5, 60, 60.5, 61, 
        61.5, 62, 62.5, 63, 63.5, 
        64, 64.5, 65, 65.5, 66, 
        66.5, 67, 67.5, 68, 68.5, 
        69, 69.5, 70, 70.5, 71, 
        71.5, 72, 72.5, 73, 73.5, 
        74, 74.5, 75, 75.5, 76, 
        76.5, 77, 77.5, 78, 78.5, 
        79, 79.5, 80, 80.5, 81, 
        81.5, 82, 82.5, 83, 83.5, 
        84, 84.5, 85, 85.5, 86, 
        86.5, 87, 87.5, 88, 88.5, 
        89, 89.5, 90, 90.5, 91, 
        91.5, 92, 92.5, 93, 93.5, 
        94, 94.5, 95, 95.5, 96, 
        96.5, 97, 97.5, 98, 98.5, 
        99, 99.5, 100, 100.5, 101, 
        101.5, 102, 102.5, 103, 103.5, 
        104, 104.5, 105, 105.5, 106, 
        106.5, 107, 107.5, 108, 108.5, 
        109, 109.5, 110, 110.5, 111, 
        111.5, 112, 112.5, 113, 113.5, 
        114, 114.5, 115, 115.5, 116, 
        116.5, 117, 117.5, 118, 118.5, 
        119, 119.5, 120, 120.5, 121, 
        121.5, 122, 122.5, 123, 123.5, 
        124, 124.5, 125, 125.5, 126, 
        126.5, 127, 127.5, 0, 0.5, 
        1, 1.5, 2, 2.5, 3, 
        3.5, 4, 4.5, 5, 5.5, 
        6, 6.5, 7, 7.5, 8, 
        8.5, 9, 9.5, 10, 10.5, 
        11, 11.5, 12, 12.5, 13, 
        13.5, 14, 14.5, 15, 15.5, 
        16, 16.5, 17, 17.5, 18, 
        18.5, 19, 19.5, 20, 20.5, 
        21, 21.5, 22, 22.5, 23, 
        23.5, 24, 24.5, 25, 25.5, 
        26, 26.5, 27, 27.5, 28, 
        28.5, 29, 29.5, 30, 30.5, 
        31, 31.5, 32, 32.5, 33, 
        33.5, 34, 34.5, 35, 35.5, 
        36, 36.5, 37, 37.5, 38, 
        38.5, 39, 39.5, 40, 40.5, 
        41, 41.5, 42, 42.5, 43, 
        43.5, 44, 44.5, 45, 45.5, 
        46, 46.5, 47, 47.5, 48, 
        48.5, 49, 49.5, 50, 50.5, 
        51, 51.5, 52, 52.5, 53, 
        53.5, 54, 54.5, 55, 55.5, 
        56, 56.5, 57, 57.5, 58, 
        58.5, 59, 59.5, 60, 60.5, 
        61, 61.5, 62, 62.5, 63, 
        63.5, 64, 64.5, 65, 65.5, 
        66, 66.5, 67, 67.5, 68, 
        68.5, 69, 69.5, 70, 70.5, 
        71, 71.5, 72, 72.5, 73, 
        73.5, 74, 74.5, 75, 75.5, 
        76, 76.5, 77, 77.5, 78, 
        78.5, 79, 79.5, 80, 80.5, 
        81, 81.5, 82, 82.5, 83, 
        83.5, 84, 84.5, 85, 85.5, 
        86, 86.5, 87, 87.5, 88, 
        88.5, 89, 89.5, 90, 90.5, 
        91, 91.5, 92, 92.5, 93, 
        93.5, 94, 94.5, 95, 95.5, 
        96, 96.5, 97, 97.5, 98, 
        98.5, 99, 99.5, 100, 100.5, 
        101, 101.5, 102, 102.5, 103, 
        103.5, 104, 104.5, 105, 105.5, 
        106, 106.5, 107, 107.5, 108, 
        108.5, 109, 109.5, 110, 110.5, 
        111, 111.5, 112, 112.5, 113, 
        113.5, 114, 114.5, 115, 115.5, 
        116, 116.5, 117, 117.5, 118, 
        118.5, 119, 119.5, 120, 120.5, 
        121, 121.5, 122, 122.5, 123, 
        123.5, 124, 124.5, 125, 125.5, 
        126, 126.5, 127, 127.5, 0, 
        0.5, 1, 1.5, 2, 2.5, 
        3, 3.5, 4, 4.5, 5, 
        5.5, 6, 6.5, 7, 7.5, 
        8, 8.5, 9, 9.5, 10, 
        10.5, 11, 11.5, 12, 12.5, 
        13, 13.5, 14, 14.5, 15, 
        15.5, 16, 16.5, 17, 17.5, 
        18, 18.5, 19, 19.5, 20, 
        20.5, 21, 21.5, 22, 22.5, 
        23, 23.5, 24, 24.5, 25, 
        25.5, 26, 26.5, 27, 27.5, 
        28, 28.5, 29, 29.5, 30, 
        30.5, 31, 31.5, 32, 32.5, 
        33, 33.5, 34, 34.5, 35, 
        35.5, 36, 36.5, 37, 37.5, 
        38, 38.5, 39, 39.5, 40, 
        40.5, 41, 41.5, 42, 42.5, 
        43, 43.5, 44, 44.5, 45, 
        45.5, 46, 46.5, 47, 47.5, 
        48, 48.5, 49, 49.5, 50, 
        50.5, 51, 51.5, 52, 52.5, 
        53, 53.5, 54, 54.5, 55, 
        55.5, 56, 56.5, 57, 57.5, 
        58, 58.5, 59, 59.5, 60, 
        60.5, 61, 61.5, 62, 62.5, 
        63, 63.5, 64, 64.5, 65, 
        65.5, 66, 66.5, 67, 67.5, 
        68, 68.5, 69, 69.5, 70, 
        70.5, 71, 71.5, 72, 72.5, 
        73, 73.5, 74, 74.5, 75, 
        75.5, 76, 76.5, 77, 77.5, 
        78, 78.5, 79, 79.5, 80, 
        80.5, 81, 81.5, 82, 82.5, 
        83, 83.5, 84, 84.5, 85, 
        85.5, 86, 86.5, 87, 87.5, 
        88, 88.5, 89, 89.5, 90, 
        90.5, 91, 91.5, 92, 92.5, 
        93, 93.5, 94, 94.5, 95, 
        95.5, 96, 96.5, 97, 97.5, 
        98, 98.5, 99, 99.5, 100, 
        100.5, 101, 101.5, 102, 102.5, 
        103, 103.5, 104, 104.5, 105, 
        105.5, 106, 106.5, 107, 107.5, 
        108, 108.5, 109, 109.5, 110, 
        110.5, 111, 111.5, 112, 112.5, 
        113, 113.5, 114, 114.5, 115, 
        115.5, 116, 116.5, 117, 117.5, 
        118, 118.5, 119, 119.5, 120, 
        120.5, 121, 121.5, 122, 122.5, 
        123, 123.5, 124, 124.5, 125, 
        125.5, 126, 126.5, 127, 127.5, 
        0, 0.5, 1, 1.5, 2, 
        2.5, 3, 3.5, 4, 4.5, 
        5, 5.5, 6, 6.5, 7, 
        7.5, 8, 8.5, 9, 9.5, 
        10, 10.5, 11, 11.5, 12, 
        12.5, 13, 13.5, 14, 14.5, 
        15, 15.5, 16, 16.5, 17, 
        17.5, 18, 18.5, 19, 19.5, 
        20, 20.5, 21, 21.5, 22, 
        22.5, 23, 23.5, 24, 24.5, 
        25, 25.5, 26, 26.5, 27, 
        27.5, 28, 28.5, 29, 29.5, 
        30, 30.5, 31, 31.5, 32, 
        32.5, 33, 33.5, 34, 34.5, 
        35, 35.5, 36, 36.5, 37, 
        37.5, 38, 38.5, 39, 39.5, 
        40, 40.5, 41, 41.5, 42, 
        42.5, 43, 43.5, 44, 44.5, 
        45, 45.5, 46, 46.5, 47, 
        47.5, 48, 48.5, 49, 49.5, 
        50, 50.5, 51, 51.5, 52, 
        52.5, 53, 53.5, 54, 54.5, 
        55, 55.5, 56, 56.5, 57, 
        57.5, 58, 58.5, 59, 59.5, 
        60, 60.5, 61, 61.5, 62, 
        62.5, 63, 63.5, 64, 64.5, 
        65, 65.5, 66, 66.5, 67, 
        67.5, 68, 68.5, 69, 69.5, 
        70, 70.5, 71, 71.5, 72, 
        72.5, 73, 73.5, 74, 74.5, 
        75, 75.5, 76, 76.5, 77, 
        77.5, 78, 78.5, 79, 79.5, 
        80, 80.5, 81, 81.5, 82, 
        82.5, 83, 83.5, 84, 84.5, 
        85, 85.5, 86, 86.5, 87, 
        87.5, 88, 88.5, 89, 89.5, 
        90, 90.5, 91, 91.5, 92, 
        92.5, 93, 93.5, 94, 94.5, 
        95, 95.5, 96, 96.5, 97, 
        97.5, 98, 98.5, 99, 99.5, 
        100, 100.5, 101, 101.5, 102, 
        102.5, 103, 103.5, 104, 104.5, 
        105, 105.5, 106, 106.5, 107, 
        107.5, 108, 108.5, 109, 109.5, 
        110, 110.5, 111, 111.5, 112, 
        112.5, 113, 113.5, 114, 114.5, 
        115, 115.5, 116, 116.5, 117, 
        117.5, 118, 118.5, 119, 119.5, 
        120, 120.5, 121, 121.5, 122, 
        122.5, 123, 123.5, 124, 124.5, 
        125, 125.5, 126, 126.5, 127, 
        127.5, 0, 0.5, 1, 1.5, 
        2, 2.5, 3, 3.5, 4, 
        4.5, 5, 5.5, 6, 6.5, 
        7, 7.5, 8, 8.5, 9, 
        9.5, 10, 10.5, 11, 11.5, 
        12, 12.5, 13, 13.5, 14, 
        14.5, 15, 15.5, 16, 16.5, 
        17, 17.5, 18, 18.5, 19, 
        19.5, 20, 20.5, 21, 21.5, 
        22, 22.5, 23, 23.5, 24, 
        24.5, 25, 25.5, 26, 26.5, 
        27, 27.5, 28, 28.5, 29, 
        29.5, 30, 30.5, 31, 31.5, 
        32, 32.5, 33, 33.5, 34, 
        34.5, 35, 35.5, 36, 36.5, 
        37, 37.5, 38, 38.5, 39, 
        39.5, 40, 40.5, 41, 41.5, 
        42, 42.5, 43, 43.5, 44, 
        44.5, 45, 45.5, 46, 46.5, 
        47, 47.5, 48, 48.5, 49, 
        49.5, 50, 50.5, 51, 51.5, 
        52, 52.5, 53, 53.5, 54, 
        54.5, 55, 55.5, 56, 56.5, 
        57, 57.5, 58, 58.5, 59, 
        59.5, 60, 60.5, 61, 61.5, 
        62, 62.5, 63, 63.5, 64, 
        64.5, 65, 65.5, 66, 66.5, 
        67, 67.5, 68, 68.5, 69, 
        69.5, 70, 70.5, 71, 71.5, 
        72, 72.5, 73, 73.5, 74, 
        74.5, 75, 75.5, 76, 76.5, 
        77, 77.5, 78, 78.5, 79, 
        79.5, 80, 80.5, 81, 81.5, 
        82, 82.5, 83, 83.5, 84, 
        84.5, 85, 85.5, 86, 86.5, 
        87, 87.5, 88, 88.5, 89, 
        89.5, 90, 90.5, 91, 91.5, 
        92, 92.5, 93, 93.5, 94, 
        94.5, 95, 95.5, 96, 96.5, 
        97, 97.5, 98, 98.5, 99, 
        99.5, 100, 100.5, 101, 101.5, 
        102, 102.5, 103, 103.5, 104, 
        104.5, 105, 105.5, 106, 106.5, 
        107, 107.5, 108, 108.5, 109, 
        109.5, 110, 110.5, 111, 111.5, 
        112, 112.5, 113, 113.5, 114, 
        114.5, 115, 115.5, 116, 116.5, 
        117, 117.5, 118, 118.5, 119, 
        119.5, 120, 120.5, 121, 121.5, 
        122, 122.5, 123, 123.5, 124, 
        124.5, 125, 125.5, 126, 126.5, 
        127, 127.5, 0, 0.5, 1, 
        1.5, 2, 2.5, 3, 3.5, 
        4, 4.5, 5, 5.5, 6, 
        6.5, 7, 7.5, 8, 8.5, 
        9, 9.5, 10, 10.5, 11, 
        11.5, 12, 12.5, 13, 13.5, 
        14, 14.5, 15, 15.5, 16, 
        16.5, 17, 17.5, 18, 18.5, 
        19, 19.5, 20, 20.5, 21, 
        21.5, 22, 22.5, 23, 23.5, 
        24, 24.5, 25, 25.5, 26, 
        26.5, 27, 27.5, 28, 28.5, 
        29, 29.5, 30, 30.5, 31, 
        31.5, 32, 32.5, 33, 33.5, 
        34, 34.5, 35, 35.5, 36, 
        36.5, 37, 37.5, 38, 38.5, 
        39, 39.5, 40, 40.5, 41, 
        41.5, 42, 42.5, 43, 43.5, 
        44, 44.5, 45, 45.5, 46, 
        46.5, 47, 47.5, 48, 48.5, 
        49, 49.5, 50, 50.5, 51, 
        51.5, 52, 52.5, 53, 53.5, 
        54, 54.5, 55, 55.5, 56, 
        56.5, 57, 57.5, 58, 58.5, 
        59, 59.5, 60, 60.5, 61, 
        61.5, 62, 62.5, 63, 63.5, 
        64, 64.5, 65, 65.5, 66, 
        66.5, 67, 67.5, 68, 68.5, 
        69, 69.5, 70, 70.5, 71, 
        71.5, 72, 72.5, 73, 73.5, 
        74, 74.5, 75, 75.5, 76, 
        76.5, 77, 77.5, 78, 78.5, 
        79, 79.5, 80, 80.5, 81, 
        81.5, 82, 82.5, 83, 83.5, 
        84, 84.5, 85, 85.5, 86, 
        86.5, 87, 87.5, 88, 88.5, 
        89, 89.5, 90, 90.5, 91, 
        91.5, 92, 92.5, 93, 93.5, 
        94, 94.5, 95, 95.5, 96, 
        96.5, 97, 97.5, 98, 98.5, 
        99, 99.5, 100, 100.5, 101, 
        101.5, 102, 102.5, 103, 103.5, 
        104, 104.5, 105, 105.5, 106, 
        106.5, 107, 107.5, 108, 108.5, 
        109, 109.5, 110, 110.5, 111, 
        111.5, 112, 112.5, 113, 113.5, 
        114, 114.5, 115, 115.5, 116, 
        116.5, 117, 117.5, 118, 118.5, 
        119, 119.5, 120, 120.5, 121, 
        121.5, 122, 122.5, 123, 123.5, 
        124, 124.5, 125, 125.5, 126, 
        126.5, 127, 127.5 ) ),
    L1EcalEtThresholdsPositiveEta = cms.vdouble( (0, 0.5, 1, 1.5, 2, 
        2.5, 3, 3.5, 4, 4.5, 
        5, 5.5, 6, 6.5, 7, 
        7.5, 8, 8.5, 9, 9.5, 
        10, 10.5, 11, 11.5, 12, 
        12.5, 13, 13.5, 14, 14.5, 
        15, 15.5, 16, 16.5, 17, 
        17.5, 18, 18.5, 19, 19.5, 
        20, 20.5, 21, 21.5, 22, 
        22.5, 23, 23.5, 24, 24.5, 
        25, 25.5, 26, 26.5, 27, 
        27.5, 28, 28.5, 29, 29.5, 
        30, 30.5, 31, 31.5, 32, 
        32.5, 33, 33.5, 34, 34.5, 
        35, 35.5, 36, 36.5, 37, 
        37.5, 38, 38.5, 39, 39.5, 
        40, 40.5, 41, 41.5, 42, 
        42.5, 43, 43.5, 44, 44.5, 
        45, 45.5, 46, 46.5, 47, 
        47.5, 48, 48.5, 49, 49.5, 
        50, 50.5, 51, 51.5, 52, 
        52.5, 53, 53.5, 54, 54.5, 
        55, 55.5, 56, 56.5, 57, 
        57.5, 58, 58.5, 59, 59.5, 
        60, 60.5, 61, 61.5, 62, 
        62.5, 63, 63.5, 64, 64.5, 
        65, 65.5, 66, 66.5, 67, 
        67.5, 68, 68.5, 69, 69.5, 
        70, 70.5, 71, 71.5, 72, 
        72.5, 73, 73.5, 74, 74.5, 
        75, 75.5, 76, 76.5, 77, 
        77.5, 78, 78.5, 79, 79.5, 
        80, 80.5, 81, 81.5, 82, 
        82.5, 83, 83.5, 84, 84.5, 
        85, 85.5, 86, 86.5, 87, 
        87.5, 88, 88.5, 89, 89.5, 
        90, 90.5, 91, 91.5, 92, 
        92.5, 93, 93.5, 94, 94.5, 
        95, 95.5, 96, 96.5, 97, 
        97.5, 98, 98.5, 99, 99.5, 
        100, 100.5, 101, 101.5, 102, 
        102.5, 103, 103.5, 104, 104.5, 
        105, 105.5, 106, 106.5, 107, 
        107.5, 108, 108.5, 109, 109.5, 
        110, 110.5, 111, 111.5, 112, 
        112.5, 113, 113.5, 114, 114.5, 
        115, 115.5, 116, 116.5, 117, 
        117.5, 118, 118.5, 119, 119.5, 
        120, 120.5, 121, 121.5, 122, 
        122.5, 123, 123.5, 124, 124.5, 
        125, 125.5, 126, 126.5, 127, 
        127.5, 0, 0.5, 1, 1.5, 
        2, 2.5, 3, 3.5, 4, 
        4.5, 5, 5.5, 6, 6.5, 
        7, 7.5, 8, 8.5, 9, 
        9.5, 10, 10.5, 11, 11.5, 
        12, 12.5, 13, 13.5, 14, 
        14.5, 15, 15.5, 16, 16.5, 
        17, 17.5, 18, 18.5, 19, 
        19.5, 20, 20.5, 21, 21.5, 
        22, 22.5, 23, 23.5, 24, 
        24.5, 25, 25.5, 26, 26.5, 
        27, 27.5, 28, 28.5, 29, 
        29.5, 30, 30.5, 31, 31.5, 
        32, 32.5, 33, 33.5, 34, 
        34.5, 35, 35.5, 36, 36.5, 
        37, 37.5, 38, 38.5, 39, 
        39.5, 40, 40.5, 41, 41.5, 
        42, 42.5, 43, 43.5, 44, 
        44.5, 45, 45.5, 46, 46.5, 
        47, 47.5, 48, 48.5, 49, 
        49.5, 50, 50.5, 51, 51.5, 
        52, 52.5, 53, 53.5, 54, 
        54.5, 55, 55.5, 56, 56.5, 
        57, 57.5, 58, 58.5, 59, 
        59.5, 60, 60.5, 61, 61.5, 
        62, 62.5, 63, 63.5, 64, 
        64.5, 65, 65.5, 66, 66.5, 
        67, 67.5, 68, 68.5, 69, 
        69.5, 70, 70.5, 71, 71.5, 
        72, 72.5, 73, 73.5, 74, 
        74.5, 75, 75.5, 76, 76.5, 
        77, 77.5, 78, 78.5, 79, 
        79.5, 80, 80.5, 81, 81.5, 
        82, 82.5, 83, 83.5, 84, 
        84.5, 85, 85.5, 86, 86.5, 
        87, 87.5, 88, 88.5, 89, 
        89.5, 90, 90.5, 91, 91.5, 
        92, 92.5, 93, 93.5, 94, 
        94.5, 95, 95.5, 96, 96.5, 
        97, 97.5, 98, 98.5, 99, 
        99.5, 100, 100.5, 101, 101.5, 
        102, 102.5, 103, 103.5, 104, 
        104.5, 105, 105.5, 106, 106.5, 
        107, 107.5, 108, 108.5, 109, 
        109.5, 110, 110.5, 111, 111.5, 
        112, 112.5, 113, 113.5, 114, 
        114.5, 115, 115.5, 116, 116.5, 
        117, 117.5, 118, 118.5, 119, 
        119.5, 120, 120.5, 121, 121.5, 
        122, 122.5, 123, 123.5, 124, 
        124.5, 125, 125.5, 126, 126.5, 
        127, 127.5, 0, 0.5, 1, 
        1.5, 2, 2.5, 3, 3.5, 
        4, 4.5, 5, 5.5, 6, 
        6.5, 7, 7.5, 8, 8.5, 
        9, 9.5, 10, 10.5, 11, 
        11.5, 12, 12.5, 13, 13.5, 
        14, 14.5, 15, 15.5, 16, 
        16.5, 17, 17.5, 18, 18.5, 
        19, 19.5, 20, 20.5, 21, 
        21.5, 22, 22.5, 23, 23.5, 
        24, 24.5, 25, 25.5, 26, 
        26.5, 27, 27.5, 28, 28.5, 
        29, 29.5, 30, 30.5, 31, 
        31.5, 32, 32.5, 33, 33.5, 
        34, 34.5, 35, 35.5, 36, 
        36.5, 37, 37.5, 38, 38.5, 
        39, 39.5, 40, 40.5, 41, 
        41.5, 42, 42.5, 43, 43.5, 
        44, 44.5, 45, 45.5, 46, 
        46.5, 47, 47.5, 48, 48.5, 
        49, 49.5, 50, 50.5, 51, 
        51.5, 52, 52.5, 53, 53.5, 
        54, 54.5, 55, 55.5, 56, 
        56.5, 57, 57.5, 58, 58.5, 
        59, 59.5, 60, 60.5, 61, 
        61.5, 62, 62.5, 63, 63.5, 
        64, 64.5, 65, 65.5, 66, 
        66.5, 67, 67.5, 68, 68.5, 
        69, 69.5, 70, 70.5, 71, 
        71.5, 72, 72.5, 73, 73.5, 
        74, 74.5, 75, 75.5, 76, 
        76.5, 77, 77.5, 78, 78.5, 
        79, 79.5, 80, 80.5, 81, 
        81.5, 82, 82.5, 83, 83.5, 
        84, 84.5, 85, 85.5, 86, 
        86.5, 87, 87.5, 88, 88.5, 
        89, 89.5, 90, 90.5, 91, 
        91.5, 92, 92.5, 93, 93.5, 
        94, 94.5, 95, 95.5, 96, 
        96.5, 97, 97.5, 98, 98.5, 
        99, 99.5, 100, 100.5, 101, 
        101.5, 102, 102.5, 103, 103.5, 
        104, 104.5, 105, 105.5, 106, 
        106.5, 107, 107.5, 108, 108.5, 
        109, 109.5, 110, 110.5, 111, 
        111.5, 112, 112.5, 113, 113.5, 
        114, 114.5, 115, 115.5, 116, 
        116.5, 117, 117.5, 118, 118.5, 
        119, 119.5, 120, 120.5, 121, 
        121.5, 122, 122.5, 123, 123.5, 
        124, 124.5, 125, 125.5, 126, 
        126.5, 127, 127.5, 0, 0.5, 
        1, 1.5, 2, 2.5, 3, 
        3.5, 4, 4.5, 5, 5.5, 
        6, 6.5, 7, 7.5, 8, 
        8.5, 9, 9.5, 10, 10.5, 
        11, 11.5, 12, 12.5, 13, 
        13.5, 14, 14.5, 15, 15.5, 
        16, 16.5, 17, 17.5, 18, 
        18.5, 19, 19.5, 20, 20.5, 
        21, 21.5, 22, 22.5, 23, 
        23.5, 24, 24.5, 25, 25.5, 
        26, 26.5, 27, 27.5, 28, 
        28.5, 29, 29.5, 30, 30.5, 
        31, 31.5, 32, 32.5, 33, 
        33.5, 34, 34.5, 35, 35.5, 
        36, 36.5, 37, 37.5, 38, 
        38.5, 39, 39.5, 40, 40.5, 
        41, 41.5, 42, 42.5, 43, 
        43.5, 44, 44.5, 45, 45.5, 
        46, 46.5, 47, 47.5, 48, 
        48.5, 49, 49.5, 50, 50.5, 
        51, 51.5, 52, 52.5, 53, 
        53.5, 54, 54.5, 55, 55.5, 
        56, 56.5, 57, 57.5, 58, 
        58.5, 59, 59.5, 60, 60.5, 
        61, 61.5, 62, 62.5, 63, 
        63.5, 64, 64.5, 65, 65.5, 
        66, 66.5, 67, 67.5, 68, 
        68.5, 69, 69.5, 70, 70.5, 
        71, 71.5, 72, 72.5, 73, 
        73.5, 74, 74.5, 75, 75.5, 
        76, 76.5, 77, 77.5, 78, 
        78.5, 79, 79.5, 80, 80.5, 
        81, 81.5, 82, 82.5, 83, 
        83.5, 84, 84.5, 85, 85.5, 
        86, 86.5, 87, 87.5, 88, 
        88.5, 89, 89.5, 90, 90.5, 
        91, 91.5, 92, 92.5, 93, 
        93.5, 94, 94.5, 95, 95.5, 
        96, 96.5, 97, 97.5, 98, 
        98.5, 99, 99.5, 100, 100.5, 
        101, 101.5, 102, 102.5, 103, 
        103.5, 104, 104.5, 105, 105.5, 
        106, 106.5, 107, 107.5, 108, 
        108.5, 109, 109.5, 110, 110.5, 
        111, 111.5, 112, 112.5, 113, 
        113.5, 114, 114.5, 115, 115.5, 
        116, 116.5, 117, 117.5, 118, 
        118.5, 119, 119.5, 120, 120.5, 
        121, 121.5, 122, 122.5, 123, 
        123.5, 124, 124.5, 125, 125.5, 
        126, 126.5, 127, 127.5, 0, 
        0.5, 1, 1.5, 2, 2.5, 
        3, 3.5, 4, 4.5, 5, 
        5.5, 6, 6.5, 7, 7.5, 
        8, 8.5, 9, 9.5, 10, 
        10.5, 11, 11.5, 12, 12.5, 
        13, 13.5, 14, 14.5, 15, 
        15.5, 16, 16.5, 17, 17.5, 
        18, 18.5, 19, 19.5, 20, 
        20.5, 21, 21.5, 22, 22.5, 
        23, 23.5, 24, 24.5, 25, 
        25.5, 26, 26.5, 27, 27.5, 
        28, 28.5, 29, 29.5, 30, 
        30.5, 31, 31.5, 32, 32.5, 
        33, 33.5, 34, 34.5, 35, 
        35.5, 36, 36.5, 37, 37.5, 
        38, 38.5, 39, 39.5, 40, 
        40.5, 41, 41.5, 42, 42.5, 
        43, 43.5, 44, 44.5, 45, 
        45.5, 46, 46.5, 47, 47.5, 
        48, 48.5, 49, 49.5, 50, 
        50.5, 51, 51.5, 52, 52.5, 
        53, 53.5, 54, 54.5, 55, 
        55.5, 56, 56.5, 57, 57.5, 
        58, 58.5, 59, 59.5, 60, 
        60.5, 61, 61.5, 62, 62.5, 
        63, 63.5, 64, 64.5, 65, 
        65.5, 66, 66.5, 67, 67.5, 
        68, 68.5, 69, 69.5, 70, 
        70.5, 71, 71.5, 72, 72.5, 
        73, 73.5, 74, 74.5, 75, 
        75.5, 76, 76.5, 77, 77.5, 
        78, 78.5, 79, 79.5, 80, 
        80.5, 81, 81.5, 82, 82.5, 
        83, 83.5, 84, 84.5, 85, 
        85.5, 86, 86.5, 87, 87.5, 
        88, 88.5, 89, 89.5, 90, 
        90.5, 91, 91.5, 92, 92.5, 
        93, 93.5, 94, 94.5, 95, 
        95.5, 96, 96.5, 97, 97.5, 
        98, 98.5, 99, 99.5, 100, 
        100.5, 101, 101.5, 102, 102.5, 
        103, 103.5, 104, 104.5, 105, 
        105.5, 106, 106.5, 107, 107.5, 
        108, 108.5, 109, 109.5, 110, 
        110.5, 111, 111.5, 112, 112.5, 
        113, 113.5, 114, 114.5, 115, 
        115.5, 116, 116.5, 117, 117.5, 
        118, 118.5, 119, 119.5, 120, 
        120.5, 121, 121.5, 122, 122.5, 
        123, 123.5, 124, 124.5, 125, 
        125.5, 126, 126.5, 127, 127.5, 
        0, 0.5, 1, 1.5, 2, 
        2.5, 3, 3.5, 4, 4.5, 
        5, 5.5, 6, 6.5, 7, 
        7.5, 8, 8.5, 9, 9.5, 
        10, 10.5, 11, 11.5, 12, 
        12.5, 13, 13.5, 14, 14.5, 
        15, 15.5, 16, 16.5, 17, 
        17.5, 18, 18.5, 19, 19.5, 
        20, 20.5, 21, 21.5, 22, 
        22.5, 23, 23.5, 24, 24.5, 
        25, 25.5, 26, 26.5, 27, 
        27.5, 28, 28.5, 29, 29.5, 
        30, 30.5, 31, 31.5, 32, 
        32.5, 33, 33.5, 34, 34.5, 
        35, 35.5, 36, 36.5, 37, 
        37.5, 38, 38.5, 39, 39.5, 
        40, 40.5, 41, 41.5, 42, 
        42.5, 43, 43.5, 44, 44.5, 
        45, 45.5, 46, 46.5, 47, 
        47.5, 48, 48.5, 49, 49.5, 
        50, 50.5, 51, 51.5, 52, 
        52.5, 53, 53.5, 54, 54.5, 
        55, 55.5, 56, 56.5, 57, 
        57.5, 58, 58.5, 59, 59.5, 
        60, 60.5, 61, 61.5, 62, 
        62.5, 63, 63.5, 64, 64.5, 
        65, 65.5, 66, 66.5, 67, 
        67.5, 68, 68.5, 69, 69.5, 
        70, 70.5, 71, 71.5, 72, 
        72.5, 73, 73.5, 74, 74.5, 
        75, 75.5, 76, 76.5, 77, 
        77.5, 78, 78.5, 79, 79.5, 
        80, 80.5, 81, 81.5, 82, 
        82.5, 83, 83.5, 84, 84.5, 
        85, 85.5, 86, 86.5, 87, 
        87.5, 88, 88.5, 89, 89.5, 
        90, 90.5, 91, 91.5, 92, 
        92.5, 93, 93.5, 94, 94.5, 
        95, 95.5, 96, 96.5, 97, 
        97.5, 98, 98.5, 99, 99.5, 
        100, 100.5, 101, 101.5, 102, 
        102.5, 103, 103.5, 104, 104.5, 
        105, 105.5, 106, 106.5, 107, 
        107.5, 108, 108.5, 109, 109.5, 
        110, 110.5, 111, 111.5, 112, 
        112.5, 113, 113.5, 114, 114.5, 
        115, 115.5, 116, 116.5, 117, 
        117.5, 118, 118.5, 119, 119.5, 
        120, 120.5, 121, 121.5, 122, 
        122.5, 123, 123.5, 124, 124.5, 
        125, 125.5, 126, 126.5, 127, 
        127.5, 0, 0.5, 1, 1.5, 
        2, 2.5, 3, 3.5, 4, 
        4.5, 5, 5.5, 6, 6.5, 
        7, 7.5, 8, 8.5, 9, 
        9.5, 10, 10.5, 11, 11.5, 
        12, 12.5, 13, 13.5, 14, 
        14.5, 15, 15.5, 16, 16.5, 
        17, 17.5, 18, 18.5, 19, 
        19.5, 20, 20.5, 21, 21.5, 
        22, 22.5, 23, 23.5, 24, 
        24.5, 25, 25.5, 26, 26.5, 
        27, 27.5, 28, 28.5, 29, 
        29.5, 30, 30.5, 31, 31.5, 
        32, 32.5, 33, 33.5, 34, 
        34.5, 35, 35.5, 36, 36.5, 
        37, 37.5, 38, 38.5, 39, 
        39.5, 40, 40.5, 41, 41.5, 
        42, 42.5, 43, 43.5, 44, 
        44.5, 45, 45.5, 46, 46.5, 
        47, 47.5, 48, 48.5, 49, 
        49.5, 50, 50.5, 51, 51.5, 
        52, 52.5, 53, 53.5, 54, 
        54.5, 55, 55.5, 56, 56.5, 
        57, 57.5, 58, 58.5, 59, 
        59.5, 60, 60.5, 61, 61.5, 
        62, 62.5, 63, 63.5, 64, 
        64.5, 65, 65.5, 66, 66.5, 
        67, 67.5, 68, 68.5, 69, 
        69.5, 70, 70.5, 71, 71.5, 
        72, 72.5, 73, 73.5, 74, 
        74.5, 75, 75.5, 76, 76.5, 
        77, 77.5, 78, 78.5, 79, 
        79.5, 80, 80.5, 81, 81.5, 
        82, 82.5, 83, 83.5, 84, 
        84.5, 85, 85.5, 86, 86.5, 
        87, 87.5, 88, 88.5, 89, 
        89.5, 90, 90.5, 91, 91.5, 
        92, 92.5, 93, 93.5, 94, 
        94.5, 95, 95.5, 96, 96.5, 
        97, 97.5, 98, 98.5, 99, 
        99.5, 100, 100.5, 101, 101.5, 
        102, 102.5, 103, 103.5, 104, 
        104.5, 105, 105.5, 106, 106.5, 
        107, 107.5, 108, 108.5, 109, 
        109.5, 110, 110.5, 111, 111.5, 
        112, 112.5, 113, 113.5, 114, 
        114.5, 115, 115.5, 116, 116.5, 
        117, 117.5, 118, 118.5, 119, 
        119.5, 120, 120.5, 121, 121.5, 
        122, 122.5, 123, 123.5, 124, 
        124.5, 125, 125.5, 126, 126.5, 
        127, 127.5, 0, 0.5, 1, 
        1.5, 2, 2.5, 3, 3.5, 
        4, 4.5, 5, 5.5, 6, 
        6.5, 7, 7.5, 8, 8.5, 
        9, 9.5, 10, 10.5, 11, 
        11.5, 12, 12.5, 13, 13.5, 
        14, 14.5, 15, 15.5, 16, 
        16.5, 17, 17.5, 18, 18.5, 
        19, 19.5, 20, 20.5, 21, 
        21.5, 22, 22.5, 23, 23.5, 
        24, 24.5, 25, 25.5, 26, 
        26.5, 27, 27.5, 28, 28.5, 
        29, 29.5, 30, 30.5, 31, 
        31.5, 32, 32.5, 33, 33.5, 
        34, 34.5, 35, 35.5, 36, 
        36.5, 37, 37.5, 38, 38.5, 
        39, 39.5, 40, 40.5, 41, 
        41.5, 42, 42.5, 43, 43.5, 
        44, 44.5, 45, 45.5, 46, 
        46.5, 47, 47.5, 48, 48.5, 
        49, 49.5, 50, 50.5, 51, 
        51.5, 52, 52.5, 53, 53.5, 
        54, 54.5, 55, 55.5, 56, 
        56.5, 57, 57.5, 58, 58.5, 
        59, 59.5, 60, 60.5, 61, 
        61.5, 62, 62.5, 63, 63.5, 
        64, 64.5, 65, 65.5, 66, 
        66.5, 67, 67.5, 68, 68.5, 
        69, 69.5, 70, 70.5, 71, 
        71.5, 72, 72.5, 73, 73.5, 
        74, 74.5, 75, 75.5, 76, 
        76.5, 77, 77.5, 78, 78.5, 
        79, 79.5, 80, 80.5, 81, 
        81.5, 82, 82.5, 83, 83.5, 
        84, 84.5, 85, 85.5, 86, 
        86.5, 87, 87.5, 88, 88.5, 
        89, 89.5, 90, 90.5, 91, 
        91.5, 92, 92.5, 93, 93.5, 
        94, 94.5, 95, 95.5, 96, 
        96.5, 97, 97.5, 98, 98.5, 
        99, 99.5, 100, 100.5, 101, 
        101.5, 102, 102.5, 103, 103.5, 
        104, 104.5, 105, 105.5, 106, 
        106.5, 107, 107.5, 108, 108.5, 
        109, 109.5, 110, 110.5, 111, 
        111.5, 112, 112.5, 113, 113.5, 
        114, 114.5, 115, 115.5, 116, 
        116.5, 117, 117.5, 118, 118.5, 
        119, 119.5, 120, 120.5, 121, 
        121.5, 122, 122.5, 123, 123.5, 
        124, 124.5, 125, 125.5, 126, 
        126.5, 127, 127.5, 0, 0.5, 
        1, 1.5, 2, 2.5, 3, 
        3.5, 4, 4.5, 5, 5.5, 
        6, 6.5, 7, 7.5, 8, 
        8.5, 9, 9.5, 10, 10.5, 
        11, 11.5, 12, 12.5, 13, 
        13.5, 14, 14.5, 15, 15.5, 
        16, 16.5, 17, 17.5, 18, 
        18.5, 19, 19.5, 20, 20.5, 
        21, 21.5, 22, 22.5, 23, 
        23.5, 24, 24.5, 25, 25.5, 
        26, 26.5, 27, 27.5, 28, 
        28.5, 29, 29.5, 30, 30.5, 
        31, 31.5, 32, 32.5, 33, 
        33.5, 34, 34.5, 35, 35.5, 
        36, 36.5, 37, 37.5, 38, 
        38.5, 39, 39.5, 40, 40.5, 
        41, 41.5, 42, 42.5, 43, 
        43.5, 44, 44.5, 45, 45.5, 
        46, 46.5, 47, 47.5, 48, 
        48.5, 49, 49.5, 50, 50.5, 
        51, 51.5, 52, 52.5, 53, 
        53.5, 54, 54.5, 55, 55.5, 
        56, 56.5, 57, 57.5, 58, 
        58.5, 59, 59.5, 60, 60.5, 
        61, 61.5, 62, 62.5, 63, 
        63.5, 64, 64.5, 65, 65.5, 
        66, 66.5, 67, 67.5, 68, 
        68.5, 69, 69.5, 70, 70.5, 
        71, 71.5, 72, 72.5, 73, 
        73.5, 74, 74.5, 75, 75.5, 
        76, 76.5, 77, 77.5, 78, 
        78.5, 79, 79.5, 80, 80.5, 
        81, 81.5, 82, 82.5, 83, 
        83.5, 84, 84.5, 85, 85.5, 
        86, 86.5, 87, 87.5, 88, 
        88.5, 89, 89.5, 90, 90.5, 
        91, 91.5, 92, 92.5, 93, 
        93.5, 94, 94.5, 95, 95.5, 
        96, 96.5, 97, 97.5, 98, 
        98.5, 99, 99.5, 100, 100.5, 
        101, 101.5, 102, 102.5, 103, 
        103.5, 104, 104.5, 105, 105.5, 
        106, 106.5, 107, 107.5, 108, 
        108.5, 109, 109.5, 110, 110.5, 
        111, 111.5, 112, 112.5, 113, 
        113.5, 114, 114.5, 115, 115.5, 
        116, 116.5, 117, 117.5, 118, 
        118.5, 119, 119.5, 120, 120.5, 
        121, 121.5, 122, 122.5, 123, 
        123.5, 124, 124.5, 125, 125.5, 
        126, 126.5, 127, 127.5, 0, 
        0.5, 1, 1.5, 2, 2.5, 
        3, 3.5, 4, 4.5, 5, 
        5.5, 6, 6.5, 7, 7.5, 
        8, 8.5, 9, 9.5, 10, 
        10.5, 11, 11.5, 12, 12.5, 
        13, 13.5, 14, 14.5, 15, 
        15.5, 16, 16.5, 17, 17.5, 
        18, 18.5, 19, 19.5, 20, 
        20.5, 21, 21.5, 22, 22.5, 
        23, 23.5, 24, 24.5, 25, 
        25.5, 26, 26.5, 27, 27.5, 
        28, 28.5, 29, 29.5, 30, 
        30.5, 31, 31.5, 32, 32.5, 
        33, 33.5, 34, 34.5, 35, 
        35.5, 36, 36.5, 37, 37.5, 
        38, 38.5, 39, 39.5, 40, 
        40.5, 41, 41.5, 42, 42.5, 
        43, 43.5, 44, 44.5, 45, 
        45.5, 46, 46.5, 47, 47.5, 
        48, 48.5, 49, 49.5, 50, 
        50.5, 51, 51.5, 52, 52.5, 
        53, 53.5, 54, 54.5, 55, 
        55.5, 56, 56.5, 57, 57.5, 
        58, 58.5, 59, 59.5, 60, 
        60.5, 61, 61.5, 62, 62.5, 
        63, 63.5, 64, 64.5, 65, 
        65.5, 66, 66.5, 67, 67.5, 
        68, 68.5, 69, 69.5, 70, 
        70.5, 71, 71.5, 72, 72.5, 
        73, 73.5, 74, 74.5, 75, 
        75.5, 76, 76.5, 77, 77.5, 
        78, 78.5, 79, 79.5, 80, 
        80.5, 81, 81.5, 82, 82.5, 
        83, 83.5, 84, 84.5, 85, 
        85.5, 86, 86.5, 87, 87.5, 
        88, 88.5, 89, 89.5, 90, 
        90.5, 91, 91.5, 92, 92.5, 
        93, 93.5, 94, 94.5, 95, 
        95.5, 96, 96.5, 97, 97.5, 
        98, 98.5, 99, 99.5, 100, 
        100.5, 101, 101.5, 102, 102.5, 
        103, 103.5, 104, 104.5, 105, 
        105.5, 106, 106.5, 107, 107.5, 
        108, 108.5, 109, 109.5, 110, 
        110.5, 111, 111.5, 112, 112.5, 
        113, 113.5, 114, 114.5, 115, 
        115.5, 116, 116.5, 117, 117.5, 
        118, 118.5, 119, 119.5, 120, 
        120.5, 121, 121.5, 122, 122.5, 
        123, 123.5, 124, 124.5, 125, 
        125.5, 126, 126.5, 127, 127.5, 
        0, 0.5, 1, 1.5, 2, 
        2.5, 3, 3.5, 4, 4.5, 
        5, 5.5, 6, 6.5, 7, 
        7.5, 8, 8.5, 9, 9.5, 
        10, 10.5, 11, 11.5, 12, 
        12.5, 13, 13.5, 14, 14.5, 
        15, 15.5, 16, 16.5, 17, 
        17.5, 18, 18.5, 19, 19.5, 
        20, 20.5, 21, 21.5, 22, 
        22.5, 23, 23.5, 24, 24.5, 
        25, 25.5, 26, 26.5, 27, 
        27.5, 28, 28.5, 29, 29.5, 
        30, 30.5, 31, 31.5, 32, 
        32.5, 33, 33.5, 34, 34.5, 
        35, 35.5, 36, 36.5, 37, 
        37.5, 38, 38.5, 39, 39.5, 
        40, 40.5, 41, 41.5, 42, 
        42.5, 43, 43.5, 44, 44.5, 
        45, 45.5, 46, 46.5, 47, 
        47.5, 48, 48.5, 49, 49.5, 
        50, 50.5, 51, 51.5, 52, 
        52.5, 53, 53.5, 54, 54.5, 
        55, 55.5, 56, 56.5, 57, 
        57.5, 58, 58.5, 59, 59.5, 
        60, 60.5, 61, 61.5, 62, 
        62.5, 63, 63.5, 64, 64.5, 
        65, 65.5, 66, 66.5, 67, 
        67.5, 68, 68.5, 69, 69.5, 
        70, 70.5, 71, 71.5, 72, 
        72.5, 73, 73.5, 74, 74.5, 
        75, 75.5, 76, 76.5, 77, 
        77.5, 78, 78.5, 79, 79.5, 
        80, 80.5, 81, 81.5, 82, 
        82.5, 83, 83.5, 84, 84.5, 
        85, 85.5, 86, 86.5, 87, 
        87.5, 88, 88.5, 89, 89.5, 
        90, 90.5, 91, 91.5, 92, 
        92.5, 93, 93.5, 94, 94.5, 
        95, 95.5, 96, 96.5, 97, 
        97.5, 98, 98.5, 99, 99.5, 
        100, 100.5, 101, 101.5, 102, 
        102.5, 103, 103.5, 104, 104.5, 
        105, 105.5, 106, 106.5, 107, 
        107.5, 108, 108.5, 109, 109.5, 
        110, 110.5, 111, 111.5, 112, 
        112.5, 113, 113.5, 114, 114.5, 
        115, 115.5, 116, 116.5, 117, 
        117.5, 118, 118.5, 119, 119.5, 
        120, 120.5, 121, 121.5, 122, 
        122.5, 123, 123.5, 124, 124.5, 
        125, 125.5, 126, 126.5, 127, 
        127.5, 0, 0.5, 1, 1.5, 
        2, 2.5, 3, 3.5, 4, 
        4.5, 5, 5.5, 6, 6.5, 
        7, 7.5, 8, 8.5, 9, 
        9.5, 10, 10.5, 11, 11.5, 
        12, 12.5, 13, 13.5, 14, 
        14.5, 15, 15.5, 16, 16.5, 
        17, 17.5, 18, 18.5, 19, 
        19.5, 20, 20.5, 21, 21.5, 
        22, 22.5, 23, 23.5, 24, 
        24.5, 25, 25.5, 26, 26.5, 
        27, 27.5, 28, 28.5, 29, 
        29.5, 30, 30.5, 31, 31.5, 
        32, 32.5, 33, 33.5, 34, 
        34.5, 35, 35.5, 36, 36.5, 
        37, 37.5, 38, 38.5, 39, 
        39.5, 40, 40.5, 41, 41.5, 
        42, 42.5, 43, 43.5, 44, 
        44.5, 45, 45.5, 46, 46.5, 
        47, 47.5, 48, 48.5, 49, 
        49.5, 50, 50.5, 51, 51.5, 
        52, 52.5, 53, 53.5, 54, 
        54.5, 55, 55.5, 56, 56.5, 
        57, 57.5, 58, 58.5, 59, 
        59.5, 60, 60.5, 61, 61.5, 
        62, 62.5, 63, 63.5, 64, 
        64.5, 65, 65.5, 66, 66.5, 
        67, 67.5, 68, 68.5, 69, 
        69.5, 70, 70.5, 71, 71.5, 
        72, 72.5, 73, 73.5, 74, 
        74.5, 75, 75.5, 76, 76.5, 
        77, 77.5, 78, 78.5, 79, 
        79.5, 80, 80.5, 81, 81.5, 
        82, 82.5, 83, 83.5, 84, 
        84.5, 85, 85.5, 86, 86.5, 
        87, 87.5, 88, 88.5, 89, 
        89.5, 90, 90.5, 91, 91.5, 
        92, 92.5, 93, 93.5, 94, 
        94.5, 95, 95.5, 96, 96.5, 
        97, 97.5, 98, 98.5, 99, 
        99.5, 100, 100.5, 101, 101.5, 
        102, 102.5, 103, 103.5, 104, 
        104.5, 105, 105.5, 106, 106.5, 
        107, 107.5, 108, 108.5, 109, 
        109.5, 110, 110.5, 111, 111.5, 
        112, 112.5, 113, 113.5, 114, 
        114.5, 115, 115.5, 116, 116.5, 
        117, 117.5, 118, 118.5, 119, 
        119.5, 120, 120.5, 121, 121.5, 
        122, 122.5, 123, 123.5, 124, 
        124.5, 125, 125.5, 126, 126.5, 
        127, 127.5, 0, 0.5, 1, 
        1.5, 2, 2.5, 3, 3.5, 
        4, 4.5, 5, 5.5, 6, 
        6.5, 7, 7.5, 8, 8.5, 
        9, 9.5, 10, 10.5, 11, 
        11.5, 12, 12.5, 13, 13.5, 
        14, 14.5, 15, 15.5, 16, 
        16.5, 17, 17.5, 18, 18.5, 
        19, 19.5, 20, 20.5, 21, 
        21.5, 22, 22.5, 23, 23.5, 
        24, 24.5, 25, 25.5, 26, 
        26.5, 27, 27.5, 28, 28.5, 
        29, 29.5, 30, 30.5, 31, 
        31.5, 32, 32.5, 33, 33.5, 
        34, 34.5, 35, 35.5, 36, 
        36.5, 37, 37.5, 38, 38.5, 
        39, 39.5, 40, 40.5, 41, 
        41.5, 42, 42.5, 43, 43.5, 
        44, 44.5, 45, 45.5, 46, 
        46.5, 47, 47.5, 48, 48.5, 
        49, 49.5, 50, 50.5, 51, 
        51.5, 52, 52.5, 53, 53.5, 
        54, 54.5, 55, 55.5, 56, 
        56.5, 57, 57.5, 58, 58.5, 
        59, 59.5, 60, 60.5, 61, 
        61.5, 62, 62.5, 63, 63.5, 
        64, 64.5, 65, 65.5, 66, 
        66.5, 67, 67.5, 68, 68.5, 
        69, 69.5, 70, 70.5, 71, 
        71.5, 72, 72.5, 73, 73.5, 
        74, 74.5, 75, 75.5, 76, 
        76.5, 77, 77.5, 78, 78.5, 
        79, 79.5, 80, 80.5, 81, 
        81.5, 82, 82.5, 83, 83.5, 
        84, 84.5, 85, 85.5, 86, 
        86.5, 87, 87.5, 88, 88.5, 
        89, 89.5, 90, 90.5, 91, 
        91.5, 92, 92.5, 93, 93.5, 
        94, 94.5, 95, 95.5, 96, 
        96.5, 97, 97.5, 98, 98.5, 
        99, 99.5, 100, 100.5, 101, 
        101.5, 102, 102.5, 103, 103.5, 
        104, 104.5, 105, 105.5, 106, 
        106.5, 107, 107.5, 108, 108.5, 
        109, 109.5, 110, 110.5, 111, 
        111.5, 112, 112.5, 113, 113.5, 
        114, 114.5, 115, 115.5, 116, 
        116.5, 117, 117.5, 118, 118.5, 
        119, 119.5, 120, 120.5, 121, 
        121.5, 122, 122.5, 123, 123.5, 
        124, 124.5, 125, 125.5, 126, 
        126.5, 127, 127.5, 0, 0.5, 
        1, 1.5, 2, 2.5, 3, 
        3.5, 4, 4.5, 5, 5.5, 
        6, 6.5, 7, 7.5, 8, 
        8.5, 9, 9.5, 10, 10.5, 
        11, 11.5, 12, 12.5, 13, 
        13.5, 14, 14.5, 15, 15.5, 
        16, 16.5, 17, 17.5, 18, 
        18.5, 19, 19.5, 20, 20.5, 
        21, 21.5, 22, 22.5, 23, 
        23.5, 24, 24.5, 25, 25.5, 
        26, 26.5, 27, 27.5, 28, 
        28.5, 29, 29.5, 30, 30.5, 
        31, 31.5, 32, 32.5, 33, 
        33.5, 34, 34.5, 35, 35.5, 
        36, 36.5, 37, 37.5, 38, 
        38.5, 39, 39.5, 40, 40.5, 
        41, 41.5, 42, 42.5, 43, 
        43.5, 44, 44.5, 45, 45.5, 
        46, 46.5, 47, 47.5, 48, 
        48.5, 49, 49.5, 50, 50.5, 
        51, 51.5, 52, 52.5, 53, 
        53.5, 54, 54.5, 55, 55.5, 
        56, 56.5, 57, 57.5, 58, 
        58.5, 59, 59.5, 60, 60.5, 
        61, 61.5, 62, 62.5, 63, 
        63.5, 64, 64.5, 65, 65.5, 
        66, 66.5, 67, 67.5, 68, 
        68.5, 69, 69.5, 70, 70.5, 
        71, 71.5, 72, 72.5, 73, 
        73.5, 74, 74.5, 75, 75.5, 
        76, 76.5, 77, 77.5, 78, 
        78.5, 79, 79.5, 80, 80.5, 
        81, 81.5, 82, 82.5, 83, 
        83.5, 84, 84.5, 85, 85.5, 
        86, 86.5, 87, 87.5, 88, 
        88.5, 89, 89.5, 90, 90.5, 
        91, 91.5, 92, 92.5, 93, 
        93.5, 94, 94.5, 95, 95.5, 
        96, 96.5, 97, 97.5, 98, 
        98.5, 99, 99.5, 100, 100.5, 
        101, 101.5, 102, 102.5, 103, 
        103.5, 104, 104.5, 105, 105.5, 
        106, 106.5, 107, 107.5, 108, 
        108.5, 109, 109.5, 110, 110.5, 
        111, 111.5, 112, 112.5, 113, 
        113.5, 114, 114.5, 115, 115.5, 
        116, 116.5, 117, 117.5, 118, 
        118.5, 119, 119.5, 120, 120.5, 
        121, 121.5, 122, 122.5, 123, 
        123.5, 124, 124.5, 125, 125.5, 
        126, 126.5, 127, 127.5, 0, 
        0.5, 1, 1.5, 2, 2.5, 
        3, 3.5, 4, 4.5, 5, 
        5.5, 6, 6.5, 7, 7.5, 
        8, 8.5, 9, 9.5, 10, 
        10.5, 11, 11.5, 12, 12.5, 
        13, 13.5, 14, 14.5, 15, 
        15.5, 16, 16.5, 17, 17.5, 
        18, 18.5, 19, 19.5, 20, 
        20.5, 21, 21.5, 22, 22.5, 
        23, 23.5, 24, 24.5, 25, 
        25.5, 26, 26.5, 27, 27.5, 
        28, 28.5, 29, 29.5, 30, 
        30.5, 31, 31.5, 32, 32.5, 
        33, 33.5, 34, 34.5, 35, 
        35.5, 36, 36.5, 37, 37.5, 
        38, 38.5, 39, 39.5, 40, 
        40.5, 41, 41.5, 42, 42.5, 
        43, 43.5, 44, 44.5, 45, 
        45.5, 46, 46.5, 47, 47.5, 
        48, 48.5, 49, 49.5, 50, 
        50.5, 51, 51.5, 52, 52.5, 
        53, 53.5, 54, 54.5, 55, 
        55.5, 56, 56.5, 57, 57.5, 
        58, 58.5, 59, 59.5, 60, 
        60.5, 61, 61.5, 62, 62.5, 
        63, 63.5, 64, 64.5, 65, 
        65.5, 66, 66.5, 67, 67.5, 
        68, 68.5, 69, 69.5, 70, 
        70.5, 71, 71.5, 72, 72.5, 
        73, 73.5, 74, 74.5, 75, 
        75.5, 76, 76.5, 77, 77.5, 
        78, 78.5, 79, 79.5, 80, 
        80.5, 81, 81.5, 82, 82.5, 
        83, 83.5, 84, 84.5, 85, 
        85.5, 86, 86.5, 87, 87.5, 
        88, 88.5, 89, 89.5, 90, 
        90.5, 91, 91.5, 92, 92.5, 
        93, 93.5, 94, 94.5, 95, 
        95.5, 96, 96.5, 97, 97.5, 
        98, 98.5, 99, 99.5, 100, 
        100.5, 101, 101.5, 102, 102.5, 
        103, 103.5, 104, 104.5, 105, 
        105.5, 106, 106.5, 107, 107.5, 
        108, 108.5, 109, 109.5, 110, 
        110.5, 111, 111.5, 112, 112.5, 
        113, 113.5, 114, 114.5, 115, 
        115.5, 116, 116.5, 117, 117.5, 
        118, 118.5, 119, 119.5, 120, 
        120.5, 121, 121.5, 122, 122.5, 
        123, 123.5, 124, 124.5, 125, 
        125.5, 126, 126.5, 127, 127.5, 
        0, 0.5, 1, 1.5, 2, 
        2.5, 3, 3.5, 4, 4.5, 
        5, 5.5, 6, 6.5, 7, 
        7.5, 8, 8.5, 9, 9.5, 
        10, 10.5, 11, 11.5, 12, 
        12.5, 13, 13.5, 14, 14.5, 
        15, 15.5, 16, 16.5, 17, 
        17.5, 18, 18.5, 19, 19.5, 
        20, 20.5, 21, 21.5, 22, 
        22.5, 23, 23.5, 24, 24.5, 
        25, 25.5, 26, 26.5, 27, 
        27.5, 28, 28.5, 29, 29.5, 
        30, 30.5, 31, 31.5, 32, 
        32.5, 33, 33.5, 34, 34.5, 
        35, 35.5, 36, 36.5, 37, 
        37.5, 38, 38.5, 39, 39.5, 
        40, 40.5, 41, 41.5, 42, 
        42.5, 43, 43.5, 44, 44.5, 
        45, 45.5, 46, 46.5, 47, 
        47.5, 48, 48.5, 49, 49.5, 
        50, 50.5, 51, 51.5, 52, 
        52.5, 53, 53.5, 54, 54.5, 
        55, 55.5, 56, 56.5, 57, 
        57.5, 58, 58.5, 59, 59.5, 
        60, 60.5, 61, 61.5, 62, 
        62.5, 63, 63.5, 64, 64.5, 
        65, 65.5, 66, 66.5, 67, 
        67.5, 68, 68.5, 69, 69.5, 
        70, 70.5, 71, 71.5, 72, 
        72.5, 73, 73.5, 74, 74.5, 
        75, 75.5, 76, 76.5, 77, 
        77.5, 78, 78.5, 79, 79.5, 
        80, 80.5, 81, 81.5, 82, 
        82.5, 83, 83.5, 84, 84.5, 
        85, 85.5, 86, 86.5, 87, 
        87.5, 88, 88.5, 89, 89.5, 
        90, 90.5, 91, 91.5, 92, 
        92.5, 93, 93.5, 94, 94.5, 
        95, 95.5, 96, 96.5, 97, 
        97.5, 98, 98.5, 99, 99.5, 
        100, 100.5, 101, 101.5, 102, 
        102.5, 103, 103.5, 104, 104.5, 
        105, 105.5, 106, 106.5, 107, 
        107.5, 108, 108.5, 109, 109.5, 
        110, 110.5, 111, 111.5, 112, 
        112.5, 113, 113.5, 114, 114.5, 
        115, 115.5, 116, 116.5, 117, 
        117.5, 118, 118.5, 119, 119.5, 
        120, 120.5, 121, 121.5, 122, 
        122.5, 123, 123.5, 124, 124.5, 
        125, 125.5, 126, 126.5, 127, 
        127.5, 0, 0.5, 1, 1.5, 
        2, 2.5, 3, 3.5, 4, 
        4.5, 5, 5.5, 6, 6.5, 
        7, 7.5, 8, 8.5, 9, 
        9.5, 10, 10.5, 11, 11.5, 
        12, 12.5, 13, 13.5, 14, 
        14.5, 15, 15.5, 16, 16.5, 
        17, 17.5, 18, 18.5, 19, 
        19.5, 20, 20.5, 21, 21.5, 
        22, 22.5, 23, 23.5, 24, 
        24.5, 25, 25.5, 26, 26.5, 
        27, 27.5, 28, 28.5, 29, 
        29.5, 30, 30.5, 31, 31.5, 
        32, 32.5, 33, 33.5, 34, 
        34.5, 35, 35.5, 36, 36.5, 
        37, 37.5, 38, 38.5, 39, 
        39.5, 40, 40.5, 41, 41.5, 
        42, 42.5, 43, 43.5, 44, 
        44.5, 45, 45.5, 46, 46.5, 
        47, 47.5, 48, 48.5, 49, 
        49.5, 50, 50.5, 51, 51.5, 
        52, 52.5, 53, 53.5, 54, 
        54.5, 55, 55.5, 56, 56.5, 
        57, 57.5, 58, 58.5, 59, 
        59.5, 60, 60.5, 61, 61.5, 
        62, 62.5, 63, 63.5, 64, 
        64.5, 65, 65.5, 66, 66.5, 
        67, 67.5, 68, 68.5, 69, 
        69.5, 70, 70.5, 71, 71.5, 
        72, 72.5, 73, 73.5, 74, 
        74.5, 75, 75.5, 76, 76.5, 
        77, 77.5, 78, 78.5, 79, 
        79.5, 80, 80.5, 81, 81.5, 
        82, 82.5, 83, 83.5, 84, 
        84.5, 85, 85.5, 86, 86.5, 
        87, 87.5, 88, 88.5, 89, 
        89.5, 90, 90.5, 91, 91.5, 
        92, 92.5, 93, 93.5, 94, 
        94.5, 95, 95.5, 96, 96.5, 
        97, 97.5, 98, 98.5, 99, 
        99.5, 100, 100.5, 101, 101.5, 
        102, 102.5, 103, 103.5, 104, 
        104.5, 105, 105.5, 106, 106.5, 
        107, 107.5, 108, 108.5, 109, 
        109.5, 110, 110.5, 111, 111.5, 
        112, 112.5, 113, 113.5, 114, 
        114.5, 115, 115.5, 116, 116.5, 
        117, 117.5, 118, 118.5, 119, 
        119.5, 120, 120.5, 121, 121.5, 
        122, 122.5, 123, 123.5, 124, 
        124.5, 125, 125.5, 126, 126.5, 
        127, 127.5, 0, 0.5, 1, 
        1.5, 2, 2.5, 3, 3.5, 
        4, 4.5, 5, 5.5, 6, 
        6.5, 7, 7.5, 8, 8.5, 
        9, 9.5, 10, 10.5, 11, 
        11.5, 12, 12.5, 13, 13.5, 
        14, 14.5, 15, 15.5, 16, 
        16.5, 17, 17.5, 18, 18.5, 
        19, 19.5, 20, 20.5, 21, 
        21.5, 22, 22.5, 23, 23.5, 
        24, 24.5, 25, 25.5, 26, 
        26.5, 27, 27.5, 28, 28.5, 
        29, 29.5, 30, 30.5, 31, 
        31.5, 32, 32.5, 33, 33.5, 
        34, 34.5, 35, 35.5, 36, 
        36.5, 37, 37.5, 38, 38.5, 
        39, 39.5, 40, 40.5, 41, 
        41.5, 42, 42.5, 43, 43.5, 
        44, 44.5, 45, 45.5, 46, 
        46.5, 47, 47.5, 48, 48.5, 
        49, 49.5, 50, 50.5, 51, 
        51.5, 52, 52.5, 53, 53.5, 
        54, 54.5, 55, 55.5, 56, 
        56.5, 57, 57.5, 58, 58.5, 
        59, 59.5, 60, 60.5, 61, 
        61.5, 62, 62.5, 63, 63.5, 
        64, 64.5, 65, 65.5, 66, 
        66.5, 67, 67.5, 68, 68.5, 
        69, 69.5, 70, 70.5, 71, 
        71.5, 72, 72.5, 73, 73.5, 
        74, 74.5, 75, 75.5, 76, 
        76.5, 77, 77.5, 78, 78.5, 
        79, 79.5, 80, 80.5, 81, 
        81.5, 82, 82.5, 83, 83.5, 
        84, 84.5, 85, 85.5, 86, 
        86.5, 87, 87.5, 88, 88.5, 
        89, 89.5, 90, 90.5, 91, 
        91.5, 92, 92.5, 93, 93.5, 
        94, 94.5, 95, 95.5, 96, 
        96.5, 97, 97.5, 98, 98.5, 
        99, 99.5, 100, 100.5, 101, 
        101.5, 102, 102.5, 103, 103.5, 
        104, 104.5, 105, 105.5, 106, 
        106.5, 107, 107.5, 108, 108.5, 
        109, 109.5, 110, 110.5, 111, 
        111.5, 112, 112.5, 113, 113.5, 
        114, 114.5, 115, 115.5, 116, 
        116.5, 117, 117.5, 118, 118.5, 
        119, 119.5, 120, 120.5, 121, 
        121.5, 122, 122.5, 123, 123.5, 
        124, 124.5, 125, 125.5, 126, 
        126.5, 127, 127.5, 0, 0.5, 
        1, 1.5, 2, 2.5, 3, 
        3.5, 4, 4.5, 5, 5.5, 
        6, 6.5, 7, 7.5, 8, 
        8.5, 9, 9.5, 10, 10.5, 
        11, 11.5, 12, 12.5, 13, 
        13.5, 14, 14.5, 15, 15.5, 
        16, 16.5, 17, 17.5, 18, 
        18.5, 19, 19.5, 20, 20.5, 
        21, 21.5, 22, 22.5, 23, 
        23.5, 24, 24.5, 25, 25.5, 
        26, 26.5, 27, 27.5, 28, 
        28.5, 29, 29.5, 30, 30.5, 
        31, 31.5, 32, 32.5, 33, 
        33.5, 34, 34.5, 35, 35.5, 
        36, 36.5, 37, 37.5, 38, 
        38.5, 39, 39.5, 40, 40.5, 
        41, 41.5, 42, 42.5, 43, 
        43.5, 44, 44.5, 45, 45.5, 
        46, 46.5, 47, 47.5, 48, 
        48.5, 49, 49.5, 50, 50.5, 
        51, 51.5, 52, 52.5, 53, 
        53.5, 54, 54.5, 55, 55.5, 
        56, 56.5, 57, 57.5, 58, 
        58.5, 59, 59.5, 60, 60.5, 
        61, 61.5, 62, 62.5, 63, 
        63.5, 64, 64.5, 65, 65.5, 
        66, 66.5, 67, 67.5, 68, 
        68.5, 69, 69.5, 70, 70.5, 
        71, 71.5, 72, 72.5, 73, 
        73.5, 74, 74.5, 75, 75.5, 
        76, 76.5, 77, 77.5, 78, 
        78.5, 79, 79.5, 80, 80.5, 
        81, 81.5, 82, 82.5, 83, 
        83.5, 84, 84.5, 85, 85.5, 
        86, 86.5, 87, 87.5, 88, 
        88.5, 89, 89.5, 90, 90.5, 
        91, 91.5, 92, 92.5, 93, 
        93.5, 94, 94.5, 95, 95.5, 
        96, 96.5, 97, 97.5, 98, 
        98.5, 99, 99.5, 100, 100.5, 
        101, 101.5, 102, 102.5, 103, 
        103.5, 104, 104.5, 105, 105.5, 
        106, 106.5, 107, 107.5, 108, 
        108.5, 109, 109.5, 110, 110.5, 
        111, 111.5, 112, 112.5, 113, 
        113.5, 114, 114.5, 115, 115.5, 
        116, 116.5, 117, 117.5, 118, 
        118.5, 119, 119.5, 120, 120.5, 
        121, 121.5, 122, 122.5, 123, 
        123.5, 124, 124.5, 125, 125.5, 
        126, 126.5, 127, 127.5, 0, 
        0.5, 1, 1.5, 2, 2.5, 
        3, 3.5, 4, 4.5, 5, 
        5.5, 6, 6.5, 7, 7.5, 
        8, 8.5, 9, 9.5, 10, 
        10.5, 11, 11.5, 12, 12.5, 
        13, 13.5, 14, 14.5, 15, 
        15.5, 16, 16.5, 17, 17.5, 
        18, 18.5, 19, 19.5, 20, 
        20.5, 21, 21.5, 22, 22.5, 
        23, 23.5, 24, 24.5, 25, 
        25.5, 26, 26.5, 27, 27.5, 
        28, 28.5, 29, 29.5, 30, 
        30.5, 31, 31.5, 32, 32.5, 
        33, 33.5, 34, 34.5, 35, 
        35.5, 36, 36.5, 37, 37.5, 
        38, 38.5, 39, 39.5, 40, 
        40.5, 41, 41.5, 42, 42.5, 
        43, 43.5, 44, 44.5, 45, 
        45.5, 46, 46.5, 47, 47.5, 
        48, 48.5, 49, 49.5, 50, 
        50.5, 51, 51.5, 52, 52.5, 
        53, 53.5, 54, 54.5, 55, 
        55.5, 56, 56.5, 57, 57.5, 
        58, 58.5, 59, 59.5, 60, 
        60.5, 61, 61.5, 62, 62.5, 
        63, 63.5, 64, 64.5, 65, 
        65.5, 66, 66.5, 67, 67.5, 
        68, 68.5, 69, 69.5, 70, 
        70.5, 71, 71.5, 72, 72.5, 
        73, 73.5, 74, 74.5, 75, 
        75.5, 76, 76.5, 77, 77.5, 
        78, 78.5, 79, 79.5, 80, 
        80.5, 81, 81.5, 82, 82.5, 
        83, 83.5, 84, 84.5, 85, 
        85.5, 86, 86.5, 87, 87.5, 
        88, 88.5, 89, 89.5, 90, 
        90.5, 91, 91.5, 92, 92.5, 
        93, 93.5, 94, 94.5, 95, 
        95.5, 96, 96.5, 97, 97.5, 
        98, 98.5, 99, 99.5, 100, 
        100.5, 101, 101.5, 102, 102.5, 
        103, 103.5, 104, 104.5, 105, 
        105.5, 106, 106.5, 107, 107.5, 
        108, 108.5, 109, 109.5, 110, 
        110.5, 111, 111.5, 112, 112.5, 
        113, 113.5, 114, 114.5, 115, 
        115.5, 116, 116.5, 117, 117.5, 
        118, 118.5, 119, 119.5, 120, 
        120.5, 121, 121.5, 122, 122.5, 
        123, 123.5, 124, 124.5, 125, 
        125.5, 126, 126.5, 127, 127.5, 
        0, 0.5, 1, 1.5, 2, 
        2.5, 3, 3.5, 4, 4.5, 
        5, 5.5, 6, 6.5, 7, 
        7.5, 8, 8.5, 9, 9.5, 
        10, 10.5, 11, 11.5, 12, 
        12.5, 13, 13.5, 14, 14.5, 
        15, 15.5, 16, 16.5, 17, 
        17.5, 18, 18.5, 19, 19.5, 
        20, 20.5, 21, 21.5, 22, 
        22.5, 23, 23.5, 24, 24.5, 
        25, 25.5, 26, 26.5, 27, 
        27.5, 28, 28.5, 29, 29.5, 
        30, 30.5, 31, 31.5, 32, 
        32.5, 33, 33.5, 34, 34.5, 
        35, 35.5, 36, 36.5, 37, 
        37.5, 38, 38.5, 39, 39.5, 
        40, 40.5, 41, 41.5, 42, 
        42.5, 43, 43.5, 44, 44.5, 
        45, 45.5, 46, 46.5, 47, 
        47.5, 48, 48.5, 49, 49.5, 
        50, 50.5, 51, 51.5, 52, 
        52.5, 53, 53.5, 54, 54.5, 
        55, 55.5, 56, 56.5, 57, 
        57.5, 58, 58.5, 59, 59.5, 
        60, 60.5, 61, 61.5, 62, 
        62.5, 63, 63.5, 64, 64.5, 
        65, 65.5, 66, 66.5, 67, 
        67.5, 68, 68.5, 69, 69.5, 
        70, 70.5, 71, 71.5, 72, 
        72.5, 73, 73.5, 74, 74.5, 
        75, 75.5, 76, 76.5, 77, 
        77.5, 78, 78.5, 79, 79.5, 
        80, 80.5, 81, 81.5, 82, 
        82.5, 83, 83.5, 84, 84.5, 
        85, 85.5, 86, 86.5, 87, 
        87.5, 88, 88.5, 89, 89.5, 
        90, 90.5, 91, 91.5, 92, 
        92.5, 93, 93.5, 94, 94.5, 
        95, 95.5, 96, 96.5, 97, 
        97.5, 98, 98.5, 99, 99.5, 
        100, 100.5, 101, 101.5, 102, 
        102.5, 103, 103.5, 104, 104.5, 
        105, 105.5, 106, 106.5, 107, 
        107.5, 108, 108.5, 109, 109.5, 
        110, 110.5, 111, 111.5, 112, 
        112.5, 113, 113.5, 114, 114.5, 
        115, 115.5, 116, 116.5, 117, 
        117.5, 118, 118.5, 119, 119.5, 
        120, 120.5, 121, 121.5, 122, 
        122.5, 123, 123.5, 124, 124.5, 
        125, 125.5, 126, 126.5, 127, 
        127.5, 0, 0.5, 1, 1.5, 
        2, 2.5, 3, 3.5, 4, 
        4.5, 5, 5.5, 6, 6.5, 
        7, 7.5, 8, 8.5, 9, 
        9.5, 10, 10.5, 11, 11.5, 
        12, 12.5, 13, 13.5, 14, 
        14.5, 15, 15.5, 16, 16.5, 
        17, 17.5, 18, 18.5, 19, 
        19.5, 20, 20.5, 21, 21.5, 
        22, 22.5, 23, 23.5, 24, 
        24.5, 25, 25.5, 26, 26.5, 
        27, 27.5, 28, 28.5, 29, 
        29.5, 30, 30.5, 31, 31.5, 
        32, 32.5, 33, 33.5, 34, 
        34.5, 35, 35.5, 36, 36.5, 
        37, 37.5, 38, 38.5, 39, 
        39.5, 40, 40.5, 41, 41.5, 
        42, 42.5, 43, 43.5, 44, 
        44.5, 45, 45.5, 46, 46.5, 
        47, 47.5, 48, 48.5, 49, 
        49.5, 50, 50.5, 51, 51.5, 
        52, 52.5, 53, 53.5, 54, 
        54.5, 55, 55.5, 56, 56.5, 
        57, 57.5, 58, 58.5, 59, 
        59.5, 60, 60.5, 61, 61.5, 
        62, 62.5, 63, 63.5, 64, 
        64.5, 65, 65.5, 66, 66.5, 
        67, 67.5, 68, 68.5, 69, 
        69.5, 70, 70.5, 71, 71.5, 
        72, 72.5, 73, 73.5, 74, 
        74.5, 75, 75.5, 76, 76.5, 
        77, 77.5, 78, 78.5, 79, 
        79.5, 80, 80.5, 81, 81.5, 
        82, 82.5, 83, 83.5, 84, 
        84.5, 85, 85.5, 86, 86.5, 
        87, 87.5, 88, 88.5, 89, 
        89.5, 90, 90.5, 91, 91.5, 
        92, 92.5, 93, 93.5, 94, 
        94.5, 95, 95.5, 96, 96.5, 
        97, 97.5, 98, 98.5, 99, 
        99.5, 100, 100.5, 101, 101.5, 
        102, 102.5, 103, 103.5, 104, 
        104.5, 105, 105.5, 106, 106.5, 
        107, 107.5, 108, 108.5, 109, 
        109.5, 110, 110.5, 111, 111.5, 
        112, 112.5, 113, 113.5, 114, 
        114.5, 115, 115.5, 116, 116.5, 
        117, 117.5, 118, 118.5, 119, 
        119.5, 120, 120.5, 121, 121.5, 
        122, 122.5, 123, 123.5, 124, 
        124.5, 125, 125.5, 126, 126.5, 
        127, 127.5, 0, 0.5, 1, 
        1.5, 2, 2.5, 3, 3.5, 
        4, 4.5, 5, 5.5, 6, 
        6.5, 7, 7.5, 8, 8.5, 
        9, 9.5, 10, 10.5, 11, 
        11.5, 12, 12.5, 13, 13.5, 
        14, 14.5, 15, 15.5, 16, 
        16.5, 17, 17.5, 18, 18.5, 
        19, 19.5, 20, 20.5, 21, 
        21.5, 22, 22.5, 23, 23.5, 
        24, 24.5, 25, 25.5, 26, 
        26.5, 27, 27.5, 28, 28.5, 
        29, 29.5, 30, 30.5, 31, 
        31.5, 32, 32.5, 33, 33.5, 
        34, 34.5, 35, 35.5, 36, 
        36.5, 37, 37.5, 38, 38.5, 
        39, 39.5, 40, 40.5, 41, 
        41.5, 42, 42.5, 43, 43.5, 
        44, 44.5, 45, 45.5, 46, 
        46.5, 47, 47.5, 48, 48.5, 
        49, 49.5, 50, 50.5, 51, 
        51.5, 52, 52.5, 53, 53.5, 
        54, 54.5, 55, 55.5, 56, 
        56.5, 57, 57.5, 58, 58.5, 
        59, 59.5, 60, 60.5, 61, 
        61.5, 62, 62.5, 63, 63.5, 
        64, 64.5, 65, 65.5, 66, 
        66.5, 67, 67.5, 68, 68.5, 
        69, 69.5, 70, 70.5, 71, 
        71.5, 72, 72.5, 73, 73.5, 
        74, 74.5, 75, 75.5, 76, 
        76.5, 77, 77.5, 78, 78.5, 
        79, 79.5, 80, 80.5, 81, 
        81.5, 82, 82.5, 83, 83.5, 
        84, 84.5, 85, 85.5, 86, 
        86.5, 87, 87.5, 88, 88.5, 
        89, 89.5, 90, 90.5, 91, 
        91.5, 92, 92.5, 93, 93.5, 
        94, 94.5, 95, 95.5, 96, 
        96.5, 97, 97.5, 98, 98.5, 
        99, 99.5, 100, 100.5, 101, 
        101.5, 102, 102.5, 103, 103.5, 
        104, 104.5, 105, 105.5, 106, 
        106.5, 107, 107.5, 108, 108.5, 
        109, 109.5, 110, 110.5, 111, 
        111.5, 112, 112.5, 113, 113.5, 
        114, 114.5, 115, 115.5, 116, 
        116.5, 117, 117.5, 118, 118.5, 
        119, 119.5, 120, 120.5, 121, 
        121.5, 122, 122.5, 123, 123.5, 
        124, 124.5, 125, 125.5, 126, 
        126.5, 127, 127.5, 0, 0.5, 
        1, 1.5, 2, 2.5, 3, 
        3.5, 4, 4.5, 5, 5.5, 
        6, 6.5, 7, 7.5, 8, 
        8.5, 9, 9.5, 10, 10.5, 
        11, 11.5, 12, 12.5, 13, 
        13.5, 14, 14.5, 15, 15.5, 
        16, 16.5, 17, 17.5, 18, 
        18.5, 19, 19.5, 20, 20.5, 
        21, 21.5, 22, 22.5, 23, 
        23.5, 24, 24.5, 25, 25.5, 
        26, 26.5, 27, 27.5, 28, 
        28.5, 29, 29.5, 30, 30.5, 
        31, 31.5, 32, 32.5, 33, 
        33.5, 34, 34.5, 35, 35.5, 
        36, 36.5, 37, 37.5, 38, 
        38.5, 39, 39.5, 40, 40.5, 
        41, 41.5, 42, 42.5, 43, 
        43.5, 44, 44.5, 45, 45.5, 
        46, 46.5, 47, 47.5, 48, 
        48.5, 49, 49.5, 50, 50.5, 
        51, 51.5, 52, 52.5, 53, 
        53.5, 54, 54.5, 55, 55.5, 
        56, 56.5, 57, 57.5, 58, 
        58.5, 59, 59.5, 60, 60.5, 
        61, 61.5, 62, 62.5, 63, 
        63.5, 64, 64.5, 65, 65.5, 
        66, 66.5, 67, 67.5, 68, 
        68.5, 69, 69.5, 70, 70.5, 
        71, 71.5, 72, 72.5, 73, 
        73.5, 74, 74.5, 75, 75.5, 
        76, 76.5, 77, 77.5, 78, 
        78.5, 79, 79.5, 80, 80.5, 
        81, 81.5, 82, 82.5, 83, 
        83.5, 84, 84.5, 85, 85.5, 
        86, 86.5, 87, 87.5, 88, 
        88.5, 89, 89.5, 90, 90.5, 
        91, 91.5, 92, 92.5, 93, 
        93.5, 94, 94.5, 95, 95.5, 
        96, 96.5, 97, 97.5, 98, 
        98.5, 99, 99.5, 100, 100.5, 
        101, 101.5, 102, 102.5, 103, 
        103.5, 104, 104.5, 105, 105.5, 
        106, 106.5, 107, 107.5, 108, 
        108.5, 109, 109.5, 110, 110.5, 
        111, 111.5, 112, 112.5, 113, 
        113.5, 114, 114.5, 115, 115.5, 
        116, 116.5, 117, 117.5, 118, 
        118.5, 119, 119.5, 120, 120.5, 
        121, 121.5, 122, 122.5, 123, 
        123.5, 124, 124.5, 125, 125.5, 
        126, 126.5, 127, 127.5, 0, 
        0.5, 1, 1.5, 2, 2.5, 
        3, 3.5, 4, 4.5, 5, 
        5.5, 6, 6.5, 7, 7.5, 
        8, 8.5, 9, 9.5, 10, 
        10.5, 11, 11.5, 12, 12.5, 
        13, 13.5, 14, 14.5, 15, 
        15.5, 16, 16.5, 17, 17.5, 
        18, 18.5, 19, 19.5, 20, 
        20.5, 21, 21.5, 22, 22.5, 
        23, 23.5, 24, 24.5, 25, 
        25.5, 26, 26.5, 27, 27.5, 
        28, 28.5, 29, 29.5, 30, 
        30.5, 31, 31.5, 32, 32.5, 
        33, 33.5, 34, 34.5, 35, 
        35.5, 36, 36.5, 37, 37.5, 
        38, 38.5, 39, 39.5, 40, 
        40.5, 41, 41.5, 42, 42.5, 
        43, 43.5, 44, 44.5, 45, 
        45.5, 46, 46.5, 47, 47.5, 
        48, 48.5, 49, 49.5, 50, 
        50.5, 51, 51.5, 52, 52.5, 
        53, 53.5, 54, 54.5, 55, 
        55.5, 56, 56.5, 57, 57.5, 
        58, 58.5, 59, 59.5, 60, 
        60.5, 61, 61.5, 62, 62.5, 
        63, 63.5, 64, 64.5, 65, 
        65.5, 66, 66.5, 67, 67.5, 
        68, 68.5, 69, 69.5, 70, 
        70.5, 71, 71.5, 72, 72.5, 
        73, 73.5, 74, 74.5, 75, 
        75.5, 76, 76.5, 77, 77.5, 
        78, 78.5, 79, 79.5, 80, 
        80.5, 81, 81.5, 82, 82.5, 
        83, 83.5, 84, 84.5, 85, 
        85.5, 86, 86.5, 87, 87.5, 
        88, 88.5, 89, 89.5, 90, 
        90.5, 91, 91.5, 92, 92.5, 
        93, 93.5, 94, 94.5, 95, 
        95.5, 96, 96.5, 97, 97.5, 
        98, 98.5, 99, 99.5, 100, 
        100.5, 101, 101.5, 102, 102.5, 
        103, 103.5, 104, 104.5, 105, 
        105.5, 106, 106.5, 107, 107.5, 
        108, 108.5, 109, 109.5, 110, 
        110.5, 111, 111.5, 112, 112.5, 
        113, 113.5, 114, 114.5, 115, 
        115.5, 116, 116.5, 117, 117.5, 
        118, 118.5, 119, 119.5, 120, 
        120.5, 121, 121.5, 122, 122.5, 
        123, 123.5, 124, 124.5, 125, 
        125.5, 126, 126.5, 127, 127.5, 
        0, 0.5, 1, 1.5, 2, 
        2.5, 3, 3.5, 4, 4.5, 
        5, 5.5, 6, 6.5, 7, 
        7.5, 8, 8.5, 9, 9.5, 
        10, 10.5, 11, 11.5, 12, 
        12.5, 13, 13.5, 14, 14.5, 
        15, 15.5, 16, 16.5, 17, 
        17.5, 18, 18.5, 19, 19.5, 
        20, 20.5, 21, 21.5, 22, 
        22.5, 23, 23.5, 24, 24.5, 
        25, 25.5, 26, 26.5, 27, 
        27.5, 28, 28.5, 29, 29.5, 
        30, 30.5, 31, 31.5, 32, 
        32.5, 33, 33.5, 34, 34.5, 
        35, 35.5, 36, 36.5, 37, 
        37.5, 38, 38.5, 39, 39.5, 
        40, 40.5, 41, 41.5, 42, 
        42.5, 43, 43.5, 44, 44.5, 
        45, 45.5, 46, 46.5, 47, 
        47.5, 48, 48.5, 49, 49.5, 
        50, 50.5, 51, 51.5, 52, 
        52.5, 53, 53.5, 54, 54.5, 
        55, 55.5, 56, 56.5, 57, 
        57.5, 58, 58.5, 59, 59.5, 
        60, 60.5, 61, 61.5, 62, 
        62.5, 63, 63.5, 64, 64.5, 
        65, 65.5, 66, 66.5, 67, 
        67.5, 68, 68.5, 69, 69.5, 
        70, 70.5, 71, 71.5, 72, 
        72.5, 73, 73.5, 74, 74.5, 
        75, 75.5, 76, 76.5, 77, 
        77.5, 78, 78.5, 79, 79.5, 
        80, 80.5, 81, 81.5, 82, 
        82.5, 83, 83.5, 84, 84.5, 
        85, 85.5, 86, 86.5, 87, 
        87.5, 88, 88.5, 89, 89.5, 
        90, 90.5, 91, 91.5, 92, 
        92.5, 93, 93.5, 94, 94.5, 
        95, 95.5, 96, 96.5, 97, 
        97.5, 98, 98.5, 99, 99.5, 
        100, 100.5, 101, 101.5, 102, 
        102.5, 103, 103.5, 104, 104.5, 
        105, 105.5, 106, 106.5, 107, 
        107.5, 108, 108.5, 109, 109.5, 
        110, 110.5, 111, 111.5, 112, 
        112.5, 113, 113.5, 114, 114.5, 
        115, 115.5, 116, 116.5, 117, 
        117.5, 118, 118.5, 119, 119.5, 
        120, 120.5, 121, 121.5, 122, 
        122.5, 123, 123.5, 124, 124.5, 
        125, 125.5, 126, 126.5, 127, 
        127.5, 0, 0.5, 1, 1.5, 
        2, 2.5, 3, 3.5, 4, 
        4.5, 5, 5.5, 6, 6.5, 
        7, 7.5, 8, 8.5, 9, 
        9.5, 10, 10.5, 11, 11.5, 
        12, 12.5, 13, 13.5, 14, 
        14.5, 15, 15.5, 16, 16.5, 
        17, 17.5, 18, 18.5, 19, 
        19.5, 20, 20.5, 21, 21.5, 
        22, 22.5, 23, 23.5, 24, 
        24.5, 25, 25.5, 26, 26.5, 
        27, 27.5, 28, 28.5, 29, 
        29.5, 30, 30.5, 31, 31.5, 
        32, 32.5, 33, 33.5, 34, 
        34.5, 35, 35.5, 36, 36.5, 
        37, 37.5, 38, 38.5, 39, 
        39.5, 40, 40.5, 41, 41.5, 
        42, 42.5, 43, 43.5, 44, 
        44.5, 45, 45.5, 46, 46.5, 
        47, 47.5, 48, 48.5, 49, 
        49.5, 50, 50.5, 51, 51.5, 
        52, 52.5, 53, 53.5, 54, 
        54.5, 55, 55.5, 56, 56.5, 
        57, 57.5, 58, 58.5, 59, 
        59.5, 60, 60.5, 61, 61.5, 
        62, 62.5, 63, 63.5, 64, 
        64.5, 65, 65.5, 66, 66.5, 
        67, 67.5, 68, 68.5, 69, 
        69.5, 70, 70.5, 71, 71.5, 
        72, 72.5, 73, 73.5, 74, 
        74.5, 75, 75.5, 76, 76.5, 
        77, 77.5, 78, 78.5, 79, 
        79.5, 80, 80.5, 81, 81.5, 
        82, 82.5, 83, 83.5, 84, 
        84.5, 85, 85.5, 86, 86.5, 
        87, 87.5, 88, 88.5, 89, 
        89.5, 90, 90.5, 91, 91.5, 
        92, 92.5, 93, 93.5, 94, 
        94.5, 95, 95.5, 96, 96.5, 
        97, 97.5, 98, 98.5, 99, 
        99.5, 100, 100.5, 101, 101.5, 
        102, 102.5, 103, 103.5, 104, 
        104.5, 105, 105.5, 106, 106.5, 
        107, 107.5, 108, 108.5, 109, 
        109.5, 110, 110.5, 111, 111.5, 
        112, 112.5, 113, 113.5, 114, 
        114.5, 115, 115.5, 116, 116.5, 
        117, 117.5, 118, 118.5, 119, 
        119.5, 120, 120.5, 121, 121.5, 
        122, 122.5, 123, 123.5, 124, 
        124.5, 125, 125.5, 126, 126.5, 
        127, 127.5, 0, 0.5, 1, 
        1.5, 2, 2.5, 3, 3.5, 
        4, 4.5, 5, 5.5, 6, 
        6.5, 7, 7.5, 8, 8.5, 
        9, 9.5, 10, 10.5, 11, 
        11.5, 12, 12.5, 13, 13.5, 
        14, 14.5, 15, 15.5, 16, 
        16.5, 17, 17.5, 18, 18.5, 
        19, 19.5, 20, 20.5, 21, 
        21.5, 22, 22.5, 23, 23.5, 
        24, 24.5, 25, 25.5, 26, 
        26.5, 27, 27.5, 28, 28.5, 
        29, 29.5, 30, 30.5, 31, 
        31.5, 32, 32.5, 33, 33.5, 
        34, 34.5, 35, 35.5, 36, 
        36.5, 37, 37.5, 38, 38.5, 
        39, 39.5, 40, 40.5, 41, 
        41.5, 42, 42.5, 43, 43.5, 
        44, 44.5, 45, 45.5, 46, 
        46.5, 47, 47.5, 48, 48.5, 
        49, 49.5, 50, 50.5, 51, 
        51.5, 52, 52.5, 53, 53.5, 
        54, 54.5, 55, 55.5, 56, 
        56.5, 57, 57.5, 58, 58.5, 
        59, 59.5, 60, 60.5, 61, 
        61.5, 62, 62.5, 63, 63.5, 
        64, 64.5, 65, 65.5, 66, 
        66.5, 67, 67.5, 68, 68.5, 
        69, 69.5, 70, 70.5, 71, 
        71.5, 72, 72.5, 73, 73.5, 
        74, 74.5, 75, 75.5, 76, 
        76.5, 77, 77.5, 78, 78.5, 
        79, 79.5, 80, 80.5, 81, 
        81.5, 82, 82.5, 83, 83.5, 
        84, 84.5, 85, 85.5, 86, 
        86.5, 87, 87.5, 88, 88.5, 
        89, 89.5, 90, 90.5, 91, 
        91.5, 92, 92.5, 93, 93.5, 
        94, 94.5, 95, 95.5, 96, 
        96.5, 97, 97.5, 98, 98.5, 
        99, 99.5, 100, 100.5, 101, 
        101.5, 102, 102.5, 103, 103.5, 
        104, 104.5, 105, 105.5, 106, 
        106.5, 107, 107.5, 108, 108.5, 
        109, 109.5, 110, 110.5, 111, 
        111.5, 112, 112.5, 113, 113.5, 
        114, 114.5, 115, 115.5, 116, 
        116.5, 117, 117.5, 118, 118.5, 
        119, 119.5, 120, 120.5, 121, 
        121.5, 122, 122.5, 123, 123.5, 
        124, 124.5, 125, 125.5, 126, 
        126.5, 127, 127.5 ) )
)


process.L1DTConfigFromDB = cms.ESProducer("DTConfigDBProducer",
    DTTPGMap = cms.untracked.PSet(
        wh0st2se11 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se10 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se12 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st1se4 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se12 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se11 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se10 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se1 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se2 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st3se4 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se4 = cms.untracked.vint32(72, 48, 72, 18),
        whm2st1se8 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se9 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se1 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st2se6 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st1se12 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se10 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se11 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st2se12 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se1 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st1se3 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se2 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st3se3 = cms.untracked.vint32(72, 48, 72, 18),
        whm1st1se7 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st2se2 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st1se6 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st4se8 = cms.untracked.vint32(92, 0, 92, 23),
        whm1st3se11 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st2se9 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se8 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st3se10 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se5 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st2se4 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se7 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st3se6 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se1 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st1se9 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st2se3 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st3se2 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st4se14 = cms.untracked.vint32(60, 0, 60, 15),
        whm2st4se13 = cms.untracked.vint32(72, 0, 72, 18),
        whm2st4se12 = cms.untracked.vint32(92, 0, 92, 23),
        whm2st4se11 = cms.untracked.vint32(48, 0, 48, 12),
        whm2st4se10 = cms.untracked.vint32(60, 0, 60, 15),
        whm2st1se6 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se10 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se11 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se12 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se7 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st3se7 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st4se9 = cms.untracked.vint32(48, 0, 48, 12),
        whm2st4se8 = cms.untracked.vint32(92, 0, 92, 23),
        whm1st4se12 = cms.untracked.vint32(92, 0, 92, 23),
        whm1st4se13 = cms.untracked.vint32(72, 0, 72, 18),
        whm1st4se10 = cms.untracked.vint32(60, 0, 60, 15),
        whm1st4se11 = cms.untracked.vint32(48, 0, 48, 12),
        whm2st4se3 = cms.untracked.vint32(96, 0, 96, 24),
        whm2st4se2 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se14 = cms.untracked.vint32(60, 0, 60, 15),
        whm2st3se8 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se9 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se6 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se7 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se4 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se5 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se2 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se3 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se1 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se12 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se11 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se10 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st1se12 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se10 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se11 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st4se6 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st4se7 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st4se4 = cms.untracked.vint32(72, 0, 72, 18),
        wh1st4se5 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st4se2 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st2se12 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se11 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se10 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st3se3 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se2 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se1 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se7 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se6 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se5 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st4se9 = cms.untracked.vint32(48, 0, 48, 12),
        whm1st1se3 = cms.untracked.vint32(50, 48, 50, 13),
        whm1st1se2 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se1 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st2se8 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se9 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st1se5 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se4 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st2se4 = cms.untracked.vint32(60, 48, 60, 15),
        wh1st2se5 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se6 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se7 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se1 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se2 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st4se8 = cms.untracked.vint32(92, 0, 92, 23),
        wh2st3se9 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st1se8 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st4se7 = cms.untracked.vint32(96, 0, 96, 24),
        whm2st4se6 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se4 = cms.untracked.vint32(72, 0, 72, 18),
        whm2st4se5 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st1se8 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se7 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se4 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st4se4 = cms.untracked.vint32(72, 0, 72, 18),
        wh2st1se2 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se3 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se1 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se1 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se2 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se3 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se4 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se5 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se8 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se9 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st4se1 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se3 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se2 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se5 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se4 = cms.untracked.vint32(72, 0, 72, 18),
        wh2st4se7 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se6 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se3 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se8 = cms.untracked.vint32(92, 0, 92, 23),
        wh0st4se1 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se7 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se6 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se5 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se4 = cms.untracked.vint32(72, 0, 72, 18),
        wh0st3se10 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se11 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se12 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st4se11 = cms.untracked.vint32(48, 0, 48, 12),
        wh2st4se10 = cms.untracked.vint32(60, 0, 60, 15),
        wh2st4se13 = cms.untracked.vint32(72, 0, 72, 18),
        wh2st4se12 = cms.untracked.vint32(92, 0, 92, 23),
        wh2st4se14 = cms.untracked.vint32(60, 0, 60, 15),
        wh1st1se5 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st4se1 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se2 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se3 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st2se12 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st4se5 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st2se10 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st4se7 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se8 = cms.untracked.vint32(92, 0, 92, 23),
        whm1st4se9 = cms.untracked.vint32(48, 0, 48, 12),
        whm1st2se11 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st3se6 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se7 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se4 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se5 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se2 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se3 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se1 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se7 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st1se5 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st3se8 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se9 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st1se6 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se8 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se9 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st3se12 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se10 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se11 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st1se11 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se10 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se12 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st2se11 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se5 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se4 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se7 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se6 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se1 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se3 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se2 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se9 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se8 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st4se6 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st1se5 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st2se6 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se7 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se4 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se5 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se2 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se3 = cms.untracked.vint32(60, 48, 60, 15),
        whm1st2se1 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se8 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se9 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se7 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se6 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se5 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se4 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se3 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se2 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se1 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st1se7 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st2se9 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se8 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st4se13 = cms.untracked.vint32(72, 0, 72, 18),
        wh0st1se6 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st4se11 = cms.untracked.vint32(48, 0, 48, 12),
        wh0st4se10 = cms.untracked.vint32(60, 0, 60, 15),
        whm1st3se12 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st4se14 = cms.untracked.vint32(60, 0, 60, 15),
        whm2st1se3 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st4se9 = cms.untracked.vint32(48, 0, 48, 12),
        wh1st4se10 = cms.untracked.vint32(60, 0, 60, 15),
        wh1st4se11 = cms.untracked.vint32(48, 0, 48, 12),
        wh1st4se12 = cms.untracked.vint32(92, 0, 92, 23),
        wh1st4se13 = cms.untracked.vint32(72, 0, 72, 18),
        wh1st4se14 = cms.untracked.vint32(60, 0, 60, 15),
        wh1st1se4 = cms.untracked.vint32(50, 48, 50, 13),
        wh1st1se7 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se6 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se9 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st3se10 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st2se3 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st3se11 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se12 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st4se12 = cms.untracked.vint32(92, 0, 92, 23),
        wh1st3se9 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se8 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st4se9 = cms.untracked.vint32(48, 0, 48, 12),
        wh1st3se8 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st4se2 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st3se1 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se2 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se3 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se4 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se5 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se6 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st4se3 = cms.untracked.vint32(96, 0, 96, 24),
        whm2st4se1 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st4se1 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st2se10 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se11 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se10 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se12 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se5 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st3se9 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se8 = cms.untracked.vint32(72, 58, 72, 18)
    ),
    DTTPGParameters = cms.PSet(
        SectCollParameters = cms.PSet(
            SCCSP5 = cms.int32(0),
            SCCSP2 = cms.int32(0),
            SCCSP3 = cms.int32(0),
            SCECF4 = cms.bool(False),
            SCCSP1 = cms.int32(0),
            SCECF2 = cms.bool(False),
            SCECF3 = cms.bool(False),
            SCCSP4 = cms.int32(0),
            SCECF1 = cms.bool(False),
            Debug = cms.untracked.bool(False)
        ),
        Debug = cms.untracked.bool(False),
        TUParameters = cms.PSet(
            TracoParameters = cms.PSet(
                SPRGCOMP = cms.int32(2),
                FHTMSK = cms.int32(0),
                DD = cms.int32(18),
                SSLMSK = cms.int32(0),
                LVALIDIFH = cms.int32(0),
                Debug = cms.untracked.int32(0),
                FSLMSK = cms.int32(0),
                SHTPRF = cms.int32(1),
                SHTMSK = cms.int32(0),
                TRGENB3 = cms.int32(1),
                SHISM = cms.int32(0),
                IBTIOFF = cms.int32(0),
                KPRGCOM = cms.int32(255),
                KRAD = cms.int32(0),
                FLTMSK = cms.int32(1),
                LTS = cms.int32(0),
                SLTMSK = cms.int32(1),
                FPRGCOMP = cms.int32(2),
                TRGENB9 = cms.int32(1),
                TRGENB8 = cms.int32(1),
                FHTPRF = cms.int32(1),
                LTF = cms.int32(0),
                TRGENB1 = cms.int32(1),
                TRGENB0 = cms.int32(1),
                FHISM = cms.int32(0),
                TRGENB2 = cms.int32(1),
                TRGENB5 = cms.int32(1),
                TRGENB4 = cms.int32(1),
                TRGENB7 = cms.int32(1),
                TRGENB6 = cms.int32(1),
                TRGENB15 = cms.int32(1),
                TRGENB14 = cms.int32(1),
                TRGENB11 = cms.int32(1),
                TRGENB10 = cms.int32(1),
                TRGENB13 = cms.int32(1),
                TRGENB12 = cms.int32(1),
                REUSEO = cms.int32(1),
                REUSEI = cms.int32(1),
                BTIC = cms.int32(32)
            ),
            TSPhiParameters = cms.PSet(
                TSMNOE1 = cms.bool(True),
                TSMNOE2 = cms.bool(False),
                TSSMSK1 = cms.int32(312),
                TSTREN9 = cms.bool(True),
                TSTREN8 = cms.bool(True),
                TSTREN11 = cms.bool(True),
                TSTREN3 = cms.bool(True),
                TSTREN2 = cms.bool(True),
                TSTREN1 = cms.bool(True),
                TSTREN0 = cms.bool(True),
                TSTREN7 = cms.bool(True),
                TSTREN6 = cms.bool(True),
                TSTREN5 = cms.bool(True),
                TSTREN4 = cms.bool(True),
                TSSCCE1 = cms.bool(True),
                TSSCCE2 = cms.bool(False),
                TSMCCE2 = cms.bool(False),
                TSTREN19 = cms.bool(True),
                TSMCCE1 = cms.bool(True),
                TSTREN17 = cms.bool(True),
                TSTREN16 = cms.bool(True),
                TSTREN15 = cms.bool(True),
                TSTREN14 = cms.bool(True),
                TSTREN13 = cms.bool(True),
                TSTREN12 = cms.bool(True),
                TSSMSK2 = cms.int32(312),
                TSTREN10 = cms.bool(True),
                TSMMSK2 = cms.int32(312),
                TSMMSK1 = cms.int32(312),
                TSMHSP = cms.int32(1),
                TSSNOE2 = cms.bool(False),
                TSSNOE1 = cms.bool(True),
                TSSCGS2 = cms.bool(True),
                TSSCCEC = cms.bool(False),
                TSMCCEC = cms.bool(False),
                TSMHTE2 = cms.bool(False),
                Debug = cms.untracked.bool(False),
                TSSHTE2 = cms.bool(False),
                TSMCGS1 = cms.bool(True),
                TSMCGS2 = cms.bool(True),
                TSSHTE1 = cms.bool(True),
                TSTREN22 = cms.bool(True),
                TSSNOEC = cms.bool(False),
                TSTREN20 = cms.bool(True),
                TSTREN21 = cms.bool(True),
                TSMGS1 = cms.int32(1),
                TSMGS2 = cms.int32(1),
                TSSHTEC = cms.bool(False),
                TSMWORD = cms.int32(255),
                TSMHTEC = cms.bool(False),
                TSSCGS1 = cms.bool(True),
                TSTREN23 = cms.bool(True),
                TSSGS2 = cms.int32(1),
                TSMNOEC = cms.bool(False),
                TSSGS1 = cms.int32(1),
                TSTREN18 = cms.bool(True),
                TSMHTE1 = cms.bool(True)
            ),
            TSThetaParameters = cms.PSet(
                Debug = cms.untracked.bool(False)
            ),
            Debug = cms.untracked.bool(False),
            BtiParameters = cms.PSet(
                KACCTHETA = cms.int32(1),
                WEN8 = cms.int32(1),
                ACH = cms.int32(1),
                DEAD = cms.int32(31),
                ACL = cms.int32(2),
                PTMS20 = cms.int32(1),
                Debug = cms.untracked.int32(0),
                PTMS22 = cms.int32(1),
                PTMS23 = cms.int32(1),
                PTMS24 = cms.int32(1),
                PTMS25 = cms.int32(1),
                PTMS26 = cms.int32(1),
                PTMS27 = cms.int32(1),
                PTMS28 = cms.int32(1),
                PTMS29 = cms.int32(1),
                SET = cms.int32(7),
                RON = cms.bool(True),
                WEN2 = cms.int32(1),
                LL = cms.int32(2),
                LH = cms.int32(21),
                WEN3 = cms.int32(1),
                RE43 = cms.int32(2),
                WEN0 = cms.int32(1),
                RL = cms.int32(42),
                WEN1 = cms.int32(1),
                RH = cms.int32(61),
                LTS = cms.int32(3),
                CH = cms.int32(41),
                CL = cms.int32(22),
                PTMS15 = cms.int32(1),
                PTMS14 = cms.int32(1),
                PTMS17 = cms.int32(1),
                PTMS16 = cms.int32(1),
                PTMS11 = cms.int32(1),
                PTMS10 = cms.int32(1),
                PTMS13 = cms.int32(1),
                PTMS12 = cms.int32(1),
                XON = cms.bool(False),
                WEN7 = cms.int32(1),
                WEN4 = cms.int32(1),
                WEN5 = cms.int32(1),
                PTMS19 = cms.int32(1),
                PTMS18 = cms.int32(1),
                PTMS31 = cms.int32(0),
                PTMS30 = cms.int32(0),
                PTMS5 = cms.int32(1),
                PTMS4 = cms.int32(1),
                PTMS7 = cms.int32(1),
                PTMS6 = cms.int32(1),
                PTMS1 = cms.int32(0),
                PTMS0 = cms.int32(0),
                PTMS3 = cms.int32(0),
                WEN6 = cms.int32(1),
                PTMS2 = cms.int32(0),
                PTMS9 = cms.int32(1),
                PTMS8 = cms.int32(1),
                ST43 = cms.int32(42),
                AC2 = cms.int32(3),
                AC1 = cms.int32(0),
                KMAX = cms.int32(64),
                PTMS21 = cms.int32(1)
            ),
            LutParameters = cms.PSet(
                WHEEL = cms.untracked.int32(-1),
                Debug = cms.untracked.bool(False),
                BTIC = cms.untracked.int32(0),
                XCN = cms.untracked.double(0),
                D = cms.untracked.double(0)
            )
        )
    ),
    debugBti = cms.int32(0),
    TracoLutsFromDB = cms.bool(True),
    debugSC = cms.bool(False),
    debugDB = cms.bool(False),
    debugLUTs = cms.bool(False),
    UseT0 = cms.bool(False),
    cfgConfig = cms.bool(False),
    debugTST = cms.bool(False),
    debugTSP = cms.bool(False),
    bxOffset = cms.int32(19),
    debug = cms.bool(False),
    debugPed = cms.bool(False),
    debugTU = cms.bool(False),
    finePhase = cms.double(25.0),
    UseBtiAcceptParam = cms.bool(True),
    debugTraco = cms.int32(0)
)


process.LooperFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(20.0),
    LogPixelProbabilityCut = cms.double(-14.0),
    Fitter = cms.string('LooperFitter'),
    MinNumberOfHits = cms.int32(3),
    Smoother = cms.string('LooperSmoother'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('LooperFittingSmoother'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.LooperTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('LooperFitter'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('PropagatorWithMaterialForLoopers'),
    minHits = cms.int32(3)
)


process.LooperTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('LooperSmoother'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('PropagatorWithMaterialForLoopers'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.MaterialPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('alongMomentum'),
    ComponentName = cms.string('PropagatorWithMaterial'),
    Mass = cms.double(0.105),
    ptMin = cms.double(-1.0),
    MaxDPhi = cms.double(1.6),
    useRungeKutta = cms.bool(False)
)


process.MeasurementTracker = cms.ESProducer("MeasurementTrackerESProducer",
    StripCPE = cms.string('StripCPEfromTrackAngle'),
    inactivePixelDetectorLabels = cms.VInputTag(cms.InputTag("siPixelDigis")),
    PixelCPE = cms.string('PixelCPEGeneric'),
    stripLazyGetterProducer = cms.string(''),
    OnDemand = cms.bool(False),
    Regional = cms.bool(False),
    UsePixelModuleQualityDB = cms.bool(True),
    pixelClusterProducer = cms.string('siPixelClusters'),
    switchOffPixelsIfEmpty = cms.bool(True),
    inactiveStripDetectorLabels = cms.VInputTag(cms.InputTag("siStripDigis")),
    MaskBadAPVFibers = cms.bool(True),
    UseStripStripQualityDB = cms.bool(True),
    UsePixelROCQualityDB = cms.bool(True),
    DebugPixelROCQualityDB = cms.untracked.bool(False),
    UseStripAPVFiberQualityDB = cms.bool(True),
    stripClusterProducer = cms.string('siStripClusters'),
    DebugStripAPVFiberQualityDB = cms.untracked.bool(False),
    DebugStripStripQualityDB = cms.untracked.bool(False),
    SiStripQualityLabel = cms.string(''),
    badStripCuts = cms.PSet(
        TOB = cms.PSet(
            maxConsecutiveBad = cms.uint32(2),
            maxBad = cms.uint32(4)
        ),
        TID = cms.PSet(
            maxConsecutiveBad = cms.uint32(2),
            maxBad = cms.uint32(4)
        ),
        TEC = cms.PSet(
            maxConsecutiveBad = cms.uint32(2),
            maxBad = cms.uint32(4)
        ),
        TIB = cms.PSet(
            maxConsecutiveBad = cms.uint32(2),
            maxBad = cms.uint32(4)
        )
    ),
    DebugStripModuleQualityDB = cms.untracked.bool(False),
    ComponentName = cms.string(''),
    DebugPixelModuleQualityDB = cms.untracked.bool(False),
    HitMatcher = cms.string('StandardMatcher'),
    skipClusters = cms.InputTag(""),
    UseStripModuleQualityDB = cms.bool(True)
)


process.MuonDetLayerGeometryESProducer = cms.ESProducer("MuonDetLayerGeometryESProducer")


process.MuonNumberingInitialization = cms.ESProducer("MuonNumberingInitialization")


process.MuonTransientTrackingRecHitBuilderESProducer = cms.ESProducer("MuonTransientTrackingRecHitBuilderESProducer",
    ComponentName = cms.string('MuonRecHitBuilder')
)


process.OppositeAnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    MaxDPhi = cms.double(1.6),
    ComponentName = cms.string('AnalyticalPropagatorOpposite'),
    PropagationDirection = cms.string('oppositeToMomentum')
)


process.OppositeMaterialPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('oppositeToMomentum'),
    ComponentName = cms.string('PropagatorWithMaterialOpposite'),
    Mass = cms.double(0.105),
    ptMin = cms.double(-1.0),
    MaxDPhi = cms.double(1.6),
    useRungeKutta = cms.bool(False)
)


process.PixelCPEGenericESProducer = cms.ESProducer("PixelCPEGenericESProducer",
    EdgeClusterErrorX = cms.double(50.0),
    DoCosmics = cms.bool(False),
    LoadTemplatesFromDB = cms.bool(True),
    UseErrorsFromTemplates = cms.bool(True),
    eff_charge_cut_highX = cms.double(1.0),
    TruncatePixelCharge = cms.bool(True),
    size_cutY = cms.double(3.0),
    size_cutX = cms.double(3.0),
    inflate_all_errors_no_trk_angle = cms.bool(False),
    IrradiationBiasCorrection = cms.bool(False),
    TanLorentzAnglePerTesla = cms.double(0.106),
    inflate_errors = cms.bool(False),
    eff_charge_cut_lowX = cms.double(0.0),
    eff_charge_cut_highY = cms.double(1.0),
    ClusterProbComputationFlag = cms.int32(0),
    EdgeClusterErrorY = cms.double(85.0),
    ComponentName = cms.string('PixelCPEGeneric'),
    eff_charge_cut_lowY = cms.double(0.0),
    PixelErrorParametrization = cms.string('NOTcmsim'),
    Alpha2Order = cms.bool(True)
)


process.PropagatorWithMaterialForLoopers = cms.ESProducer("PropagatorWithMaterialESProducer",
    useOldAnalPropLogic = cms.bool(False),
    PropagationDirection = cms.string('alongMomentum'),
    ComponentName = cms.string('PropagatorWithMaterialForLoopers'),
    Mass = cms.double(0.1396),
    ptMin = cms.double(-1),
    MaxDPhi = cms.double(4.0),
    useRungeKutta = cms.bool(False)
)


process.PropagatorWithMaterialForLoopersOpposite = cms.ESProducer("PropagatorWithMaterialESProducer",
    useOldAnalPropLogic = cms.bool(False),
    PropagationDirection = cms.string('oppositeToMomentum'),
    ComponentName = cms.string('PropagatorWithMaterialForLoopersOpposite'),
    Mass = cms.double(0.1396),
    ptMin = cms.double(-1),
    MaxDPhi = cms.double(4.0),
    useRungeKutta = cms.bool(False)
)


process.RCTConfigProducers = cms.ESProducer("RCTConfigProducers",
    HoverE_high_Lindsey = cms.vdouble(1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1, 
        1, 1, 1),
    hcal_high_calib_Lindsey = cms.vdouble(0, 0, 1, 0, 0, 
        1, 0, 0, 1, 0, 
        0, 1, 0, 0, 1, 
        0, 0, 1, 0, 0, 
        1, 0, 0, 1, 0, 
        0, 1, 0, 0, 1, 
        0, 0, 1, 0, 0, 
        1, 0, 0, 1, 0, 
        0, 1, 0, 0, 1, 
        0, 0, 1, 0, 0, 
        1, 0, 0, 1, 0, 
        0, 1, 0, 0, 1, 
        0, 0, 1, 0, 0, 
        1, 0, 0, 1, 0, 
        0, 1, 0, 0, 1, 
        0, 0, 1, 0, 0, 
        1, 0, 0, 1),
    cross_terms_Lindsey = cms.vdouble(0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0),
    ecal_calib_Lindsey = cms.vdouble(0, 0, 1, 0, 0, 
        1, 0, 0, 1, 0, 
        0, 1, 0, 0, 1, 
        0, 0, 1, 0, 0, 
        1, 0, 0, 1, 0, 
        0, 1, 0, 0, 1, 
        0, 0, 1, 0, 0, 
        1, 0, 0, 1, 0, 
        0, 1, 0, 0, 1, 
        0, 0, 1, 0, 0, 
        1, 0, 0, 1, 0, 
        0, 1, 0, 0, 1, 
        0, 0, 1, 0, 0, 
        1, 0, 0, 1, 0, 
        0, 1, 0, 0, 1, 
        0, 0, 1, 0, 0, 
        1, 0, 0, 1),
    HoverE_low_Lindsey = cms.vdouble(1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1, 
        1, 1, 1),
    hcal_calib_Lindsey = cms.vdouble(0, 0, 1, 0, 0, 
        1, 0, 0, 1, 0, 
        0, 1, 0, 0, 1, 
        0, 0, 1, 0, 0, 
        1, 0, 0, 1, 0, 
        0, 1, 0, 0, 1, 
        0, 0, 1, 0, 0, 
        1, 0, 0, 1, 0, 
        0, 1, 0, 0, 1, 
        0, 0, 1, 0, 0, 
        1, 0, 0, 1, 0, 
        0, 1, 0, 0, 1, 
        0, 0, 1, 0, 0, 
        1, 0, 0, 1, 0, 
        0, 1, 0, 0, 1, 
        0, 0, 1, 0, 0, 
        1, 0, 0, 1),
    eGammaHCalScaleFactors = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0, 
        1.0, 1.0, 1.0, 1.0, 1.0, 
        1.0, 1.0, 1.0, 1.0, 1.0, 
        1.0, 1.0, 1.0, 1.0, 1.0, 
        1.0, 1.0, 1.0, 1.0, 1.0, 
        1.0, 1.0, 1.0),
    eMaxForFGCut = cms.double(-999),
    noiseVetoHB = cms.bool(False),
    jscQuietThresholdEndcap = cms.uint32(3),
    hOeCut = cms.double(0.05),
    eGammaECalScaleFactors = cms.vdouble(1.10171, 1.09726, 1.09864, 1.1053, 1.105863, 
        1.10742, 1.105919, 1.113074, 1.112859, 1.120517, 
        1.127407, 1.14519, 1.168704, 1.184337, 1.191875, 
        1.20429, 1.197576, 1.222889, 1.247721, 1.334152, 
        1.336521, 1.347814, 1.332843, 1.323361, 1.310123, 
        1.249619, 1.218275, 1.218275),
    eMinForHoECut = cms.double(999),
    jscQuietThresholdBarrel = cms.uint32(3),
    jetMETHCalScaleFactors = cms.vdouble(1.0, 1.0, 1.0, 1.0, 1.0, 
        1.0, 1.0, 1.0, 1.0, 1.0, 
        1.0, 1.0, 1.0, 1.0, 1.0, 
        1.0, 1.0, 1.0, 1.0, 1.0, 
        1.0, 1.0, 1.0, 1.0, 1.0, 
        1.0, 1.0, 1.0),
    jetMETECalScaleFactors = cms.vdouble(1.10171, 1.09726, 1.09864, 1.1053, 1.105863, 
        1.10742, 1.105919, 1.113074, 1.112859, 1.120517, 
        1.127407, 1.14519, 1.168704, 1.184337, 1.191875, 
        1.20429, 1.197576, 1.222889, 1.247721, 1.334152, 
        1.336521, 1.347814, 1.332843, 1.323361, 1.310123, 
        1.249619, 1.218275, 1.218275),
    hActivityCut = cms.double(0.5),
    noiseVetoHEplus = cms.bool(False),
    eicIsolationThreshold = cms.uint32(4),
    jetMETLSB = cms.double(0.5),
    eActivityCut = cms.double(2),
    useCorrectionsLindsey = cms.bool(False),
    noiseVetoHEminus = cms.bool(False),
    eGammaLSB = cms.double(0.5),
    eMaxForHoECut = cms.double(-999),
    hMinForHoECut = cms.double(999.0),
    eMinForFGCut = cms.double(999)
)


process.RK1DFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(-1.0),
    LogPixelProbabilityCut = cms.double(-16.0),
    Fitter = cms.string('RK1DFitter'),
    MinNumberOfHits = cms.int32(5),
    Smoother = cms.string('RK1DSmoother'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('RK1DFittingSmoother'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.RK1DTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('RK1DFitter'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFSwitching1DUpdator'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    minHits = cms.int32(3)
)


process.RK1DTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('RK1DSmoother'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFSwitching1DUpdator'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.RKFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(-1.0),
    LogPixelProbabilityCut = cms.double(-16.0),
    Fitter = cms.string('RKFitter'),
    MinNumberOfHits = cms.int32(5),
    Smoother = cms.string('RKSmoother'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('RKFittingSmoother'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.RKOutliers1DFittingSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(20.0),
    LogPixelProbabilityCut = cms.double(-16.0),
    Fitter = cms.string('RK1DFitter'),
    MinNumberOfHits = cms.int32(3),
    Smoother = cms.string('RK1DSmoother'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('RKOutliers1DFittingSmoother'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.RKTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('RKFitter'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    minHits = cms.int32(3)
)


process.RKTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(100.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('RKSmoother'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.RPCConeBuilder = cms.ESProducer("RPCConeBuilder",
    towerEnd = cms.int32(16),
    towerBeg = cms.int32(0)
)


process.RPCGeometryESModule = cms.ESProducer("RPCGeometryESModule",
    useDDD = cms.untracked.bool(True),
    compatibiltyWith11 = cms.untracked.bool(True)
)


process.RungeKuttaTrackerPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('alongMomentum'),
    ComponentName = cms.string('RungeKuttaTrackerPropagator'),
    Mass = cms.double(0.105),
    ptMin = cms.double(-1.0),
    MaxDPhi = cms.double(1.6),
    useRungeKutta = cms.bool(True)
)


process.RungeKuttaTrackerPropagatorOpposite = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('oppositeToMomentum'),
    ComponentName = cms.string('RungeKuttaTrackerPropagatorOpposite'),
    Mass = cms.double(0.105),
    ptMin = cms.double(-1.0),
    MaxDPhi = cms.double(1.6),
    useRungeKutta = cms.bool(True)
)


process.SiStripRecHitMatcherESProducer = cms.ESProducer("SiStripRecHitMatcherESProducer",
    ComponentName = cms.string('StandardMatcher'),
    NSigmaInside = cms.double(3.0)
)


process.SlaveField0 = cms.ESProducer("UniformMagneticFieldESProducer",
    ZFieldInTesla = cms.double(0.0),
    label = cms.untracked.string('slave_0')
)


process.SlaveField20 = cms.ESProducer("ParametrizedMagneticFieldProducer",
    version = cms.string('OAE_1103l_071212'),
    parameters = cms.PSet(
        BValue = cms.string('2_0T')
    ),
    label = cms.untracked.string('slave_20')
)


process.SlaveField30 = cms.ESProducer("ParametrizedMagneticFieldProducer",
    version = cms.string('OAE_1103l_071212'),
    parameters = cms.PSet(
        BValue = cms.string('3_0T')
    ),
    label = cms.untracked.string('slave_30')
)


process.SlaveField35 = cms.ESProducer("ParametrizedMagneticFieldProducer",
    version = cms.string('OAE_1103l_071212'),
    parameters = cms.PSet(
        BValue = cms.string('3_5T')
    ),
    label = cms.untracked.string('slave_35')
)


process.SlaveField38 = cms.ESProducer("ParametrizedMagneticFieldProducer",
    version = cms.string('OAE_1103l_071212'),
    parameters = cms.PSet(
        BValue = cms.string('3_8T')
    ),
    label = cms.untracked.string('slave_38')
)


process.SlaveField40 = cms.ESProducer("ParametrizedMagneticFieldProducer",
    version = cms.string('OAE_1103l_071212'),
    parameters = cms.PSet(
        BValue = cms.string('4_0T')
    ),
    label = cms.untracked.string('slave_40')
)


process.SmartPropagator = cms.ESProducer("SmartPropagatorESProducer",
    Epsilon = cms.double(5.0),
    TrackerPropagator = cms.string('PropagatorWithMaterial'),
    MuonPropagator = cms.string('SteppingHelixPropagatorAlong'),
    PropagationDirection = cms.string('alongMomentum'),
    ComponentName = cms.string('SmartPropagator')
)


process.SmartPropagatorAny = cms.ESProducer("SmartPropagatorESProducer",
    Epsilon = cms.double(5.0),
    TrackerPropagator = cms.string('PropagatorWithMaterial'),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('alongMomentum'),
    ComponentName = cms.string('SmartPropagatorAny')
)


process.SmartPropagatorAnyOpposite = cms.ESProducer("SmartPropagatorESProducer",
    Epsilon = cms.double(5.0),
    TrackerPropagator = cms.string('PropagatorWithMaterialOpposite'),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    ComponentName = cms.string('SmartPropagatorAnyOpposite')
)


process.SmartPropagatorAnyRK = cms.ESProducer("SmartPropagatorESProducer",
    Epsilon = cms.double(5.0),
    TrackerPropagator = cms.string('RungeKuttaTrackerPropagator'),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('alongMomentum'),
    ComponentName = cms.string('SmartPropagatorAnyRK')
)


process.SmartPropagatorAnyRKOpposite = cms.ESProducer("SmartPropagatorESProducer",
    Epsilon = cms.double(5.0),
    TrackerPropagator = cms.string('RungeKuttaTrackerPropagatorOpposite'),
    MuonPropagator = cms.string('SteppingHelixPropagatorAny'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    ComponentName = cms.string('SmartPropagatorAnyRKOpposite')
)


process.SmartPropagatorOpposite = cms.ESProducer("SmartPropagatorESProducer",
    Epsilon = cms.double(5.0),
    TrackerPropagator = cms.string('PropagatorWithMaterialOpposite'),
    MuonPropagator = cms.string('SteppingHelixPropagatorOpposite'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    ComponentName = cms.string('SmartPropagatorOpposite')
)


process.SmartPropagatorRK = cms.ESProducer("SmartPropagatorESProducer",
    Epsilon = cms.double(5.0),
    TrackerPropagator = cms.string('RungeKuttaTrackerPropagator'),
    MuonPropagator = cms.string('SteppingHelixPropagatorAlong'),
    PropagationDirection = cms.string('alongMomentum'),
    ComponentName = cms.string('SmartPropagatorRK')
)


process.SmartPropagatorRKOpposite = cms.ESProducer("SmartPropagatorESProducer",
    Epsilon = cms.double(5.0),
    TrackerPropagator = cms.string('RungeKuttaTrackerPropagatorOpposite'),
    MuonPropagator = cms.string('SteppingHelixPropagatorOpposite'),
    PropagationDirection = cms.string('oppositeToMomentum'),
    ComponentName = cms.string('SmartPropagatorRKOpposite')
)


process.SteppingHelixPropagatorAlong = cms.ESProducer("SteppingHelixPropagatorESProducer",
    endcapShiftInZNeg = cms.double(0.0),
    PropagationDirection = cms.string('alongMomentum'),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    NoErrorPropagation = cms.bool(False),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    returnTangentPlane = cms.bool(True),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorAlong'),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    endcapShiftInZPos = cms.double(0.0)
)


process.SteppingHelixPropagatorAlongNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    endcapShiftInZNeg = cms.double(0.0),
    PropagationDirection = cms.string('alongMomentum'),
    useTuningForL2Speed = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorAlongNoError'),
    useIsYokeFlag = cms.bool(True),
    NoErrorPropagation = cms.bool(True),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    endcapShiftInZPos = cms.double(0.0),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    useMatVolumes = cms.bool(True),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    returnTangentPlane = cms.bool(True)
)


process.SteppingHelixPropagatorAny = cms.ESProducer("SteppingHelixPropagatorESProducer",
    endcapShiftInZNeg = cms.double(0.0),
    PropagationDirection = cms.string('anyDirection'),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    NoErrorPropagation = cms.bool(False),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    returnTangentPlane = cms.bool(True),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorAny'),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    endcapShiftInZPos = cms.double(0.0)
)


process.SteppingHelixPropagatorAnyNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    endcapShiftInZNeg = cms.double(0.0),
    PropagationDirection = cms.string('anyDirection'),
    useTuningForL2Speed = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorAnyNoError'),
    useIsYokeFlag = cms.bool(True),
    NoErrorPropagation = cms.bool(True),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    endcapShiftInZPos = cms.double(0.0),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    useMatVolumes = cms.bool(True),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    returnTangentPlane = cms.bool(True)
)


process.SteppingHelixPropagatorL2Along = cms.ESProducer("SteppingHelixPropagatorESProducer",
    endcapShiftInZNeg = cms.double(0.0),
    PropagationDirection = cms.string('alongMomentum'),
    useTuningForL2Speed = cms.bool(True),
    ComponentName = cms.string('SteppingHelixPropagatorL2Along'),
    useIsYokeFlag = cms.bool(True),
    NoErrorPropagation = cms.bool(False),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    endcapShiftInZPos = cms.double(0.0),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    useMatVolumes = cms.bool(True),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    returnTangentPlane = cms.bool(True)
)


process.SteppingHelixPropagatorL2AlongNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    endcapShiftInZNeg = cms.double(0.0),
    PropagationDirection = cms.string('alongMomentum'),
    useMatVolumes = cms.bool(True),
    ComponentName = cms.string('SteppingHelixPropagatorL2AlongNoError'),
    useIsYokeFlag = cms.bool(True),
    NoErrorPropagation = cms.bool(True),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    returnTangentPlane = cms.bool(True),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    useTuningForL2Speed = cms.bool(True),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    endcapShiftInZPos = cms.double(0.0)
)


process.SteppingHelixPropagatorL2Any = cms.ESProducer("SteppingHelixPropagatorESProducer",
    endcapShiftInZNeg = cms.double(0.0),
    PropagationDirection = cms.string('anyDirection'),
    useTuningForL2Speed = cms.bool(True),
    ComponentName = cms.string('SteppingHelixPropagatorL2Any'),
    useIsYokeFlag = cms.bool(True),
    NoErrorPropagation = cms.bool(False),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    endcapShiftInZPos = cms.double(0.0),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    useMatVolumes = cms.bool(True),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    returnTangentPlane = cms.bool(True)
)


process.SteppingHelixPropagatorL2AnyNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    endcapShiftInZNeg = cms.double(0.0),
    PropagationDirection = cms.string('anyDirection'),
    useMatVolumes = cms.bool(True),
    ComponentName = cms.string('SteppingHelixPropagatorL2AnyNoError'),
    useIsYokeFlag = cms.bool(True),
    NoErrorPropagation = cms.bool(True),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    returnTangentPlane = cms.bool(True),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    useTuningForL2Speed = cms.bool(True),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    endcapShiftInZPos = cms.double(0.0)
)


process.SteppingHelixPropagatorL2Opposite = cms.ESProducer("SteppingHelixPropagatorESProducer",
    endcapShiftInZNeg = cms.double(0.0),
    PropagationDirection = cms.string('oppositeToMomentum'),
    useTuningForL2Speed = cms.bool(True),
    ComponentName = cms.string('SteppingHelixPropagatorL2Opposite'),
    useIsYokeFlag = cms.bool(True),
    NoErrorPropagation = cms.bool(False),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    endcapShiftInZPos = cms.double(0.0),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    useMatVolumes = cms.bool(True),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    returnTangentPlane = cms.bool(True)
)


process.SteppingHelixPropagatorL2OppositeNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    endcapShiftInZNeg = cms.double(0.0),
    PropagationDirection = cms.string('oppositeToMomentum'),
    useMatVolumes = cms.bool(True),
    ComponentName = cms.string('SteppingHelixPropagatorL2OppositeNoError'),
    useIsYokeFlag = cms.bool(True),
    NoErrorPropagation = cms.bool(True),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    returnTangentPlane = cms.bool(True),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    useTuningForL2Speed = cms.bool(True),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    endcapShiftInZPos = cms.double(0.0)
)


process.SteppingHelixPropagatorOpposite = cms.ESProducer("SteppingHelixPropagatorESProducer",
    endcapShiftInZNeg = cms.double(0.0),
    PropagationDirection = cms.string('oppositeToMomentum'),
    useMatVolumes = cms.bool(True),
    useTuningForL2Speed = cms.bool(False),
    useIsYokeFlag = cms.bool(True),
    NoErrorPropagation = cms.bool(False),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    returnTangentPlane = cms.bool(True),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorOpposite'),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    endcapShiftInZPos = cms.double(0.0)
)


process.SteppingHelixPropagatorOppositeNoError = cms.ESProducer("SteppingHelixPropagatorESProducer",
    endcapShiftInZNeg = cms.double(0.0),
    PropagationDirection = cms.string('oppositeToMomentum'),
    useTuningForL2Speed = cms.bool(False),
    ComponentName = cms.string('SteppingHelixPropagatorOppositeNoError'),
    useIsYokeFlag = cms.bool(True),
    NoErrorPropagation = cms.bool(True),
    SetVBFPointer = cms.bool(False),
    AssumeNoMaterial = cms.bool(False),
    endcapShiftInZPos = cms.double(0.0),
    useInTeslaFromMagField = cms.bool(False),
    VBFName = cms.string('VolumeBasedMagneticField'),
    useEndcapShiftsInZ = cms.bool(False),
    sendLogWarning = cms.bool(False),
    useMatVolumes = cms.bool(True),
    debug = cms.bool(False),
    ApplyRadX0Correction = cms.bool(True),
    useMagVolumes = cms.bool(True),
    returnTangentPlane = cms.bool(True)
)


process.StraightLinePropagator = cms.ESProducer("StraightLinePropagatorESProducer",
    ComponentName = cms.string('StraightLinePropagator'),
    PropagationDirection = cms.string('alongMomentum')
)


process.StripCPEESProducer = cms.ESProducer("StripCPEESProducer",
    ComponentType = cms.string('SimpleStripCPE'),
    ComponentName = cms.string('SimpleStripCPE')
)


process.StripCPEfromTrackAngleESProducer = cms.ESProducer("StripCPEESProducer",
    ComponentType = cms.string('StripCPEfromTrackAngle'),
    ComponentName = cms.string('StripCPEfromTrackAngle')
)


process.TTRHBuilderAngleAndTemplate = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    StripCPE = cms.string('StripCPEfromTrackAngle'),
    Matcher = cms.string('StandardMatcher'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    PixelCPE = cms.string('PixelCPETemplateReco'),
    ComponentName = cms.string('WithAngleAndTemplate')
)


process.TrackerRecoGeometryESProducer = cms.ESProducer("TrackerRecoGeometryESProducer")


process.TrajectoryBuilderForConversions = cms.ESProducer("CkfTrajectoryBuilderESProducer",
    propagatorAlong = cms.string('alongMomElePropagator'),
    trajectoryFilterName = cms.string('TrajectoryFilterForConversions'),
    maxCand = cms.int32(5),
    ComponentName = cms.string('TrajectoryBuilderForConversions'),
    propagatorOpposite = cms.string('oppositeToMomElePropagator'),
    MeasurementTrackerName = cms.string(''),
    estimator = cms.string('eleLooseChi2'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    updator = cms.string('KFUpdator'),
    alwaysUseInvalidHits = cms.bool(True),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.TrajectoryBuilderForElectrons = cms.ESProducer("CkfTrajectoryBuilderESProducer",
    propagatorAlong = cms.string('fwdGsfElectronPropagator'),
    trajectoryFilterName = cms.string('TrajectoryFilterForElectrons'),
    maxCand = cms.int32(5),
    ComponentName = cms.string('TrajectoryBuilderForElectrons'),
    propagatorOpposite = cms.string('bwdGsfElectronPropagator'),
    MeasurementTrackerName = cms.string(''),
    estimator = cms.string('ElectronChi2'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    updator = cms.string('KFUpdator'),
    alwaysUseInvalidHits = cms.bool(True),
    intermediateCleaning = cms.bool(False),
    lostHitPenalty = cms.double(90.0)
)


process.TrajectoryCleanerBySharedHitsForConversions = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('TrajectoryCleanerBySharedHitsForConversions'),
    fractionShared = cms.double(0.5),
    ValidHitBonus = cms.double(5.0),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    allowSharedFirstHit = cms.bool(True)
)


process.TrajectoryFilterForConversions = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        minimumNumberOfHits = cms.int32(3),
        minHitsMinPt = cms.int32(-1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(1),
        maxNumberOfHits = cms.int32(-1),
        maxConsecLostHits = cms.int32(1),
        chargeSignificance = cms.double(-1.0),
        nSigmaMinPt = cms.double(5.0),
        minPt = cms.double(0.9)
    ),
    ComponentName = cms.string('TrajectoryFilterForConversions')
)


process.TrajectoryFilterForElectrons = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        minimumNumberOfHits = cms.int32(5),
        minHitsMinPt = cms.int32(-1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(1),
        maxNumberOfHits = cms.int32(-1),
        maxConsecLostHits = cms.int32(1),
        chargeSignificance = cms.double(-1.0),
        nSigmaMinPt = cms.double(5.0),
        minPt = cms.double(2.0)
    ),
    ComponentName = cms.string('TrajectoryFilterForElectrons')
)


process.TransientTrackBuilderESProducer = cms.ESProducer("TransientTrackBuilderESProducer",
    ComponentName = cms.string('TransientTrackBuilder')
)


process.VBF0 = cms.ESProducer("VolumeBasedMagneticFieldESProducer",
    scalingVolumes = cms.vint32(),
    overrideMasterSector = cms.bool(True),
    useParametrizedTrackerField = cms.bool(True),
    scalingFactors = cms.vdouble(),
    label = cms.untracked.string('0t'),
    version = cms.string('grid_1103l_071212_2t'),
    debugBuilder = cms.untracked.bool(False),
    paramLabel = cms.string('slave_0'),
    geometryVersion = cms.int32(71212),
    cacheLastVolume = cms.untracked.bool(True)
)


process.VBF20 = cms.ESProducer("VolumeBasedMagneticFieldESProducer",
    scalingVolumes = cms.vint32(),
    overrideMasterSector = cms.bool(True),
    useParametrizedTrackerField = cms.bool(True),
    scalingFactors = cms.vdouble(),
    label = cms.untracked.string('071212_2t'),
    version = cms.string('grid_1103l_071212_2t'),
    debugBuilder = cms.untracked.bool(False),
    paramLabel = cms.string('slave_20'),
    geometryVersion = cms.int32(71212),
    cacheLastVolume = cms.untracked.bool(True)
)


process.VBF30 = cms.ESProducer("VolumeBasedMagneticFieldESProducer",
    scalingVolumes = cms.vint32(),
    overrideMasterSector = cms.bool(True),
    useParametrizedTrackerField = cms.bool(True),
    scalingFactors = cms.vdouble(),
    label = cms.untracked.string('071212_3t'),
    version = cms.string('grid_1103l_071212_3t'),
    debugBuilder = cms.untracked.bool(False),
    paramLabel = cms.string('slave_30'),
    geometryVersion = cms.int32(71212),
    cacheLastVolume = cms.untracked.bool(True)
)


process.VBF35 = cms.ESProducer("VolumeBasedMagneticFieldESProducer",
    scalingVolumes = cms.vint32(),
    overrideMasterSector = cms.bool(True),
    useParametrizedTrackerField = cms.bool(True),
    scalingFactors = cms.vdouble(),
    label = cms.untracked.string('071212_3_5t'),
    version = cms.string('grid_1103l_071212_3_5t'),
    debugBuilder = cms.untracked.bool(False),
    paramLabel = cms.string('slave_35'),
    geometryVersion = cms.int32(71212),
    cacheLastVolume = cms.untracked.bool(True)
)


process.VBF38 = cms.ESProducer("VolumeBasedMagneticFieldESProducer",
    scalingVolumes = cms.vint32(14100, 14200, 17600, 17800, 17900, 
        18100, 18300, 18400, 18600, 23100, 
        23300, 23400, 23600, 23800, 23900, 
        24100, 28600, 28800, 28900, 29100, 
        29300, 29400, 29600, 28609, 28809, 
        28909, 29109, 29309, 29409, 29609, 
        28610, 28810, 28910, 29110, 29310, 
        29410, 29610, 28611, 28811, 28911, 
        29111, 29311, 29411, 29611),
    overrideMasterSector = cms.bool(False),
    useParametrizedTrackerField = cms.bool(True),
    scalingFactors = cms.vdouble(1, 1, 0.994, 1.004, 1.004, 
        1.005, 1.004, 1.004, 0.994, 0.965, 
        0.958, 0.958, 0.953, 0.958, 0.958, 
        0.965, 0.918, 0.924, 0.924, 0.906, 
        0.924, 0.924, 0.918, 0.991, 0.998, 
        0.998, 0.978, 0.998, 0.998, 0.991, 
        0.991, 0.998, 0.998, 0.978, 0.998, 
        0.998, 0.991, 0.991, 0.998, 0.998, 
        0.978, 0.998, 0.998, 0.991),
    label = cms.untracked.string('090322_3_8t'),
    version = cms.string('grid_1103l_090322_3_8t'),
    debugBuilder = cms.untracked.bool(False),
    paramLabel = cms.string('slave_38'),
    geometryVersion = cms.int32(90322),
    cacheLastVolume = cms.untracked.bool(True)
)


process.VBF40 = cms.ESProducer("VolumeBasedMagneticFieldESProducer",
    scalingVolumes = cms.vint32(),
    overrideMasterSector = cms.bool(True),
    useParametrizedTrackerField = cms.bool(True),
    scalingFactors = cms.vdouble(),
    label = cms.untracked.string('071212_4t'),
    version = cms.string('grid_1103l_071212_4t'),
    debugBuilder = cms.untracked.bool(False),
    paramLabel = cms.string('slave_40'),
    geometryVersion = cms.int32(71212),
    cacheLastVolume = cms.untracked.bool(True)
)


process.ZdcHardcodeGeometryEP = cms.ESProducer("ZdcHardcodeGeometryEP")


process.alongMomElePropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('alongMomentum'),
    ComponentName = cms.string('alongMomElePropagator'),
    Mass = cms.double(0.000511),
    ptMin = cms.double(-1.0),
    MaxDPhi = cms.double(1.6),
    useRungeKutta = cms.bool(False)
)


process.beamHaloNavigationSchoolESProducer = cms.ESProducer("NavigationSchoolESProducer",
    ComponentName = cms.string('BeamHaloNavigationSchool')
)


process.bwdAnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    MaxDPhi = cms.double(1.6),
    ComponentName = cms.string('bwdAnalyticalPropagator'),
    PropagationDirection = cms.string('oppositeToMomentum')
)


process.bwdElectronPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('oppositeToMomentum'),
    ComponentName = cms.string('bwdElectronPropagator'),
    Mass = cms.double(0.000511),
    ptMin = cms.double(-1.0),
    MaxDPhi = cms.double(1.6),
    useRungeKutta = cms.bool(False)
)


process.bwdGsfElectronPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('oppositeToMomentum'),
    ComponentName = cms.string('bwdGsfElectronPropagator'),
    Mass = cms.double(0.000511),
    ptMin = cms.double(-1.0),
    MaxDPhi = cms.double(1.6),
    useRungeKutta = cms.bool(False)
)


process.caloDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('CaloDetIdAssociator'),
    etaBinSize = cms.double(0.087),
    nEta = cms.int32(70),
    nPhi = cms.int32(72)
)


process.chi2CutForConversionTrajectoryBuilder = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(100000.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('eleLooseChi2')
)


process.ckfBaseInOutTrajectoryFilter = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
        minPt = cms.double(0.9),
        minNumberOfHits = cms.int32(13),
        minHitsMinPt = cms.int32(3),
        maxLostHitsFraction = cms.double(0.1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(999),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(1),
        constantValueForLostHitsFractionFilter = cms.double(1.0),
        minNumberOfHitsPerLoop = cms.int32(4),
        chargeSignificance = cms.double(-1.0),
        nSigmaMinPt = cms.double(5.0),
        minimumNumberOfHits = cms.int32(5)
    ),
    ComponentName = cms.string('ckfBaseInOutTrajectoryFilter')
)


process.ckfBaseTrajectoryFilter = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
        minPt = cms.double(0.9),
        minNumberOfHits = cms.int32(13),
        minHitsMinPt = cms.int32(3),
        maxLostHitsFraction = cms.double(0.1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(999),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(1),
        constantValueForLostHitsFractionFilter = cms.double(1.0),
        minNumberOfHitsPerLoop = cms.int32(4),
        chargeSignificance = cms.double(-1.0),
        nSigmaMinPt = cms.double(5.0),
        minimumNumberOfHits = cms.int32(5)
    ),
    ComponentName = cms.string('ckfBaseTrajectoryFilter')
)


process.ckfBaseTrajectoryFilterP5 = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
        minPt = cms.double(0.5),
        minNumberOfHits = cms.int32(13),
        minHitsMinPt = cms.int32(3),
        maxLostHitsFraction = cms.double(0.1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(4),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(3),
        constantValueForLostHitsFractionFilter = cms.double(1.0),
        minNumberOfHitsPerLoop = cms.int32(4),
        chargeSignificance = cms.double(-1.0),
        nSigmaMinPt = cms.double(5.0),
        minimumNumberOfHits = cms.int32(5)
    ),
    ComponentName = cms.string('ckfBaseTrajectoryFilterP5')
)


process.ckfTrajectoryFilterBeamHaloMuon = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
        minPt = cms.double(0.1),
        minNumberOfHits = cms.int32(13),
        minHitsMinPt = cms.int32(3),
        maxLostHitsFraction = cms.double(0.1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(3),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(2),
        constantValueForLostHitsFractionFilter = cms.double(1.0),
        minNumberOfHitsPerLoop = cms.int32(4),
        chargeSignificance = cms.double(-1.0),
        nSigmaMinPt = cms.double(5.0),
        minimumNumberOfHits = cms.int32(4)
    ),
    ComponentName = cms.string('ckfTrajectoryFilterBeamHaloMuon')
)


process.combinedMVA = cms.ESProducer("CombinedMVAJetTagESProducer",
    useCategories = cms.bool(False),
    calibrationRecord = cms.string('CombinedMVA'),
    jetTagComputers = cms.VPSet(cms.PSet(
        discriminator = cms.bool(True),
        variables = cms.bool(False),
        jetTagComputer = cms.string('jetProbability')
    ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('combinedSecondaryVertex')
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('softMuon')
        ), 
        cms.PSet(
            discriminator = cms.bool(True),
            variables = cms.bool(False),
            jetTagComputer = cms.string('softElectron')
        ))
)


process.combinedSecondaryVertex = cms.ESProducer("CombinedSecondaryVertexESProducer",
    useTrackWeights = cms.bool(True),
    pseudoMultiplicityMin = cms.uint32(2),
    correctVertexMass = cms.bool(True),
    trackSelection = cms.PSet(
        b_pT = cms.double(0.3684),
        a_dR = cms.double(-0.001053),
        min_pT = cms.double(120),
        max_pT = cms.double(500),
        min_pT_dRcut = cms.double(0.5),
        max_pT_trackPTcut = cms.double(3),
        max_pT_dRcut = cms.double(0.1),
        b_dR = cms.double(0.6263),
        a_pT = cms.double(0.005263),
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        useVariableJTA = cms.bool(False),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    charmCut = cms.double(1.5),
    vertexFlip = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackMultiplicityMin = cms.uint32(3),
    trackPseudoSelection = cms.PSet(
        b_pT = cms.double(0.3684),
        a_dR = cms.double(-0.001053),
        min_pT = cms.double(120),
        max_pT = cms.double(500),
        min_pT_dRcut = cms.double(0.5),
        max_pT_trackPTcut = cms.double(3),
        max_pT_dRcut = cms.double(0.1),
        b_dR = cms.double(0.6263),
        a_pT = cms.double(0.005263),
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        useVariableJTA = cms.bool(False),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip2dSig'),
    trackFlip = cms.bool(False),
    calibrationRecords = cms.vstring('CombinedSVRecoVertex', 
        'CombinedSVPseudoVertex', 
        'CombinedSVNoVertex'),
    useCategories = cms.bool(True),
    categoryVariableName = cms.string('vertexCategory')
)


process.combinedSecondaryVertexMVA = cms.ESProducer("CombinedSecondaryVertexESProducer",
    useTrackWeights = cms.bool(True),
    pseudoMultiplicityMin = cms.uint32(2),
    correctVertexMass = cms.bool(True),
    trackSelection = cms.PSet(
        b_pT = cms.double(0.3684),
        a_dR = cms.double(-0.001053),
        min_pT = cms.double(120),
        max_pT = cms.double(500),
        min_pT_dRcut = cms.double(0.5),
        max_pT_trackPTcut = cms.double(3),
        max_pT_dRcut = cms.double(0.1),
        b_dR = cms.double(0.6263),
        a_pT = cms.double(0.005263),
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        useVariableJTA = cms.bool(False),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    charmCut = cms.double(1.5),
    vertexFlip = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    trackMultiplicityMin = cms.uint32(3),
    trackPseudoSelection = cms.PSet(
        b_pT = cms.double(0.3684),
        a_dR = cms.double(-0.001053),
        min_pT = cms.double(120),
        max_pT = cms.double(500),
        min_pT_dRcut = cms.double(0.5),
        max_pT_trackPTcut = cms.double(3),
        max_pT_dRcut = cms.double(0.1),
        b_dR = cms.double(0.6263),
        a_pT = cms.double(0.005263),
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        useVariableJTA = cms.bool(False),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSort = cms.string('sip2dSig'),
    trackFlip = cms.bool(False),
    calibrationRecords = cms.vstring('CombinedSVMVARecoVertex', 
        'CombinedSVMVAPseudoVertex', 
        'CombinedSVMVANoVertex'),
    useCategories = cms.bool(True),
    categoryVariableName = cms.string('vertexCategory')
)


process.compositeTrajectoryFilterESProducer = cms.ESProducer("CompositeTrajectoryFilterESProducer",
    filterNames = cms.vstring(),
    ComponentName = cms.string('compositeTrajectoryFilter')
)


process.conv2CkfTrajectoryBuilder = cms.ESProducer("GroupedCkfTrajectoryBuilderESProducer",
    bestHitOnly = cms.bool(True),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    trajectoryFilterName = cms.string('conv2CkfTrajectoryFilter'),
    maxCand = cms.int32(2),
    ComponentName = cms.string('conv2CkfTrajectoryBuilder'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    clustersToSkip = cms.InputTag("conv2Clusters"),
    inOutTrajectoryFilterName = cms.string('ckfBaseTrajectoryFilter'),
    MeasurementTrackerName = cms.string(''),
    minNrOfHitsForRebuild = cms.int32(3),
    lockHits = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    foundHitBonus = cms.double(5.0),
    updator = cms.string('KFUpdator'),
    alwaysUseInvalidHits = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    requireSeedHitsInRebuild = cms.bool(True),
    useSameTrajFilter = cms.bool(True),
    estimator = cms.string('Chi2'),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.conv2CkfTrajectoryFilter = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
        minPt = cms.double(0.1),
        minNumberOfHits = cms.int32(13),
        minHitsMinPt = cms.int32(3),
        maxLostHitsFraction = cms.double(0.1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(1),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(1),
        nSigmaMinPt = cms.double(5.0),
        minNumberOfHitsPerLoop = cms.int32(4),
        minimumNumberOfHits = cms.int32(3),
        constantValueForLostHitsFractionFilter = cms.double(1.0),
        chargeSignificance = cms.double(-1.0)
    ),
    ComponentName = cms.string('conv2CkfTrajectoryFilter')
)


process.conv2LayerPairs = cms.ESProducer("SeedingLayersESProducer",
    TOB5 = cms.PSet(
        skipClusters = cms.InputTag("conv2Clusters"),
        TTRHBuilder = cms.string('WithTrackAngle'),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TOB4 = cms.PSet(
        skipClusters = cms.InputTag("conv2Clusters"),
        TTRHBuilder = cms.string('WithTrackAngle'),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TIB1 = cms.PSet(
        skipClusters = cms.InputTag("conv2Clusters"),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    TOB6 = cms.PSet(
        skipClusters = cms.InputTag("conv2Clusters"),
        TTRHBuilder = cms.string('WithTrackAngle'),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TOB1 = cms.PSet(
        skipClusters = cms.InputTag("conv2Clusters"),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    TOB3 = cms.PSet(
        skipClusters = cms.InputTag("conv2Clusters"),
        TTRHBuilder = cms.string('WithTrackAngle'),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TID3 = cms.PSet(
        useSimpleRphiHitsCleaner = cms.bool(False),
        minRing = cms.int32(1),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("conv2Clusters"),
        maxRing = cms.int32(2)
    ),
    TOB2 = cms.PSet(
        skipClusters = cms.InputTag("conv2Clusters"),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    ComponentName = cms.string('conv2LayerPairs'),
    TEC = cms.PSet(
        useSimpleRphiHitsCleaner = cms.bool(False),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched"),
        skipClusters = cms.InputTag("conv2Clusters"),
        maxRing = cms.int32(7),
        minRing = cms.int32(1)
    ),
    layerList = cms.vstring('BPix1+BPix2', 
        'BPix2+BPix3', 
        'BPix2+FPix1_pos', 
        'BPix2+FPix1_neg', 
        'BPix2+FPix2_pos', 
        'BPix2+FPix2_neg', 
        'FPix1_pos+FPix2_pos', 
        'FPix1_neg+FPix2_neg', 
        'BPix3+TIB1', 
        'TIB1+TID1_pos', 
        'TIB1+TID1_neg', 
        'TIB1+TID2_pos', 
        'TIB1+TID2_neg', 
        'TIB1+TIB2', 
        'TIB2+TID1_pos', 
        'TIB2+TID1_neg', 
        'TIB2+TID2_pos', 
        'TIB2+TID2_neg', 
        'TIB2+TIB3', 
        'TIB3+TIB4', 
        'TIB3+TID1_pos', 
        'TIB3+TID1_neg', 
        'TIB4+TOB1', 
        'TOB1+TOB2', 
        'TOB1+TEC1_pos', 
        'TOB1+TEC1_neg', 
        'TOB2+TOB3', 
        'TOB2+TEC1_pos', 
        'TOB2+TEC1_neg', 
        'TOB3+TOB4', 
        'TOB3+TEC1_pos', 
        'TOB3+TEC1_neg', 
        'TOB4+TOB5', 
        'TOB5+TOB6', 
        'TID1_pos+TID2_pos', 
        'TID2_pos+TID3_pos', 
        'TID3_pos+TEC1_pos', 
        'TID1_neg+TID2_neg', 
        'TID2_neg+TID3_neg', 
        'TID3_neg+TEC1_neg', 
        'TEC1_pos+TEC2_pos', 
        'TEC2_pos+TEC3_pos', 
        'TEC3_pos+TEC4_pos', 
        'TEC4_pos+TEC5_pos', 
        'TEC5_pos+TEC6_pos', 
        'TEC6_pos+TEC7_pos', 
        'TEC7_pos+TEC8_pos', 
        'TEC1_neg+TEC2_neg', 
        'TEC2_neg+TEC3_neg', 
        'TEC3_neg+TEC4_neg', 
        'TEC4_neg+TEC5_neg', 
        'TEC5_neg+TEC6_neg', 
        'TEC6_neg+TEC7_neg', 
        'TEC7_neg+TEC8_neg'),
    TID2 = cms.PSet(
        useSimpleRphiHitsCleaner = cms.bool(False),
        minRing = cms.int32(1),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("conv2Clusters"),
        maxRing = cms.int32(2)
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        hitErrorRZ = cms.double(0.0036),
        useErrorsFromParam = cms.bool(True),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
        skipClusters = cms.InputTag("conv2Clusters"),
        hitErrorRPhi = cms.double(0.0051)
    ),
    TIB2 = cms.PSet(
        skipClusters = cms.InputTag("conv2Clusters"),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    TIB4 = cms.PSet(
        skipClusters = cms.InputTag("conv2Clusters"),
        TTRHBuilder = cms.string('WithTrackAngle'),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TID1 = cms.PSet(
        useSimpleRphiHitsCleaner = cms.bool(False),
        minRing = cms.int32(1),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("conv2Clusters"),
        maxRing = cms.int32(2)
    ),
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        hitErrorRZ = cms.double(0.006),
        useErrorsFromParam = cms.bool(True),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
        skipClusters = cms.InputTag("conv2Clusters"),
        hitErrorRPhi = cms.double(0.0027)
    ),
    TIB3 = cms.PSet(
        skipClusters = cms.InputTag("conv2Clusters"),
        TTRHBuilder = cms.string('WithTrackAngle'),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    )
)


process.conv2StepFitterSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(30),
    LogPixelProbabilityCut = cms.double(-14.0),
    Fitter = cms.string('RKFitter'),
    MinNumberOfHits = cms.int32(3),
    Smoother = cms.string('conv2StepRKSmoother'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('conv2StepFitterSmoother'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.conv2StepRKTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('conv2StepRKSmoother'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.convCkfTrajectoryBuilder = cms.ESProducer("GroupedCkfTrajectoryBuilderESProducer",
    bestHitOnly = cms.bool(True),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    trajectoryFilterName = cms.string('convCkfTrajectoryFilter'),
    maxCand = cms.int32(2),
    ComponentName = cms.string('convCkfTrajectoryBuilder'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    clustersToSkip = cms.InputTag("convClusters"),
    inOutTrajectoryFilterName = cms.string('ckfBaseTrajectoryFilter'),
    MeasurementTrackerName = cms.string(''),
    minNrOfHitsForRebuild = cms.int32(3),
    lockHits = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    foundHitBonus = cms.double(5.0),
    updator = cms.string('KFUpdator'),
    alwaysUseInvalidHits = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    requireSeedHitsInRebuild = cms.bool(True),
    useSameTrajFilter = cms.bool(True),
    estimator = cms.string('Chi2'),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.convCkfTrajectoryFilter = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
        minPt = cms.double(0.1),
        minNumberOfHits = cms.int32(13),
        minHitsMinPt = cms.int32(3),
        maxLostHitsFraction = cms.double(0.1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(1),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(1),
        nSigmaMinPt = cms.double(5.0),
        minNumberOfHitsPerLoop = cms.int32(4),
        minimumNumberOfHits = cms.int32(3),
        constantValueForLostHitsFractionFilter = cms.double(1.0),
        chargeSignificance = cms.double(-1.0)
    ),
    ComponentName = cms.string('convCkfTrajectoryFilter')
)


process.convLayerPairs = cms.ESProducer("SeedingLayersESProducer",
    TOB5 = cms.PSet(
        skipClusters = cms.InputTag("convClusters"),
        TTRHBuilder = cms.string('WithTrackAngle'),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TOB4 = cms.PSet(
        skipClusters = cms.InputTag("convClusters"),
        TTRHBuilder = cms.string('WithTrackAngle'),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TIB1 = cms.PSet(
        skipClusters = cms.InputTag("convClusters"),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    TOB6 = cms.PSet(
        skipClusters = cms.InputTag("convClusters"),
        TTRHBuilder = cms.string('WithTrackAngle'),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TOB1 = cms.PSet(
        skipClusters = cms.InputTag("convClusters"),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    TOB3 = cms.PSet(
        skipClusters = cms.InputTag("convClusters"),
        TTRHBuilder = cms.string('WithTrackAngle'),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TID3 = cms.PSet(
        useSimpleRphiHitsCleaner = cms.bool(False),
        minRing = cms.int32(1),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("convClusters"),
        maxRing = cms.int32(2)
    ),
    TOB2 = cms.PSet(
        skipClusters = cms.InputTag("convClusters"),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    ComponentName = cms.string('convLayerPairs'),
    TEC = cms.PSet(
        useSimpleRphiHitsCleaner = cms.bool(False),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched"),
        skipClusters = cms.InputTag("convClusters"),
        maxRing = cms.int32(7),
        minRing = cms.int32(1)
    ),
    layerList = cms.vstring('BPix1+BPix2', 
        'BPix2+BPix3', 
        'BPix2+FPix1_pos', 
        'BPix2+FPix1_neg', 
        'BPix2+FPix2_pos', 
        'BPix2+FPix2_neg', 
        'FPix1_pos+FPix2_pos', 
        'FPix1_neg+FPix2_neg', 
        'BPix3+TIB1', 
        'BPix3+TIB2', 
        'TIB1+TID1_pos', 
        'TIB1+TID1_neg', 
        'TIB1+TID2_pos', 
        'TIB1+TID2_neg', 
        'TIB1+TIB2', 
        'TIB1+TIB3', 
        'TIB2+TID1_pos', 
        'TIB2+TID1_neg', 
        'TIB2+TID2_pos', 
        'TIB2+TID2_neg', 
        'TIB2+TIB3', 
        'TIB2+TIB4', 
        'TIB3+TIB4', 
        'TIB3+TOB1', 
        'TIB3+TID1_pos', 
        'TIB3+TID1_neg', 
        'TIB4+TOB1', 
        'TIB4+TOB2', 
        'TOB1+TOB2', 
        'TOB1+TOB3', 
        'TOB1+TEC1_pos', 
        'TOB1+TEC1_neg', 
        'TOB2+TOB3', 
        'TOB2+TOB4', 
        'TOB2+TEC1_pos', 
        'TOB2+TEC1_neg', 
        'TID1_pos+TID2_pos', 
        'TID2_pos+TID3_pos', 
        'TID3_pos+TEC1_pos', 
        'TID1_neg+TID2_neg', 
        'TID2_neg+TID3_neg', 
        'TID3_neg+TEC1_neg', 
        'TEC1_pos+TEC2_pos', 
        'TEC2_pos+TEC3_pos', 
        'TEC3_pos+TEC4_pos', 
        'TEC4_pos+TEC5_pos', 
        'TEC5_pos+TEC6_pos', 
        'TEC6_pos+TEC7_pos', 
        'TEC7_pos+TEC8_pos', 
        'TEC1_neg+TEC2_neg', 
        'TEC2_neg+TEC3_neg', 
        'TEC3_neg+TEC4_neg', 
        'TEC4_neg+TEC5_neg', 
        'TEC5_neg+TEC6_neg', 
        'TEC6_neg+TEC7_neg', 
        'TEC7_neg+TEC8_neg'),
    TID2 = cms.PSet(
        useSimpleRphiHitsCleaner = cms.bool(False),
        minRing = cms.int32(1),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("convClusters"),
        maxRing = cms.int32(2)
    ),
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        hitErrorRZ = cms.double(0.0036),
        useErrorsFromParam = cms.bool(True),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
        skipClusters = cms.InputTag("convClusters"),
        hitErrorRPhi = cms.double(0.0051)
    ),
    TIB2 = cms.PSet(
        skipClusters = cms.InputTag("convClusters"),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    TIB4 = cms.PSet(
        skipClusters = cms.InputTag("convClusters"),
        TTRHBuilder = cms.string('WithTrackAngle'),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    ),
    TID1 = cms.PSet(
        useSimpleRphiHitsCleaner = cms.bool(False),
        minRing = cms.int32(1),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("convClusters"),
        maxRing = cms.int32(2)
    ),
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        hitErrorRZ = cms.double(0.006),
        useErrorsFromParam = cms.bool(True),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
        skipClusters = cms.InputTag("convClusters"),
        hitErrorRPhi = cms.double(0.0027)
    ),
    TIB3 = cms.PSet(
        skipClusters = cms.InputTag("convClusters"),
        TTRHBuilder = cms.string('WithTrackAngle'),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit")
    )
)


process.convStepFitterSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(30),
    LogPixelProbabilityCut = cms.double(-14.0),
    Fitter = cms.string('RKFitter'),
    MinNumberOfHits = cms.int32(3),
    Smoother = cms.string('convStepRKSmoother'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('convStepFitterSmoother'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.convStepRKTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(3),
    ComponentName = cms.string('convStepRKSmoother'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.cosmicsNavigationSchoolESProducer = cms.ESProducer("SkippingLayerCosmicNavigationSchoolESProducer",
    noPXB = cms.bool(False),
    noTID = cms.bool(False),
    noPXF = cms.bool(False),
    noTIB = cms.bool(False),
    ComponentName = cms.string('CosmicNavigationSchool'),
    allSelf = cms.bool(True),
    noTEC = cms.bool(False),
    noTOB = cms.bool(False),
    selfSearch = cms.bool(True)
)


process.detachedTripletStepChi2Est = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(9.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('detachedTripletStepChi2Est')
)


process.detachedTripletStepSeedLayers = cms.ESProducer("SeedingLayersESProducer",
    FPix = cms.PSet(
        hitErrorRZ = cms.double(0.0036),
        hitErrorRPhi = cms.double(0.0051),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
        HitProducer = cms.string('siPixelRecHits'),
        useErrorsFromParam = cms.bool(True),
        skipClusters = cms.InputTag("detachedTripletStepClusters")
    ),
    layerList = cms.vstring('BPix1+BPix2+BPix3', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg'),
    BPix = cms.PSet(
        hitErrorRZ = cms.double(0.006),
        hitErrorRPhi = cms.double(0.0027),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
        HitProducer = cms.string('siPixelRecHits'),
        useErrorsFromParam = cms.bool(True),
        skipClusters = cms.InputTag("detachedTripletStepClusters")
    ),
    ComponentName = cms.string('detachedTripletStepSeedLayers')
)


process.detachedTripletStepTrajectoryBuilder = cms.ESProducer("GroupedCkfTrajectoryBuilderESProducer",
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    trajectoryFilterName = cms.string('detachedTripletStepTrajectoryFilter'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    MeasurementTrackerName = cms.string(''),
    maxPtForLooperReconstruction = cms.double(0.7),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    lockHits = cms.bool(True),
    useSameTrajFilter = cms.bool(True),
    bestHitOnly = cms.bool(True),
    maxCand = cms.int32(2),
    clustersToSkip = cms.InputTag("detachedTripletStepClusters"),
    alwaysUseInvalidHits = cms.bool(False),
    minNrOfHitsForRebuild = cms.int32(5),
    ComponentName = cms.string('detachedTripletStepTrajectoryBuilder'),
    intermediateCleaning = cms.bool(True),
    inOutTrajectoryFilterName = cms.string('ckfBaseTrajectoryFilter'),
    estimator = cms.string('detachedTripletStepChi2Est'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    foundHitBonus = cms.double(5.0),
    updator = cms.string('KFUpdator'),
    keepOriginalIfRebuildFails = cms.bool(False),
    requireSeedHitsInRebuild = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.detachedTripletStepTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('detachedTripletStepTrajectoryCleanerBySharedHits'),
    fractionShared = cms.double(0.13),
    ValidHitBonus = cms.double(5.0),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    allowSharedFirstHit = cms.bool(True)
)


process.detachedTripletStepTrajectoryFilter = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
        minPt = cms.double(0.075),
        minNumberOfHits = cms.int32(13),
        minHitsMinPt = cms.int32(3),
        maxLostHitsFraction = cms.double(0.1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(999),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(1),
        nSigmaMinPt = cms.double(5.0),
        minNumberOfHitsPerLoop = cms.int32(4),
        minimumNumberOfHits = cms.int32(3),
        constantValueForLostHitsFractionFilter = cms.double(0.701),
        chargeSignificance = cms.double(-1.0)
    ),
    ComponentName = cms.string('detachedTripletStepTrajectoryFilter')
)


process.ecalDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('EcalDetIdAssociator'),
    etaBinSize = cms.double(0.02),
    nEta = cms.int32(300),
    nPhi = cms.int32(360)
)


process.ecalNextToDeadChannelESProducer = cms.ESProducer("EcalNextToDeadChannelESProducer",
    channelStatusThresholdForDead = cms.int32(12)
)


process.ecalSeverityLevel = cms.ESProducer("EcalSeverityLevelESProducer",
    dbstatusMask = cms.PSet(
        kRecovered = cms.vuint32(),
        kGood = cms.vuint32(0),
        kTime = cms.vuint32(),
        kWeird = cms.vuint32(),
        kBad = cms.vuint32(11, 12, 13, 14, 15, 
            16),
        kProblematic = cms.vuint32(1, 2, 3, 4, 5, 
            6, 7, 8, 9, 10)
    ),
    timeThresh = cms.double(2.0),
    flagMask = cms.PSet(
        kRecovered = cms.vstring('kLeadingEdgeRecovered', 
            'kTowerRecovered'),
        kGood = cms.vstring('kGood'),
        kTime = cms.vstring('kOutOfTime'),
        kWeird = cms.vstring('kWeird', 
            'kDiWeird'),
        kBad = cms.vstring('kFaultyHardware', 
            'kDead', 
            'kKilled'),
        kProblematic = cms.vstring('kPoorReco', 
            'kPoorCalib', 
            'kNoisy', 
            'kSaturated')
    )
)


process.electronChi2 = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(100.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('electronChi2')
)


process.electronTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('electronTrajectoryCleanerBySharedHits'),
    fractionShared = cms.double(0.19),
    ValidHitBonus = cms.double(1000.0),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(0.0),
    allowSharedFirstHit = cms.bool(True)
)


process.fakeForIdealAlignment = cms.ESProducer("FakeAlignmentProducer",
    appendToDataLabel = cms.string('fakeForIdeal')
)


process.fwdAnalyticalPropagator = cms.ESProducer("AnalyticalPropagatorESProducer",
    MaxDPhi = cms.double(1.6),
    ComponentName = cms.string('fwdAnalyticalPropagator'),
    PropagationDirection = cms.string('alongMomentum')
)


process.fwdElectronPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('alongMomentum'),
    ComponentName = cms.string('fwdElectronPropagator'),
    Mass = cms.double(0.000511),
    ptMin = cms.double(-1.0),
    MaxDPhi = cms.double(1.6),
    useRungeKutta = cms.bool(False)
)


process.fwdGsfElectronPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('alongMomentum'),
    ComponentName = cms.string('fwdGsfElectronPropagator'),
    Mass = cms.double(0.000511),
    ptMin = cms.double(-1.0),
    MaxDPhi = cms.double(1.6),
    useRungeKutta = cms.bool(False)
)


process.ghostTrack = cms.ESProducer("GhostTrackESProducer",
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    charmCut = cms.double(1.5),
    trackSort = cms.string('sip2dSig'),
    minimumTrackWeight = cms.double(0.5),
    trackSelection = cms.PSet(
        b_pT = cms.double(0.3684),
        a_dR = cms.double(-0.001053),
        min_pT = cms.double(120),
        max_pT = cms.double(500),
        min_pT_dRcut = cms.double(0.5),
        max_pT_trackPTcut = cms.double(3),
        max_pT_dRcut = cms.double(0.1),
        b_dR = cms.double(0.6263),
        a_pT = cms.double(0.005263),
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        useVariableJTA = cms.bool(False),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    calibrationRecords = cms.vstring('GhostTrackRecoVertex', 
        'GhostTrackPseudoVertex', 
        'GhostTrackNoVertex'),
    useCategories = cms.bool(True),
    categoryVariableName = cms.string('vertexCategory')
)


process.hcalDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('HcalDetIdAssociator'),
    etaBinSize = cms.double(0.087),
    nEta = cms.int32(70),
    nPhi = cms.int32(72)
)


process.hcalRecAlgos = cms.ESProducer("HcalRecAlgoESProducer",
    RecoveredRecHitBits = cms.vstring('TimingAddedBit', 
        'TimingSubtractedBit'),
    SeverityLevels = cms.VPSet(cms.PSet(
        RecHitFlags = cms.vstring(''),
        ChannelStatus = cms.vstring(''),
        Level = cms.int32(0)
    ), 
        cms.PSet(
            RecHitFlags = cms.vstring(''),
            ChannelStatus = cms.vstring('HcalCellCaloTowerProb'),
            Level = cms.int32(1)
        ), 
        cms.PSet(
            RecHitFlags = cms.vstring('HSCP_R1R2', 
                'HSCP_FracLeader', 
                'HSCP_OuterEnergy', 
                'HSCP_ExpFit', 
                'ADCSaturationBit', 
                'HBHEIsolatedNoise', 
                'AddedSimHcalNoise'),
            ChannelStatus = cms.vstring('HcalCellExcludeFromHBHENoiseSummary'),
            Level = cms.int32(5)
        ), 
        cms.PSet(
            RecHitFlags = cms.vstring('HBHEHpdHitMultiplicity', 
                'HBHEPulseShape', 
                'HOBit', 
                'HFDigiTime', 
                'HFInTimeWindow', 
                'ZDCBit', 
                'CalibrationBit', 
                'TimingErrorBit', 
                'HBHEFlatNoise', 
                'HBHESpikeNoise', 
                'HBHETriangleNoise', 
                'HBHETS4TS5Noise'),
            ChannelStatus = cms.vstring(''),
            Level = cms.int32(8)
        ), 
        cms.PSet(
            RecHitFlags = cms.vstring('HFLongShort', 
                'HFPET', 
                'HFS8S1Ratio'),
            ChannelStatus = cms.vstring(''),
            Level = cms.int32(11)
        ), 
        cms.PSet(
            RecHitFlags = cms.vstring(''),
            ChannelStatus = cms.vstring('HcalCellCaloTowerMask'),
            Level = cms.int32(12)
        ), 
        cms.PSet(
            RecHitFlags = cms.vstring(''),
            ChannelStatus = cms.vstring('HcalCellHot'),
            Level = cms.int32(15)
        ), 
        cms.PSet(
            RecHitFlags = cms.vstring(''),
            ChannelStatus = cms.vstring('HcalCellOff', 
                'HcalCellDead'),
            Level = cms.int32(20)
        )),
    DropChannelStatusBits = cms.vstring('HcalCellMask', 
        'HcalCellOff', 
        'HcalCellDead')
)


process.hcalTopologyIdeal = cms.ESProducer("HcalTopologyIdealEP",
    Exclude = cms.untracked.string(''),
    appendToDataLabel = cms.string(''),
    hcalTopologyConstants = cms.PSet(
        maxDepthHE = cms.int32(3),
        maxDepthHB = cms.int32(2),
        mode = cms.string('HcalTopologyMode::LHC')
    )
)


process.hcal_db_producer = cms.ESProducer("HcalDbProducer",
    file = cms.untracked.string(''),
    dump = cms.untracked.vstring('')
)


process.hitCollectorForOutInMuonSeeds = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(100.0),
    nSigma = cms.double(4.0),
    ComponentName = cms.string('hitCollectorForOutInMuonSeeds')
)


process.hoDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('HODetIdAssociator'),
    etaBinSize = cms.double(0.087),
    nEta = cms.int32(30),
    nPhi = cms.int32(72)
)


process.idealForDigiCSCGeometry = cms.ESProducer("CSCGeometryESModule",
    appendToDataLabel = cms.string('idealForDigi'),
    useDDD = cms.bool(True),
    debugV = cms.untracked.bool(False),
    useGangedStripsInME1a = cms.bool(True),
    alignmentsLabel = cms.string('fakeForIdeal'),
    useOnlyWiresInME1a = cms.bool(False),
    useRealWireGeometry = cms.bool(True),
    useCentreTIOffsets = cms.bool(False),
    applyAlignment = cms.bool(False)
)


process.idealForDigiDTGeometry = cms.ESProducer("DTGeometryESModule",
    appendToDataLabel = cms.string('idealForDigi'),
    fromDDD = cms.bool(True),
    applyAlignment = cms.bool(False),
    alignmentsLabel = cms.string('fakeForIdeal')
)


process.idealForDigiTrackerGeometry = cms.ESProducer("TrackerDigiGeometryESModule",
    appendToDataLabel = cms.string('idealForDigi'),
    fromDDD = cms.bool(True),
    trackerGeometryConstants = cms.PSet(
        ROCS_X = cms.int32(0),
        ROCS_Y = cms.int32(0),
        upgradeGeometry = cms.bool(False),
        BIG_PIX_PER_ROC_Y = cms.int32(2),
        BIG_PIX_PER_ROC_X = cms.int32(1),
        ROWS_PER_ROC = cms.int32(80),
        COLS_PER_ROC = cms.int32(52)
    ),
    applyAlignment = cms.bool(False),
    alignmentsLabel = cms.string('fakeForIdeal')
)


process.impactParameterMVAComputer = cms.ESProducer("GenericMVAJetTagESProducer",
    useCategories = cms.bool(False),
    calibrationRecord = cms.string('ImpactParameterMVA')
)


process.initialStepChi2Est = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(30.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('initialStepChi2Est')
)


process.initialStepTrajectoryBuilder = cms.ESProducer("GroupedCkfTrajectoryBuilderESProducer",
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    trajectoryFilterName = cms.string('initialStepTrajectoryFilter'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    MeasurementTrackerName = cms.string(''),
    maxPtForLooperReconstruction = cms.double(0.7),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    lockHits = cms.bool(True),
    useSameTrajFilter = cms.bool(True),
    bestHitOnly = cms.bool(True),
    maxCand = cms.int32(6),
    alwaysUseInvalidHits = cms.bool(True),
    minNrOfHitsForRebuild = cms.int32(5),
    ComponentName = cms.string('initialStepTrajectoryBuilder'),
    intermediateCleaning = cms.bool(True),
    inOutTrajectoryFilterName = cms.string('ckfBaseTrajectoryFilter'),
    estimator = cms.string('initialStepChi2Est'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    foundHitBonus = cms.double(5.0),
    updator = cms.string('KFUpdator'),
    keepOriginalIfRebuildFails = cms.bool(False),
    requireSeedHitsInRebuild = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.initialStepTrajectoryFilter = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
        minPt = cms.double(0.2),
        minNumberOfHits = cms.int32(13),
        minHitsMinPt = cms.int32(3),
        maxLostHitsFraction = cms.double(0.1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(999),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(1),
        nSigmaMinPt = cms.double(5.0),
        minNumberOfHitsPerLoop = cms.int32(4),
        minimumNumberOfHits = cms.int32(3),
        constantValueForLostHitsFractionFilter = cms.double(1.0),
        chargeSignificance = cms.double(-1.0)
    ),
    ComponentName = cms.string('initialStepTrajectoryFilter')
)


process.jetBProbability = cms.ESProducer("JetBProbabilityESProducer",
    b_pT = cms.double(0.3684),
    a_dR = cms.double(-0.001053),
    min_pT = cms.double(120),
    max_pT = cms.double(500),
    min_pT_dRcut = cms.double(0.5),
    max_pT_trackPTcut = cms.double(3),
    max_pT_dRcut = cms.double(0.1),
    b_dR = cms.double(0.6263),
    a_pT = cms.double(0.005263),
    deltaR = cms.double(-1.0),
    maximumDistanceToJetAxis = cms.double(0.07),
    impactParameterType = cms.int32(0),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False),
    trackIpSign = cms.int32(1),
    minimumProbability = cms.double(0.005),
    numberOfBTracks = cms.uint32(4),
    maximumDecayLength = cms.double(5.0)
)


process.jetProbability = cms.ESProducer("JetProbabilityESProducer",
    b_pT = cms.double(0.3684),
    a_dR = cms.double(-0.001053),
    min_pT = cms.double(120),
    max_pT = cms.double(500),
    min_pT_dRcut = cms.double(0.5),
    max_pT_trackPTcut = cms.double(3),
    max_pT_dRcut = cms.double(0.1),
    b_dR = cms.double(0.6263),
    a_pT = cms.double(0.005263),
    deltaR = cms.double(0.3),
    maximumDistanceToJetAxis = cms.double(0.07),
    impactParameterType = cms.int32(0),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False),
    trackIpSign = cms.int32(1),
    minimumProbability = cms.double(0.005),
    maximumDecayLength = cms.double(5.0)
)


process.l1CaloScales = cms.ESProducer("L1ScalesTrivialProducer",
    L1CaloEmEtScaleLSB = cms.double(0.5),
    L1HtMissThresholds = cms.vdouble(0.0, 2.0, 4.0, 6.0, 8.0, 
        10.0, 12.0, 14.0, 16.0, 18.0, 
        20.0, 22.0, 24.0, 26.0, 28.0, 
        30.0, 32.0, 34.0, 36.0, 38.0, 
        40.0, 42.0, 44.0, 46.0, 48.0, 
        50.0, 52.0, 54.0, 56.0, 58.0, 
        60.0, 62.0, 64.0, 66.0, 68.0, 
        70.0, 72.0, 74.0, 76.0, 78.0, 
        80.0, 82.0, 84.0, 86.0, 88.0, 
        90.0, 92.0, 94.0, 96.0, 98.0, 
        100.0, 102.0, 104.0, 106.0, 108.0, 
        110.0, 112.0, 114.0, 116.0, 118.0, 
        120.0, 122.0, 124.0, 126.0, 128.0, 
        130.0, 132.0, 134.0, 136.0, 138.0, 
        140.0, 142.0, 144.0, 146.0, 148.0, 
        150.0, 152.0, 154.0, 156.0, 158.0, 
        160.0, 162.0, 164.0, 166.0, 168.0, 
        170.0, 172.0, 174.0, 176.0, 178.0, 
        180.0, 182.0, 184.0, 186.0, 188.0, 
        190.0, 192.0, 194.0, 196.0, 198.0, 
        200.0, 202.0, 204.0, 206.0, 208.0, 
        210.0, 212.0, 214.0, 216.0, 218.0, 
        220.0, 222.0, 224.0, 226.0, 228.0, 
        230.0, 232.0, 234.0, 236.0, 238.0, 
        240.0, 242.0, 244.0, 246.0, 248.0, 
        250.0, 252.0, 254.0),
    L1CaloEmThresholds = cms.vdouble( (0.0, 1.0, 2.0, 3.0, 4.0, 
        5.0, 6.0, 7.0, 8.0, 9.0, 
        10.0, 11.0, 12.0, 13.0, 14.0, 
        15.0, 16.0, 17.0, 18.0, 19.0, 
        20.0, 21.0, 22.0, 23.0, 24.0, 
        25.0, 26.0, 27.0, 28.0, 29.0, 
        30.0, 31.0, 32.0, 33.0, 34.0, 
        35.0, 36.0, 37.0, 38.0, 39.0, 
        40.0, 41.0, 42.0, 43.0, 44.0, 
        45.0, 46.0, 47.0, 48.0, 49.0, 
        50.0, 51.0, 52.0, 53.0, 54.0, 
        55.0, 56.0, 57.0, 58.0, 59.0, 
        60.0, 61.0, 62.0, 63.0, 64.0, 
        65.0, 66.0, 67.0, 68.0, 69.0, 
        70.0, 71.0, 72.0, 73.0, 74.0, 
        75.0, 76.0, 77.0, 78.0, 79.0, 
        80.0, 81.0, 82.0, 83.0, 84.0, 
        85.0, 86.0, 87.0, 88.0, 89.0, 
        90.0, 91.0, 92.0, 93.0, 94.0, 
        95.0, 96.0, 97.0, 98.0, 99.0, 
        100.0, 101.0, 102.0, 103.0, 104.0, 
        105.0, 106.0, 107.0, 108.0, 109.0, 
        110.0, 111.0, 112.0, 113.0, 114.0, 
        115.0, 116.0, 117.0, 118.0, 119.0, 
        120.0, 121.0, 122.0, 123.0, 124.0, 
        125.0, 126.0, 127.0, 128.0, 129.0, 
        130.0, 131.0, 132.0, 133.0, 134.0, 
        135.0, 136.0, 137.0, 138.0, 139.0, 
        140.0, 141.0, 142.0, 143.0, 144.0, 
        145.0, 146.0, 147.0, 148.0, 149.0, 
        150.0, 151.0, 152.0, 153.0, 154.0, 
        155.0, 156.0, 157.0, 158.0, 159.0, 
        160.0, 161.0, 162.0, 163.0, 164.0, 
        165.0, 166.0, 167.0, 168.0, 169.0, 
        170.0, 171.0, 172.0, 173.0, 174.0, 
        175.0, 176.0, 177.0, 178.0, 179.0, 
        180.0, 181.0, 182.0, 183.0, 184.0, 
        185.0, 186.0, 187.0, 188.0, 189.0, 
        190.0, 191.0, 192.0, 193.0, 194.0, 
        195.0, 196.0, 197.0, 198.0, 199.0, 
        200.0, 201.0, 202.0, 203.0, 204.0, 
        205.0, 206.0, 207.0, 208.0, 209.0, 
        210.0, 211.0, 212.0, 213.0, 214.0, 
        215.0, 216.0, 217.0, 218.0, 219.0, 
        220.0, 221.0, 222.0, 223.0, 224.0, 
        225.0, 226.0, 227.0, 228.0, 229.0, 
        230.0, 231.0, 232.0, 233.0, 234.0, 
        235.0, 236.0, 237.0, 238.0, 239.0, 
        240.0, 241.0, 242.0, 243.0, 244.0, 
        245.0, 246.0, 247.0, 248.0, 249.0, 
        250.0, 251.0, 252.0, 253.0, 254.0, 
        255.0 ) ),
    L1HfRingThresholds = cms.vdouble(0.0, 2.0, 3.0, 4.0, 6.0, 
        50.0, 200.0, 500.0),
    L1CaloRegionEtScaleLSB = cms.double(0.5),
    L1CaloJetThresholds = cms.vdouble(0.0, 4.0, 8.0, 12.0, 16.0, 
        20.0, 24.0, 28.0, 32.0, 36.0, 
        40.0, 44.0, 48.0, 52.0, 56.0, 
        60.0, 64.0, 68.0, 72.0, 76.0, 
        80.0, 84.0, 88.0, 92.0, 96.0, 
        100.0, 104.0, 108.0, 112.0, 116.0, 
        120.0, 124.0, 128.0, 132.0, 136.0, 
        140.0, 144.0, 148.0, 152.0, 156.0, 
        160.0, 164.0, 168.0, 172.0, 176.0, 
        180.0, 184.0, 188.0, 192.0, 196.0, 
        200.0, 204.0, 208.0, 212.0, 216.0, 
        220.0, 224.0, 228.0, 232.0, 236.0, 
        240.0, 244.0, 248.0, 252.0),
    L1CaloEmMaxLinScale = cms.uint32(1023),
    L1CaloEmMaxRank = cms.uint32(255)
)


process.l1RPCBxOrConfig = cms.ESProducer("RPCTriggerBxOrConfig",
    lastBX = cms.int32(0),
    firstBX = cms.int32(0)
)


process.lowPtTripletStepChi2Est = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(9.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('lowPtTripletStepChi2Est')
)


process.lowPtTripletStepSeedLayers = cms.ESProducer("SeedingLayersESProducer",
    FPix = cms.PSet(
        hitErrorRZ = cms.double(0.0036),
        hitErrorRPhi = cms.double(0.0051),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
        HitProducer = cms.string('siPixelRecHits'),
        useErrorsFromParam = cms.bool(True),
        skipClusters = cms.InputTag("lowPtTripletStepClusters")
    ),
    layerList = cms.vstring('BPix1+BPix2+BPix3', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg'),
    BPix = cms.PSet(
        hitErrorRZ = cms.double(0.006),
        hitErrorRPhi = cms.double(0.0027),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
        HitProducer = cms.string('siPixelRecHits'),
        useErrorsFromParam = cms.bool(True),
        skipClusters = cms.InputTag("lowPtTripletStepClusters")
    ),
    ComponentName = cms.string('lowPtTripletStepSeedLayers')
)


process.lowPtTripletStepStandardTrajectoryFilter = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
        minPt = cms.double(0.075),
        minNumberOfHits = cms.int32(13),
        minHitsMinPt = cms.int32(3),
        maxLostHitsFraction = cms.double(0.1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(999),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(1),
        nSigmaMinPt = cms.double(5.0),
        minNumberOfHitsPerLoop = cms.int32(4),
        minimumNumberOfHits = cms.int32(3),
        constantValueForLostHitsFractionFilter = cms.double(1.0),
        chargeSignificance = cms.double(-1.0)
    ),
    ComponentName = cms.string('lowPtTripletStepStandardTrajectoryFilter')
)


process.lowPtTripletStepTrajectoryBuilder = cms.ESProducer("GroupedCkfTrajectoryBuilderESProducer",
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    trajectoryFilterName = cms.string('lowPtTripletStepTrajectoryFilter'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    MeasurementTrackerName = cms.string(''),
    maxPtForLooperReconstruction = cms.double(0.7),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    lockHits = cms.bool(True),
    useSameTrajFilter = cms.bool(True),
    bestHitOnly = cms.bool(True),
    maxCand = cms.int32(4),
    clustersToSkip = cms.InputTag("lowPtTripletStepClusters"),
    alwaysUseInvalidHits = cms.bool(True),
    minNrOfHitsForRebuild = cms.int32(5),
    ComponentName = cms.string('lowPtTripletStepTrajectoryBuilder'),
    intermediateCleaning = cms.bool(True),
    inOutTrajectoryFilterName = cms.string('ckfBaseTrajectoryFilter'),
    estimator = cms.string('lowPtTripletStepChi2Est'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    foundHitBonus = cms.double(5.0),
    updator = cms.string('KFUpdator'),
    keepOriginalIfRebuildFails = cms.bool(False),
    requireSeedHitsInRebuild = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.lowPtTripletStepTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('lowPtTripletStepTrajectoryCleanerBySharedHits'),
    fractionShared = cms.double(0.16),
    ValidHitBonus = cms.double(5.0),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    allowSharedFirstHit = cms.bool(True)
)


process.lowPtTripletStepTrajectoryFilter = cms.ESProducer("CompositeTrajectoryFilterESProducer",
    filterNames = cms.vstring('lowPtTripletStepStandardTrajectoryFilter', 
        'clusterShapeTrajectoryFilter'),
    ComponentName = cms.string('lowPtTripletStepTrajectoryFilter')
)


process.mixedTripletStepChi2Est = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(16.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('mixedTripletStepChi2Est')
)


process.mixedTripletStepPropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('alongMomentum'),
    ComponentName = cms.string('mixedTripletStepPropagator'),
    Mass = cms.double(0.105),
    ptMin = cms.double(0.1),
    MaxDPhi = cms.double(1.6),
    useRungeKutta = cms.bool(False)
)


process.mixedTripletStepPropagatorOpposite = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('oppositeToMomentum'),
    ComponentName = cms.string('mixedTripletStepPropagatorOpposite'),
    Mass = cms.double(0.105),
    ptMin = cms.double(0.1),
    MaxDPhi = cms.double(1.6),
    useRungeKutta = cms.bool(False)
)


process.mixedTripletStepSeedLayersA = cms.ESProducer("SeedingLayersESProducer",
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        hitErrorRZ = cms.double(0.0036),
        useErrorsFromParam = cms.bool(True),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4MixedTriplets'),
        skipClusters = cms.InputTag("mixedTripletStepClusters"),
        hitErrorRPhi = cms.double(0.0051)
    ),
    layerList = cms.vstring('BPix1+BPix2+BPix3', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg', 
        'BPix2+FPix1_pos+FPix2_pos', 
        'BPix2+FPix1_neg+FPix2_neg', 
        'FPix1_pos+FPix2_pos+TEC1_pos', 
        'FPix1_neg+FPix2_neg+TEC1_neg', 
        'FPix2_pos+TEC2_pos+TEC3_pos', 
        'FPix2_neg+TEC2_neg+TEC3_neg'),
    TEC = cms.PSet(
        minRing = cms.int32(1),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("mixedTripletStepClusters"),
        maxRing = cms.int32(1)
    ),
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        hitErrorRZ = cms.double(0.006),
        useErrorsFromParam = cms.bool(True),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4MixedTriplets'),
        skipClusters = cms.InputTag("mixedTripletStepClusters"),
        hitErrorRPhi = cms.double(0.0027)
    ),
    ComponentName = cms.string('mixedTripletStepSeedLayersA')
)


process.mixedTripletStepSeedLayersB = cms.ESProducer("SeedingLayersESProducer",
    ComponentName = cms.string('mixedTripletStepSeedLayersB'),
    layerList = cms.vstring('BPix2+BPix3+TIB1', 
        'BPix2+BPix3+TIB2'),
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        hitErrorRZ = cms.double(0.006),
        useErrorsFromParam = cms.bool(True),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4MixedTriplets'),
        skipClusters = cms.InputTag("mixedTripletStepClusters"),
        hitErrorRPhi = cms.double(0.0027)
    ),
    TIB = cms.PSet(
        skipClusters = cms.InputTag("mixedTripletStepClusters"),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        TTRHBuilder = cms.string('WithTrackAngle')
    )
)


process.mixedTripletStepTrajectoryBuilder = cms.ESProducer("GroupedCkfTrajectoryBuilderESProducer",
    propagatorAlong = cms.string('mixedTripletStepPropagator'),
    trajectoryFilterName = cms.string('mixedTripletStepTrajectoryFilter'),
    propagatorOpposite = cms.string('mixedTripletStepPropagatorOpposite'),
    MeasurementTrackerName = cms.string(''),
    maxPtForLooperReconstruction = cms.double(0.7),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    lockHits = cms.bool(True),
    useSameTrajFilter = cms.bool(True),
    bestHitOnly = cms.bool(True),
    maxCand = cms.int32(2),
    clustersToSkip = cms.InputTag("mixedTripletStepClusters"),
    alwaysUseInvalidHits = cms.bool(True),
    minNrOfHitsForRebuild = cms.int32(5),
    ComponentName = cms.string('mixedTripletStepTrajectoryBuilder'),
    intermediateCleaning = cms.bool(True),
    inOutTrajectoryFilterName = cms.string('ckfBaseTrajectoryFilter'),
    estimator = cms.string('mixedTripletStepChi2Est'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    foundHitBonus = cms.double(5.0),
    updator = cms.string('KFUpdator'),
    keepOriginalIfRebuildFails = cms.bool(False),
    requireSeedHitsInRebuild = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.mixedTripletStepTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('mixedTripletStepTrajectoryCleanerBySharedHits'),
    fractionShared = cms.double(0.11),
    ValidHitBonus = cms.double(5.0),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    allowSharedFirstHit = cms.bool(True)
)


process.mixedTripletStepTrajectoryFilter = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
        minPt = cms.double(0.1),
        minNumberOfHits = cms.int32(13),
        minHitsMinPt = cms.int32(3),
        maxLostHitsFraction = cms.double(0.1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(0),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(1),
        nSigmaMinPt = cms.double(5.0),
        minNumberOfHitsPerLoop = cms.int32(4),
        minimumNumberOfHits = cms.int32(3),
        constantValueForLostHitsFractionFilter = cms.double(1.0),
        chargeSignificance = cms.double(-1.0)
    ),
    ComponentName = cms.string('mixedTripletStepTrajectoryFilter')
)


process.mixedlayerpairs = cms.ESProducer("SeedingLayersESProducer",
    FPix = cms.PSet(
        hitErrorRZ = cms.double(0.0036),
        hitErrorRPhi = cms.double(0.0051),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4MixedPairs'),
        HitProducer = cms.string('siPixelRecHits'),
        useErrorsFromParam = cms.bool(True)
    ),
    layerList = cms.vstring('BPix1+BPix2', 
        'BPix1+BPix3', 
        'BPix2+BPix3', 
        'BPix1+FPix1_pos', 
        'BPix1+FPix1_neg', 
        'BPix1+FPix2_pos', 
        'BPix1+FPix2_neg', 
        'BPix2+FPix1_pos', 
        'BPix2+FPix1_neg', 
        'BPix2+FPix2_pos', 
        'BPix2+FPix2_neg', 
        'FPix1_pos+FPix2_pos', 
        'FPix1_neg+FPix2_neg', 
        'FPix2_pos+TEC1_pos', 
        'FPix2_pos+TEC2_pos', 
        'TEC1_pos+TEC2_pos', 
        'TEC2_pos+TEC3_pos', 
        'FPix2_neg+TEC1_neg', 
        'FPix2_neg+TEC2_neg', 
        'TEC1_neg+TEC2_neg', 
        'TEC2_neg+TEC3_neg'),
    TEC = cms.PSet(
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        minRing = cms.int32(1),
        maxRing = cms.int32(1)
    ),
    BPix = cms.PSet(
        hitErrorRZ = cms.double(0.006),
        hitErrorRPhi = cms.double(0.0027),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4MixedPairs'),
        HitProducer = cms.string('siPixelRecHits'),
        useErrorsFromParam = cms.bool(True)
    ),
    ComponentName = cms.string('MixedLayerPairs')
)


process.mixedlayertriplets = cms.ESProducer("SeedingLayersESProducer",
    layerList = cms.vstring('BPix1+BPix2+BPix3', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg', 
        'BPix1+BPix2+TIB1', 
        'BPix1+BPix3+TIB1', 
        'BPix2+BPix3+TIB1', 
        'BPix1+FPix1_pos+TID1_pos', 
        'BPix1+FPix1_neg+TID1_neg', 
        'BPix1+FPix1_pos+TID2_pos', 
        'BPix1+FPix1_neg+TID2_neg', 
        'FPix1_pos+FPix2_pos+TEC1_pos', 
        'FPix1_neg+FPix2_neg+TEC1_neg', 
        'FPix1_pos+FPix2_pos+TEC2_pos', 
        'FPix1_neg+FPix2_neg+TEC2_neg'),
    ComponentName = cms.string('MixedLayerTriplets'),
    TEC = cms.PSet(
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    FPix = cms.PSet(
        hitErrorRZ = cms.double(0.0036),
        hitErrorRPhi = cms.double(0.0051),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4MixedTriplets'),
        HitProducer = cms.string('siPixelRecHits'),
        useErrorsFromParam = cms.bool(True)
    ),
    TID = cms.PSet(
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    BPix = cms.PSet(
        hitErrorRZ = cms.double(0.006),
        hitErrorRPhi = cms.double(0.0027),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4MixedTriplets'),
        HitProducer = cms.string('siPixelRecHits'),
        useErrorsFromParam = cms.bool(True)
    ),
    TIB = cms.PSet(
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        TTRHBuilder = cms.string('WithTrackAngle')
    )
)


process.muonDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('MuonDetIdAssociator'),
    includeBadChambers = cms.bool(False),
    etaBinSize = cms.double(0.125),
    nEta = cms.int32(48),
    nPhi = cms.int32(48)
)


process.muonSeededFittingSmootherWithOutliersRejectionAndRK = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(50.0),
    LogPixelProbabilityCut = cms.double(-14.0),
    Fitter = cms.string('RKFitter'),
    MinNumberOfHits = cms.int32(3),
    Smoother = cms.string('RKSmoother'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(False),
    ComponentName = cms.string('muonSeededFittingSmootherWithOutliersRejectionAndRK'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.muonSeededMeasurementEstimatorForInOut = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(400.0),
    nSigma = cms.double(4.0),
    ComponentName = cms.string('muonSeededMeasurementEstimatorForInOut')
)


process.muonSeededMeasurementEstimatorForOutIn = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(30.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('muonSeededMeasurementEstimatorForOutIn')
)


process.muonSeededTrajectoryBuilderForInOut = cms.ESProducer("GroupedCkfTrajectoryBuilderESProducer",
    bestHitOnly = cms.bool(True),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    trajectoryFilterName = cms.string('muonSeededTrajectoryFilterForInOut'),
    maxCand = cms.int32(5),
    ComponentName = cms.string('muonSeededTrajectoryBuilderForInOut'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    inOutTrajectoryFilterName = cms.string('muonSeededTrajectoryFilterForInOut'),
    MeasurementTrackerName = cms.string(''),
    minNrOfHitsForRebuild = cms.int32(2),
    lockHits = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    foundHitBonus = cms.double(1000.0),
    updator = cms.string('KFUpdator'),
    alwaysUseInvalidHits = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(True),
    requireSeedHitsInRebuild = cms.bool(True),
    useSameTrajFilter = cms.bool(True),
    estimator = cms.string('muonSeededMeasurementEstimatorForInOut'),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(1.0)
)


process.muonSeededTrajectoryBuilderForOutIn = cms.ESProducer("GroupedCkfTrajectoryBuilderESProducer",
    bestHitOnly = cms.bool(True),
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    trajectoryFilterName = cms.string('muonSeededTrajectoryFilterForOutIn'),
    maxCand = cms.int32(3),
    ComponentName = cms.string('muonSeededTrajectoryBuilderForOutIn'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    inOutTrajectoryFilterName = cms.string('muonSeededTrajectoryFilterForOutIn'),
    MeasurementTrackerName = cms.string(''),
    minNrOfHitsForRebuild = cms.int32(5),
    lockHits = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    foundHitBonus = cms.double(1000.0),
    updator = cms.string('KFUpdator'),
    alwaysUseInvalidHits = cms.bool(True),
    keepOriginalIfRebuildFails = cms.bool(False),
    requireSeedHitsInRebuild = cms.bool(True),
    useSameTrajFilter = cms.bool(True),
    estimator = cms.string('muonSeededMeasurementEstimatorForOutIn'),
    intermediateCleaning = cms.bool(True),
    lostHitPenalty = cms.double(1.0)
)


process.muonSeededTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('muonSeededTrajectoryCleanerBySharedHits'),
    fractionShared = cms.double(0.1),
    ValidHitBonus = cms.double(1000.0),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(1.0),
    allowSharedFirstHit = cms.bool(True)
)


process.muonSeededTrajectoryFilterForInOut = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
        minPt = cms.double(0.9),
        minNumberOfHits = cms.int32(13),
        minHitsMinPt = cms.int32(3),
        maxLostHitsFraction = cms.double(0.1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(999),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(1),
        constantValueForLostHitsFractionFilter = cms.double(10),
        minNumberOfHitsPerLoop = cms.int32(4),
        chargeSignificance = cms.double(-1.0),
        nSigmaMinPt = cms.double(5.0),
        minimumNumberOfHits = cms.int32(3)
    ),
    ComponentName = cms.string('muonSeededTrajectoryFilterForInOut')
)


process.muonSeededTrajectoryFilterForOutIn = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
        minPt = cms.double(0.9),
        minNumberOfHits = cms.int32(13),
        minHitsMinPt = cms.int32(3),
        maxLostHitsFraction = cms.double(0.1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(999),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(1),
        constantValueForLostHitsFractionFilter = cms.double(10),
        minNumberOfHitsPerLoop = cms.int32(4),
        chargeSignificance = cms.double(-1.0),
        nSigmaMinPt = cms.double(5.0),
        minimumNumberOfHits = cms.int32(5)
    ),
    ComponentName = cms.string('muonSeededTrajectoryFilterForOutIn')
)


process.myTTRHBuilderWithoutAngle = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    StripCPE = cms.string('Fake'),
    Matcher = cms.string('StandardMatcher'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    PixelCPE = cms.string('PixelCPEGeneric'),
    ComponentName = cms.string('PixelTTRHBuilderWithoutAngle')
)


process.myTTRHBuilderWithoutAngle4MixedPairs = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    StripCPE = cms.string('Fake'),
    Matcher = cms.string('StandardMatcher'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    PixelCPE = cms.string('PixelCPEGeneric'),
    ComponentName = cms.string('TTRHBuilderWithoutAngle4MixedPairs')
)


process.myTTRHBuilderWithoutAngle4MixedTriplets = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    StripCPE = cms.string('Fake'),
    Matcher = cms.string('StandardMatcher'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    PixelCPE = cms.string('PixelCPEGeneric'),
    ComponentName = cms.string('TTRHBuilderWithoutAngle4MixedTriplets')
)


process.myTTRHBuilderWithoutAngle4PixelPairs = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    StripCPE = cms.string('Fake'),
    Matcher = cms.string('StandardMatcher'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    PixelCPE = cms.string('PixelCPEGeneric'),
    ComponentName = cms.string('TTRHBuilderWithoutAngle4PixelPairs')
)


process.myTTRHBuilderWithoutAngle4PixelTriplets = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    StripCPE = cms.string('Fake'),
    Matcher = cms.string('StandardMatcher'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    PixelCPE = cms.string('PixelCPEGeneric'),
    ComponentName = cms.string('TTRHBuilderWithoutAngle4PixelTriplets')
)


process.navigationSchoolESProducer = cms.ESProducer("NavigationSchoolESProducer",
    ComponentName = cms.string('SimpleNavigationSchool')
)


process.negativeTrackCounting3D2nd = cms.ESProducer("NegativeTrackCountingESProducer",
    b_pT = cms.double(0.3684),
    a_dR = cms.double(-0.001053),
    min_pT = cms.double(120),
    max_pT = cms.double(500),
    min_pT_dRcut = cms.double(0.5),
    max_pT_trackPTcut = cms.double(3),
    max_pT_dRcut = cms.double(0.1),
    b_dR = cms.double(0.6263),
    a_pT = cms.double(0.005263),
    deltaR = cms.double(-1.0),
    maximumDecayLength = cms.double(5.0),
    impactParameterType = cms.int32(0),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False),
    maximumDistanceToJetAxis = cms.double(0.07),
    nthTrack = cms.int32(2)
)


process.negativeTrackCounting3D3rd = cms.ESProducer("NegativeTrackCountingESProducer",
    b_pT = cms.double(0.3684),
    a_dR = cms.double(-0.001053),
    min_pT = cms.double(120),
    max_pT = cms.double(500),
    min_pT_dRcut = cms.double(0.5),
    max_pT_trackPTcut = cms.double(3),
    max_pT_dRcut = cms.double(0.1),
    b_dR = cms.double(0.6263),
    a_pT = cms.double(0.005263),
    deltaR = cms.double(-1.0),
    maximumDecayLength = cms.double(5.0),
    impactParameterType = cms.int32(0),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False),
    maximumDistanceToJetAxis = cms.double(0.07),
    nthTrack = cms.int32(3)
)


process.oppositeToMomElePropagator = cms.ESProducer("PropagatorWithMaterialESProducer",
    PropagationDirection = cms.string('oppositeToMomentum'),
    ComponentName = cms.string('oppositeToMomElePropagator'),
    Mass = cms.double(0.000511),
    ptMin = cms.double(-1.0),
    MaxDPhi = cms.double(1.6),
    useRungeKutta = cms.bool(False)
)


process.pixelLessLayerPairs4PixelLessTracking = cms.ESProducer("SeedingLayersESProducer",
    TIB3 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        useSimpleRphiHitsCleaner = cms.bool(False),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched")
    ),
    TIB2 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useSimpleRphiHitsCleaner = cms.bool(False),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched")
    ),
    TIB1 = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle'),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useSimpleRphiHitsCleaner = cms.bool(False),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched")
    ),
    TID1 = cms.PSet(
        useSimpleRphiHitsCleaner = cms.bool(False),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched"),
        maxRing = cms.int32(3),
        minRing = cms.int32(1)
    ),
    TID3 = cms.PSet(
        useSimpleRphiHitsCleaner = cms.bool(False),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched"),
        maxRing = cms.int32(2),
        minRing = cms.int32(1)
    ),
    TID2 = cms.PSet(
        useSimpleRphiHitsCleaner = cms.bool(False),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched"),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched"),
        maxRing = cms.int32(3),
        minRing = cms.int32(1)
    ),
    ComponentName = cms.string('pixelLessLayerPairs4PixelLessTracking'),
    TEC = cms.PSet(
        useSimpleRphiHitsCleaner = cms.bool(False),
        minRing = cms.int32(1),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHitUnmatched"),
        maxRing = cms.int32(2),
        stereoRecHits = cms.InputTag("siStripMatchedRecHits","stereoRecHitUnmatched")
    ),
    layerList = cms.vstring('TIB1+TIB2', 
        'TIB1+TIB3', 
        'TIB2+TIB3', 
        'TIB1+TID1_pos', 
        'TIB1+TID1_neg', 
        'TIB2+TID1_pos', 
        'TIB2+TID1_neg', 
        'TIB1+TID2_pos', 
        'TIB1+TID2_neg', 
        'TID1_pos+TID2_pos', 
        'TID2_pos+TID3_pos', 
        'TID3_pos+TEC2_pos', 
        'TEC1_pos+TEC2_pos', 
        'TEC2_pos+TEC3_pos', 
        'TID1_neg+TID2_neg', 
        'TID2_neg+TID3_neg', 
        'TID3_neg+TEC2_neg', 
        'TEC1_neg+TEC2_neg', 
        'TEC2_neg+TEC3_neg')
)


process.pixelLessStepChi2Est = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(9.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('pixelLessStepChi2Est')
)


process.pixelLessStepSeedLayers = cms.ESProducer("SeedingLayersESProducer",
    TID = cms.PSet(
        minRing = cms.int32(1),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("pixelLessStepClusters"),
        maxRing = cms.int32(2)
    ),
    ComponentName = cms.string('pixelLessStepSeedLayers'),
    layerList = cms.vstring('TIB1+TIB2', 
        'TID1_pos+TID2_pos', 
        'TID2_pos+TID3_pos', 
        'TEC1_pos+TEC2_pos', 
        'TEC2_pos+TEC3_pos', 
        'TEC3_pos+TEC4_pos', 
        'TEC3_pos+TEC5_pos', 
        'TEC4_pos+TEC5_pos', 
        'TID1_neg+TID2_neg', 
        'TID2_neg+TID3_neg', 
        'TEC1_neg+TEC2_neg', 
        'TEC2_neg+TEC3_neg', 
        'TEC3_neg+TEC4_neg', 
        'TEC3_neg+TEC5_neg', 
        'TEC4_neg+TEC5_neg'),
    TEC = cms.PSet(
        minRing = cms.int32(1),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("pixelLessStepClusters"),
        maxRing = cms.int32(2)
    ),
    TIB = cms.PSet(
        skipClusters = cms.InputTag("pixelLessStepClusters"),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        TTRHBuilder = cms.string('WithTrackAngle')
    )
)


process.pixelLessStepTrajectoryBuilder = cms.ESProducer("GroupedCkfTrajectoryBuilderESProducer",
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    trajectoryFilterName = cms.string('pixelLessStepTrajectoryFilter'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    MeasurementTrackerName = cms.string(''),
    maxPtForLooperReconstruction = cms.double(0.7),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    lockHits = cms.bool(True),
    useSameTrajFilter = cms.bool(True),
    bestHitOnly = cms.bool(True),
    maxCand = cms.int32(2),
    clustersToSkip = cms.InputTag("pixelLessStepClusters"),
    alwaysUseInvalidHits = cms.bool(False),
    minNrOfHitsForRebuild = cms.int32(4),
    ComponentName = cms.string('pixelLessStepTrajectoryBuilder'),
    intermediateCleaning = cms.bool(True),
    inOutTrajectoryFilterName = cms.string('ckfBaseTrajectoryFilter'),
    estimator = cms.string('pixelLessStepChi2Est'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    foundHitBonus = cms.double(5.0),
    updator = cms.string('KFUpdator'),
    keepOriginalIfRebuildFails = cms.bool(False),
    requireSeedHitsInRebuild = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.pixelLessStepTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('pixelLessStepTrajectoryCleanerBySharedHits'),
    fractionShared = cms.double(0.11),
    ValidHitBonus = cms.double(5.0),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    allowSharedFirstHit = cms.bool(True)
)


process.pixelLessStepTrajectoryFilter = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
        minPt = cms.double(0.1),
        minNumberOfHits = cms.int32(13),
        minHitsMinPt = cms.int32(3),
        maxLostHitsFraction = cms.double(0.1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(0),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(1),
        nSigmaMinPt = cms.double(5.0),
        minNumberOfHitsPerLoop = cms.int32(4),
        minimumNumberOfHits = cms.int32(4),
        constantValueForLostHitsFractionFilter = cms.double(1.0),
        chargeSignificance = cms.double(-1.0)
    ),
    ComponentName = cms.string('pixelLessStepTrajectoryFilter')
)


process.pixelPairElectronSeedLayers = cms.ESProducer("SeedingLayersESProducer",
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        hitErrorRZ = cms.double(0.0036),
        useErrorsFromParam = cms.bool(True),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
        skipClusters = cms.InputTag("tripletElectronClusterMask"),
        hitErrorRPhi = cms.double(0.0051)
    ),
    layerList = cms.vstring('BPix1+BPix2', 
        'BPix1+BPix3', 
        'BPix2+BPix3', 
        'BPix1+FPix1_pos', 
        'BPix1+FPix1_neg', 
        'BPix1+FPix2_pos', 
        'BPix1+FPix2_neg', 
        'BPix2+FPix1_pos', 
        'BPix2+FPix1_neg', 
        'FPix1_pos+FPix2_pos', 
        'FPix1_neg+FPix2_neg'),
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        hitErrorRZ = cms.double(0.006),
        useErrorsFromParam = cms.bool(True),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
        skipClusters = cms.InputTag("tripletElectronClusterMask"),
        hitErrorRPhi = cms.double(0.0027)
    ),
    ComponentName = cms.string('pixelPairElectronSeedLayers')
)


process.pixelPairStepChi2Est = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(9.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('pixelPairStepChi2Est')
)


process.pixelPairStepSeedLayers = cms.ESProducer("SeedingLayersESProducer",
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        hitErrorRZ = cms.double(0.0036),
        useErrorsFromParam = cms.bool(True),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
        skipClusters = cms.InputTag("pixelPairStepClusters"),
        hitErrorRPhi = cms.double(0.0051)
    ),
    layerList = cms.vstring('BPix1+BPix2', 
        'BPix1+BPix3', 
        'BPix2+BPix3', 
        'BPix1+FPix1_pos', 
        'BPix1+FPix1_neg', 
        'BPix2+FPix1_pos', 
        'BPix2+FPix1_neg', 
        'FPix1_pos+FPix2_pos', 
        'FPix1_neg+FPix2_neg'),
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        hitErrorRZ = cms.double(0.006),
        useErrorsFromParam = cms.bool(True),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
        skipClusters = cms.InputTag("pixelPairStepClusters"),
        hitErrorRPhi = cms.double(0.0027)
    ),
    ComponentName = cms.string('pixelPairStepSeedLayers')
)


process.pixelPairStepTrajectoryBuilder = cms.ESProducer("GroupedCkfTrajectoryBuilderESProducer",
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    trajectoryFilterName = cms.string('pixelPairStepTrajectoryFilter'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    MeasurementTrackerName = cms.string(''),
    maxPtForLooperReconstruction = cms.double(0.7),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    lockHits = cms.bool(True),
    useSameTrajFilter = cms.bool(True),
    bestHitOnly = cms.bool(True),
    maxCand = cms.int32(3),
    clustersToSkip = cms.InputTag("pixelPairStepClusters"),
    alwaysUseInvalidHits = cms.bool(True),
    minNrOfHitsForRebuild = cms.int32(5),
    ComponentName = cms.string('pixelPairStepTrajectoryBuilder'),
    intermediateCleaning = cms.bool(True),
    inOutTrajectoryFilterName = cms.string('ckfBaseTrajectoryFilter'),
    estimator = cms.string('pixelPairStepChi2Est'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    foundHitBonus = cms.double(5.0),
    updator = cms.string('KFUpdator'),
    keepOriginalIfRebuildFails = cms.bool(False),
    requireSeedHitsInRebuild = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.pixelPairStepTrajectoryFilter = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
        minPt = cms.double(0.1),
        minNumberOfHits = cms.int32(13),
        minHitsMinPt = cms.int32(3),
        maxLostHitsFraction = cms.double(0.1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(999),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(1),
        nSigmaMinPt = cms.double(5.0),
        minNumberOfHitsPerLoop = cms.int32(4),
        minimumNumberOfHits = cms.int32(3),
        constantValueForLostHitsFractionFilter = cms.double(1.0),
        chargeSignificance = cms.double(-1.0)
    ),
    ComponentName = cms.string('pixelPairStepTrajectoryFilter')
)


process.pixellayerpairs = cms.ESProducer("SeedingLayersESProducer",
    FPix = cms.PSet(
        hitErrorRZ = cms.double(0.0036),
        hitErrorRPhi = cms.double(0.0051),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
        HitProducer = cms.string('siPixelRecHits'),
        useErrorsFromParam = cms.bool(True)
    ),
    layerList = cms.vstring('BPix1+BPix2', 
        'BPix1+BPix3', 
        'BPix2+BPix3', 
        'BPix1+FPix1_pos', 
        'BPix1+FPix1_neg', 
        'BPix1+FPix2_pos', 
        'BPix1+FPix2_neg', 
        'BPix2+FPix1_pos', 
        'BPix2+FPix1_neg', 
        'BPix2+FPix2_pos', 
        'BPix2+FPix2_neg', 
        'FPix1_pos+FPix2_pos', 
        'FPix1_neg+FPix2_neg'),
    BPix = cms.PSet(
        hitErrorRZ = cms.double(0.006),
        hitErrorRPhi = cms.double(0.0027),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelPairs'),
        HitProducer = cms.string('siPixelRecHits'),
        useErrorsFromParam = cms.bool(True)
    ),
    ComponentName = cms.string('PixelLayerPairs')
)


process.pixellayertriplets = cms.ESProducer("SeedingLayersESProducer",
    FPix = cms.PSet(
        hitErrorRZ = cms.double(0.0036),
        hitErrorRPhi = cms.double(0.0051),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
        HitProducer = cms.string('siPixelRecHits'),
        useErrorsFromParam = cms.bool(True)
    ),
    layerList = cms.vstring('BPix1+BPix2+BPix3', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg'),
    BPix = cms.PSet(
        hitErrorRZ = cms.double(0.006),
        hitErrorRPhi = cms.double(0.0027),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
        HitProducer = cms.string('siPixelRecHits'),
        useErrorsFromParam = cms.bool(True)
    ),
    ComponentName = cms.string('PixelLayerTriplets')
)


process.preshowerDetIdAssociator = cms.ESProducer("DetIdAssociatorESProducer",
    ComponentName = cms.string('PreshowerDetIdAssociator'),
    etaBinSize = cms.double(0.1),
    nEta = cms.int32(60),
    nPhi = cms.int32(30)
)


process.rings = cms.ESProducer("RingMakerESProducer",
    DumpDetIds = cms.untracked.bool(False),
    ComponentName = cms.string(''),
    RingAsciiFileName = cms.untracked.string('rings.dat'),
    DetIdsDumpFileName = cms.untracked.string('tracker_detids.dat'),
    WriteOutRingsToAsciiFile = cms.untracked.bool(False),
    Configuration = cms.untracked.string('FULL')
)


process.roads = cms.ESProducer("RoadMapMakerESProducer",
    GeometryStructure = cms.string('FullDetector'),
    ComponentName = cms.string(''),
    RingsLabel = cms.string(''),
    WriteOutRoadMapToAsciiFile = cms.untracked.bool(False),
    SeedingType = cms.string('FourRingSeeds'),
    RoadMapAsciiFile = cms.untracked.string('roads.dat')
)


process.siPixelQualityESProducer = cms.ESProducer("SiPixelQualityESProducer",
    ListOfRecordToMerge = cms.VPSet(cms.PSet(
        record = cms.string('SiPixelQualityFromDbRcd'),
        tag = cms.string('')
    ), 
        cms.PSet(
            record = cms.string('SiPixelDetVOffRcd'),
            tag = cms.string('')
        ))
)


process.siPixelTemplateDBObjectESProducer = cms.ESProducer("SiPixelTemplateDBObjectESProducer")


process.siStripGainESProducer = cms.ESProducer("SiStripGainESProducer",
    printDebug = cms.untracked.bool(False),
    appendToDataLabel = cms.string(''),
    APVGain = cms.VPSet(cms.PSet(
        Record = cms.string('SiStripApvGainRcd'),
        NormalizationFactor = cms.untracked.double(1.0),
        Label = cms.untracked.string('')
    ), 
        cms.PSet(
            Record = cms.string('SiStripApvGain2Rcd'),
            NormalizationFactor = cms.untracked.double(1.0),
            Label = cms.untracked.string('')
        )),
    AutomaticNormalization = cms.bool(False)
)


process.siStripLorentzAngleDepESProducer = cms.ESProducer("SiStripLorentzAngleDepESProducer",
    LatencyRecord = cms.PSet(
        record = cms.string('SiStripLatencyRcd'),
        label = cms.untracked.string('')
    ),
    LorentzAngleDeconvMode = cms.PSet(
        record = cms.string('SiStripLorentzAngleRcd'),
        label = cms.untracked.string('deconvolution')
    ),
    LorentzAnglePeakMode = cms.PSet(
        record = cms.string('SiStripLorentzAngleRcd'),
        label = cms.untracked.string('peak')
    )
)


process.siStripQualityESProducer = cms.ESProducer("SiStripQualityESProducer",
    appendToDataLabel = cms.string(''),
    PrintDebugOutput = cms.bool(False),
    ThresholdForReducedGranularity = cms.double(0.3),
    UseEmptyRunInfo = cms.bool(False),
    ReduceGranularity = cms.bool(False),
    ListOfRecordToMerge = cms.VPSet(cms.PSet(
        record = cms.string('SiStripDetVOffRcd'),
        tag = cms.string('')
    ), 
        cms.PSet(
            record = cms.string('SiStripDetCablingRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('RunInfoRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadChannelRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadFiberRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadModuleRcd'),
            tag = cms.string('')
        ), 
        cms.PSet(
            record = cms.string('SiStripBadStripRcd'),
            tag = cms.string('')
        ))
)


process.simpleSecondaryVertex2Trk = cms.ESProducer("SimpleSecondaryVertexESProducer",
    minTracks = cms.uint32(2),
    unBoost = cms.bool(False),
    useSignificance = cms.bool(True),
    use3d = cms.bool(True)
)


process.simpleSecondaryVertex3Trk = cms.ESProducer("SimpleSecondaryVertexESProducer",
    minTracks = cms.uint32(3),
    unBoost = cms.bool(False),
    useSignificance = cms.bool(True),
    use3d = cms.bool(True)
)


process.sistripconn = cms.ESProducer("SiStripConnectivity")


process.softElectron = cms.ESProducer("ElectronTaggerESProducer",
    ipSign = cms.string('any')
)


process.softLeptonByIP3d = cms.ESProducer("LeptonTaggerByIPESProducer",
    use3d = cms.bool(True),
    ipSign = cms.string('any')
)


process.softLeptonByPt = cms.ESProducer("LeptonTaggerByPtESProducer",
    ipSign = cms.string('any')
)


process.softMuon = cms.ESProducer("MuonTaggerESProducer",
    ipSign = cms.string('any')
)


process.softMuonNoIP = cms.ESProducer("MuonTaggerNoIPESProducer",
    ipSign = cms.string('any')
)


process.stripPairElectronSeedLayers = cms.ESProducer("SeedingLayersESProducer",
    TID = cms.PSet(
        minRing = cms.int32(1),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("tripletElectronClusterMask"),
        maxRing = cms.int32(2)
    ),
    ComponentName = cms.string('stripPairElectronSeedLayers'),
    layerList = cms.vstring('TIB1+TIB2', 
        'TIB1+TID1_pos', 
        'TIB1+TID1_neg', 
        'TID2_pos+TID3_pos', 
        'TID2_neg+TID3_neg', 
        'TEC1_pos+TEC2_pos', 
        'TEC2_pos+TEC3_pos', 
        'TEC3_pos+TEC4_pos', 
        'TEC3_pos+TEC5_pos', 
        'TEC1_neg+TEC2_neg', 
        'TEC2_neg+TEC3_neg', 
        'TEC3_neg+TEC4_neg', 
        'TEC3_neg+TEC5_neg'),
    TEC = cms.PSet(
        minRing = cms.int32(1),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("tripletElectronClusterMask"),
        maxRing = cms.int32(2)
    ),
    TIB = cms.PSet(
        skipClusters = cms.InputTag("tripletElectronClusterMask"),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        TTRHBuilder = cms.string('WithTrackAngle')
    )
)


process.templates = cms.ESProducer("PixelCPETemplateRecoESProducer",
    DoCosmics = cms.bool(False),
    LoadTemplatesFromDB = cms.bool(True),
    ComponentName = cms.string('PixelCPETemplateReco'),
    Alpha2Order = cms.bool(True),
    ClusterProbComputationFlag = cms.int32(0),
    speed = cms.int32(-2),
    UseClusterSplitter = cms.bool(False)
)


process.tobTecFlexibleKFFittingSmoother = cms.ESProducer("FlexibleKFFittingSmootherESProducer",
    ComponentName = cms.string('tobTecFlexibleKFFittingSmoother'),
    standardFitter = cms.string('tobTecStepFitterSmoother'),
    looperFitter = cms.string('tobTecStepFitterSmootherForLoopers')
)


process.tobTecStepChi2Est = cms.ESProducer("Chi2MeasurementEstimatorESProducer",
    MaxChi2 = cms.double(16.0),
    nSigma = cms.double(3.0),
    ComponentName = cms.string('tobTecStepChi2Est')
)


process.tobTecStepFitterSmoother = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(30),
    LogPixelProbabilityCut = cms.double(-14.0),
    Fitter = cms.string('tobTecStepRKFitter'),
    MinNumberOfHits = cms.int32(8),
    Smoother = cms.string('tobTecStepRKSmoother'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('tobTecStepFitterSmoother'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.tobTecStepFitterSmootherForLoopers = cms.ESProducer("KFFittingSmootherESProducer",
    EstimateCut = cms.double(30),
    LogPixelProbabilityCut = cms.double(-14.0),
    Fitter = cms.string('tobTecStepRKFitterForLoopers'),
    MinNumberOfHits = cms.int32(8),
    Smoother = cms.string('tobTecStepRKSmootherForLoopers'),
    BreakTrajWith2ConsecutiveMissing = cms.bool(True),
    ComponentName = cms.string('tobTecStepFitterSmootherForLoopers'),
    NoInvalidHitsBeginEnd = cms.bool(True),
    RejectTracks = cms.bool(True)
)


process.tobTecStepInOutTrajectoryFilter = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
        minPt = cms.double(0.1),
        minNumberOfHits = cms.int32(13),
        minHitsMinPt = cms.int32(3),
        maxLostHitsFraction = cms.double(0.1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(0),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(1),
        nSigmaMinPt = cms.double(5.0),
        minNumberOfHitsPerLoop = cms.int32(4),
        minimumNumberOfHits = cms.int32(4),
        constantValueForLostHitsFractionFilter = cms.double(1.0),
        chargeSignificance = cms.double(-1.0)
    ),
    ComponentName = cms.string('tobTecStepInOutTrajectoryFilter')
)


process.tobTecStepRKTrajectoryFitter = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('tobTecStepRKFitter'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    minHits = cms.int32(8)
)


process.tobTecStepRKTrajectoryFitterForLoopers = cms.ESProducer("KFTrajectoryFitterESProducer",
    RecoGeometry = cms.string('GlobalDetLayerGeometry'),
    ComponentName = cms.string('tobTecStepRKFitterForLoopers'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('PropagatorWithMaterialForLoopers'),
    minHits = cms.int32(8)
)


process.tobTecStepRKTrajectorySmoother = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(8),
    ComponentName = cms.string('tobTecStepRKSmoother'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('RungeKuttaTrackerPropagator'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.tobTecStepRKTrajectorySmootherForLoopers = cms.ESProducer("KFTrajectorySmootherESProducer",
    errorRescaling = cms.double(10.0),
    minHits = cms.int32(8),
    ComponentName = cms.string('tobTecStepRKSmootherForLoopers'),
    Estimator = cms.string('Chi2'),
    Updator = cms.string('KFUpdator'),
    Propagator = cms.string('PropagatorWithMaterialForLoopers'),
    RecoGeometry = cms.string('GlobalDetLayerGeometry')
)


process.tobTecStepSeedLayers = cms.ESProducer("SeedingLayersESProducer",
    TOB = cms.PSet(
        skipClusters = cms.InputTag("tobTecStepClusters"),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    ComponentName = cms.string('tobTecStepSeedLayers'),
    layerList = cms.vstring('TOB1+TOB2', 
        'TOB1+TEC1_pos', 
        'TOB1+TEC1_neg', 
        'TEC1_pos+TEC2_pos', 
        'TEC2_pos+TEC3_pos', 
        'TEC3_pos+TEC4_pos', 
        'TEC4_pos+TEC5_pos', 
        'TEC5_pos+TEC6_pos', 
        'TEC6_pos+TEC7_pos', 
        'TEC1_neg+TEC2_neg', 
        'TEC2_neg+TEC3_neg', 
        'TEC3_neg+TEC4_neg', 
        'TEC4_neg+TEC5_neg', 
        'TEC5_neg+TEC6_neg', 
        'TEC6_neg+TEC7_neg'),
    TEC = cms.PSet(
        minRing = cms.int32(5),
        matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
        useRingSlector = cms.bool(True),
        TTRHBuilder = cms.string('WithTrackAngle'),
        skipClusters = cms.InputTag("tobTecStepClusters"),
        maxRing = cms.int32(5)
    )
)


process.tobTecStepTrajectoryBuilder = cms.ESProducer("GroupedCkfTrajectoryBuilderESProducer",
    propagatorAlong = cms.string('PropagatorWithMaterial'),
    trajectoryFilterName = cms.string('tobTecStepTrajectoryFilter'),
    propagatorOpposite = cms.string('PropagatorWithMaterialOpposite'),
    MeasurementTrackerName = cms.string(''),
    maxPtForLooperReconstruction = cms.double(0.7),
    maxDPhiForLooperReconstruction = cms.double(2.0),
    lockHits = cms.bool(True),
    useSameTrajFilter = cms.bool(False),
    bestHitOnly = cms.bool(True),
    maxCand = cms.int32(2),
    clustersToSkip = cms.InputTag("tobTecStepClusters"),
    alwaysUseInvalidHits = cms.bool(False),
    minNrOfHitsForRebuild = cms.int32(4),
    ComponentName = cms.string('tobTecStepTrajectoryBuilder'),
    intermediateCleaning = cms.bool(True),
    inOutTrajectoryFilterName = cms.string('tobTecStepInOutTrajectoryFilter'),
    estimator = cms.string('tobTecStepChi2Est'),
    TTRHBuilder = cms.string('WithTrackAngle'),
    foundHitBonus = cms.double(5.0),
    updator = cms.string('KFUpdator'),
    keepOriginalIfRebuildFails = cms.bool(False),
    requireSeedHitsInRebuild = cms.bool(True),
    lostHitPenalty = cms.double(30.0)
)


process.tobTecStepTrajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('tobTecStepTrajectoryCleanerBySharedHits'),
    fractionShared = cms.double(0.09),
    ValidHitBonus = cms.double(5.0),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    allowSharedFirstHit = cms.bool(True)
)


process.tobTecStepTrajectoryFilter = cms.ESProducer("TrajectoryFilterESProducer",
    filterPset = cms.PSet(
        extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
        minPt = cms.double(0.1),
        minNumberOfHits = cms.int32(13),
        minHitsMinPt = cms.int32(3),
        maxLostHitsFraction = cms.double(0.1),
        ComponentType = cms.string('CkfBaseTrajectoryFilter'),
        maxLostHits = cms.int32(0),
        maxNumberOfHits = cms.int32(100),
        maxConsecLostHits = cms.int32(1),
        nSigmaMinPt = cms.double(5.0),
        minNumberOfHitsPerLoop = cms.int32(4),
        minimumNumberOfHits = cms.int32(6),
        constantValueForLostHitsFractionFilter = cms.double(1.0),
        chargeSignificance = cms.double(-1.0)
    ),
    ComponentName = cms.string('tobTecStepTrajectoryFilter')
)


process.trackCounting3D2nd = cms.ESProducer("TrackCountingESProducer",
    b_pT = cms.double(0.3684),
    a_dR = cms.double(-0.001053),
    min_pT = cms.double(120),
    max_pT = cms.double(500),
    min_pT_dRcut = cms.double(0.5),
    max_pT_trackPTcut = cms.double(3),
    max_pT_dRcut = cms.double(0.1),
    b_dR = cms.double(0.6263),
    a_pT = cms.double(0.005263),
    deltaR = cms.double(-1.0),
    maximumDecayLength = cms.double(5.0),
    impactParameterType = cms.int32(0),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False),
    maximumDistanceToJetAxis = cms.double(0.07),
    nthTrack = cms.int32(2)
)


process.trackCounting3D3rd = cms.ESProducer("TrackCountingESProducer",
    b_pT = cms.double(0.3684),
    a_dR = cms.double(-0.001053),
    min_pT = cms.double(120),
    max_pT = cms.double(500),
    min_pT_dRcut = cms.double(0.5),
    max_pT_trackPTcut = cms.double(3),
    max_pT_dRcut = cms.double(0.1),
    b_dR = cms.double(0.6263),
    a_pT = cms.double(0.005263),
    deltaR = cms.double(-1.0),
    maximumDecayLength = cms.double(5.0),
    impactParameterType = cms.int32(0),
    trackQualityClass = cms.string('any'),
    useVariableJTA = cms.bool(False),
    maximumDistanceToJetAxis = cms.double(0.07),
    nthTrack = cms.int32(3)
)


process.trackerGeometry = cms.ESProducer("TrackerDigiGeometryESModule",
    appendToDataLabel = cms.string(''),
    fromDDD = cms.bool(True),
    trackerGeometryConstants = cms.PSet(
        ROCS_X = cms.int32(0),
        ROCS_Y = cms.int32(0),
        upgradeGeometry = cms.bool(False),
        BIG_PIX_PER_ROC_Y = cms.int32(2),
        BIG_PIX_PER_ROC_X = cms.int32(1),
        ROWS_PER_ROC = cms.int32(80),
        COLS_PER_ROC = cms.int32(52)
    ),
    applyAlignment = cms.bool(True),
    alignmentsLabel = cms.string('')
)


process.trackerNumberingGeometry = cms.ESProducer("TrackerGeometricDetESModule",
    appendToDataLabel = cms.string(''),
    fromDDD = cms.bool(True),
    layerNumberPXB = cms.uint32(16),
    totalBlade = cms.uint32(24)
)


process.trackerTopologyConstants = cms.ESProducer("TrackerTopologyEP",
    tob_rodStartBit = cms.uint32(5),
    tib_str_int_extStartBit = cms.uint32(10),
    tib_layerMask = cms.uint32(7),
    pxf_bladeMask = cms.uint32(63),
    appendToDataLabel = cms.string(''),
    pxb_ladderStartBit = cms.uint32(8),
    pxb_layerStartBit = cms.uint32(16),
    tec_wheelStartBit = cms.uint32(14),
    tib_str_int_extMask = cms.uint32(3),
    tec_ringStartBit = cms.uint32(5),
    tib_moduleStartBit = cms.uint32(2),
    tib_sterMask = cms.uint32(3),
    tid_sideStartBit = cms.uint32(13),
    tid_module_fw_bwStartBit = cms.uint32(7),
    tid_ringMask = cms.uint32(3),
    tob_sterMask = cms.uint32(3),
    tec_petal_fw_bwStartBit = cms.uint32(12),
    tec_ringMask = cms.uint32(7),
    tib_strMask = cms.uint32(63),
    tec_sterMask = cms.uint32(3),
    tec_wheelMask = cms.uint32(15),
    tec_sideStartBit = cms.uint32(18),
    pxb_moduleMask = cms.uint32(63),
    pxf_panelStartBit = cms.uint32(8),
    tid_sideMask = cms.uint32(3),
    tob_moduleMask = cms.uint32(7),
    tid_ringStartBit = cms.uint32(9),
    pxf_sideMask = cms.uint32(3),
    pxb_moduleStartBit = cms.uint32(2),
    pxf_diskStartBit = cms.uint32(16),
    tib_str_fw_bwMask = cms.uint32(3),
    tec_moduleMask = cms.uint32(7),
    tid_sterMask = cms.uint32(3),
    tob_rod_fw_bwMask = cms.uint32(3),
    tob_layerStartBit = cms.uint32(14),
    tec_petal_fw_bwMask = cms.uint32(3),
    tib_strStartBit = cms.uint32(4),
    tec_sterStartBit = cms.uint32(0),
    tid_moduleMask = cms.uint32(31),
    tib_sterStartBit = cms.uint32(0),
    tid_sterStartBit = cms.uint32(0),
    pxf_moduleStartBit = cms.uint32(2),
    pxf_diskMask = cms.uint32(15),
    tob_moduleStartBit = cms.uint32(2),
    tid_wheelStartBit = cms.uint32(11),
    tob_layerMask = cms.uint32(7),
    tid_module_fw_bwMask = cms.uint32(3),
    tob_rod_fw_bwStartBit = cms.uint32(12),
    tec_petalMask = cms.uint32(15),
    pxb_ladderMask = cms.uint32(255),
    tec_moduleStartBit = cms.uint32(2),
    tob_rodMask = cms.uint32(127),
    tec_sideMask = cms.uint32(3),
    pxf_sideStartBit = cms.uint32(23),
    pxb_layerMask = cms.uint32(15),
    tib_layerStartBit = cms.uint32(14),
    pxf_panelMask = cms.uint32(3),
    tib_moduleMask = cms.uint32(3),
    pxf_bladeStartBit = cms.uint32(10),
    tid_wheelMask = cms.uint32(3),
    tob_sterStartBit = cms.uint32(0),
    tid_moduleStartBit = cms.uint32(2),
    tec_petalStartBit = cms.uint32(8),
    tib_str_fw_bwStartBit = cms.uint32(12),
    pxf_moduleMask = cms.uint32(63)
)


process.trajectoryCleanerBySharedHits = cms.ESProducer("TrajectoryCleanerESProducer",
    ComponentName = cms.string('TrajectoryCleanerBySharedHits'),
    fractionShared = cms.double(0.19),
    ValidHitBonus = cms.double(5.0),
    ComponentType = cms.string('TrajectoryCleanerBySharedHits'),
    MissingHitPenalty = cms.double(20.0),
    allowSharedFirstHit = cms.bool(True)
)


process.tripletElectronSeedLayers = cms.ESProducer("SeedingLayersESProducer",
    FPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        hitErrorRZ = cms.double(0.0036),
        useErrorsFromParam = cms.bool(True),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
        skipClusters = cms.InputTag("pixelLessStepSeedClusterMask"),
        hitErrorRPhi = cms.double(0.0051)
    ),
    layerList = cms.vstring('BPix1+BPix2+BPix3', 
        'BPix1+BPix2+FPix1_pos', 
        'BPix1+BPix2+FPix1_neg', 
        'BPix1+FPix1_pos+FPix2_pos', 
        'BPix1+FPix1_neg+FPix2_neg'),
    BPix = cms.PSet(
        HitProducer = cms.string('siPixelRecHits'),
        hitErrorRZ = cms.double(0.006),
        useErrorsFromParam = cms.bool(True),
        TTRHBuilder = cms.string('TTRHBuilderWithoutAngle4PixelTriplets'),
        skipClusters = cms.InputTag("pixelLessStepSeedClusterMask"),
        hitErrorRPhi = cms.double(0.0027)
    ),
    ComponentName = cms.string('tripletElectronSeedLayers')
)


process.ttrhbwor = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    StripCPE = cms.string('Fake'),
    Matcher = cms.string('Fake'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    PixelCPE = cms.string('Fake'),
    ComponentName = cms.string('WithoutRefit')
)


process.ttrhbwr = cms.ESProducer("TkTransientTrackingRecHitBuilderESProducer",
    StripCPE = cms.string('StripCPEfromTrackAngle'),
    Matcher = cms.string('StandardMatcher'),
    ComputeCoarseLocalPositionFromDisk = cms.bool(False),
    PixelCPE = cms.string('PixelCPEGeneric'),
    ComponentName = cms.string('WithTrackAngle')
)


process.BTagRecord = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('JetTagComputerRecord'),
    firstValid = cms.vuint32(1)
)


process.CSCChannelMapperESSource = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('CSCChannelMapperRecord'),
    firstValid = cms.vuint32(1)
)


process.CSCIndexerESSource = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('CSCIndexerRecord'),
    firstValid = cms.vuint32(1)
)


process.CaloTPGTranscoder = cms.ESSource("CaloTPGTranscoderULUTs",
    read_Ascii_Compression_LUTs = cms.bool(False),
    LUTfactor = cms.vint32(1, 2, 5, 0),
    ietaLowerBound = cms.vint32(1, 18, 27, 29),
    hcalLUT1 = cms.FileInPath('CalibCalorimetry/CaloTPG/data/outputLUTtranscoder_physics.dat'),
    hcalLUT2 = cms.FileInPath('CalibCalorimetry/CaloTPG/data/TPGcalcDecompress2.txt'),
    read_Ascii_RCT_LUTs = cms.bool(False),
    ietaUpperBound = cms.vint32(17, 26, 28, 32),
    RCTLSB = cms.double(0.25),
    nominal_gain = cms.double(0.177),
    ZS = cms.vint32(4, 2, 1, 0)
)


process.GlobalTag = cms.ESSource("PoolDBESSource",
    DBParameters = cms.PSet(
        authenticationPath = cms.untracked.string(''),
        enableReadOnlySessionOnUpdateConnection = cms.untracked.bool(False),
        idleConnectionCleanupPeriod = cms.untracked.int32(10),
        messageLevel = cms.untracked.int32(0),
        enablePoolAutomaticCleanUp = cms.untracked.bool(False),
        enableConnectionSharing = cms.untracked.bool(True),
        connectionRetrialTimeOut = cms.untracked.int32(60),
        connectionTimeOut = cms.untracked.int32(60),
        authenticationSystem = cms.untracked.int32(0),
        connectionRetrialPeriod = cms.untracked.int32(10)
    ),
    BlobStreamerName = cms.untracked.string('TBufferBlobStreamingService'),
    toGet = cms.VPSet(cms.PSet(
        record = cms.string('L1MuDTTFParametersRcd'),
        tag = cms.string('L1MuDTTFParameters_dttf12_TSC_03_csc_col_mc'),
        connect = cms.untracked.string('frontier://FrontierProd/CMS_COND_31X_L1T')
    )),
    connect = cms.string('frontier://FrontierProd/CMS_COND_31X_GLOBALTAG'),
    globaltag = cms.string('POSTLS161_V12::All')
)


process.HepPDTESSource = cms.ESSource("HepPDTESSource",
    pdtFileName = cms.FileInPath('SimGeneral/HepPDTESSource/data/pythiaparticle.tbl')
)


process.XMLIdealGeometryESSource = cms.ESSource("XMLIdealGeometryESSource",
    geomXMLFiles = cms.vstring('Geometry/CMSCommonData/data/materials.xml', 
        'Geometry/CMSCommonData/data/rotations.xml', 
        'Geometry/CMSCommonData/data/normal/cmsextent.xml', 
        'Geometry/CMSCommonData/data/cms.xml', 
        'Geometry/CMSCommonData/data/cmsMother.xml', 
        'Geometry/CMSCommonData/data/cmsTracker.xml', 
        'Geometry/CMSCommonData/data/caloBase.xml', 
        'Geometry/CMSCommonData/data/cmsCalo.xml', 
        'Geometry/CMSCommonData/data/muonBase.xml', 
        'Geometry/CMSCommonData/data/cmsMuon.xml', 
        'Geometry/CMSCommonData/data/mgnt.xml', 
        'Geometry/CMSCommonData/data/beampipe.xml', 
        'Geometry/CMSCommonData/data/cmsBeam.xml', 
        'Geometry/CMSCommonData/data/muonMB.xml', 
        'Geometry/CMSCommonData/data/muonMagnet.xml', 
        'Geometry/TrackerCommonData/data/pixfwdMaterials.xml', 
        'Geometry/TrackerCommonData/data/pixfwdCommon.xml', 
        'Geometry/TrackerCommonData/data/pixfwdPlaq.xml', 
        'Geometry/TrackerCommonData/data/pixfwdPlaq1x2.xml', 
        'Geometry/TrackerCommonData/data/pixfwdPlaq1x5.xml', 
        'Geometry/TrackerCommonData/data/pixfwdPlaq2x3.xml', 
        'Geometry/TrackerCommonData/data/pixfwdPlaq2x4.xml', 
        'Geometry/TrackerCommonData/data/pixfwdPlaq2x5.xml', 
        'Geometry/TrackerCommonData/data/pixfwdPanelBase.xml', 
        'Geometry/TrackerCommonData/data/pixfwdPanel.xml', 
        'Geometry/TrackerCommonData/data/pixfwdBlade.xml', 
        'Geometry/TrackerCommonData/data/pixfwdNipple.xml', 
        'Geometry/TrackerCommonData/data/pixfwdDisk.xml', 
        'Geometry/TrackerCommonData/data/pixfwdCylinder.xml', 
        'Geometry/TrackerCommonData/data/pixfwd.xml', 
        'Geometry/TrackerCommonData/data/pixbarmaterial.xml', 
        'Geometry/TrackerCommonData/data/pixbarladder.xml', 
        'Geometry/TrackerCommonData/data/pixbarladderfull.xml', 
        'Geometry/TrackerCommonData/data/pixbarladderhalf.xml', 
        'Geometry/TrackerCommonData/data/pixbarlayer.xml', 
        'Geometry/TrackerCommonData/data/pixbarlayer0.xml', 
        'Geometry/TrackerCommonData/data/pixbarlayer1.xml', 
        'Geometry/TrackerCommonData/data/pixbarlayer2.xml', 
        'Geometry/TrackerCommonData/data/pixbar.xml', 
        'Geometry/TrackerCommonData/data/tibtidcommonmaterial.xml', 
        'Geometry/TrackerCommonData/data/tibmaterial.xml', 
        'Geometry/TrackerCommonData/data/tibmodpar.xml', 
        'Geometry/TrackerCommonData/data/tibmodule0.xml', 
        'Geometry/TrackerCommonData/data/tibmodule0a.xml', 
        'Geometry/TrackerCommonData/data/tibmodule0b.xml', 
        'Geometry/TrackerCommonData/data/tibmodule2.xml', 
        'Geometry/TrackerCommonData/data/tibstringpar.xml', 
        'Geometry/TrackerCommonData/data/tibstring0ll.xml', 
        'Geometry/TrackerCommonData/data/tibstring0lr.xml', 
        'Geometry/TrackerCommonData/data/tibstring0ul.xml', 
        'Geometry/TrackerCommonData/data/tibstring0ur.xml', 
        'Geometry/TrackerCommonData/data/tibstring0.xml', 
        'Geometry/TrackerCommonData/data/tibstring1ll.xml', 
        'Geometry/TrackerCommonData/data/tibstring1lr.xml', 
        'Geometry/TrackerCommonData/data/tibstring1ul.xml', 
        'Geometry/TrackerCommonData/data/tibstring1ur.xml', 
        'Geometry/TrackerCommonData/data/tibstring1.xml', 
        'Geometry/TrackerCommonData/data/tibstring2ll.xml', 
        'Geometry/TrackerCommonData/data/tibstring2lr.xml', 
        'Geometry/TrackerCommonData/data/tibstring2ul.xml', 
        'Geometry/TrackerCommonData/data/tibstring2ur.xml', 
        'Geometry/TrackerCommonData/data/tibstring2.xml', 
        'Geometry/TrackerCommonData/data/tibstring3ll.xml', 
        'Geometry/TrackerCommonData/data/tibstring3lr.xml', 
        'Geometry/TrackerCommonData/data/tibstring3ul.xml', 
        'Geometry/TrackerCommonData/data/tibstring3ur.xml', 
        'Geometry/TrackerCommonData/data/tibstring3.xml', 
        'Geometry/TrackerCommonData/data/tiblayerpar.xml', 
        'Geometry/TrackerCommonData/data/tiblayer0.xml', 
        'Geometry/TrackerCommonData/data/tiblayer1.xml', 
        'Geometry/TrackerCommonData/data/tiblayer2.xml', 
        'Geometry/TrackerCommonData/data/tiblayer3.xml', 
        'Geometry/TrackerCommonData/data/tib.xml', 
        'Geometry/TrackerCommonData/data/tidmaterial.xml', 
        'Geometry/TrackerCommonData/data/tidmodpar.xml', 
        'Geometry/TrackerCommonData/data/tidmodule0.xml', 
        'Geometry/TrackerCommonData/data/tidmodule0r.xml', 
        'Geometry/TrackerCommonData/data/tidmodule0l.xml', 
        'Geometry/TrackerCommonData/data/tidmodule1.xml', 
        'Geometry/TrackerCommonData/data/tidmodule1r.xml', 
        'Geometry/TrackerCommonData/data/tidmodule1l.xml', 
        'Geometry/TrackerCommonData/data/tidmodule2.xml', 
        'Geometry/TrackerCommonData/data/tidringpar.xml', 
        'Geometry/TrackerCommonData/data/tidring0.xml', 
        'Geometry/TrackerCommonData/data/tidring0f.xml', 
        'Geometry/TrackerCommonData/data/tidring0b.xml', 
        'Geometry/TrackerCommonData/data/tidring1.xml', 
        'Geometry/TrackerCommonData/data/tidring1f.xml', 
        'Geometry/TrackerCommonData/data/tidring1b.xml', 
        'Geometry/TrackerCommonData/data/tidring2.xml', 
        'Geometry/TrackerCommonData/data/tid.xml', 
        'Geometry/TrackerCommonData/data/tidf.xml', 
        'Geometry/TrackerCommonData/data/tidb.xml', 
        'Geometry/TrackerCommonData/data/tibtidservices.xml', 
        'Geometry/TrackerCommonData/data/tibtidservicesf.xml', 
        'Geometry/TrackerCommonData/data/tibtidservicesb.xml', 
        'Geometry/TrackerCommonData/data/tobmaterial.xml', 
        'Geometry/TrackerCommonData/data/tobmodpar.xml', 
        'Geometry/TrackerCommonData/data/tobmodule0.xml', 
        'Geometry/TrackerCommonData/data/tobmodule2.xml', 
        'Geometry/TrackerCommonData/data/tobmodule4.xml', 
        'Geometry/TrackerCommonData/data/tobrodpar.xml', 
        'Geometry/TrackerCommonData/data/tobrod0c.xml', 
        'Geometry/TrackerCommonData/data/tobrod0l.xml', 
        'Geometry/TrackerCommonData/data/tobrod0h.xml', 
        'Geometry/TrackerCommonData/data/tobrod0.xml', 
        'Geometry/TrackerCommonData/data/tobrod1l.xml', 
        'Geometry/TrackerCommonData/data/tobrod1h.xml', 
        'Geometry/TrackerCommonData/data/tobrod1.xml', 
        'Geometry/TrackerCommonData/data/tobrod2c.xml', 
        'Geometry/TrackerCommonData/data/tobrod2l.xml', 
        'Geometry/TrackerCommonData/data/tobrod2h.xml', 
        'Geometry/TrackerCommonData/data/tobrod2.xml', 
        'Geometry/TrackerCommonData/data/tobrod3l.xml', 
        'Geometry/TrackerCommonData/data/tobrod3h.xml', 
        'Geometry/TrackerCommonData/data/tobrod3.xml', 
        'Geometry/TrackerCommonData/data/tobrod4c.xml', 
        'Geometry/TrackerCommonData/data/tobrod4l.xml', 
        'Geometry/TrackerCommonData/data/tobrod4h.xml', 
        'Geometry/TrackerCommonData/data/tobrod4.xml', 
        'Geometry/TrackerCommonData/data/tobrod5l.xml', 
        'Geometry/TrackerCommonData/data/tobrod5h.xml', 
        'Geometry/TrackerCommonData/data/tobrod5.xml', 
        'Geometry/TrackerCommonData/data/tob.xml', 
        'Geometry/TrackerCommonData/data/tecmaterial.xml', 
        'Geometry/TrackerCommonData/data/tecmodpar.xml', 
        'Geometry/TrackerCommonData/data/tecmodule0.xml', 
        'Geometry/TrackerCommonData/data/tecmodule0r.xml', 
        'Geometry/TrackerCommonData/data/tecmodule0s.xml', 
        'Geometry/TrackerCommonData/data/tecmodule1.xml', 
        'Geometry/TrackerCommonData/data/tecmodule1r.xml', 
        'Geometry/TrackerCommonData/data/tecmodule1s.xml', 
        'Geometry/TrackerCommonData/data/tecmodule2.xml', 
        'Geometry/TrackerCommonData/data/tecmodule3.xml', 
        'Geometry/TrackerCommonData/data/tecmodule4.xml', 
        'Geometry/TrackerCommonData/data/tecmodule4r.xml', 
        'Geometry/TrackerCommonData/data/tecmodule4s.xml', 
        'Geometry/TrackerCommonData/data/tecmodule5.xml', 
        'Geometry/TrackerCommonData/data/tecmodule6.xml', 
        'Geometry/TrackerCommonData/data/tecpetpar.xml', 
        'Geometry/TrackerCommonData/data/tecring0.xml', 
        'Geometry/TrackerCommonData/data/tecring1.xml', 
        'Geometry/TrackerCommonData/data/tecring2.xml', 
        'Geometry/TrackerCommonData/data/tecring3.xml', 
        'Geometry/TrackerCommonData/data/tecring4.xml', 
        'Geometry/TrackerCommonData/data/tecring5.xml', 
        'Geometry/TrackerCommonData/data/tecring6.xml', 
        'Geometry/TrackerCommonData/data/tecring0f.xml', 
        'Geometry/TrackerCommonData/data/tecring1f.xml', 
        'Geometry/TrackerCommonData/data/tecring2f.xml', 
        'Geometry/TrackerCommonData/data/tecring3f.xml', 
        'Geometry/TrackerCommonData/data/tecring4f.xml', 
        'Geometry/TrackerCommonData/data/tecring5f.xml', 
        'Geometry/TrackerCommonData/data/tecring6f.xml', 
        'Geometry/TrackerCommonData/data/tecring0b.xml', 
        'Geometry/TrackerCommonData/data/tecring1b.xml', 
        'Geometry/TrackerCommonData/data/tecring2b.xml', 
        'Geometry/TrackerCommonData/data/tecring3b.xml', 
        'Geometry/TrackerCommonData/data/tecring4b.xml', 
        'Geometry/TrackerCommonData/data/tecring5b.xml', 
        'Geometry/TrackerCommonData/data/tecring6b.xml', 
        'Geometry/TrackerCommonData/data/tecpetalf.xml', 
        'Geometry/TrackerCommonData/data/tecpetalb.xml', 
        'Geometry/TrackerCommonData/data/tecpetal0.xml', 
        'Geometry/TrackerCommonData/data/tecpetal0f.xml', 
        'Geometry/TrackerCommonData/data/tecpetal0b.xml', 
        'Geometry/TrackerCommonData/data/tecpetal3.xml', 
        'Geometry/TrackerCommonData/data/tecpetal3f.xml', 
        'Geometry/TrackerCommonData/data/tecpetal3b.xml', 
        'Geometry/TrackerCommonData/data/tecpetal6f.xml', 
        'Geometry/TrackerCommonData/data/tecpetal6b.xml', 
        'Geometry/TrackerCommonData/data/tecpetal8f.xml', 
        'Geometry/TrackerCommonData/data/tecpetal8b.xml', 
        'Geometry/TrackerCommonData/data/tecwheel.xml', 
        'Geometry/TrackerCommonData/data/tecwheela.xml', 
        'Geometry/TrackerCommonData/data/tecwheelb.xml', 
        'Geometry/TrackerCommonData/data/tecwheelc.xml', 
        'Geometry/TrackerCommonData/data/tecwheeld.xml', 
        'Geometry/TrackerCommonData/data/tecwheel6.xml', 
        'Geometry/TrackerCommonData/data/tecservices.xml', 
        'Geometry/TrackerCommonData/data/tecbackplate.xml', 
        'Geometry/TrackerCommonData/data/tec.xml', 
        'Geometry/TrackerCommonData/data/trackermaterial.xml', 
        'Geometry/TrackerCommonData/data/tracker.xml', 
        'Geometry/TrackerCommonData/data/trackerpixbar.xml', 
        'Geometry/TrackerCommonData/data/trackerpixfwd.xml', 
        'Geometry/TrackerCommonData/data/trackertibtidservices.xml', 
        'Geometry/TrackerCommonData/data/trackertib.xml', 
        'Geometry/TrackerCommonData/data/trackertid.xml', 
        'Geometry/TrackerCommonData/data/trackertob.xml', 
        'Geometry/TrackerCommonData/data/trackertec.xml', 
        'Geometry/TrackerCommonData/data/trackerbulkhead.xml', 
        'Geometry/TrackerCommonData/data/trackerother.xml', 
        'Geometry/EcalCommonData/data/eregalgo.xml', 
        'Geometry/EcalCommonData/data/ebalgo.xml', 
        'Geometry/EcalCommonData/data/ebcon.xml', 
        'Geometry/EcalCommonData/data/ebrot.xml', 
        'Geometry/EcalCommonData/data/eecon.xml', 
        'Geometry/EcalCommonData/data/eefixed.xml', 
        'Geometry/EcalCommonData/data/eehier.xml', 
        'Geometry/EcalCommonData/data/eealgo.xml', 
        'Geometry/EcalCommonData/data/escon.xml', 
        'Geometry/EcalCommonData/data/esalgo.xml', 
        'Geometry/EcalCommonData/data/eeF.xml', 
        'Geometry/EcalCommonData/data/eeB.xml', 
        'Geometry/HcalCommonData/data/hcalrotations.xml', 
        'Geometry/HcalCommonData/data/hcalalgo.xml', 
        'Geometry/HcalCommonData/data/hcalbarrelalgo.xml', 
        'Geometry/HcalCommonData/data/hcalendcapalgo.xml', 
        'Geometry/HcalCommonData/data/hcalouteralgo.xml', 
        'Geometry/HcalCommonData/data/hcalforwardalgo.xml', 
        'Geometry/HcalCommonData/data/average/hcalforwardmaterial.xml', 
        'Geometry/MuonCommonData/data/mbCommon.xml', 
        'Geometry/MuonCommonData/data/mb1.xml', 
        'Geometry/MuonCommonData/data/mb2.xml', 
        'Geometry/MuonCommonData/data/mb3.xml', 
        'Geometry/MuonCommonData/data/mb4.xml', 
        'Geometry/MuonCommonData/data/muonYoke.xml', 
        'Geometry/MuonCommonData/data/mf.xml', 
        'Geometry/ForwardCommonData/data/forward.xml', 
        'Geometry/ForwardCommonData/data/bundle/forwardshield.xml', 
        'Geometry/ForwardCommonData/data/brmrotations.xml', 
        'Geometry/ForwardCommonData/data/brm.xml', 
        'Geometry/ForwardCommonData/data/totemMaterials.xml', 
        'Geometry/ForwardCommonData/data/totemRotations.xml', 
        'Geometry/ForwardCommonData/data/totemt1.xml', 
        'Geometry/ForwardCommonData/data/totemt2.xml', 
        'Geometry/ForwardCommonData/data/ionpump.xml', 
        'Geometry/MuonCommonData/data/muonNumbering.xml', 
        'Geometry/TrackerCommonData/data/trackerStructureTopology.xml', 
        'Geometry/TrackerSimData/data/trackersens.xml', 
        'Geometry/TrackerRecoData/data/trackerRecoMaterial.xml', 
        'Geometry/EcalSimData/data/ecalsens.xml', 
        'Geometry/HcalCommonData/data/hcalsenspmf.xml', 
        'Geometry/HcalSimData/data/hf.xml', 
        'Geometry/HcalSimData/data/hfpmt.xml', 
        'Geometry/HcalSimData/data/hffibrebundle.xml', 
        'Geometry/HcalSimData/data/CaloUtil.xml', 
        'Geometry/MuonSimData/data/muonSens.xml', 
        'Geometry/DTGeometryBuilder/data/dtSpecsFilter.xml', 
        'Geometry/CSCGeometryBuilder/data/cscSpecsFilter.xml', 
        'Geometry/CSCGeometryBuilder/data/cscSpecs.xml', 
        'Geometry/RPCGeometryBuilder/data/RPCSpecs.xml', 
        'Geometry/ForwardCommonData/data/brmsens.xml', 
        'Geometry/HcalSimData/data/HcalProdCuts.xml', 
        'Geometry/EcalSimData/data/EcalProdCuts.xml', 
        'Geometry/EcalSimData/data/ESProdCuts.xml', 
        'Geometry/TrackerSimData/data/trackerProdCuts.xml', 
        'Geometry/TrackerSimData/data/trackerProdCutsBEAM.xml', 
        'Geometry/MuonSimData/data/muonProdCuts.xml', 
        'Geometry/ForwardSimData/data/ForwardShieldProdCuts.xml', 
        'Geometry/CMSCommonData/data/FieldParameters.xml'),
    rootNodeName = cms.string('cms:OCMS')
)


process.eegeom = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('EcalMappingRcd'),
    firstValid = cms.vuint32(1)
)


process.emrcdsrc = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('L1EmEtScaleRcd'),
    firstValid = cms.vuint32(1)
)


process.es_hardcode = cms.ESSource("HcalHardcodeCalibrations",
    HERecalibration = cms.bool(False),
    toGet = cms.untracked.vstring('GainWidths'),
    iLumi = cms.double(20.0),
    HcalReLabel = cms.PSet(
        RelabelRules = cms.untracked.PSet(
            Eta16 = cms.untracked.vint32(1, 1, 2, 2, 2, 
                2, 2, 2, 2, 3, 
                3, 3, 3, 3, 3, 
                3, 3, 3, 3),
            Eta17 = cms.untracked.vint32(1, 1, 2, 2, 3, 
                3, 3, 4, 4, 4, 
                4, 4, 5, 5, 5, 
                5, 5, 5, 5),
            Eta1 = cms.untracked.vint32(1, 2, 2, 2, 3, 
                3, 3, 3, 3, 3, 
                3, 3, 3, 3, 3, 
                3, 3, 3, 3),
            CorrectPhi = cms.untracked.bool(False)
        ),
        RelabelHits = cms.untracked.bool(False)
    ),
    HFRecalibration = cms.bool(False),
    hcalTopologyConstants = cms.PSet(
        maxDepthHE = cms.int32(3),
        maxDepthHB = cms.int32(2),
        mode = cms.string('HcalTopologyMode::LHC')
    )
)


process.essourceEcalNextToDead = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('EcalNextToDeadChannelRcd'),
    firstValid = cms.vuint32(1)
)


process.essourceEcalSev = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('EcalSeverityLevelAlgoRcd'),
    firstValid = cms.vuint32(1)
)


process.essourceSev = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('HcalSeverityLevelComputerRcd'),
    firstValid = cms.vuint32(1)
)


process.hfrrcdsrc = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('L1HfRingEtScaleRcd'),
    firstValid = cms.vuint32(1)
)


process.htmrcdsrc = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('L1HtMissScaleRcd'),
    firstValid = cms.vuint32(1)
)


process.jetrcdsrc = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('L1JetEtScaleRcd'),
    firstValid = cms.vuint32(1)
)


process.l1CaloEcalScaleRecord = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('L1CaloEcalScaleRcd'),
    firstValid = cms.vuint32(1)
)


process.l1CaloHcalScaleRecord = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('L1CaloHcalScaleRcd'),
    firstValid = cms.vuint32(1)
)


process.l1RctMaskRcds = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('L1RCTChannelMaskRcd'),
    firstValid = cms.vuint32(1)
)


process.l1RctParamsRecords = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('L1RCTParametersRcd'),
    firstValid = cms.vuint32(1)
)


process.magfield = cms.ESSource("XMLIdealGeometryESSource",
    geomXMLFiles = cms.vstring('Geometry/CMSCommonData/data/normal/cmsextent.xml', 
        'Geometry/CMSCommonData/data/cms.xml', 
        'Geometry/CMSCommonData/data/cmsMagneticField.xml', 
        'MagneticField/GeomBuilder/data/MagneticFieldVolumes_1103l.xml', 
        'MagneticField/GeomBuilder/data/MagneticFieldParameters_07_2pi.xml', 
        'Geometry/CMSCommonData/data/materials.xml'),
    rootNodeName = cms.string('cmsMagneticField:MAGF')
)


process.rpcBxOrConfSrc = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('L1RPCBxOrConfigRcd'),
    firstValid = cms.vuint32(1)
)


process.rpcconesrc = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('L1RPCConeBuilderRcd'),
    firstValid = cms.vuint32(1)
)


process.tpparams12 = cms.ESSource("EmptyESSource",
    iovIsRunNotTime = cms.bool(True),
    recordName = cms.string('EcalTPGPhysicsConstRcd'),
    firstValid = cms.vuint32(1)
)


process.prefer("es_hardcode")

process.prefer("magfield")

process.AnomalousCellParameters = cms.PSet(
    maxRecoveredHcalCells = cms.uint32(9999999),
    maxBadEcalCells = cms.uint32(9999999),
    maxProblematicEcalCells = cms.uint32(9999999),
    maxBadHcalCells = cms.uint32(9999999),
    maxRecoveredEcalCells = cms.uint32(9999999),
    maxProblematicHcalCells = cms.uint32(9999999)
)

process.BtiParametersBlock = cms.PSet(
    BtiParameters = cms.PSet(
        KACCTHETA = cms.int32(1),
        WEN8 = cms.int32(1),
        ACH = cms.int32(1),
        DEAD = cms.int32(31),
        ACL = cms.int32(2),
        PTMS20 = cms.int32(1),
        Debug = cms.untracked.int32(0),
        PTMS22 = cms.int32(1),
        PTMS23 = cms.int32(1),
        PTMS24 = cms.int32(1),
        PTMS25 = cms.int32(1),
        PTMS26 = cms.int32(1),
        PTMS27 = cms.int32(1),
        PTMS28 = cms.int32(1),
        PTMS29 = cms.int32(1),
        SET = cms.int32(7),
        RON = cms.bool(True),
        WEN2 = cms.int32(1),
        LL = cms.int32(2),
        LH = cms.int32(21),
        WEN3 = cms.int32(1),
        RE43 = cms.int32(2),
        WEN0 = cms.int32(1),
        RL = cms.int32(42),
        WEN1 = cms.int32(1),
        RH = cms.int32(61),
        LTS = cms.int32(3),
        CH = cms.int32(41),
        CL = cms.int32(22),
        PTMS15 = cms.int32(1),
        PTMS14 = cms.int32(1),
        PTMS17 = cms.int32(1),
        PTMS16 = cms.int32(1),
        PTMS11 = cms.int32(1),
        PTMS10 = cms.int32(1),
        PTMS13 = cms.int32(1),
        PTMS12 = cms.int32(1),
        XON = cms.bool(False),
        WEN7 = cms.int32(1),
        WEN4 = cms.int32(1),
        WEN5 = cms.int32(1),
        PTMS19 = cms.int32(1),
        PTMS18 = cms.int32(1),
        PTMS31 = cms.int32(0),
        PTMS30 = cms.int32(0),
        PTMS5 = cms.int32(1),
        PTMS4 = cms.int32(1),
        PTMS7 = cms.int32(1),
        PTMS6 = cms.int32(1),
        PTMS1 = cms.int32(0),
        PTMS0 = cms.int32(0),
        PTMS3 = cms.int32(0),
        WEN6 = cms.int32(1),
        PTMS2 = cms.int32(0),
        PTMS9 = cms.int32(1),
        PTMS8 = cms.int32(1),
        ST43 = cms.int32(42),
        AC2 = cms.int32(3),
        AC1 = cms.int32(0),
        KMAX = cms.int32(64),
        PTMS21 = cms.int32(1)
    )
)

process.CSCCommonTrigger = cms.PSet(
    MaxBX = cms.int32(9),
    MinBX = cms.int32(3)
)

process.CSCSegAlgoDF = cms.PSet(
    chamber_types = cms.vstring('ME1/a', 
        'ME1/b', 
        'ME1/2', 
        'ME1/3', 
        'ME2/1', 
        'ME2/2', 
        'ME3/1', 
        'ME3/2', 
        'ME4/1'),
    algo_name = cms.string('CSCSegAlgoDF'),
    parameters_per_chamber_type = cms.vint32(3, 1, 2, 2, 1, 
        2, 1, 2, 1),
    algo_psets = cms.VPSet(cms.PSet(
        tanThetaMax = cms.double(1.2),
        maxRatioResidualPrune = cms.double(3.0),
        dPhiFineMax = cms.double(0.025),
        tanPhiMax = cms.double(0.5),
        dXclusBoxMax = cms.double(8.0),
        preClustering = cms.untracked.bool(False),
        chi2Max = cms.double(5000.0),
        minHitsPerSegment = cms.int32(3),
        minHitsForPreClustering = cms.int32(10),
        minLayersApart = cms.int32(2),
        dRPhiFineMax = cms.double(8.0),
        nHitsPerClusterIsShower = cms.int32(20),
        CSCSegmentDebug = cms.untracked.bool(False),
        Pruning = cms.untracked.bool(False),
        dYclusBoxMax = cms.double(8.0)
    ), 
        cms.PSet(
            tanThetaMax = cms.double(2.0),
            maxRatioResidualPrune = cms.double(3.0),
            dPhiFineMax = cms.double(0.025),
            tanPhiMax = cms.double(0.8),
            dXclusBoxMax = cms.double(8.0),
            preClustering = cms.untracked.bool(False),
            chi2Max = cms.double(5000.0),
            minHitsPerSegment = cms.int32(3),
            minHitsForPreClustering = cms.int32(10),
            minLayersApart = cms.int32(2),
            dRPhiFineMax = cms.double(12.0),
            nHitsPerClusterIsShower = cms.int32(20),
            CSCSegmentDebug = cms.untracked.bool(False),
            Pruning = cms.untracked.bool(False),
            dYclusBoxMax = cms.double(12.0)
        ), 
        cms.PSet(
            tanThetaMax = cms.double(1.2),
            maxRatioResidualPrune = cms.double(3.0),
            dPhiFineMax = cms.double(0.025),
            tanPhiMax = cms.double(0.5),
            dXclusBoxMax = cms.double(8.0),
            preClustering = cms.untracked.bool(False),
            chi2Max = cms.double(5000.0),
            minHitsPerSegment = cms.int32(3),
            minHitsForPreClustering = cms.int32(30),
            minLayersApart = cms.int32(2),
            dRPhiFineMax = cms.double(8.0),
            nHitsPerClusterIsShower = cms.int32(20),
            CSCSegmentDebug = cms.untracked.bool(False),
            Pruning = cms.untracked.bool(False),
            dYclusBoxMax = cms.double(8.0)
        ))
)

process.CSCSegAlgoSK = cms.PSet(
    chamber_types = cms.vstring('ME1/a', 
        'ME1/b', 
        'ME1/2', 
        'ME1/3', 
        'ME2/1', 
        'ME2/2', 
        'ME3/1', 
        'ME3/2', 
        'ME4/1'),
    algo_name = cms.string('CSCSegAlgoSK'),
    parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
        1, 1, 1, 1),
    algo_psets = cms.VPSet(cms.PSet(
        dPhiFineMax = cms.double(0.025),
        verboseInfo = cms.untracked.bool(True),
        chi2Max = cms.double(99999.0),
        dPhiMax = cms.double(0.003),
        wideSeg = cms.double(3.0),
        minLayersApart = cms.int32(2),
        dRPhiFineMax = cms.double(8.0),
        dRPhiMax = cms.double(8.0)
    ), 
        cms.PSet(
            dPhiFineMax = cms.double(0.025),
            verboseInfo = cms.untracked.bool(True),
            chi2Max = cms.double(99999.0),
            dPhiMax = cms.double(0.025),
            wideSeg = cms.double(3.0),
            minLayersApart = cms.int32(2),
            dRPhiFineMax = cms.double(3.0),
            dRPhiMax = cms.double(8.0)
        ))
)

process.CSCSegAlgoST = cms.PSet(
    chamber_types = cms.vstring('ME1/a', 
        'ME1/b', 
        'ME1/2', 
        'ME1/3', 
        'ME2/1', 
        'ME2/2', 
        'ME3/1', 
        'ME3/2', 
        'ME4/1', 
        'ME4/2'),
    algo_name = cms.string('CSCSegAlgoST'),
    parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
        1, 1, 1, 1, 1),
    algo_psets = cms.VPSet(cms.PSet(
        maxRatioResidualPrune = cms.double(3),
        yweightPenalty = cms.double(1.5),
        maxRecHitsInCluster = cms.int32(20),
        preClusteringUseChaining = cms.bool(True),
        ForceCovariance = cms.bool(False),
        hitDropLimit6Hits = cms.double(0.3333),
        NormChi2Cut2D = cms.double(20.0),
        BPMinImprovement = cms.double(10000.0),
        Covariance = cms.double(0.0),
        tanPhiMax = cms.double(0.5),
        onlyBestSegment = cms.bool(False),
        SeedBig = cms.double(0.0015),
        dRPhiFineMax = cms.double(8.0),
        SeedSmall = cms.double(0.0002),
        curvePenalty = cms.double(2.0),
        dXclusBoxMax = cms.double(4.0),
        BrutePruning = cms.bool(True),
        curvePenaltyThreshold = cms.double(0.85),
        CorrectTheErrors = cms.bool(True),
        hitDropLimit4Hits = cms.double(0.6),
        useShowering = cms.bool(False),
        CSCDebug = cms.untracked.bool(False),
        yweightPenaltyThreshold = cms.double(1.0),
        tanThetaMax = cms.double(1.2),
        NormChi2Cut3D = cms.double(10.0),
        minHitsPerSegment = cms.int32(3),
        ForceCovarianceAll = cms.bool(False),
        dPhiFineMax = cms.double(0.025),
        prePrunLimit = cms.double(3.17),
        hitDropLimit5Hits = cms.double(0.8),
        preClustering = cms.bool(True),
        prePrun = cms.bool(True),
        maxDPhi = cms.double(999.0),
        maxDTheta = cms.double(999.0),
        Pruning = cms.bool(True),
        dYclusBoxMax = cms.double(8.0)
    ), 
        cms.PSet(
            maxRatioResidualPrune = cms.double(3),
            yweightPenalty = cms.double(1.5),
            maxRecHitsInCluster = cms.int32(24),
            preClusteringUseChaining = cms.bool(True),
            ForceCovariance = cms.bool(False),
            hitDropLimit6Hits = cms.double(0.3333),
            NormChi2Cut2D = cms.double(20.0),
            BPMinImprovement = cms.double(10000.0),
            Covariance = cms.double(0.0),
            tanPhiMax = cms.double(0.5),
            onlyBestSegment = cms.bool(False),
            SeedBig = cms.double(0.0015),
            dRPhiFineMax = cms.double(8.0),
            SeedSmall = cms.double(0.0002),
            curvePenalty = cms.double(2.0),
            dXclusBoxMax = cms.double(4.0),
            BrutePruning = cms.bool(True),
            curvePenaltyThreshold = cms.double(0.85),
            CorrectTheErrors = cms.bool(True),
            hitDropLimit4Hits = cms.double(0.6),
            useShowering = cms.bool(False),
            CSCDebug = cms.untracked.bool(False),
            yweightPenaltyThreshold = cms.double(1.0),
            tanThetaMax = cms.double(1.2),
            NormChi2Cut3D = cms.double(10.0),
            minHitsPerSegment = cms.int32(3),
            ForceCovarianceAll = cms.bool(False),
            dPhiFineMax = cms.double(0.025),
            prePrunLimit = cms.double(3.17),
            hitDropLimit5Hits = cms.double(0.8),
            preClustering = cms.bool(True),
            prePrun = cms.bool(True),
            maxDPhi = cms.double(999.0),
            maxDTheta = cms.double(999.0),
            Pruning = cms.bool(True),
            dYclusBoxMax = cms.double(8.0)
        ))
)

process.CSCSegAlgoTC = cms.PSet(
    chamber_types = cms.vstring('ME1/a', 
        'ME1/b', 
        'ME1/2', 
        'ME1/3', 
        'ME2/1', 
        'ME2/2', 
        'ME3/1', 
        'ME3/2', 
        'ME4/1'),
    algo_name = cms.string('CSCSegAlgoTC'),
    parameters_per_chamber_type = cms.vint32(2, 1, 1, 1, 1, 
        1, 1, 1, 1),
    algo_psets = cms.VPSet(cms.PSet(
        dPhiFineMax = cms.double(0.02),
        verboseInfo = cms.untracked.bool(True),
        SegmentSorting = cms.int32(1),
        chi2Max = cms.double(6000.0),
        dPhiMax = cms.double(0.003),
        chi2ndfProbMin = cms.double(0.0001),
        minLayersApart = cms.int32(2),
        dRPhiFineMax = cms.double(6.0),
        dRPhiMax = cms.double(1.2)
    ), 
        cms.PSet(
            dPhiFineMax = cms.double(0.013),
            verboseInfo = cms.untracked.bool(True),
            SegmentSorting = cms.int32(1),
            chi2Max = cms.double(6000.0),
            dPhiMax = cms.double(0.00198),
            chi2ndfProbMin = cms.double(0.0001),
            minLayersApart = cms.int32(2),
            dRPhiFineMax = cms.double(3.0),
            dRPhiMax = cms.double(0.6)
        ))
)

process.CSCTimingExtractorBlock = cms.PSet(
    CSCTimingParameters = cms.PSet(
        MatchParameters = cms.PSet(
            CSCsegments = cms.InputTag("cscSegments"),
            DTsegments = cms.InputTag("dt4DSegments"),
            DTradius = cms.double(0.01),
            TightMatchDT = cms.bool(False),
            TightMatchCSC = cms.bool(True)
        ),
        CSCsegments = cms.InputTag("csc2DSegments"),
        CSCStripTimeOffset = cms.double(0.0),
        CSCStripError = cms.double(7.0),
        UseStripTime = cms.bool(True),
        debug = cms.bool(False),
        CSCWireError = cms.double(8.6),
        CSCWireTimeOffset = cms.double(0.0),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite'),
            RPCLayers = cms.bool(True)
        ),
        PruneCut = cms.double(9.0),
        UseWireTime = cms.bool(True)
    )
)

process.ChargeSignificanceTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('ChargeSignificanceTrajectoryFilter'),
    chargeSignificance = cms.double(-1.0)
)

process.CkfBaseTrajectoryFilter_block = cms.PSet(
    extraNumberOfHitsBeforeTheFirstLoop = cms.int32(4),
    minPt = cms.double(0.9),
    minNumberOfHits = cms.int32(13),
    minHitsMinPt = cms.int32(3),
    maxLostHitsFraction = cms.double(0.1),
    ComponentType = cms.string('CkfBaseTrajectoryFilter'),
    maxLostHits = cms.int32(999),
    maxNumberOfHits = cms.int32(100),
    maxConsecLostHits = cms.int32(1),
    nSigmaMinPt = cms.double(5.0),
    minNumberOfHitsPerLoop = cms.int32(4),
    minimumNumberOfHits = cms.int32(5),
    constantValueForLostHitsFractionFilter = cms.double(1.0),
    chargeSignificance = cms.double(-1.0)
)

process.CompositeTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('CompositeTrajectoryFilter'),
    filters = cms.VPSet()
)

process.CondDBSetup = cms.PSet(
    DBParameters = cms.PSet(
        authenticationPath = cms.untracked.string(''),
        enableReadOnlySessionOnUpdateConnection = cms.untracked.bool(False),
        idleConnectionCleanupPeriod = cms.untracked.int32(10),
        messageLevel = cms.untracked.int32(0),
        enablePoolAutomaticCleanUp = cms.untracked.bool(False),
        enableConnectionSharing = cms.untracked.bool(True),
        connectionRetrialTimeOut = cms.untracked.int32(60),
        connectionTimeOut = cms.untracked.int32(60),
        authenticationSystem = cms.untracked.int32(0),
        connectionRetrialPeriod = cms.untracked.int32(10)
    )
)

process.DF_ME1234_1 = cms.PSet(
    preClustering = cms.untracked.bool(False),
    maxRatioResidualPrune = cms.double(3.0),
    dPhiFineMax = cms.double(0.025),
    chi2Max = cms.double(5000.0),
    dXclusBoxMax = cms.double(8.0),
    tanThetaMax = cms.double(1.2),
    tanPhiMax = cms.double(0.5),
    minHitsPerSegment = cms.int32(3),
    minHitsForPreClustering = cms.int32(10),
    minLayersApart = cms.int32(2),
    dRPhiFineMax = cms.double(8.0),
    nHitsPerClusterIsShower = cms.int32(20),
    CSCSegmentDebug = cms.untracked.bool(False),
    Pruning = cms.untracked.bool(False),
    dYclusBoxMax = cms.double(8.0)
)

process.DF_ME1234_2 = cms.PSet(
    preClustering = cms.untracked.bool(False),
    maxRatioResidualPrune = cms.double(3.0),
    dPhiFineMax = cms.double(0.025),
    chi2Max = cms.double(5000.0),
    dXclusBoxMax = cms.double(8.0),
    tanThetaMax = cms.double(2.0),
    tanPhiMax = cms.double(0.8),
    minHitsPerSegment = cms.int32(3),
    minHitsForPreClustering = cms.int32(10),
    minLayersApart = cms.int32(2),
    dRPhiFineMax = cms.double(12.0),
    nHitsPerClusterIsShower = cms.int32(20),
    CSCSegmentDebug = cms.untracked.bool(False),
    Pruning = cms.untracked.bool(False),
    dYclusBoxMax = cms.double(12.0)
)

process.DF_ME1A = cms.PSet(
    preClustering = cms.untracked.bool(False),
    maxRatioResidualPrune = cms.double(3.0),
    dPhiFineMax = cms.double(0.025),
    chi2Max = cms.double(5000.0),
    dXclusBoxMax = cms.double(8.0),
    tanThetaMax = cms.double(1.2),
    tanPhiMax = cms.double(0.5),
    minHitsPerSegment = cms.int32(3),
    minHitsForPreClustering = cms.int32(30),
    minLayersApart = cms.int32(2),
    dRPhiFineMax = cms.double(8.0),
    nHitsPerClusterIsShower = cms.int32(20),
    CSCSegmentDebug = cms.untracked.bool(False),
    Pruning = cms.untracked.bool(False),
    dYclusBoxMax = cms.double(8.0)
)

process.DTCombinatorialPatternReco2DAlgo_LinearDriftFromDB = cms.PSet(
    Reco2DAlgoConfig = cms.PSet(
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            doVdriftCorr = cms.bool(True),
            debug = cms.untracked.bool(False),
            tTrigModeConfig = cms.PSet(
                vPropWire = cms.double(24.4),
                doTOFCorrection = cms.bool(True),
                tofCorrType = cms.int32(0),
                wirePropCorrType = cms.int32(0),
                tTrigLabel = cms.string(''),
                doWirePropCorrection = cms.bool(True),
                doT0Correction = cms.bool(True),
                debug = cms.untracked.bool(False)
            ),
            maxTime = cms.double(420.0)
        ),
        segmCleanerMode = cms.int32(2),
        perform_delta_rejecting = cms.bool(True),
        nSharedHitsMax = cms.int32(2),
        AlphaMaxPhi = cms.double(1.0),
        hit_afterT0_resolution = cms.double(0.03),
        MaxAllowedHits = cms.uint32(50),
        performT0_vdriftSegCorrection = cms.bool(False),
        AlphaMaxTheta = cms.double(0.9),
        debug = cms.untracked.bool(False),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False)
    ),
    Reco2DAlgoName = cms.string('DTCombinatorialPatternReco')
)

process.DTCombinatorialPatternReco2DAlgo_LinearDriftFromDB_CosmicData = cms.PSet(
    Reco2DAlgoConfig = cms.PSet(
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            doVdriftCorr = cms.bool(False),
            debug = cms.untracked.bool(False),
            tTrigModeConfig = cms.PSet(
                vPropWire = cms.double(24.4),
                doTOFCorrection = cms.bool(False),
                tofCorrType = cms.int32(0),
                wirePropCorrType = cms.int32(0),
                tTrigLabel = cms.string('cosmics'),
                doWirePropCorrection = cms.bool(False),
                doT0Correction = cms.bool(True),
                debug = cms.untracked.bool(False)
            ),
            maxTime = cms.double(420.0)
        ),
        segmCleanerMode = cms.int32(1),
        perform_delta_rejecting = cms.bool(False),
        nSharedHitsMax = cms.int32(2),
        AlphaMaxPhi = cms.double(100.0),
        hit_afterT0_resolution = cms.double(0.03),
        MaxAllowedHits = cms.uint32(50),
        performT0_vdriftSegCorrection = cms.bool(False),
        AlphaMaxTheta = cms.double(100.0),
        debug = cms.untracked.bool(False),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False)
    ),
    Reco2DAlgoName = cms.string('DTCombinatorialPatternReco')
)

process.DTCombinatorialPatternReco4DAlgo_LinearDriftFromDB_CosmicData = cms.PSet(
    Reco4DAlgoName = cms.string('DTCombinatorialPatternReco4D'),
    Reco4DAlgoConfig = cms.PSet(
        Reco2DAlgoConfig = cms.PSet(
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                tTrigMode = cms.string('DTTTrigSyncFromDB'),
                minTime = cms.double(-3.0),
                stepTwoFromDigi = cms.bool(False),
                doVdriftCorr = cms.bool(False),
                debug = cms.untracked.bool(False),
                tTrigModeConfig = cms.PSet(
                    vPropWire = cms.double(24.4),
                    doTOFCorrection = cms.bool(False),
                    tofCorrType = cms.int32(0),
                    wirePropCorrType = cms.int32(0),
                    tTrigLabel = cms.string('cosmics'),
                    doWirePropCorrection = cms.bool(False),
                    doT0Correction = cms.bool(True),
                    debug = cms.untracked.bool(False)
                ),
                maxTime = cms.double(420.0)
            ),
            segmCleanerMode = cms.int32(1),
            perform_delta_rejecting = cms.bool(False),
            nSharedHitsMax = cms.int32(2),
            AlphaMaxPhi = cms.double(100.0),
            hit_afterT0_resolution = cms.double(0.03),
            MaxAllowedHits = cms.uint32(50),
            performT0_vdriftSegCorrection = cms.bool(False),
            AlphaMaxTheta = cms.double(100.0),
            debug = cms.untracked.bool(False),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False)
        ),
        Reco2DAlgoName = cms.string('DTCombinatorialPatternReco'),
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            doVdriftCorr = cms.bool(False),
            debug = cms.untracked.bool(False),
            tTrigModeConfig = cms.PSet(
                vPropWire = cms.double(24.4),
                doTOFCorrection = cms.bool(False),
                tofCorrType = cms.int32(0),
                wirePropCorrType = cms.int32(0),
                tTrigLabel = cms.string('cosmics'),
                doWirePropCorrection = cms.bool(False),
                doT0Correction = cms.bool(True),
                debug = cms.untracked.bool(False)
            ),
            maxTime = cms.double(420.0)
        ),
        segmCleanerMode = cms.int32(1),
        perform_delta_rejecting = cms.bool(False),
        nSharedHitsMax = cms.int32(2),
        hit_afterT0_resolution = cms.double(0.03),
        performT0_vdriftSegCorrection = cms.bool(False),
        debug = cms.untracked.bool(False),
        nUnSharedHitsMin = cms.int32(2),
        AllDTRecHits = cms.bool(True),
        performT0SegCorrection = cms.bool(False)
    )
)

process.DTLinearDriftAlgo_CosmicData = cms.PSet(
    recAlgoConfig = cms.PSet(
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        minTime = cms.double(-3.0),
        driftVelocity = cms.double(0.00543),
        hitResolution = cms.double(0.02),
        debug = cms.untracked.bool(False),
        maxTime = cms.double(420.0),
        tTrigModeConfig = cms.PSet(
            vPropWire = cms.double(24.4),
            doTOFCorrection = cms.bool(False),
            tofCorrType = cms.int32(0),
            wirePropCorrType = cms.int32(0),
            tTrigLabel = cms.string('cosmics'),
            doWirePropCorrection = cms.bool(False),
            doT0Correction = cms.bool(True),
            debug = cms.untracked.bool(False)
        )
    ),
    recAlgo = cms.string('DTLinearDriftAlgo')
)

process.DTLinearDriftFromDBAlgo = cms.PSet(
    recAlgoConfig = cms.PSet(
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        minTime = cms.double(-3.0),
        stepTwoFromDigi = cms.bool(False),
        doVdriftCorr = cms.bool(True),
        debug = cms.untracked.bool(False),
        tTrigModeConfig = cms.PSet(
            vPropWire = cms.double(24.4),
            doTOFCorrection = cms.bool(True),
            tofCorrType = cms.int32(0),
            wirePropCorrType = cms.int32(0),
            tTrigLabel = cms.string(''),
            doWirePropCorrection = cms.bool(True),
            doT0Correction = cms.bool(True),
            debug = cms.untracked.bool(False)
        ),
        maxTime = cms.double(420.0)
    ),
    recAlgo = cms.string('DTLinearDriftFromDBAlgo')
)

process.DTLinearDriftFromDBAlgo_CosmicData = cms.PSet(
    recAlgoConfig = cms.PSet(
        tTrigMode = cms.string('DTTTrigSyncFromDB'),
        minTime = cms.double(-3.0),
        stepTwoFromDigi = cms.bool(False),
        doVdriftCorr = cms.bool(False),
        debug = cms.untracked.bool(False),
        tTrigModeConfig = cms.PSet(
            vPropWire = cms.double(24.4),
            doTOFCorrection = cms.bool(False),
            tofCorrType = cms.int32(0),
            wirePropCorrType = cms.int32(0),
            tTrigLabel = cms.string('cosmics'),
            doWirePropCorrection = cms.bool(False),
            doT0Correction = cms.bool(True),
            debug = cms.untracked.bool(False)
        ),
        maxTime = cms.double(420.0)
    ),
    recAlgo = cms.string('DTLinearDriftFromDBAlgo')
)

process.DTMeantimerPatternReco2DAlgo_LinearDriftFromDB = cms.PSet(
    Reco2DAlgoConfig = cms.PSet(
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            doVdriftCorr = cms.bool(True),
            debug = cms.untracked.bool(False),
            tTrigModeConfig = cms.PSet(
                vPropWire = cms.double(24.4),
                doTOFCorrection = cms.bool(True),
                tofCorrType = cms.int32(0),
                wirePropCorrType = cms.int32(0),
                tTrigLabel = cms.string(''),
                doWirePropCorrection = cms.bool(True),
                doT0Correction = cms.bool(True),
                debug = cms.untracked.bool(False)
            ),
            maxTime = cms.double(420.0)
        ),
        segmCleanerMode = cms.int32(2),
        perform_delta_rejecting = cms.bool(True),
        MaxT0 = cms.double(100.0),
        performT0_vdriftSegCorrection = cms.bool(False),
        AlphaMaxPhi = cms.double(1.0),
        MaxChi2 = cms.double(4.0),
        hit_afterT0_resolution = cms.double(0.03),
        MaxAllowedHits = cms.uint32(50),
        nSharedHitsMax = cms.int32(2),
        AlphaMaxTheta = cms.double(0.9),
        debug = cms.untracked.bool(False),
        nUnSharedHitsMin = cms.int32(2),
        performT0SegCorrection = cms.bool(False),
        MinT0 = cms.double(-100.0)
    ),
    Reco2DAlgoName = cms.string('DTMeantimerPatternReco')
)

process.DTMeantimerPatternReco4DAlgo_LinearDriftFromDB = cms.PSet(
    Reco4DAlgoName = cms.string('DTMeantimerPatternReco4D'),
    Reco4DAlgoConfig = cms.PSet(
        recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
        recAlgoConfig = cms.PSet(
            tTrigMode = cms.string('DTTTrigSyncFromDB'),
            minTime = cms.double(-3.0),
            stepTwoFromDigi = cms.bool(False),
            doVdriftCorr = cms.bool(True),
            debug = cms.untracked.bool(False),
            tTrigModeConfig = cms.PSet(
                vPropWire = cms.double(24.4),
                doTOFCorrection = cms.bool(True),
                tofCorrType = cms.int32(0),
                wirePropCorrType = cms.int32(0),
                tTrigLabel = cms.string(''),
                doWirePropCorrection = cms.bool(True),
                doT0Correction = cms.bool(True),
                debug = cms.untracked.bool(False)
            ),
            maxTime = cms.double(420.0)
        ),
        Reco2DAlgoConfig = cms.PSet(
            recAlgo = cms.string('DTLinearDriftFromDBAlgo'),
            recAlgoConfig = cms.PSet(
                tTrigMode = cms.string('DTTTrigSyncFromDB'),
                minTime = cms.double(-3.0),
                stepTwoFromDigi = cms.bool(False),
                doVdriftCorr = cms.bool(True),
                debug = cms.untracked.bool(False),
                tTrigModeConfig = cms.PSet(
                    vPropWire = cms.double(24.4),
                    doTOFCorrection = cms.bool(True),
                    tofCorrType = cms.int32(0),
                    wirePropCorrType = cms.int32(0),
                    tTrigLabel = cms.string(''),
                    doWirePropCorrection = cms.bool(True),
                    doT0Correction = cms.bool(True),
                    debug = cms.untracked.bool(False)
                ),
                maxTime = cms.double(420.0)
            ),
            segmCleanerMode = cms.int32(2),
            perform_delta_rejecting = cms.bool(True),
            MaxT0 = cms.double(100.0),
            performT0_vdriftSegCorrection = cms.bool(False),
            AlphaMaxPhi = cms.double(1.0),
            MaxChi2 = cms.double(4.0),
            hit_afterT0_resolution = cms.double(0.03),
            MaxAllowedHits = cms.uint32(50),
            nSharedHitsMax = cms.int32(2),
            AlphaMaxTheta = cms.double(0.9),
            debug = cms.untracked.bool(False),
            nUnSharedHitsMin = cms.int32(2),
            performT0SegCorrection = cms.bool(False),
            MinT0 = cms.double(-100.0)
        ),
        Reco2DAlgoName = cms.string('DTMeantimerPatternReco'),
        perform_delta_rejecting = cms.bool(True),
        hit_afterT0_resolution = cms.double(0.03),
        performT0_vdriftSegCorrection = cms.bool(False),
        debug = cms.untracked.bool(False),
        nUnSharedHitsMin = cms.int32(2),
        AllDTRecHits = cms.bool(True),
        performT0SegCorrection = cms.bool(False)
    )
)

process.DTTPGMapBlock = cms.PSet(
    DTTPGMap = cms.untracked.PSet(
        wh0st2se11 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se10 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se12 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st1se4 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se12 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se11 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se10 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se1 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se2 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st3se4 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se4 = cms.untracked.vint32(72, 48, 72, 18),
        whm2st1se8 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se9 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se1 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st2se6 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st1se12 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se10 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se11 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st2se12 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se1 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st1se3 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se2 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st3se3 = cms.untracked.vint32(72, 48, 72, 18),
        whm1st1se7 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st2se2 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st1se6 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st4se8 = cms.untracked.vint32(92, 0, 92, 23),
        whm1st3se11 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st2se9 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se8 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st3se10 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se5 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st2se4 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se7 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st3se6 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se1 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st1se9 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st2se3 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st3se2 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st4se14 = cms.untracked.vint32(60, 0, 60, 15),
        whm2st4se13 = cms.untracked.vint32(72, 0, 72, 18),
        whm2st4se12 = cms.untracked.vint32(92, 0, 92, 23),
        whm2st4se11 = cms.untracked.vint32(48, 0, 48, 12),
        whm2st4se10 = cms.untracked.vint32(60, 0, 60, 15),
        whm2st1se6 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se10 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se11 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se12 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st1se7 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st3se7 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st4se9 = cms.untracked.vint32(48, 0, 48, 12),
        whm2st4se8 = cms.untracked.vint32(92, 0, 92, 23),
        whm1st4se12 = cms.untracked.vint32(92, 0, 92, 23),
        whm1st4se13 = cms.untracked.vint32(72, 0, 72, 18),
        whm1st4se10 = cms.untracked.vint32(60, 0, 60, 15),
        whm1st4se11 = cms.untracked.vint32(48, 0, 48, 12),
        whm2st4se3 = cms.untracked.vint32(96, 0, 96, 24),
        whm2st4se2 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se14 = cms.untracked.vint32(60, 0, 60, 15),
        whm2st3se8 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se9 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se6 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se7 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se4 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se5 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se2 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se3 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se1 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se12 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se11 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se10 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st1se12 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se10 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se11 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st4se6 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st4se7 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st4se4 = cms.untracked.vint32(72, 0, 72, 18),
        wh1st4se5 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st4se2 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st2se12 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se11 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se10 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st3se3 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se2 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se1 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se7 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se6 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st3se5 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st4se9 = cms.untracked.vint32(48, 0, 48, 12),
        whm1st1se3 = cms.untracked.vint32(50, 48, 50, 13),
        whm1st1se2 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se1 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st2se8 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se9 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st1se5 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se4 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st2se4 = cms.untracked.vint32(60, 48, 60, 15),
        wh1st2se5 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se6 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se7 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se1 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st2se2 = cms.untracked.vint32(60, 58, 60, 15),
        wh1st4se8 = cms.untracked.vint32(92, 0, 92, 23),
        wh2st3se9 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st1se8 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st4se7 = cms.untracked.vint32(96, 0, 96, 24),
        whm2st4se6 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se4 = cms.untracked.vint32(72, 0, 72, 18),
        whm2st4se5 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st1se8 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se7 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se4 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st4se4 = cms.untracked.vint32(72, 0, 72, 18),
        wh2st1se2 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se3 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se1 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se1 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se2 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se3 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se4 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se5 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se8 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st1se9 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st4se1 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se3 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se2 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se5 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se4 = cms.untracked.vint32(72, 0, 72, 18),
        wh2st4se7 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se6 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se3 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st4se8 = cms.untracked.vint32(92, 0, 92, 23),
        wh0st4se1 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se7 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se6 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se5 = cms.untracked.vint32(96, 0, 96, 24),
        wh0st4se4 = cms.untracked.vint32(72, 0, 72, 18),
        wh0st3se10 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se11 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se12 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st4se11 = cms.untracked.vint32(48, 0, 48, 12),
        wh2st4se10 = cms.untracked.vint32(60, 0, 60, 15),
        wh2st4se13 = cms.untracked.vint32(72, 0, 72, 18),
        wh2st4se12 = cms.untracked.vint32(92, 0, 92, 23),
        wh2st4se14 = cms.untracked.vint32(60, 0, 60, 15),
        wh1st1se5 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st4se1 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se2 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se3 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st2se12 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st4se5 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st2se10 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st4se7 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st4se8 = cms.untracked.vint32(92, 0, 92, 23),
        whm1st4se9 = cms.untracked.vint32(48, 0, 48, 12),
        whm1st2se11 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st3se6 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se7 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se4 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se5 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se2 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se3 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se1 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se7 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st1se5 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st3se8 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st3se9 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st1se6 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st1se8 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st1se9 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st3se12 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se10 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se11 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st1se11 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se10 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se12 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st2se11 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se5 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se4 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se7 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se6 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se1 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se3 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se2 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se9 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se8 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st4se6 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st1se5 = cms.untracked.vint32(50, 58, 50, 13),
        whm1st2se6 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se7 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se4 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se5 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se2 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se3 = cms.untracked.vint32(60, 48, 60, 15),
        whm1st2se1 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se8 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st2se9 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se7 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se6 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se5 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se4 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se3 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se2 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se1 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st1se7 = cms.untracked.vint32(50, 58, 50, 13),
        wh2st2se9 = cms.untracked.vint32(60, 58, 60, 15),
        wh2st2se8 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st4se13 = cms.untracked.vint32(72, 0, 72, 18),
        wh0st1se6 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st4se11 = cms.untracked.vint32(48, 0, 48, 12),
        wh0st4se10 = cms.untracked.vint32(60, 0, 60, 15),
        whm1st3se12 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st4se14 = cms.untracked.vint32(60, 0, 60, 15),
        whm2st1se3 = cms.untracked.vint32(50, 58, 50, 13),
        wh0st4se9 = cms.untracked.vint32(48, 0, 48, 12),
        wh1st4se10 = cms.untracked.vint32(60, 0, 60, 15),
        wh1st4se11 = cms.untracked.vint32(48, 0, 48, 12),
        wh1st4se12 = cms.untracked.vint32(92, 0, 92, 23),
        wh1st4se13 = cms.untracked.vint32(72, 0, 72, 18),
        wh1st4se14 = cms.untracked.vint32(60, 0, 60, 15),
        wh1st1se4 = cms.untracked.vint32(50, 48, 50, 13),
        wh1st1se7 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se6 = cms.untracked.vint32(50, 58, 50, 13),
        wh1st1se9 = cms.untracked.vint32(50, 58, 50, 13),
        whm2st3se10 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st2se3 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st3se11 = cms.untracked.vint32(72, 58, 72, 18),
        whm2st3se12 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st4se12 = cms.untracked.vint32(92, 0, 92, 23),
        wh1st3se9 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se8 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st4se9 = cms.untracked.vint32(48, 0, 48, 12),
        wh1st3se8 = cms.untracked.vint32(72, 58, 72, 18),
        wh0st4se2 = cms.untracked.vint32(96, 0, 96, 24),
        wh2st3se1 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se2 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se3 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se4 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se5 = cms.untracked.vint32(72, 58, 72, 18),
        wh2st3se6 = cms.untracked.vint32(72, 58, 72, 18),
        wh1st4se3 = cms.untracked.vint32(96, 0, 96, 24),
        whm2st4se1 = cms.untracked.vint32(96, 0, 96, 24),
        wh1st4se1 = cms.untracked.vint32(96, 0, 96, 24),
        whm1st2se10 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se11 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se10 = cms.untracked.vint32(60, 58, 60, 15),
        whm2st2se12 = cms.untracked.vint32(60, 58, 60, 15),
        wh0st2se5 = cms.untracked.vint32(60, 58, 60, 15),
        whm1st3se9 = cms.untracked.vint32(72, 58, 72, 18),
        whm1st3se8 = cms.untracked.vint32(72, 58, 72, 18)
    )
)

process.DTTPGParametersBlock = cms.PSet(
    DTTPGParameters = cms.PSet(
        SectCollParameters = cms.PSet(
            SCCSP5 = cms.int32(0),
            SCCSP2 = cms.int32(0),
            SCCSP3 = cms.int32(0),
            SCECF4 = cms.bool(False),
            SCCSP1 = cms.int32(0),
            SCECF2 = cms.bool(False),
            SCECF3 = cms.bool(False),
            SCCSP4 = cms.int32(0),
            SCECF1 = cms.bool(False),
            Debug = cms.untracked.bool(False)
        ),
        Debug = cms.untracked.bool(False),
        TUParameters = cms.PSet(
            TracoParameters = cms.PSet(
                SPRGCOMP = cms.int32(2),
                FHTMSK = cms.int32(0),
                DD = cms.int32(18),
                SSLMSK = cms.int32(0),
                LVALIDIFH = cms.int32(0),
                Debug = cms.untracked.int32(0),
                FSLMSK = cms.int32(0),
                SHTPRF = cms.int32(1),
                SHTMSK = cms.int32(0),
                TRGENB3 = cms.int32(1),
                SHISM = cms.int32(0),
                IBTIOFF = cms.int32(0),
                KPRGCOM = cms.int32(255),
                KRAD = cms.int32(0),
                FLTMSK = cms.int32(1),
                LTS = cms.int32(0),
                SLTMSK = cms.int32(1),
                FPRGCOMP = cms.int32(2),
                TRGENB9 = cms.int32(1),
                TRGENB8 = cms.int32(1),
                FHTPRF = cms.int32(1),
                LTF = cms.int32(0),
                TRGENB1 = cms.int32(1),
                TRGENB0 = cms.int32(1),
                FHISM = cms.int32(0),
                TRGENB2 = cms.int32(1),
                TRGENB5 = cms.int32(1),
                TRGENB4 = cms.int32(1),
                TRGENB7 = cms.int32(1),
                TRGENB6 = cms.int32(1),
                TRGENB15 = cms.int32(1),
                TRGENB14 = cms.int32(1),
                TRGENB11 = cms.int32(1),
                TRGENB10 = cms.int32(1),
                TRGENB13 = cms.int32(1),
                TRGENB12 = cms.int32(1),
                REUSEO = cms.int32(1),
                REUSEI = cms.int32(1),
                BTIC = cms.int32(32)
            ),
            TSPhiParameters = cms.PSet(
                TSMNOE1 = cms.bool(True),
                TSMNOE2 = cms.bool(False),
                TSSMSK1 = cms.int32(312),
                TSTREN9 = cms.bool(True),
                TSTREN8 = cms.bool(True),
                TSTREN11 = cms.bool(True),
                TSTREN3 = cms.bool(True),
                TSTREN2 = cms.bool(True),
                TSTREN1 = cms.bool(True),
                TSTREN0 = cms.bool(True),
                TSTREN7 = cms.bool(True),
                TSTREN6 = cms.bool(True),
                TSTREN5 = cms.bool(True),
                TSTREN4 = cms.bool(True),
                TSSCCE1 = cms.bool(True),
                TSSCCE2 = cms.bool(False),
                TSMCCE2 = cms.bool(False),
                TSTREN19 = cms.bool(True),
                TSMCCE1 = cms.bool(True),
                TSTREN17 = cms.bool(True),
                TSTREN16 = cms.bool(True),
                TSTREN15 = cms.bool(True),
                TSTREN14 = cms.bool(True),
                TSTREN13 = cms.bool(True),
                TSTREN12 = cms.bool(True),
                TSSMSK2 = cms.int32(312),
                TSTREN10 = cms.bool(True),
                TSMMSK2 = cms.int32(312),
                TSMMSK1 = cms.int32(312),
                TSMHSP = cms.int32(1),
                TSSNOE2 = cms.bool(False),
                TSSNOE1 = cms.bool(True),
                TSSCGS2 = cms.bool(True),
                TSSCCEC = cms.bool(False),
                TSMCCEC = cms.bool(False),
                TSMHTE2 = cms.bool(False),
                Debug = cms.untracked.bool(False),
                TSSHTE2 = cms.bool(False),
                TSMCGS1 = cms.bool(True),
                TSMCGS2 = cms.bool(True),
                TSSHTE1 = cms.bool(True),
                TSTREN22 = cms.bool(True),
                TSSNOEC = cms.bool(False),
                TSTREN20 = cms.bool(True),
                TSTREN21 = cms.bool(True),
                TSMGS1 = cms.int32(1),
                TSMGS2 = cms.int32(1),
                TSSHTEC = cms.bool(False),
                TSMWORD = cms.int32(255),
                TSMHTEC = cms.bool(False),
                TSSCGS1 = cms.bool(True),
                TSTREN23 = cms.bool(True),
                TSSGS2 = cms.int32(1),
                TSMNOEC = cms.bool(False),
                TSSGS1 = cms.int32(1),
                TSTREN18 = cms.bool(True),
                TSMHTE1 = cms.bool(True)
            ),
            TSThetaParameters = cms.PSet(
                Debug = cms.untracked.bool(False)
            ),
            Debug = cms.untracked.bool(False),
            BtiParameters = cms.PSet(
                KACCTHETA = cms.int32(1),
                WEN8 = cms.int32(1),
                ACH = cms.int32(1),
                DEAD = cms.int32(31),
                ACL = cms.int32(2),
                PTMS20 = cms.int32(1),
                Debug = cms.untracked.int32(0),
                PTMS22 = cms.int32(1),
                PTMS23 = cms.int32(1),
                PTMS24 = cms.int32(1),
                PTMS25 = cms.int32(1),
                PTMS26 = cms.int32(1),
                PTMS27 = cms.int32(1),
                PTMS28 = cms.int32(1),
                PTMS29 = cms.int32(1),
                SET = cms.int32(7),
                RON = cms.bool(True),
                WEN2 = cms.int32(1),
                LL = cms.int32(2),
                LH = cms.int32(21),
                WEN3 = cms.int32(1),
                RE43 = cms.int32(2),
                WEN0 = cms.int32(1),
                RL = cms.int32(42),
                WEN1 = cms.int32(1),
                RH = cms.int32(61),
                LTS = cms.int32(3),
                CH = cms.int32(41),
                CL = cms.int32(22),
                PTMS15 = cms.int32(1),
                PTMS14 = cms.int32(1),
                PTMS17 = cms.int32(1),
                PTMS16 = cms.int32(1),
                PTMS11 = cms.int32(1),
                PTMS10 = cms.int32(1),
                PTMS13 = cms.int32(1),
                PTMS12 = cms.int32(1),
                XON = cms.bool(False),
                WEN7 = cms.int32(1),
                WEN4 = cms.int32(1),
                WEN5 = cms.int32(1),
                PTMS19 = cms.int32(1),
                PTMS18 = cms.int32(1),
                PTMS31 = cms.int32(0),
                PTMS30 = cms.int32(0),
                PTMS5 = cms.int32(1),
                PTMS4 = cms.int32(1),
                PTMS7 = cms.int32(1),
                PTMS6 = cms.int32(1),
                PTMS1 = cms.int32(0),
                PTMS0 = cms.int32(0),
                PTMS3 = cms.int32(0),
                WEN6 = cms.int32(1),
                PTMS2 = cms.int32(0),
                PTMS9 = cms.int32(1),
                PTMS8 = cms.int32(1),
                ST43 = cms.int32(42),
                AC2 = cms.int32(3),
                AC1 = cms.int32(0),
                KMAX = cms.int32(64),
                PTMS21 = cms.int32(1)
            ),
            LutParameters = cms.PSet(
                WHEEL = cms.untracked.int32(-1),
                Debug = cms.untracked.bool(False),
                BTIC = cms.untracked.int32(0),
                XCN = cms.untracked.double(0),
                D = cms.untracked.double(0)
            )
        )
    )
)

process.DTTimingExtractorBlock = cms.PSet(
    DTTimingParameters = cms.PSet(
        MatchParameters = cms.PSet(
            CSCsegments = cms.InputTag("cscSegments"),
            DTsegments = cms.InputTag("dt4DSegments"),
            DTradius = cms.double(0.01),
            TightMatchDT = cms.bool(False),
            TightMatchCSC = cms.bool(True)
        ),
        HitError = cms.double(6.0),
        DoWireCorr = cms.bool(True),
        PruneCut = cms.double(10000.0),
        DTsegments = cms.InputTag("dt4DSegments"),
        DropTheta = cms.bool(True),
        RequireBothProjections = cms.bool(False),
        HitsMin = cms.int32(3),
        DTTimeOffset = cms.double(0.0),
        debug = cms.bool(False),
        UseSegmentT0 = cms.bool(False),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite'),
            RPCLayers = cms.bool(True)
        )
    )
)

process.DefaultAlgorithms = cms.PSet(
    CutToAvoidSignal = cms.double(2.0),
    slopeY = cms.int32(4),
    slopeX = cms.int32(3),
    PedestalSubtractionFedMode = cms.bool(False),
    Fraction = cms.double(0.2),
    minStripsToFit = cms.uint32(4),
    consecThreshold = cms.uint32(5),
    hitStripThreshold = cms.uint32(40),
    Deviation = cms.uint32(25),
    CommonModeNoiseSubtractionMode = cms.string('IteratedMedian'),
    filteredBaselineDerivativeSumSquare = cms.double(30),
    ApplyBaselineCleaner = cms.bool(True),
    doAPVRestore = cms.bool(True),
    TruncateInSuppressor = cms.bool(True),
    restoreThreshold = cms.double(0.5),
    APVInspectMode = cms.string('BaselineFollower'),
    ForceNoRestore = cms.bool(False),
    useRealMeanCM = cms.bool(False),
    ApplyBaselineRejection = cms.bool(True),
    DeltaCMThreshold = cms.uint32(20),
    nSigmaNoiseDerTh = cms.uint32(4),
    nSaturatedStrip = cms.uint32(2),
    SiStripFedZeroSuppressionMode = cms.uint32(4),
    useCMMeanMap = cms.bool(False),
    SelfSelectRestoreAlgo = cms.bool(False),
    distortionThreshold = cms.uint32(20),
    filteredBaselineMax = cms.double(6),
    Iterations = cms.int32(3),
    CleaningSequence = cms.uint32(1),
    nSmooth = cms.uint32(9),
    APVRestoreMode = cms.string('BaselineFollower'),
    MeanCM = cms.int32(0)
)

process.DefaultClusterizer = cms.PSet(
    ChannelThreshold = cms.double(2.0),
    MaxSequentialBad = cms.uint32(1),
    Algorithm = cms.string('ThreeThresholdAlgorithm'),
    MaxSequentialHoles = cms.uint32(0),
    MaxAdjacentBad = cms.uint32(0),
    QualityLabel = cms.string(''),
    SeedThreshold = cms.double(3.0),
    RemoveApvShots = cms.bool(True),
    ClusterThreshold = cms.double(5.0)
)

process.GlobalMuonRefitter = cms.PSet(
    TrackerSkipSection = cms.int32(-1),
    MuonHitsOption = cms.int32(1),
    Smoother = cms.string('KFSmootherForRefitInsideOut'),
    RefitDirection = cms.string('insideOut'),
    CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
    Propagator = cms.string('SmartPropagatorAnyRK'),
    TrackerSkipSystem = cms.int32(-1),
    DoPredictionsOnly = cms.bool(False),
    Chi2ProbabilityCut = cms.double(30.0),
    PropDirForCosmics = cms.bool(False),
    HitThreshold = cms.int32(1),
    TrackerRecHitBuilder = cms.string('WithTrackAngle'),
    DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
    Chi2CutCSC = cms.double(1.0),
    Chi2CutRPC = cms.double(1.0),
    Fitter = cms.string('KFFitterForRefitInsideOut'),
    RPCRecSegmentLabel = cms.InputTag("rpcRecHits"),
    MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
    DYTthrs = cms.vint32(10, 5),
    RefitRPCHits = cms.bool(True),
    Chi2CutDT = cms.double(30.0),
    PtCut = cms.double(1.0),
    SkipStation = cms.int32(-1)
)

process.GlobalMuonTrackMatcher = cms.PSet(
    GlobalMuonTrackMatcher = cms.PSet(
        Pt_threshold1 = cms.double(0.0),
        DeltaDCut_3 = cms.double(15.0),
        MinP = cms.double(2.5),
        MinPt = cms.double(1.0),
        Chi2Cut_1 = cms.double(50.0),
        Pt_threshold2 = cms.double(999999999.0),
        LocChi2Cut = cms.double(20.0),
        Eta_threshold = cms.double(1.2),
        Quality_3 = cms.double(7.0),
        Quality_2 = cms.double(15.0),
        Chi2Cut_2 = cms.double(50.0),
        Chi2Cut_3 = cms.double(200.0),
        DeltaDCut_1 = cms.double(2.5),
        DeltaRCut_2 = cms.double(0.2),
        DeltaRCut_3 = cms.double(1.0),
        DeltaDCut_2 = cms.double(10.0),
        DeltaRCut_1 = cms.double(0.1),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        Quality_1 = cms.double(20.0)
    )
)

process.GlobalTrajectoryBuilderCommon = cms.PSet(
    MuonTrackingRegionBuilder = cms.PSet(
        EtaR_UpperLimit_Par1 = cms.double(0.25),
        EtaR_UpperLimit_Par2 = cms.double(0.15),
        OnDemand = cms.double(-1.0),
        Rescale_Dz = cms.double(3.0),
        Eta_min = cms.double(0.1),
        Rescale_phi = cms.double(3.0),
        Eta_fixed = cms.double(0.2),
        DeltaZ_Region = cms.double(15.9),
        MeasurementTrackerName = cms.string(''),
        PhiR_UpperLimit_Par2 = cms.double(0.2),
        vertexCollection = cms.InputTag("pixelVertices"),
        Phi_fixed = cms.double(0.2),
        DeltaR = cms.double(0.2),
        EscapePt = cms.double(1.5),
        UseFixedRegion = cms.bool(False),
        PhiR_UpperLimit_Par1 = cms.double(0.6),
        Rescale_eta = cms.double(3.0),
        Phi_min = cms.double(0.1),
        UseVertex = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    ),
    GlobalMuonTrackMatcher = cms.PSet(
        Pt_threshold1 = cms.double(0.0),
        DeltaDCut_3 = cms.double(15.0),
        MinP = cms.double(2.5),
        MinPt = cms.double(1.0),
        Chi2Cut_1 = cms.double(50.0),
        Pt_threshold2 = cms.double(999999999.0),
        LocChi2Cut = cms.double(20.0),
        Eta_threshold = cms.double(1.2),
        Quality_3 = cms.double(7.0),
        Quality_2 = cms.double(15.0),
        Chi2Cut_2 = cms.double(50.0),
        Chi2Cut_3 = cms.double(200.0),
        DeltaDCut_1 = cms.double(2.5),
        DeltaRCut_2 = cms.double(0.2),
        DeltaRCut_3 = cms.double(1.0),
        DeltaDCut_2 = cms.double(10.0),
        DeltaRCut_1 = cms.double(0.1),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        Quality_1 = cms.double(20.0)
    ),
    ScaleTECyFactor = cms.double(-1.0),
    GlbRefitterParameters = cms.PSet(
        TrackerSkipSection = cms.int32(-1),
        DoPredictionsOnly = cms.bool(False),
        PropDirForCosmics = cms.bool(False),
        HitThreshold = cms.int32(1),
        MuonHitsOption = cms.int32(1),
        Chi2CutRPC = cms.double(1.0),
        Fitter = cms.string('GlbMuKFFitter'),
        DTRecSegmentLabel = cms.InputTag("dt4DSegments"),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RefitDirection = cms.string('insideOut'),
        CSCRecSegmentLabel = cms.InputTag("cscSegments"),
        DYTthrs = cms.vint32(30, 15),
        Chi2CutCSC = cms.double(150.0),
        Chi2CutDT = cms.double(10.0),
        RefitRPCHits = cms.bool(True),
        PtCut = cms.double(1.0),
        Chi2ProbabilityCut = cms.double(30.0),
        SkipStation = cms.int32(-1),
        Propagator = cms.string('SmartPropagatorAnyRK'),
        TrackerSkipSystem = cms.int32(-1)
    ),
    ScaleTECxFactor = cms.double(-1.0),
    TrackerRecHitBuilder = cms.string('WithTrackAngle'),
    MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
    RefitRPCHits = cms.bool(True),
    PCut = cms.double(2.5),
    TrackTransformer = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True)
    ),
    PtCut = cms.double(1.0),
    TrackerPropagator = cms.string('SteppingHelixPropagatorAny')
)

process.HcalNoiseParameterSet = cms.PSet(
    lMinRatio = cms.double(-999.0),
    lMaxHighEHitTime = cms.double(9999.0),
    pMinHighEHitTime = cms.double(-4.0),
    lMaxLowEHitTime = cms.double(9999.0),
    TS4TS5EnergyThreshold = cms.double(50),
    lMinHPDHits = cms.int32(17),
    tMinRBXHits = cms.int32(50),
    TS4TS5UpperThreshold = cms.vdouble(70, 90, 100, 400, 4000),
    minEZeros = cms.double(10.0),
    pMinRBXHits = cms.int32(20),
    tMinHPDHits = cms.int32(16),
    minRecHitE = cms.double(1.5),
    hlMaxRBXEMF = cms.double(0.01),
    pMinEEMF = cms.double(10.0),
    pMaxRatio = cms.double(0.85),
    minEEMF = cms.double(50.0),
    pMaxHighEHitTime = cms.double(5.0),
    pMaxLowEHitTime = cms.double(6.0),
    minHighHitE = cms.double(25.0),
    lMinZeros = cms.int32(10),
    lMinRBXHits = cms.int32(999),
    tMaxRatio = cms.double(999.0),
    minLowHitE = cms.double(10.0),
    pMinRatio = cms.double(0.75),
    pMaxRBXEMF = cms.double(0.02),
    pMinE = cms.double(40.0),
    pMaxHPDEMF = cms.double(0.02),
    tMinHighEHitTime = cms.double(-7.0),
    TS4TS5LowerCut = cms.vdouble(-1, -0.7, -0.4, -0.2, -0.08, 
        0, 0.1),
    lMaxRatio = cms.double(999.0),
    lMinHighEHitTime = cms.double(-9999.0),
    pMinEZeros = cms.double(5.0),
    pMinERatio = cms.double(25.0),
    pMinZeros = cms.int32(4),
    tMinRatio = cms.double(-999.0),
    TS4TS5UpperCut = cms.vdouble(1, 0.8, 0.75, 0.72, 0.72),
    pMinLowEHitTime = cms.double(-6.0),
    pMinHPDHits = cms.int32(10),
    lMinLowEHitTime = cms.double(-9999.0),
    tMinHPDNoOtherHits = cms.int32(9),
    minERatio = cms.double(50.0),
    tMinLowEHitTime = cms.double(-9999.0),
    tMaxHighEHitTime = cms.double(6.0),
    tMinZeros = cms.int32(8),
    lMinHPDNoOtherHits = cms.int32(10),
    TS4TS5LowerThreshold = cms.vdouble(100, 120, 150, 200, 300, 
        400, 500),
    tMaxLowEHitTime = cms.double(9999.0),
    pMinHPDNoOtherHits = cms.int32(7),
    hlMaxHPDEMF = cms.double(-9999.0)
)

process.HcalReLabel = cms.PSet(
    RelabelRules = cms.untracked.PSet(
        Eta16 = cms.untracked.vint32(1, 1, 2, 2, 2, 
            2, 2, 2, 2, 3, 
            3, 3, 3, 3, 3, 
            3, 3, 3, 3),
        Eta17 = cms.untracked.vint32(1, 1, 2, 2, 3, 
            3, 3, 4, 4, 4, 
            4, 4, 5, 5, 5, 
            5, 5, 5, 5),
        Eta1 = cms.untracked.vint32(1, 2, 2, 2, 3, 
            3, 3, 3, 3, 3, 
            3, 3, 3, 3, 3, 
            3, 3, 3, 3),
        CorrectPhi = cms.untracked.bool(False)
    ),
    RelabelHits = cms.untracked.bool(False)
)

process.JPTZSPCorrectorICone5 = cms.PSet(
    VectorialCorrection = cms.bool(True),
    ElectronIds = cms.InputTag("JPTeidTight"),
    UseMuons = cms.bool(True),
    Muons = cms.InputTag("muons"),
    UseTrackQuality = cms.bool(True),
    JetTracksAssociationAtVertex = cms.InputTag("iterativeCone5JetTracksAssociatorAtVertex"),
    LeakageMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_362_TrackLeakage.txt'),
    UseOutOfConeTracks = cms.bool(True),
    UseInConeTracks = cms.bool(True),
    UseOutOfVertexTracks = cms.bool(True),
    UseResponseInVecCorr = cms.bool(False),
    ResponseMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_3110_response.txt'),
    EfficiencyMap = cms.string('CondFormats/JetMETObjects/data/CMSSW_362_TrackNonEff.txt'),
    UsePions = cms.bool(True),
    Electrons = cms.InputTag("gsfElectrons"),
    JetSplitMerge = cms.int32(0),
    DzVertexCut = cms.double(0.2),
    MaxJetEta = cms.double(3.0),
    Verbose = cms.bool(True),
    UseElectrons = cms.bool(True),
    JetTracksAssociationAtCaloFace = cms.InputTag("iterativeCone5JetTracksAssociatorAtCaloFace"),
    PtErrorQuality = cms.double(0.05),
    TrackQuality = cms.string('highPurity'),
    UseEfficiency = cms.bool(True)
)

process.JetIDParams = cms.PSet(
    eeRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    hbheRecHitsColl = cms.InputTag("hbhereco"),
    rpcRecHits = cms.InputTag("rpcRecHits"),
    hoRecHitsColl = cms.InputTag("horeco"),
    ebRecHitsColl = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    hfRecHitsColl = cms.InputTag("hfreco"),
    useRecHits = cms.bool(True)
)

process.LutParametersBlock = cms.PSet(
    LutParameters = cms.PSet(
        WHEEL = cms.untracked.int32(-1),
        Debug = cms.untracked.bool(False),
        BTIC = cms.untracked.int32(0),
        XCN = cms.untracked.double(0),
        D = cms.untracked.double(0)
    )
)

process.METSignificance_params = cms.PSet(
    resolutionsEra = cms.string('Spring10'),
    HB_EtResPar = cms.vdouble(0.0, 1.22, 0.05),
    EE_PhiResPar = cms.vdouble(0.02511),
    jdpt9 = cms.vdouble(0.843, 0.885, 1.245, 1.665, 1.944, 
        1.981, 1.972, 2.875, 3.923, 7.51),
    jdpt8 = cms.vdouble(0.889, 0.939, 1.166, 1.365, 1.553, 
        1.805, 2.06, 2.22, 2.268, 2.247),
    jdpt7 = cms.vdouble(1.094, 1.139, 1.436, 1.672, 1.831, 
        2.05, 2.267, 2.549, 2.785, 2.86),
    jdpt6 = cms.vdouble(1.213, 1.298, 1.716, 2.015, 2.191, 
        2.612, 2.863, 2.879, 2.925, 2.902),
    jdpt5 = cms.vdouble(1.049, 1.149, 1.607, 1.869, 2.012, 
        2.219, 2.289, 2.412, 2.695, 2.865),
    jdpt4 = cms.vdouble(0.85, 0.961, 1.337, 1.593, 1.854, 
        2.005, 2.209, 2.533, 2.812, 3.047),
    jdpt3 = cms.vdouble(0.929, 1.04, 1.46, 1.74, 2.042, 
        2.289, 2.639, 2.837, 2.946, 2.971),
    jdpt2 = cms.vdouble(0.841, 0.937, 1.316, 1.605, 1.919, 
        2.295, 2.562, 2.722, 2.943, 3.293),
    jdpt1 = cms.vdouble(0.718, 0.813, 1.133, 1.384, 1.588, 
        1.841, 2.115, 2.379, 2.508, 2.772),
    jdpt0 = cms.vdouble(0.749, 0.829, 1.099, 1.355, 1.584, 
        1.807, 2.035, 2.217, 2.378, 2.591),
    HE_EtResPar = cms.vdouble(0.0, 1.3, 0.05),
    HF_PhiResPar = cms.vdouble(0.05022),
    PF_PhiResType7 = cms.vdouble(0.02511),
    HE_PhiResPar = cms.vdouble(0.02511),
    EE_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    PF_PhiResType2 = cms.vdouble(0.002),
    PF_PhiResType3 = cms.vdouble(0.002),
    HF_EtResPar = cms.vdouble(0.0, 1.82, 0.09),
    resolutionsAlgo = cms.string('AK5PF'),
    PF_PhiResType6 = cms.vdouble(0.02511),
    HB_PhiResPar = cms.vdouble(0.02511),
    PF_PhiResType4 = cms.vdouble(0.0028, 0.0, 0.0022),
    PF_PhiResType5 = cms.vdouble(0.1, 0.1, 0.13),
    ptresolthreshold = cms.double(10.0),
    EB_EtResPar = cms.vdouble(0.2, 0.03, 0.005),
    jdphi8 = cms.vdouble(0.059, 0.057, 0.051, 0.044, 0.038, 
        0.035, 0.037, 0.032, 0.028, 0.028),
    EB_PhiResPar = cms.vdouble(0.00502),
    jdphi9 = cms.vdouble(0.062, 0.059, 0.053, 0.047, 0.042, 
        0.045, 0.036, 0.032, 0.034, 0.044),
    PF_PhiResType1 = cms.vdouble(0.002),
    jdphi4 = cms.vdouble(0.042, 0.042, 0.043, 0.042, 0.038, 
        0.036, 0.036, 0.033, 0.031, 0.031),
    HO_PhiResPar = cms.vdouble(0.02511),
    jdphi2 = cms.vdouble(0.04, 0.04, 0.04, 0.04, 0.04, 
        0.038, 0.036, 0.035, 0.034, 0.033),
    jdphi1 = cms.vdouble(0.034, 0.035, 0.035, 0.035, 0.035, 
        0.034, 0.031, 0.03, 0.029, 0.027),
    jdphi0 = cms.vdouble(0.034, 0.034, 0.034, 0.034, 0.032, 
        0.031, 0.028, 0.027, 0.027, 0.027),
    jdphi7 = cms.vdouble(0.077, 0.072, 0.059, 0.05, 0.045, 
        0.042, 0.039, 0.039, 0.037, 0.031),
    jdphi6 = cms.vdouble(0.084, 0.08, 0.072, 0.065, 0.066, 
        0.06, 0.051, 0.049, 0.045, 0.045),
    jdphi5 = cms.vdouble(0.069, 0.069, 0.064, 0.058, 0.053, 
        0.049, 0.049, 0.043, 0.039, 0.04),
    HO_EtResPar = cms.vdouble(0.0, 1.3, 0.005),
    jdphi3 = cms.vdouble(0.042, 0.043, 0.044, 0.043, 0.041, 
        0.039, 0.039, 0.036, 0.034, 0.031),
    PF_EtResType5 = cms.vdouble(0.41, 0.52, 0.25),
    PF_EtResType4 = cms.vdouble(0.042, 0.1, 0.0),
    PF_EtResType7 = cms.vdouble(0.0, 1.22, 0.05),
    PF_EtResType6 = cms.vdouble(0.0, 1.22, 0.05),
    PF_EtResType1 = cms.vdouble(0.05, 0, 0),
    PF_EtResType3 = cms.vdouble(0.05, 0, 0),
    PF_EtResType2 = cms.vdouble(0.05, 0, 0)
)

process.MIdIsoExtractorPSetBlock = cms.PSet(
    TrackExtractorPSet = cms.PSet(
        Diff_z = cms.double(0.2),
        inputTrackCollection = cms.InputTag("generalTracks"),
        BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
        ComponentName = cms.string('TrackExtractor'),
        DR_Max = cms.double(1.0),
        Diff_r = cms.double(0.1),
        Chi2Prob_Min = cms.double(-1.0),
        DR_Veto = cms.double(0.01),
        NHits_Min = cms.uint32(0),
        Chi2Ndof_Max = cms.double(1e+64),
        Pt_Min = cms.double(-1.0),
        DepositLabel = cms.untracked.string(''),
        BeamlineOption = cms.string('BeamSpotFromEvent')
    ),
    ecalDepositName = cms.string('ecal'),
    JetExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        ExcludeMuonVeto = cms.bool(True),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(0.5),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(0.5),
            dREcalPreselection = cms.double(0.5),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(0.5),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        ComponentName = cms.string('JetExtractor'),
        DR_Max = cms.double(1.0),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        JetCollectionLabel = cms.InputTag("ak5CaloJets"),
        DR_Veto = cms.double(0.1),
        Threshold = cms.double(5.0)
    ),
    hcalDepositName = cms.string('hcal'),
    CaloExtractorPSet = cms.PSet(
        PrintTimeReport = cms.untracked.bool(False),
        DR_Max = cms.double(1.0),
        Threshold_E = cms.double(0.2),
        DepositInstanceLabels = cms.vstring('ecal', 
            'hcal', 
            'ho'),
        Noise_HE = cms.double(0.2),
        NoiseTow_EB = cms.double(0.04),
        NoiseTow_EE = cms.double(0.15),
        Threshold_H = cms.double(0.5),
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
            RPCLayers = cms.bool(False),
            UseMuonNavigation = cms.untracked.bool(False)
        ),
        Noise_HO = cms.double(0.2),
        PropagatorName = cms.string('SteppingHelixPropagatorAny'),
        DepositLabel = cms.untracked.string('Cal'),
        UseRecHitsFlag = cms.bool(False),
        TrackAssociatorParameters = cms.PSet(
            muonMaxDistanceSigmaX = cms.double(0.0),
            muonMaxDistanceSigmaY = cms.double(0.0),
            CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
            dRHcal = cms.double(1.0),
            dRPreshowerPreselection = cms.double(0.2),
            CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
            useEcal = cms.bool(False),
            dREcal = cms.double(1.0),
            dREcalPreselection = cms.double(1.0),
            HORecHitCollectionLabel = cms.InputTag("horeco"),
            dRMuon = cms.double(9999.0),
            propagateAllDirections = cms.bool(True),
            muonMaxDistanceX = cms.double(5.0),
            muonMaxDistanceY = cms.double(5.0),
            useHO = cms.bool(False),
            trajectoryUncertaintyTolerance = cms.double(-1.0),
            usePreshower = cms.bool(False),
            DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
            EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
            dRHcalPreselection = cms.double(1.0),
            useMuon = cms.bool(False),
            useCalo = cms.bool(True),
            accountForTrajectoryChangeCalo = cms.bool(False),
            EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
            dRMuonPreselection = cms.double(0.2),
            truthMatch = cms.bool(False),
            HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
            useHcal = cms.bool(False)
        ),
        Threshold_HO = cms.double(0.5),
        Noise_EE = cms.double(0.1),
        Noise_EB = cms.double(0.025),
        DR_Veto_H = cms.double(0.1),
        CenterConeOnCalIntersection = cms.bool(False),
        ComponentName = cms.string('CaloExtractorByAssociator'),
        Noise_HB = cms.double(0.2),
        DR_Veto_E = cms.double(0.07),
        DR_Veto_HO = cms.double(0.1)
    ),
    trackDepositName = cms.string('tracker'),
    jetDepositName = cms.string('jets'),
    hoDepositName = cms.string('ho')
)

process.MIsoCaloExtractorByAssociatorHitsBlock = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(1.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(1.0),
        useMuon = cms.bool(False),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    ),
    PrintTimeReport = cms.untracked.bool(False),
    DR_Max = cms.double(1.0),
    DepositInstanceLabels = cms.vstring('ecal', 
        'hcal', 
        'ho'),
    Noise_HE = cms.double(0.2),
    NoiseTow_EB = cms.double(0.04),
    NoiseTow_EE = cms.double(0.15),
    Threshold_H = cms.double(0.1),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
        RPCLayers = cms.bool(False),
        UseMuonNavigation = cms.untracked.bool(False)
    ),
    Noise_HO = cms.double(0.2),
    PropagatorName = cms.string('SteppingHelixPropagatorAny'),
    DepositLabel = cms.untracked.string('Cal'),
    UseRecHitsFlag = cms.bool(True),
    Threshold_HO = cms.double(0.1),
    Noise_EE = cms.double(0.1),
    Noise_EB = cms.double(0.025),
    DR_Veto_H = cms.double(0.1),
    CenterConeOnCalIntersection = cms.bool(False),
    ComponentName = cms.string('CaloExtractorByAssociator'),
    Noise_HB = cms.double(0.2),
    DR_Veto_E = cms.double(0.07),
    DR_Veto_HO = cms.double(0.1),
    Threshold_E = cms.double(0.025)
)

process.MIsoCaloExtractorByAssociatorTowersBlock = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(1.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(False),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(False),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(1.0),
        useMuon = cms.bool(False),
        useCalo = cms.bool(True),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(False)
    ),
    PrintTimeReport = cms.untracked.bool(False),
    DR_Max = cms.double(1.0),
    DepositInstanceLabels = cms.vstring('ecal', 
        'hcal', 
        'ho'),
    Noise_HE = cms.double(0.2),
    NoiseTow_EB = cms.double(0.04),
    NoiseTow_EE = cms.double(0.15),
    Threshold_H = cms.double(0.5),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
        RPCLayers = cms.bool(False),
        UseMuonNavigation = cms.untracked.bool(False)
    ),
    Noise_HO = cms.double(0.2),
    PropagatorName = cms.string('SteppingHelixPropagatorAny'),
    DepositLabel = cms.untracked.string('Cal'),
    UseRecHitsFlag = cms.bool(False),
    Threshold_HO = cms.double(0.5),
    Noise_EE = cms.double(0.1),
    Noise_EB = cms.double(0.025),
    DR_Veto_H = cms.double(0.1),
    CenterConeOnCalIntersection = cms.bool(False),
    ComponentName = cms.string('CaloExtractorByAssociator'),
    Noise_HB = cms.double(0.2),
    DR_Veto_E = cms.double(0.07),
    DR_Veto_HO = cms.double(0.1),
    Threshold_E = cms.double(0.2)
)

process.MIsoCaloExtractorEcalBlock = cms.PSet(
    DR_Veto_H = cms.double(0.1),
    Vertex_Constraint_Z = cms.bool(False),
    Threshold_H = cms.double(0.5),
    ComponentName = cms.string('CaloExtractor'),
    Threshold_E = cms.double(0.2),
    DR_Max = cms.double(1.0),
    DR_Veto_E = cms.double(0.07),
    Weight_E = cms.double(1.0),
    Vertex_Constraint_XY = cms.bool(False),
    DepositLabel = cms.untracked.string('EcalPlusHcal'),
    CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
    Weight_H = cms.double(0.0)
)

process.MIsoCaloExtractorHLTBlock = cms.PSet(
    DR_Veto_H = cms.double(0.1),
    Vertex_Constraint_Z = cms.bool(False),
    Threshold_H = cms.double(0.5),
    ComponentName = cms.string('CaloExtractor'),
    Threshold_E = cms.double(0.2),
    DR_Max = cms.double(1.0),
    DR_Veto_E = cms.double(0.07),
    Weight_E = cms.double(1.5),
    Vertex_Constraint_XY = cms.bool(False),
    DepositLabel = cms.untracked.string('EcalPlusHcal'),
    CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
    Weight_H = cms.double(1.0)
)

process.MIsoCaloExtractorHcalBlock = cms.PSet(
    DR_Veto_H = cms.double(0.1),
    Vertex_Constraint_Z = cms.bool(False),
    Threshold_H = cms.double(0.5),
    ComponentName = cms.string('CaloExtractor'),
    Threshold_E = cms.double(0.2),
    DR_Max = cms.double(1.0),
    DR_Veto_E = cms.double(0.07),
    Weight_E = cms.double(0.0),
    Vertex_Constraint_XY = cms.bool(False),
    DepositLabel = cms.untracked.string('EcalPlusHcal'),
    CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
    Weight_H = cms.double(1.0)
)

process.MIsoDepositGlobalIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    inputMuonCollection = cms.InputTag("globalMuons"),
    MultipleDepositsFlag = cms.bool(False),
    MuonTrackRefType = cms.string('track'),
    InputType = cms.string('TrackCollection')
)

process.MIsoDepositGlobalMultiIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    inputMuonCollection = cms.InputTag("globalMuons"),
    MultipleDepositsFlag = cms.bool(True),
    MuonTrackRefType = cms.string('track'),
    InputType = cms.string('TrackCollection')
)

process.MIsoDepositParamGlobalIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
    MultipleDepositsFlag = cms.bool(False),
    MuonTrackRefType = cms.string('track'),
    InputType = cms.string('MuonCollection')
)

process.MIsoDepositParamGlobalMultiIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
    MultipleDepositsFlag = cms.bool(True),
    MuonTrackRefType = cms.string('track'),
    InputType = cms.string('MuonCollection')
)

process.MIsoDepositParamGlobalViewIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
    MultipleDepositsFlag = cms.bool(False),
    MuonTrackRefType = cms.string('bestTrkSta'),
    InputType = cms.string('MuonCollection')
)

process.MIsoDepositParamGlobalViewMultiIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    inputMuonCollection = cms.InputTag("paramMuons","ParamGlobalMuons"),
    MultipleDepositsFlag = cms.bool(True),
    MuonTrackRefType = cms.string('bestTrkSta'),
    InputType = cms.string('MuonCollection')
)

process.MIsoDepositViewIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    inputMuonCollection = cms.InputTag("muons1stStep"),
    MultipleDepositsFlag = cms.bool(False),
    MuonTrackRefType = cms.string('bestTrkSta'),
    InputType = cms.string('MuonCollection')
)

process.MIsoDepositViewMultiIOBlock = cms.PSet(
    ExtractForCandidate = cms.bool(False),
    inputMuonCollection = cms.InputTag("muons1stStep"),
    MultipleDepositsFlag = cms.bool(True),
    MuonTrackRefType = cms.string('bestTrkSta'),
    InputType = cms.string('MuonCollection')
)

process.MIsoJetExtractorBlock = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(0.5),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(False),
        dREcal = cms.double(0.5),
        dREcalPreselection = cms.double(0.5),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(False),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.5),
        useMuon = cms.bool(False),
        useCalo = cms.bool(True),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(False)
    ),
    PrintTimeReport = cms.untracked.bool(False),
    ExcludeMuonVeto = cms.bool(True),
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny'),
        RPCLayers = cms.bool(False),
        UseMuonNavigation = cms.untracked.bool(False)
    ),
    ComponentName = cms.string('JetExtractor'),
    DR_Max = cms.double(1.0),
    PropagatorName = cms.string('SteppingHelixPropagatorAny'),
    JetCollectionLabel = cms.InputTag("ak5CaloJets"),
    DR_Veto = cms.double(0.1),
    Threshold = cms.double(5.0)
)

process.MIsoTrackAssociatorDefault = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(1.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(False),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(False),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(1.0),
        useMuon = cms.bool(False),
        useCalo = cms.bool(True),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(False)
    )
)

process.MIsoTrackAssociatorHits = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(1.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(1.0),
        useMuon = cms.bool(False),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    )
)

process.MIsoTrackAssociatorJets = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(0.5),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(False),
        dREcal = cms.double(0.5),
        dREcalPreselection = cms.double(0.5),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(False),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.5),
        useMuon = cms.bool(False),
        useCalo = cms.bool(True),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(False)
    )
)

process.MIsoTrackAssociatorTowers = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(1.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(False),
        dREcal = cms.double(1.0),
        dREcalPreselection = cms.double(1.0),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(False),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(1.0),
        useMuon = cms.bool(False),
        useCalo = cms.bool(True),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(False)
    )
)

process.MIsoTrackExtractorBlock = cms.PSet(
    Diff_z = cms.double(0.2),
    inputTrackCollection = cms.InputTag("generalTracks"),
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    ComponentName = cms.string('TrackExtractor'),
    DR_Max = cms.double(1.0),
    Diff_r = cms.double(0.1),
    Chi2Prob_Min = cms.double(-1.0),
    DR_Veto = cms.double(0.01),
    NHits_Min = cms.uint32(0),
    Chi2Ndof_Max = cms.double(1e+64),
    Pt_Min = cms.double(-1.0),
    DepositLabel = cms.untracked.string(''),
    BeamlineOption = cms.string('BeamSpotFromEvent')
)

process.MIsoTrackExtractorCtfBlock = cms.PSet(
    Diff_z = cms.double(0.2),
    inputTrackCollection = cms.InputTag("generalTracks"),
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    ComponentName = cms.string('TrackExtractor'),
    DR_Max = cms.double(1.0),
    Diff_r = cms.double(0.1),
    Chi2Prob_Min = cms.double(-1.0),
    DR_Veto = cms.double(0.01),
    NHits_Min = cms.uint32(0),
    Chi2Ndof_Max = cms.double(1e+64),
    Pt_Min = cms.double(-1.0),
    DepositLabel = cms.untracked.string(''),
    BeamlineOption = cms.string('BeamSpotFromEvent')
)

process.MIsoTrackExtractorGsBlock = cms.PSet(
    Diff_z = cms.double(0.2),
    inputTrackCollection = cms.InputTag("ctfGSWithMaterialTracks"),
    BeamSpotLabel = cms.InputTag("offlineBeamSpot"),
    ComponentName = cms.string('TrackExtractor'),
    DR_Max = cms.double(1.0),
    Diff_r = cms.double(0.1),
    Chi2Prob_Min = cms.double(-1.0),
    DR_Veto = cms.double(0.01),
    NHits_Min = cms.uint32(0),
    Chi2Ndof_Max = cms.double(1e+64),
    Pt_Min = cms.double(-1.0),
    DepositLabel = cms.untracked.string(''),
    BeamlineOption = cms.string('BeamSpotFromEvent')
)

process.MaxConsecLostHitsTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MaxConsecLostHitsTrajectoryFilter'),
    maxConsecLostHits = cms.int32(1)
)

process.MaxHitsTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MaxHitsTrajectoryFilter'),
    maxNumberOfHits = cms.int32(100)
)

process.MaxLostHitsTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MaxLostHitsTrajectoryFilter'),
    maxLostHits = cms.int32(1)
)

process.MinHitsTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MinHitsTrajectoryFilter'),
    minimumNumberOfHits = cms.int32(5)
)

process.MinPtTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('MinPtTrajectoryFilter'),
    nSigmaMinPt = cms.double(5.0),
    minHitsMinPt = cms.int32(3),
    minPt = cms.double(1.0)
)

process.MuonCaloCompatibilityBlock = cms.PSet(
    MuonCaloCompatibility = cms.PSet(
        allSiPMHO = cms.bool(False),
        PionTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_pions_lowPt_3_1_norm.root'),
        MuonTemplateFileName = cms.FileInPath('RecoMuon/MuonIdentification/data/MuID_templates_muons_lowPt_3_1_norm.root'),
        delta_eta = cms.double(0.02),
        delta_phi = cms.double(0.02)
    )
)

process.MuonCosmicCompatibilityParameters = cms.PSet(
    CosmicCompFillerParameters = cms.PSet(
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator'),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        ),
        deltaPt = cms.double(0.1),
        maxdzTight = cms.double(10.0),
        offTimeNegTight = cms.double(-20.0),
        maxvertRho = cms.double(5),
        ipCut = cms.double(0.02),
        segmentComp = cms.double(0.4),
        sharedFrac = cms.double(0.75),
        angleCut = cms.double(0.1),
        hIpTrvProb = cms.double(0.5),
        InputMuonCollections = cms.VInputTag(cms.InputTag("globalMuons"), cms.InputTag("muons1stStep")),
        maxdxyTight = cms.double(1.0),
        maxdzLoose = cms.double(0.1),
        InputTrackCollections = cms.VInputTag(cms.InputTag("generalTracks"), cms.InputTag("cosmicsVetoTracks")),
        maxdxyTightMult = cms.double(1.0),
        corrTimeNeg = cms.double(-10),
        offTimePosTight = cms.double(25.0),
        maxdzLooseMult = cms.double(0.1),
        maxvertZ = cms.double(20),
        nChamberMatches = cms.int32(1),
        corrTimePos = cms.double(5),
        offTimeNegLoose = cms.double(-15.0),
        maxdxyLooseMult = cms.double(0.01),
        offTimePosTightMult = cms.double(25.0),
        offTimePosLoose = cms.double(15.0),
        largedxyMult = cms.double(3.0),
        largedxy = cms.double(2.0),
        nTrackThreshold = cms.int32(3),
        maxdzTightMult = cms.double(10.0),
        InputCosmicMuonCollection = cms.InputTag("muonsFromCosmics1Leg"),
        minvProb = cms.double(0.001),
        hIpTrdxy = cms.double(0.02),
        InputVertexCollection = cms.InputTag("offlinePrimaryVertices"),
        offTimePosLooseMult = cms.double(15.0),
        offTimeNegLooseMult = cms.double(-15.0),
        sharedHits = cms.int32(5),
        maxdxyLoose = cms.double(0.01),
        offTimeNegTightMult = cms.double(-20.0)
    )
)

process.MuonSegmentMatcher = cms.PSet(
    MatchParameters = cms.PSet(
        CSCsegments = cms.InputTag("cscSegments"),
        DTsegments = cms.InputTag("dt4DSegments"),
        DTradius = cms.double(0.01),
        TightMatchDT = cms.bool(False),
        TightMatchCSC = cms.bool(True)
    )
)

process.MuonServiceProxy = cms.PSet(
    ServiceParameters = cms.PSet(
        Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
            'SteppingHelixPropagatorAlong', 
            'SteppingHelixPropagatorOpposite', 
            'SteppingHelixPropagatorL2Any', 
            'SteppingHelixPropagatorL2Along', 
            'SteppingHelixPropagatorL2Opposite', 
            'SteppingHelixPropagatorAnyNoError', 
            'SteppingHelixPropagatorAlongNoError', 
            'SteppingHelixPropagatorOppositeNoError', 
            'SteppingHelixPropagatorL2AnyNoError', 
            'SteppingHelixPropagatorL2AlongNoError', 
            'SteppingHelixPropagatorL2OppositeNoError', 
            'PropagatorWithMaterial', 
            'PropagatorWithMaterialOpposite', 
            'SmartPropagator', 
            'SmartPropagatorOpposite', 
            'SmartPropagatorAnyOpposite', 
            'SmartPropagatorAny', 
            'SmartPropagatorRK', 
            'SmartPropagatorAnyRK', 
            'StraightLinePropagator', 
            'StraightLinePropagator'),
        RPCLayers = cms.bool(True),
        UseMuonNavigation = cms.untracked.bool(True)
    )
)

process.MuonShowerParameters = cms.PSet(
    MuonShowerInformationFillerParameters = cms.PSet(
        ServiceParameters = cms.PSet(
            Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                'SteppingHelixPropagatorAlong', 
                'SteppingHelixPropagatorOpposite', 
                'SteppingHelixPropagatorL2Any', 
                'SteppingHelixPropagatorL2Along', 
                'SteppingHelixPropagatorL2Opposite', 
                'SteppingHelixPropagatorAnyNoError', 
                'SteppingHelixPropagatorAlongNoError', 
                'SteppingHelixPropagatorOppositeNoError', 
                'SteppingHelixPropagatorL2AnyNoError', 
                'SteppingHelixPropagatorL2AlongNoError', 
                'SteppingHelixPropagatorL2OppositeNoError', 
                'PropagatorWithMaterial', 
                'PropagatorWithMaterialOpposite', 
                'SmartPropagator', 
                'SmartPropagatorOpposite', 
                'SmartPropagatorAnyOpposite', 
                'SmartPropagatorAny', 
                'SmartPropagatorRK', 
                'SmartPropagatorAnyRK', 
                'StraightLinePropagator'),
            RPCLayers = cms.bool(True),
            UseMuonNavigation = cms.untracked.bool(True)
        ),
        DT4DRecSegmentLabel = cms.InputTag("dt4DSegments"),
        DTRecSegmentLabel = cms.InputTag("dt1DRecHits"),
        TrackerRecHitBuilder = cms.string('WithTrackAngle'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        CSCSegmentLabel = cms.InputTag("cscSegments"),
        CSCRecSegmentLabel = cms.InputTag("csc2DRecHits"),
        RPCRecSegmentLabel = cms.InputTag("rpcRecHits")
    )
)

process.MuonTrackLoaderForCosmic = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorAny'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        PutTrajectoryIntoEvent = cms.untracked.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(False),
        AllowNoVertex = cms.untracked.bool(True),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(False)
    )
)

process.MuonTrackLoaderForGLB = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(False)
    )
)

process.MuonTrackLoaderForL2 = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(False),
        beamSpot = cms.InputTag("hltOfflineBeamSpot"),
        VertexConstraint = cms.bool(True)
    )
)

process.MuonTrackLoaderForL3 = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        PutTkTrackIntoEvent = cms.untracked.bool(True),
        beamSpot = cms.InputTag("hltOfflineBeamSpot"),
        SmoothTkTrack = cms.untracked.bool(False),
        MuonSeededTracksInstance = cms.untracked.string('L2Seeded'),
        Smoother = cms.string('KFSmootherForMuonTrackLoaderL3'),
        VertexConstraint = cms.bool(False),
        DoSmoothing = cms.bool(True)
    )
)

process.MuonTrackLoaderForSTA = cms.PSet(
    TrackLoaderParameters = cms.PSet(
        MuonUpdatorAtVertexParameters = cms.PSet(
            MaxChi2 = cms.double(1000000.0),
            Propagator = cms.string('SteppingHelixPropagatorOpposite'),
            BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
        ),
        Smoother = cms.string('KFSmootherForMuonTrackLoader'),
        DoSmoothing = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        VertexConstraint = cms.bool(True)
    )
)

process.MuonTrackingRegionCommon = cms.PSet(
    MuonTrackingRegionBuilder = cms.PSet(
        EtaR_UpperLimit_Par1 = cms.double(0.25),
        EtaR_UpperLimit_Par2 = cms.double(0.15),
        OnDemand = cms.double(-1.0),
        Rescale_Dz = cms.double(3.0),
        Eta_min = cms.double(0.1),
        Rescale_phi = cms.double(3.0),
        Eta_fixed = cms.double(0.2),
        DeltaZ_Region = cms.double(15.9),
        MeasurementTrackerName = cms.string(''),
        PhiR_UpperLimit_Par2 = cms.double(0.2),
        vertexCollection = cms.InputTag("pixelVertices"),
        Phi_fixed = cms.double(0.2),
        DeltaR = cms.double(0.2),
        EscapePt = cms.double(1.5),
        UseFixedRegion = cms.bool(False),
        PhiR_UpperLimit_Par1 = cms.double(0.6),
        Rescale_eta = cms.double(3.0),
        Phi_min = cms.double(0.1),
        UseVertex = cms.bool(False),
        beamSpot = cms.InputTag("offlineBeamSpot")
    )
)

process.MuonUpdatorAtVertex = cms.PSet(
    MuonUpdatorAtVertexParameters = cms.PSet(
        MaxChi2 = cms.double(1000000.0),
        Propagator = cms.string('SteppingHelixPropagatorOpposite'),
        BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
    )
)

process.MuonUpdatorAtVertexAnyDirection = cms.PSet(
    MuonUpdatorAtVertexParameters = cms.PSet(
        MaxChi2 = cms.double(1000000.0),
        Propagator = cms.string('SteppingHelixPropagatorAny'),
        BeamSpotPositionErrors = cms.vdouble(0.1, 0.1, 5.3)
    )
)

process.NoVertexGeneratorBlock = cms.PSet(
    VertexGenerator = cms.PSet(
        type = cms.string('None')
    )
)

process.OneProngNoPiZero = cms.PSet(
    applyIsolation = cms.bool(False),
    cut = cms.double(-10.0),
    computerName = cms.string('OneProngNoPiZero'),
    decayModeIndices = cms.vint32(0)
)

process.OneProngNoPiZeroIso = cms.PSet(
    applyIsolation = cms.bool(True),
    cut = cms.double(-10.0),
    computerName = cms.string('OneProngNoPiZeroIso'),
    decayModeIndices = cms.vint32(0)
)

process.OneProngOnePiZero = cms.PSet(
    applyIsolation = cms.bool(False),
    cut = cms.double(-10.0),
    computerName = cms.string('OneProngOnePiZero'),
    decayModeIndices = cms.vint32(1)
)

process.OneProngOnePiZeroIso = cms.PSet(
    applyIsolation = cms.bool(True),
    cut = cms.double(-10.0),
    computerName = cms.string('OneProngOnePiZeroIso'),
    decayModeIndices = cms.vint32(1)
)

process.OneProngTwoPiZero = cms.PSet(
    applyIsolation = cms.bool(False),
    cut = cms.double(-10.0),
    computerName = cms.string('OneProngTwoPiZero'),
    decayModeIndices = cms.vint32(2)
)

process.OneProngTwoPiZeroIso = cms.PSet(
    applyIsolation = cms.bool(True),
    cut = cms.double(-10.0),
    computerName = cms.string('OneProngTwoPiZeroIso'),
    decayModeIndices = cms.vint32(2)
)

process.PFTauQualityCuts = cms.PSet(
    isolationQualityCuts = cms.PSet(
        minTrackHits = cms.uint32(8),
        minTrackVertexWeight = cms.double(-1),
        minTrackPt = cms.double(1.0),
        maxTrackChi2 = cms.double(100.0),
        minTrackPixelHits = cms.uint32(0),
        minGammaEt = cms.double(1.5),
        maxDeltaZ = cms.double(0.2),
        maxTransverseImpactParameter = cms.double(0.03)
    ),
    pvFindingAlgo = cms.string('highestWeightForLeadTrack'),
    primaryVertexSrc = cms.InputTag("offlinePrimaryVertices"),
    signalQualityCuts = cms.PSet(
        minTrackHits = cms.uint32(3),
        minTrackVertexWeight = cms.double(-1),
        minTrackPt = cms.double(0.5),
        maxTrackChi2 = cms.double(100.0),
        minTrackPixelHits = cms.uint32(0),
        minGammaEt = cms.double(0.5),
        maxDeltaZ = cms.double(0.2),
        maxTransverseImpactParameter = cms.double(0.03)
    )
)

process.PixelFitterByHelixProjections = cms.PSet(
    ComponentName = cms.string('PixelFitterByHelixProjections'),
    TTRHBuilder = cms.string('PixelTTRHBuilderWithoutAngle')
)

process.PixelTrackReconstructionBlock = cms.PSet(
    useFilterWithES = cms.bool(False),
    FilterPSet = cms.PSet(
        chi2 = cms.double(1000.0),
        nSigmaTipMaxTolerance = cms.double(0.0),
        ComponentName = cms.string('PixelTrackFilterByKinematics'),
        nSigmaInvPtTolerance = cms.double(0.0),
        ptMin = cms.double(0.1),
        tipMax = cms.double(1.0)
    ),
    FitterPSet = cms.PSet(
        ComponentName = cms.string('PixelFitterByHelixProjections'),
        TTRHBuilder = cms.string('PixelTTRHBuilderWithoutAngle')
    ),
    RegionFactoryPSet = cms.PSet(
        RegionPSet = cms.PSet(
            precise = cms.bool(True),
            nSigmaZ = cms.double(4.0),
            originRadius = cms.double(0.2),
            beamSpot = cms.InputTag("offlineBeamSpot"),
            ptMin = cms.double(0.9)
        ),
        ComponentName = cms.string('GlobalRegionProducerFromBeamSpot')
    ),
    CleanerPSet = cms.PSet(
        ComponentName = cms.string('PixelTrackCleanerBySharedHits')
    ),
    OrderedHitsFactoryPSet = cms.PSet(
        ComponentName = cms.string('StandardHitTripletGenerator'),
        GeneratorPSet = cms.PSet(
            useBending = cms.bool(True),
            useFixedPreFiltering = cms.bool(False),
            maxElement = cms.uint32(100000),
            SeedComparitorPSet = cms.PSet(
                ComponentName = cms.string('LowPtClusterShapeSeedComparitor')
            ),
            extraHitRPhitolerance = cms.double(0.032),
            useMultScattering = cms.bool(True),
            phiPreFiltering = cms.double(0.3),
            extraHitRZtolerance = cms.double(0.037),
            ComponentName = cms.string('PixelTripletHLTGenerator')
        ),
        SeedingLayers = cms.string('PixelLayerTriplets')
    )
)

process.PixelTripletHLTGenerator = cms.PSet(
    useBending = cms.bool(True),
    useFixedPreFiltering = cms.bool(False),
    maxElement = cms.uint32(100000),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('none')
    ),
    extraHitRPhitolerance = cms.double(0.032),
    useMultScattering = cms.bool(True),
    phiPreFiltering = cms.double(0.3),
    extraHitRZtolerance = cms.double(0.037),
    ComponentName = cms.string('PixelTripletHLTGenerator')
)

process.PixelTripletHLTGeneratorWithFilter = cms.PSet(
    useBending = cms.bool(True),
    useFixedPreFiltering = cms.bool(False),
    maxElement = cms.uint32(100000),
    SeedComparitorPSet = cms.PSet(
        ComponentName = cms.string('LowPtClusterShapeSeedComparitor')
    ),
    extraHitRPhitolerance = cms.double(0.032),
    useMultScattering = cms.bool(True),
    phiPreFiltering = cms.double(0.3),
    extraHitRZtolerance = cms.double(0.037),
    ComponentName = cms.string('PixelTripletHLTGenerator')
)

process.PixelTripletLargeTipGenerator = cms.PSet(
    useBending = cms.bool(True),
    useFixedPreFiltering = cms.bool(False),
    maxElement = cms.uint32(100000),
    ComponentName = cms.string('PixelTripletLargeTipGenerator'),
    extraHitRPhitolerance = cms.double(0.0),
    useMultScattering = cms.bool(True),
    phiPreFiltering = cms.double(0.3),
    extraHitRZtolerance = cms.double(0.0)
)

process.RegionPSetBlock = cms.PSet(
    RegionPSet = cms.PSet(
        precise = cms.bool(True),
        originHalfLength = cms.double(21.2),
        originZPos = cms.double(0.0),
        originYPos = cms.double(0.0),
        ptMin = cms.double(0.9),
        originXPos = cms.double(0.0),
        originRadius = cms.double(0.2)
    )
)

process.RegionPSetWithVerticesBlock = cms.PSet(
    RegionPSet = cms.PSet(
        precise = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        useFixedError = cms.bool(True),
        originRadius = cms.double(0.2),
        sigmaZVertex = cms.double(3.0),
        fixedError = cms.double(0.2),
        VertexCollection = cms.InputTag("pixelVertices"),
        ptMin = cms.double(0.9),
        useFoundVertices = cms.bool(True),
        nSigmaZ = cms.double(4.0)
    )
)

process.RegionPsetFomBeamSpotBlock = cms.PSet(
    RegionPSet = cms.PSet(
        precise = cms.bool(True),
        nSigmaZ = cms.double(4.0),
        originRadius = cms.double(0.2),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        ptMin = cms.double(0.9)
    )
)

process.RegionPsetFomBeamSpotBlockFixedZ = cms.PSet(
    RegionPSet = cms.PSet(
        precise = cms.bool(True),
        beamSpot = cms.InputTag("offlineBeamSpot"),
        originRadius = cms.double(0.2),
        ptMin = cms.double(0.9),
        originHalfLength = cms.double(21.2)
    )
)

process.SK_ME1234 = cms.PSet(
    dPhiFineMax = cms.double(0.025),
    verboseInfo = cms.untracked.bool(True),
    chi2Max = cms.double(99999.0),
    dPhiMax = cms.double(0.003),
    wideSeg = cms.double(3.0),
    minLayersApart = cms.int32(2),
    dRPhiFineMax = cms.double(8.0),
    dRPhiMax = cms.double(8.0)
)

process.SK_ME1A = cms.PSet(
    dPhiFineMax = cms.double(0.025),
    verboseInfo = cms.untracked.bool(True),
    chi2Max = cms.double(99999.0),
    dPhiMax = cms.double(0.025),
    wideSeg = cms.double(3.0),
    minLayersApart = cms.int32(2),
    dRPhiFineMax = cms.double(3.0),
    dRPhiMax = cms.double(8.0)
)

process.ST_ME1234 = cms.PSet(
    maxRatioResidualPrune = cms.double(3),
    yweightPenalty = cms.double(1.5),
    maxRecHitsInCluster = cms.int32(20),
    dPhiFineMax = cms.double(0.025),
    preClusteringUseChaining = cms.bool(True),
    ForceCovariance = cms.bool(False),
    hitDropLimit6Hits = cms.double(0.3333),
    NormChi2Cut2D = cms.double(20.0),
    BPMinImprovement = cms.double(10000.0),
    Covariance = cms.double(0.0),
    tanPhiMax = cms.double(0.5),
    SeedBig = cms.double(0.0015),
    onlyBestSegment = cms.bool(False),
    dRPhiFineMax = cms.double(8.0),
    SeedSmall = cms.double(0.0002),
    curvePenalty = cms.double(2.0),
    dXclusBoxMax = cms.double(4.0),
    BrutePruning = cms.bool(True),
    curvePenaltyThreshold = cms.double(0.85),
    CorrectTheErrors = cms.bool(True),
    hitDropLimit4Hits = cms.double(0.6),
    useShowering = cms.bool(False),
    CSCDebug = cms.untracked.bool(False),
    tanThetaMax = cms.double(1.2),
    NormChi2Cut3D = cms.double(10.0),
    minHitsPerSegment = cms.int32(3),
    ForceCovarianceAll = cms.bool(False),
    yweightPenaltyThreshold = cms.double(1.0),
    prePrunLimit = cms.double(3.17),
    hitDropLimit5Hits = cms.double(0.8),
    preClustering = cms.bool(True),
    prePrun = cms.bool(True),
    maxDPhi = cms.double(999.0),
    maxDTheta = cms.double(999.0),
    Pruning = cms.bool(True),
    dYclusBoxMax = cms.double(8.0)
)

process.ST_ME1A = cms.PSet(
    maxRatioResidualPrune = cms.double(3),
    yweightPenalty = cms.double(1.5),
    maxRecHitsInCluster = cms.int32(24),
    dPhiFineMax = cms.double(0.025),
    preClusteringUseChaining = cms.bool(True),
    ForceCovariance = cms.bool(False),
    hitDropLimit6Hits = cms.double(0.3333),
    NormChi2Cut2D = cms.double(20.0),
    BPMinImprovement = cms.double(10000.0),
    Covariance = cms.double(0.0),
    tanPhiMax = cms.double(0.5),
    SeedBig = cms.double(0.0015),
    onlyBestSegment = cms.bool(False),
    dRPhiFineMax = cms.double(8.0),
    SeedSmall = cms.double(0.0002),
    curvePenalty = cms.double(2.0),
    dXclusBoxMax = cms.double(4.0),
    BrutePruning = cms.bool(True),
    curvePenaltyThreshold = cms.double(0.85),
    CorrectTheErrors = cms.bool(True),
    hitDropLimit4Hits = cms.double(0.6),
    useShowering = cms.bool(False),
    CSCDebug = cms.untracked.bool(False),
    tanThetaMax = cms.double(1.2),
    NormChi2Cut3D = cms.double(10.0),
    minHitsPerSegment = cms.int32(3),
    ForceCovarianceAll = cms.bool(False),
    yweightPenaltyThreshold = cms.double(1.0),
    prePrunLimit = cms.double(3.17),
    hitDropLimit5Hits = cms.double(0.8),
    preClustering = cms.bool(True),
    prePrun = cms.bool(True),
    maxDPhi = cms.double(999.0),
    maxDTheta = cms.double(999.0),
    Pruning = cms.bool(True),
    dYclusBoxMax = cms.double(8.0)
)

process.SectCollParametersBlock = cms.PSet(
    SectCollParameters = cms.PSet(
        SCCSP5 = cms.int32(0),
        SCCSP2 = cms.int32(0),
        SCCSP3 = cms.int32(0),
        SCECF4 = cms.bool(False),
        SCCSP1 = cms.int32(0),
        SCECF2 = cms.bool(False),
        SCECF3 = cms.bool(False),
        SCCSP4 = cms.int32(0),
        SCECF1 = cms.bool(False),
        Debug = cms.untracked.bool(False)
    )
)

process.SiPixelGainCalibrationServiceParameters = cms.PSet(

)

process.SingleNet = cms.PSet(
    applyIsolation = cms.bool(False),
    cut = cms.double(-10.0),
    computerName = cms.string('SingleNet'),
    decayModeIndices = cms.vint32(0, 1, 2, 10, 11)
)

process.SingleNetIso = cms.PSet(
    applyIsolation = cms.bool(True),
    cut = cms.double(-10.0),
    computerName = cms.string('SingleNetIso'),
    decayModeIndices = cms.vint32(0, 1, 2, 10, 11)
)

process.TC_ME1234 = cms.PSet(
    dPhiFineMax = cms.double(0.02),
    verboseInfo = cms.untracked.bool(True),
    SegmentSorting = cms.int32(1),
    chi2Max = cms.double(6000.0),
    dPhiMax = cms.double(0.003),
    chi2ndfProbMin = cms.double(0.0001),
    minLayersApart = cms.int32(2),
    dRPhiFineMax = cms.double(6.0),
    dRPhiMax = cms.double(1.2)
)

process.TC_ME1A = cms.PSet(
    dPhiFineMax = cms.double(0.013),
    verboseInfo = cms.untracked.bool(True),
    SegmentSorting = cms.int32(1),
    chi2Max = cms.double(6000.0),
    dPhiMax = cms.double(0.00198),
    chi2ndfProbMin = cms.double(0.0001),
    minLayersApart = cms.int32(2),
    dRPhiFineMax = cms.double(3.0),
    dRPhiMax = cms.double(0.6)
)

process.TECi = cms.PSet(
    minRing = cms.int32(1),
    matchedRecHits = cms.InputTag("siStripMatchedRecHits","matchedRecHit"),
    useRingSlector = cms.bool(True),
    TTRHBuilder = cms.string('WithTrackAngle'),
    rphiRecHits = cms.InputTag("siStripMatchedRecHits","rphiRecHit"),
    maxRing = cms.int32(2)
)

process.TSPhiParametersBlock = cms.PSet(
    TSPhiParameters = cms.PSet(
        TSMNOE1 = cms.bool(True),
        TSMNOE2 = cms.bool(False),
        TSSMSK1 = cms.int32(312),
        TSTREN9 = cms.bool(True),
        TSTREN8 = cms.bool(True),
        TSTREN11 = cms.bool(True),
        TSTREN3 = cms.bool(True),
        TSTREN2 = cms.bool(True),
        TSTREN1 = cms.bool(True),
        TSTREN0 = cms.bool(True),
        TSTREN7 = cms.bool(True),
        TSTREN6 = cms.bool(True),
        TSTREN5 = cms.bool(True),
        TSTREN4 = cms.bool(True),
        TSSCCE1 = cms.bool(True),
        TSSCCE2 = cms.bool(False),
        TSMCCE2 = cms.bool(False),
        TSTREN19 = cms.bool(True),
        TSMCCE1 = cms.bool(True),
        TSTREN17 = cms.bool(True),
        TSTREN16 = cms.bool(True),
        TSTREN15 = cms.bool(True),
        TSTREN14 = cms.bool(True),
        TSTREN13 = cms.bool(True),
        TSTREN12 = cms.bool(True),
        TSSMSK2 = cms.int32(312),
        TSTREN10 = cms.bool(True),
        TSMMSK2 = cms.int32(312),
        TSMMSK1 = cms.int32(312),
        TSMHSP = cms.int32(1),
        TSSNOE2 = cms.bool(False),
        TSSNOE1 = cms.bool(True),
        TSSCGS2 = cms.bool(True),
        TSSCCEC = cms.bool(False),
        TSMCCEC = cms.bool(False),
        TSMHTE2 = cms.bool(False),
        Debug = cms.untracked.bool(False),
        TSSHTE2 = cms.bool(False),
        TSMCGS1 = cms.bool(True),
        TSMCGS2 = cms.bool(True),
        TSSHTE1 = cms.bool(True),
        TSTREN22 = cms.bool(True),
        TSSNOEC = cms.bool(False),
        TSTREN20 = cms.bool(True),
        TSTREN21 = cms.bool(True),
        TSMGS1 = cms.int32(1),
        TSMGS2 = cms.int32(1),
        TSSHTEC = cms.bool(False),
        TSMWORD = cms.int32(255),
        TSMHTEC = cms.bool(False),
        TSSCGS1 = cms.bool(True),
        TSTREN23 = cms.bool(True),
        TSSGS2 = cms.int32(1),
        TSMNOEC = cms.bool(False),
        TSSGS1 = cms.int32(1),
        TSTREN18 = cms.bool(True),
        TSMHTE1 = cms.bool(True)
    )
)

process.TSThetaParametersBlock = cms.PSet(
    TSThetaParameters = cms.PSet(
        Debug = cms.untracked.bool(False)
    )
)

process.TUParamsBlock = cms.PSet(
    Debug = cms.untracked.bool(False)
)

process.ThreeProngNoPiZero = cms.PSet(
    applyIsolation = cms.bool(False),
    cut = cms.double(-10.0),
    computerName = cms.string('ThreeProngNoPiZero'),
    decayModeIndices = cms.vint32(10)
)

process.ThreeProngNoPiZeroIso = cms.PSet(
    applyIsolation = cms.bool(True),
    cut = cms.double(-10.0),
    computerName = cms.string('ThreeProngNoPiZeroIso'),
    decayModeIndices = cms.vint32(10)
)

process.ThreeProngOnePiZero = cms.PSet(
    applyIsolation = cms.bool(False),
    cut = cms.double(-10.0),
    computerName = cms.string('ThreeProngOnePiZero'),
    decayModeIndices = cms.vint32(11)
)

process.ThreeProngOnePiZeroIso = cms.PSet(
    applyIsolation = cms.bool(True),
    cut = cms.double(-10.0),
    computerName = cms.string('ThreeProngOnePiZeroIso'),
    decayModeIndices = cms.vint32(11)
)

process.ThresholdPtTrajectoryFilter_block = cms.PSet(
    ComponentType = cms.string('ThresholdPtTrajectoryFilter'),
    nSigmaThresholdPt = cms.double(5.0),
    minHitsThresholdPt = cms.int32(3),
    thresholdPt = cms.double(10.0)
)

process.TimingFillerBlock = cms.PSet(
    TimingFillerParameters = cms.PSet(
        DTTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DSegments"),
                DTradius = cms.double(0.01),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            HitError = cms.double(6.0),
            DoWireCorr = cms.bool(True),
            PruneCut = cms.double(10000.0),
            DTsegments = cms.InputTag("dt4DSegments"),
            DropTheta = cms.bool(True),
            RequireBothProjections = cms.bool(False),
            HitsMin = cms.int32(3),
            DTTimeOffset = cms.double(0.0),
            debug = cms.bool(False),
            UseSegmentT0 = cms.bool(False),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            )
        ),
        CSCTimingParameters = cms.PSet(
            MatchParameters = cms.PSet(
                CSCsegments = cms.InputTag("cscSegments"),
                DTsegments = cms.InputTag("dt4DSegments"),
                DTradius = cms.double(0.01),
                TightMatchDT = cms.bool(False),
                TightMatchCSC = cms.bool(True)
            ),
            CSCsegments = cms.InputTag("csc2DSegments"),
            CSCStripTimeOffset = cms.double(0.0),
            CSCStripError = cms.double(7.0),
            UseStripTime = cms.bool(True),
            debug = cms.bool(False),
            CSCWireError = cms.double(8.6),
            CSCWireTimeOffset = cms.double(0.0),
            ServiceParameters = cms.PSet(
                Propagators = cms.untracked.vstring('SteppingHelixPropagatorAny', 
                    'PropagatorWithMaterial', 
                    'PropagatorWithMaterialOpposite'),
                RPCLayers = cms.bool(True)
            ),
            PruneCut = cms.double(9.0),
            UseWireTime = cms.bool(True)
        ),
        UseDT = cms.bool(True),
        EcalEnergyCut = cms.double(0.4),
        ErrorEB = cms.double(2.085),
        ErrorEE = cms.double(6.95),
        UseCSC = cms.bool(True),
        UseECAL = cms.bool(True)
    )
)

process.TrackAssociatorParameterBlock = cms.PSet(
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(9999.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.2),
        useMuon = cms.bool(True),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    )
)

process.TrackAssociatorParameters = cms.PSet(
    muonMaxDistanceSigmaX = cms.double(0.0),
    muonMaxDistanceSigmaY = cms.double(0.0),
    CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
    dRHcal = cms.double(9999.0),
    dREcal = cms.double(9999.0),
    CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
    useEcal = cms.bool(True),
    dREcalPreselection = cms.double(0.05),
    HORecHitCollectionLabel = cms.InputTag("horeco"),
    dRMuon = cms.double(9999.0),
    propagateAllDirections = cms.bool(True),
    muonMaxDistanceX = cms.double(5.0),
    muonMaxDistanceY = cms.double(5.0),
    useHO = cms.bool(True),
    trajectoryUncertaintyTolerance = cms.double(-1.0),
    usePreshower = cms.bool(False),
    DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
    EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    dRHcalPreselection = cms.double(0.2),
    useMuon = cms.bool(True),
    useCalo = cms.bool(False),
    accountForTrajectoryChangeCalo = cms.bool(False),
    EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    dRMuonPreselection = cms.double(0.2),
    truthMatch = cms.bool(False),
    HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
    useHcal = cms.bool(True)
)

process.TrackerKinkFinderParametersBlock = cms.PSet(
    TrackerKinkFinderParameters = cms.PSet(
        DoPredictionsOnly = cms.bool(False),
        usePosition = cms.bool(True),
        diagonalOnly = cms.bool(False),
        Fitter = cms.string('KFFitterForRefitInsideOut'),
        TrackerRecHitBuilder = cms.string('WithAngleAndTemplate'),
        Smoother = cms.string('KFSmootherForRefitInsideOut'),
        MuonRecHitBuilder = cms.string('MuonRecHitBuilder'),
        RefitDirection = cms.string('alongMomentum'),
        RefitRPCHits = cms.bool(True),
        Propagator = cms.string('SmartPropagatorAnyRKOpposite')
    )
)

process.TracoParametersBlock = cms.PSet(
    TracoParameters = cms.PSet(
        SPRGCOMP = cms.int32(2),
        FHTMSK = cms.int32(0),
        DD = cms.int32(18),
        SSLMSK = cms.int32(0),
        LVALIDIFH = cms.int32(0),
        Debug = cms.untracked.int32(0),
        FSLMSK = cms.int32(0),
        SHTPRF = cms.int32(1),
        SHTMSK = cms.int32(0),
        TRGENB3 = cms.int32(1),
        SHISM = cms.int32(0),
        IBTIOFF = cms.int32(0),
        KPRGCOM = cms.int32(255),
        KRAD = cms.int32(0),
        FLTMSK = cms.int32(1),
        LTS = cms.int32(0),
        SLTMSK = cms.int32(1),
        FPRGCOMP = cms.int32(2),
        TRGENB9 = cms.int32(1),
        TRGENB8 = cms.int32(1),
        FHTPRF = cms.int32(1),
        LTF = cms.int32(0),
        TRGENB1 = cms.int32(1),
        TRGENB0 = cms.int32(1),
        FHISM = cms.int32(0),
        TRGENB2 = cms.int32(1),
        TRGENB5 = cms.int32(1),
        TRGENB4 = cms.int32(1),
        TRGENB7 = cms.int32(1),
        TRGENB6 = cms.int32(1),
        TRGENB15 = cms.int32(1),
        TRGENB14 = cms.int32(1),
        TRGENB11 = cms.int32(1),
        TRGENB10 = cms.int32(1),
        TRGENB13 = cms.int32(1),
        TRGENB12 = cms.int32(1),
        REUSEO = cms.int32(1),
        REUSEI = cms.int32(1),
        BTIC = cms.int32(32)
    )
)

process.cleaningAlgoConfig = cms.PSet(
    e6e2thresh = cms.double(0.04),
    tightenCrack_e6e2_double = cms.double(3),
    tightenCrack_e4e1_single = cms.double(3),
    cThreshold_barrel = cms.double(4),
    e4e1Threshold_barrel = cms.double(0.08),
    tightenCrack_e1_single = cms.double(2),
    e4e1_b_barrel = cms.double(-0.024),
    e4e1_a_barrel = cms.double(0.04),
    cThreshold_double = cms.double(10),
    ignoreOutOfTimeThresh = cms.double(1000000000.0),
    cThreshold_endcap = cms.double(15),
    e4e1_a_endcap = cms.double(0.02),
    e4e1_b_endcap = cms.double(-0.0125),
    e4e1Threshold_endcap = cms.double(0.3),
    tightenCrack_e1_double = cms.double(2)
)

process.combinedSecondaryVertexCommon = cms.PSet(
    trackPseudoSelection = cms.PSet(
        b_pT = cms.double(0.3684),
        a_dR = cms.double(-0.001053),
        min_pT = cms.double(120),
        max_pT = cms.double(500),
        min_pT_dRcut = cms.double(0.5),
        max_pT_trackPTcut = cms.double(3),
        max_pT_dRcut = cms.double(0.1),
        b_dR = cms.double(0.6263),
        a_pT = cms.double(0.005263),
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        useVariableJTA = cms.bool(False),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackSelection = cms.PSet(
        b_pT = cms.double(0.3684),
        a_dR = cms.double(-0.001053),
        min_pT = cms.double(120),
        max_pT = cms.double(500),
        min_pT_dRcut = cms.double(0.5),
        max_pT_trackPTcut = cms.double(3),
        max_pT_dRcut = cms.double(0.1),
        b_dR = cms.double(0.6263),
        a_pT = cms.double(0.005263),
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        useVariableJTA = cms.bool(False),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    useTrackWeights = cms.bool(True),
    pseudoMultiplicityMin = cms.uint32(2),
    correctVertexMass = cms.bool(True),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    charmCut = cms.double(1.5),
    vertexFlip = cms.bool(False),
    minimumTrackWeight = cms.double(0.5),
    pseudoVertexV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.05)
    ),
    trackMultiplicityMin = cms.uint32(3),
    trackSort = cms.string('sip2dSig'),
    trackFlip = cms.bool(False)
)

process.cscRecHitDParameters = cms.PSet(
    XTasymmetry_ME1b = cms.double(0.01),
    XTasymmetry_ME1a = cms.double(0.023),
    ConstSyst_ME1a = cms.double(0.01),
    ConstSyst_ME1b = cms.double(0.02),
    XTasymmetry_ME41 = cms.double(0.023),
    XTasymmetry_ME22 = cms.double(0.023),
    XTasymmetry_ME21 = cms.double(0.023),
    ConstSyst_ME21 = cms.double(0.03),
    ConstSyst_ME22 = cms.double(0.03),
    XTasymmetry_ME31 = cms.double(0.023),
    NoiseLevel_ME13 = cms.double(4.0),
    NoiseLevel_ME12 = cms.double(7.0),
    NoiseLevel_ME32 = cms.double(7.0),
    NoiseLevel_ME31 = cms.double(5.0),
    XTasymmetry_ME32 = cms.double(0.023),
    ConstSyst_ME41 = cms.double(0.03),
    XTasymmetry_ME13 = cms.double(0.02),
    XTasymmetry_ME12 = cms.double(0.015),
    ConstSyst_ME12 = cms.double(0.02),
    ConstSyst_ME13 = cms.double(0.03),
    ConstSyst_ME32 = cms.double(0.03),
    ConstSyst_ME31 = cms.double(0.03),
    NoiseLevel_ME1a = cms.double(9.0),
    NoiseLevel_ME1b = cms.double(6.0),
    NoiseLevel_ME21 = cms.double(5.0),
    NoiseLevel_ME22 = cms.double(7.0),
    NoiseLevel_ME41 = cms.double(5.0)
)

process.cuts = cms.PSet(
    tightCut = cms.double(0.985),
    looseCut = cms.double(0.95),
    mediumCut = cms.double(0.97),
    vlooseCut = cms.double(0.9)
)

process.discriminantConfiguration = cms.PSet(
    BinnedMaskedHcalIsolation = cms.PSet(
        vtxSource = cms.InputTag("recoTauPileUpVertices"),
        mask = cms.PSet(
            finalHcalCone = cms.double(0.08),
            ecalCone = cms.double(0.15),
            hcalCone = cms.double(0.3),
            maxSigmas = cms.double(2)
        ),
        binning = cms.VPSet(cms.PSet(
            binLowEdges = cms.vdouble(1.0, 1.79, 4.03),
            nPUVtx = cms.int32(0)
        ), 
            cms.PSet(
                binLowEdges = cms.vdouble(1.15, 1.8, 4.03),
                nPUVtx = cms.int32(1)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(1.22, 1.81, 4.03),
                nPUVtx = cms.int32(2)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(1.27, 1.83, 4.03),
                nPUVtx = cms.int32(3)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(1.31, 1.84, 4.03),
                nPUVtx = cms.int32(4)
            )),
        defaultBinning = cms.vdouble(1.31, 1.84, 4.03),
        plugin = cms.string('RecoTauDiscriminationBinnedMaskedHCALIsolation')
    ),
    InvariantOpeningAngle = cms.PSet(
        defaultRMS = cms.string('max(0.3/max(pt, 1.0), 0.005)'),
        plugin = cms.string('RecoTauDiscriminantInvariantWidth'),
        decayModes = cms.VPSet(cms.PSet(
            nPiZeros = cms.uint32(1),
            rms = cms.string('2.7e-3 + 0.23/max(pt, 1.0)'),
            nCharged = cms.uint32(1),
            mean = cms.string('5.0e-3 + 0.43/max(pt, 1.0)')
        ), 
            cms.PSet(
                nPiZeros = cms.uint32(2),
                rms = cms.string('7.5e-3 + 0.3/max(pt, 1.0)'),
                nCharged = cms.uint32(1),
                mean = cms.string('4.7e-3 + 0.9/max(pt, 1.0)')
            ), 
            cms.PSet(
                nPiZeros = cms.uint32(0),
                rms = cms.string('0.38/max(pt, 1.0)'),
                nCharged = cms.uint32(3),
                mean = cms.string('0.87/max(pt, 1.0)')
            )),
        defaultMean = cms.string('max(0.87/max(pt, 1.0), 0.005)')
    ),
    BinnedMaskedEcalIsolation = cms.PSet(
        vtxSource = cms.InputTag("recoTauPileUpVertices"),
        mask = cms.PSet(
            finalHcalCone = cms.double(0.08),
            ecalCone = cms.double(0.15),
            hcalCone = cms.double(0.3),
            maxSigmas = cms.double(2)
        ),
        binning = cms.VPSet(cms.PSet(
            binLowEdges = cms.vdouble(0.5, 0.88, 2.53),
            nPUVtx = cms.int32(0)
        ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.65, 0.98, 2.53),
                nPUVtx = cms.int32(1)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.74, 1.05, 2.54),
                nPUVtx = cms.int32(2)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.8, 1.11, 2.54),
                nPUVtx = cms.int32(3)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.86, 1.15, 2.54),
                nPUVtx = cms.int32(4)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.9, 1.19, 2.55),
                nPUVtx = cms.int32(5)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.94, 1.22, 2.55),
                nPUVtx = cms.int32(6)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.97, 1.25, 2.55),
                nPUVtx = cms.int32(7)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(1.0, 1.27, 2.56),
                nPUVtx = cms.int32(8)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(1.03, 1.3, 2.56),
                nPUVtx = cms.int32(9)
            )),
        defaultBinning = cms.vdouble(1.03, 1.3, 2.56),
        plugin = cms.string('RecoTauDiscriminationBinnedMaskedECALIsolation')
    ),
    FlightPathSignificance = cms.PSet(
        plugin = cms.string('RecoTauDiscriminantFromDiscriminator'),
        discSrc = cms.InputTag("hpsTancTausDiscriminationByFlightPath"),
        maxValue = cms.double(25),
        minValue = cms.double(-25)
    ),
    BinnedTrackIsolation = cms.PSet(
        vtxSource = cms.InputTag("recoTauPileUpVertices"),
        binning = cms.VPSet(cms.PSet(
            binLowEdges = cms.vdouble(0.5, 0.86, 1.87),
            nPUVtx = cms.int32(0)
        ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.51, 0.86, 1.87),
                nPUVtx = cms.int32(1)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.51, 0.86, 1.87),
                nPUVtx = cms.int32(2)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.52, 0.86, 1.87),
                nPUVtx = cms.int32(3)
            ), 
            cms.PSet(
                binLowEdges = cms.vdouble(0.52, 0.86, 1.87),
                nPUVtx = cms.int32(4)
            )),
        defaultBinning = cms.vdouble(0.52, 0.86, 1.87),
        plugin = cms.string('RecoTauDiscriminationBinnedTrackIsolation')
    )
)

process.dphiScale = cms.PSet(
    DT_34_1_scale = cms.vdouble(-13.783765, 0.0),
    CSC_34_1_scale = cms.vdouble(-11.520507, 0.0),
    SME_13_0_scale = cms.vdouble(0.104905, 0.0),
    SMB_22_0_scale = cms.vdouble(1.346681, 0.0),
    DT_24_2_scale = cms.vdouble(-6.63094, 0.0),
    OL_2213_0_scale = cms.vdouble(-7.239789, 0.0),
    OL_1232_0_scale = cms.vdouble(-5.964634, 0.0),
    SMB_32_0_scale = cms.vdouble(-3.054156, 0.0),
    DT_34_2_scale = cms.vdouble(-11.901897, 0.0),
    CSC_13_2_scale = cms.vdouble(-6.077936, 0.0),
    OL_1213_0_scale = cms.vdouble(-4.488158, 0.0),
    CSC_12_3_scale = cms.vdouble(-1.63622, 0.0),
    OL_1222_0_scale = cms.vdouble(-5.810449, 0.0),
    SME_11_0_scale = cms.vdouble(1.325085, 0.0),
    SMB_11_0_scale = cms.vdouble(2.56363, 0.0),
    CSC_13_3_scale = cms.vdouble(-1.701268, 0.0),
    SME_21_0_scale = cms.vdouble(-0.040862, 0.0),
    SMB_20_0_scale = cms.vdouble(1.486168, 0.0),
    DT_23_1_scale = cms.vdouble(-5.320346, 0.0),
    SMB_10_0_scale = cms.vdouble(2.448566, 0.0),
    CSC_14_3_scale = cms.vdouble(-1.969563, 0.0),
    DT_14_2_scale = cms.vdouble(-4.808546, 0.0),
    SMB_31_0_scale = cms.vdouble(-3.323768, 0.0),
    CSC_24_1_scale = cms.vdouble(-6.055701, 0.0),
    CSC_01_1_scale = cms.vdouble(-1.915329, 0.0),
    DT_12_1_scale = cms.vdouble(-3.692398, 0.0),
    SMB_21_0_scale = cms.vdouble(1.58384, 0.0),
    DT_23_2_scale = cms.vdouble(-5.117625, 0.0),
    SMB_12_0_scale = cms.vdouble(2.283221, 0.0),
    SME_12_0_scale = cms.vdouble(2.279181, 0.0),
    CSC_12_1_scale = cms.vdouble(-6.434242, 0.0),
    DT_14_1_scale = cms.vdouble(-5.644816, 0.0),
    CSC_23_2_scale = cms.vdouble(-6.079917, 0.0),
    SME_22_0_scale = cms.vdouble(-3.457901, 0.0),
    CSC_23_1_scale = cms.vdouble(-19.084285, 0.0),
    DT_13_1_scale = cms.vdouble(-4.520923, 0.0),
    DT_24_1_scale = cms.vdouble(-7.490909, 0.0),
    DT_12_2_scale = cms.vdouble(-3.518165, 0.0),
    DT_13_2_scale = cms.vdouble(-4.257687, 0.0),
    CSC_12_2_scale = cms.vdouble(-1.63622, 0.0),
    SMB_30_0_scale = cms.vdouble(-3.629838, 0.0),
    OL_2222_0_scale = cms.vdouble(-7.667231, 0.0)
)

process.ecalDrivenElectronSeedsParameters = cms.PSet(
    PhiMax2B = cms.double(0.002),
    hOverEPtMin = cms.double(0.0),
    PhiMax2F = cms.double(0.003),
    searchInTIDTEC = cms.bool(True),
    pPhiMax1 = cms.double(0.125),
    HighPtThreshold = cms.double(35.0),
    r2MinF = cms.double(-0.15),
    maxHBarrel = cms.double(0.0),
    DeltaPhi1Low = cms.double(0.23),
    DeltaPhi1High = cms.double(0.08),
    ePhiMin1 = cms.double(-0.125),
    hcalTowers = cms.InputTag("towerMaker"),
    LowPtThreshold = cms.double(5.0),
    maxHOverEBarrel = cms.double(0.15),
    dynamicPhiRoad = cms.bool(True),
    ePhiMax1 = cms.double(0.075),
    measurementTrackerName = cms.string(''),
    SizeWindowENeg = cms.double(0.675),
    nSigmasDeltaZ1 = cms.double(5.0),
    rMaxI = cms.double(0.2),
    maxHEndcaps = cms.double(0.0),
    preFilteredSeeds = cms.bool(False),
    r2MaxF = cms.double(0.15),
    hOverEConeSize = cms.double(0.15),
    pPhiMin1 = cms.double(-0.075),
    initialSeeds = cms.InputTag("newCombinedSeeds"),
    deltaZ1WithVertex = cms.double(25.0),
    SCEtCut = cms.double(4.0),
    z2MaxB = cms.double(0.09),
    fromTrackerSeeds = cms.bool(True),
    hcalRecHits = cms.InputTag("hbhereco"),
    z2MinB = cms.double(-0.09),
    rMinI = cms.double(-0.2),
    maxHOverEEndcaps = cms.double(0.15),
    hOverEHBMinE = cms.double(0.7),
    useRecoVertex = cms.bool(False),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    vertices = cms.InputTag("offlinePrimaryVerticesWithBS"),
    applyHOverECut = cms.bool(True),
    DeltaPhi2F = cms.double(0.012),
    PhiMin2F = cms.double(-0.003),
    hOverEHFMinE = cms.double(0.8),
    DeltaPhi2B = cms.double(0.008),
    PhiMin2B = cms.double(-0.002)
)

process.fieldScaling = cms.PSet(
    scalingVolumes = cms.vint32(14100, 14200, 17600, 17800, 17900, 
        18100, 18300, 18400, 18600, 23100, 
        23300, 23400, 23600, 23800, 23900, 
        24100, 28600, 28800, 28900, 29100, 
        29300, 29400, 29600, 28609, 28809, 
        28909, 29109, 29309, 29409, 29609, 
        28610, 28810, 28910, 29110, 29310, 
        29410, 29610, 28611, 28811, 28911, 
        29111, 29311, 29411, 29611),
    scalingFactors = cms.vdouble(1, 1, 0.994, 1.004, 1.004, 
        1.005, 1.004, 1.004, 0.994, 0.965, 
        0.958, 0.958, 0.953, 0.958, 0.958, 
        0.965, 0.918, 0.924, 0.924, 0.906, 
        0.924, 0.924, 0.918, 0.991, 0.998, 
        0.998, 0.978, 0.998, 0.998, 0.991, 
        0.991, 0.998, 0.998, 0.978, 0.998, 
        0.998, 0.991, 0.991, 0.998, 0.998, 
        0.978, 0.998, 0.998, 0.991)
)

process.ghostTrackCommon = cms.PSet(
    trackSelection = cms.PSet(
        b_pT = cms.double(0.3684),
        a_dR = cms.double(-0.001053),
        min_pT = cms.double(120),
        max_pT = cms.double(500),
        min_pT_dRcut = cms.double(0.5),
        max_pT_trackPTcut = cms.double(3),
        max_pT_dRcut = cms.double(0.1),
        b_dR = cms.double(0.6263),
        a_pT = cms.double(0.005263),
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        useVariableJTA = cms.bool(False),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    ),
    trackPairV0Filter = cms.PSet(
        k0sMassWindow = cms.double(0.03)
    ),
    charmCut = cms.double(1.5),
    trackSort = cms.string('sip2dSig'),
    minimumTrackWeight = cms.double(0.5)
)

process.ghostTrackVertexRecoBlock = cms.PSet(
    vertexReco = cms.PSet(
        primcut = cms.double(2.0),
        seccut = cms.double(4.0),
        maxFitChi2 = cms.double(10.0),
        fitType = cms.string('RefitGhostTrackWithVertices'),
        mergeThreshold = cms.double(3.0),
        finder = cms.string('gtvr')
    )
)

process.hpsTancRequireDecayMode = cms.PSet(
    BooleanOperator = cms.string('and'),
    decayMode = cms.PSet(
        cut = cms.double(0.5),
        Producer = cms.InputTag("hpsTancTausDiscriminationByDecayModeSelection")
    )
)

process.isolationSumsCalculator = cms.PSet(
    HcalTowerInnerRadiusB_Endcap = cms.double(0.15),
    barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    TrackConeOuterRadiusB_Endcap = cms.double(0.3),
    HcalDepth1TowerThreshEA_Endcap = cms.double(0.0),
    HcalDepth2TowerThreshEA_Endcap = cms.double(0.0),
    HcalDepth2TowerInnerRadiusA_Endcap = cms.double(0.15),
    isolationtrackEtaSliceA_Barrel = cms.double(0.015),
    EcalRecHitOuterRadiusA_Endcap = cms.double(0.4),
    HcalDepth2TowerOuterRadiusA_Endcap = cms.double(0.4),
    beamSpotProducer = cms.InputTag("offlineBeamSpot"),
    isolationtrackEtaSliceB_Endcap = cms.double(0.015),
    trackProducer = cms.InputTag("generalTracks"),
    isolationtrackEtaSliceA_Endcap = cms.double(0.015),
    HcalTowerInnerRadiusB_Barrel = cms.double(0.15),
    HcalDepth1TowerInnerRadiusB_Barrel = cms.double(0.15),
    isolationtrackThresholdB_Barrel = cms.double(0.0),
    EcalRecHitThreshEtB_Endcap = cms.double(0.11),
    isolationtrackThresholdA_Endcap = cms.double(0.0),
    EcalRecHitThreshEB_Barrel = cms.double(0.095),
    isolationtrackThresholdB_Endcap = cms.double(0.0),
    HcalDepth2TowerOuterRadiusA_Barrel = cms.double(0.4),
    HcalTowerOuterRadiusA_Endcap = cms.double(0.4),
    longImpactParameterA_Barrel = cms.double(0.2),
    EcalRecHitEtaSliceB_Endcap = cms.double(2.5),
    transImpactParameterA_Barrel = cms.double(0.1),
    useNumCrystals = cms.bool(True),
    longImpactParameterB_Barrel = cms.double(0.2),
    longImpactParameterA_Endcap = cms.double(0.2),
    EcalRecHitThreshEtB_Barrel = cms.double(0.0),
    HcalTowerThreshEA_Endcap = cms.double(0.0),
    EcalRecHitInnerRadiusA_Endcap = cms.double(3.5),
    HcalTowerInnerRadiusA_Endcap = cms.double(0.15),
    EcalRecHitEtaSliceB_Barrel = cms.double(2.5),
    TrackConeInnerRadiusA_Endcap = cms.double(0.04),
    HcalDepth2TowerInnerRadiusB_Barrel = cms.double(0.15),
    EcalRecHitThreshEtA_Barrel = cms.double(0.0),
    EcalRecHitInnerRadiusA_Barrel = cms.double(3.5),
    EcalRecHitEtaSliceA_Barrel = cms.double(2.5),
    transImpactParameterA_Endcap = cms.double(0.1),
    ComponentName = cms.string('isolationSumsCalculator'),
    HcalDepth2TowerThreshEB_Endcap = cms.double(0.0),
    modulePhiBoundary = cms.double(0.0087),
    TrackConeOuterRadiusA_Barrel = cms.double(0.4),
    HcalDepth1TowerInnerRadiusA_Endcap = cms.double(0.15),
    longImpactParameterB_Endcap = cms.double(0.2),
    HcalTowerInnerRadiusA_Barrel = cms.double(0.15),
    transImpactParameterB_Endcap = cms.double(0.1),
    EcalRecHitEtaSliceA_Endcap = cms.double(2.5),
    TrackConeInnerRadiusB_Barrel = cms.double(0.04),
    HcalRecHitCollection = cms.InputTag("towerMaker"),
    vetoClustered = cms.bool(False),
    HcalDepth1TowerThreshEB_Barrel = cms.double(0.0),
    HcalDepth1TowerThreshEA_Barrel = cms.double(0.0),
    TrackConeInnerRadiusB_Endcap = cms.double(0.04),
    HcalDepth2TowerInnerRadiusA_Barrel = cms.double(0.15),
    HcalDepth1TowerOuterRadiusA_Endcap = cms.double(0.4),
    moduleEtaBoundary = cms.vdouble(0.0, 0.02, 0.43, 0.46, 0.78, 
        0.81, 1.13, 1.15, 1.45, 1.58),
    EcalRecHitOuterRadiusB_Endcap = cms.double(0.3),
    EcalRecHitThreshEA_Barrel = cms.double(0.095),
    HcalDepth1TowerInnerRadiusB_Endcap = cms.double(0.15),
    HcalDepth2TowerInnerRadiusB_Endcap = cms.double(0.15),
    HcalDepth1TowerOuterRadiusA_Barrel = cms.double(0.4),
    HcalDepth1TowerInnerRadiusA_Barrel = cms.double(0.15),
    endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    HcalTowerOuterRadiusB_Endcap = cms.double(0.3),
    EcalRecHitThreshEB_Endcap = cms.double(0.0),
    HcalTowerThreshEB_Endcap = cms.double(0.0),
    TrackConeOuterRadiusA_Endcap = cms.double(0.4),
    HcalTowerOuterRadiusA_Barrel = cms.double(0.4),
    HcalDepth1TowerThreshEB_Endcap = cms.double(0.0),
    HcalTowerThreshEA_Barrel = cms.double(0.0),
    EcalRecHitThreshEtA_Endcap = cms.double(0.11),
    EcalRecHitOuterRadiusB_Barrel = cms.double(0.3),
    TrackConeOuterRadiusB_Barrel = cms.double(0.3),
    transImpactParameterB_Barrel = cms.double(0.1),
    isolationtrackThresholdA_Barrel = cms.double(0.0),
    HcalTowerThreshEB_Barrel = cms.double(0.0),
    EcalRecHitThreshEA_Endcap = cms.double(0.0),
    EcalRecHitOuterRadiusA_Barrel = cms.double(0.4),
    HcalDepth1TowerOuterRadiusB_Barrel = cms.double(0.3),
    TrackConeInnerRadiusA_Barrel = cms.double(0.04),
    HcalDepth2TowerThreshEA_Barrel = cms.double(0.0),
    HcalDepth2TowerOuterRadiusB_Barrel = cms.double(0.3),
    isolationtrackEtaSliceB_Barrel = cms.double(0.015),
    EcalRecHitInnerRadiusB_Barrel = cms.double(3.5),
    HcalDepth2TowerOuterRadiusB_Endcap = cms.double(0.3),
    HcalTowerOuterRadiusB_Barrel = cms.double(0.3),
    HcalDepth1TowerOuterRadiusB_Endcap = cms.double(0.3),
    EcalRecHitInnerRadiusB_Endcap = cms.double(3.5),
    HcalDepth2TowerThreshEB_Barrel = cms.double(0.0)
)

process.j2tParametersCALO = cms.PSet(
    trackQuality = cms.string('goodIterative'),
    tracks = cms.InputTag("generalTracks"),
    coneSize = cms.double(0.5),
    extrapolations = cms.InputTag("trackExtrapolator")
)

process.j2tParametersVX = cms.PSet(
    tracks = cms.InputTag("generalTracks"),
    useAssigned = cms.bool(False),
    coneSize = cms.double(0.5),
    pvSrc = cms.InputTag("offlinePrimaryVertices")
)

process.layerInfo = cms.PSet(
    TOB = cms.PSet(
        TTRHBuilder = cms.string('WithTrackAngle')
    ),
    TEC = cms.PSet(
        useRingSlector = cms.bool(False),
        TTRHBuilder = cms.string('WithTrackAngle'),
        minRing = cms.int32(6),
        maxRing = cms.int32(7)
    )
)

process.leadTrackFinding = cms.PSet(
    cut = cms.double(0.5),
    Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
)

process.looseSoftPFElectronCleanerBarrelCuts = cms.PSet(
    BarreldRGsfTrackElectronCuts = cms.vdouble(0.0, 0.017),
    BarrelEemPinRatioCuts = cms.vdouble(-0.9, 0.39),
    BarrelMVACuts = cms.vdouble(-0.1, 1.0),
    BarrelPtCuts = cms.vdouble(2.0, 9999.0)
)

process.looseSoftPFElectronCleanerForwardCuts = cms.PSet(
    ForwarddRGsfTrackElectronCuts = cms.vdouble(0.0, 0.006),
    ForwardPtCuts = cms.vdouble(2.0, 9999.0),
    ForwardMVACuts = cms.vdouble(-0.24, 1.0),
    ForwardInverseFBremCuts = cms.vdouble(1.0, 7.01)
)

process.maxEvents = cms.untracked.PSet(
    input = cms.untracked.int32(1)
)

process.mediumSoftPFElectronCleanerBarrelCuts = cms.PSet(
    BarreldRGsfTrackElectronCuts = cms.vdouble(0.0, 0.0047),
    BarrelEemPinRatioCuts = cms.vdouble(-0.9, 0.54),
    BarrelMVACuts = cms.vdouble(0.6, 1.0),
    BarrelPtCuts = cms.vdouble(2.0, 9999.0)
)

process.mediumSoftPFElectronCleanerForwardCuts = cms.PSet(
    ForwarddRGsfTrackElectronCuts = cms.vdouble(0.0, 0.003),
    ForwardPtCuts = cms.vdouble(2.0, 9999.0),
    ForwardMVACuts = cms.vdouble(0.37, 1.0),
    ForwardInverseFBremCuts = cms.vdouble(1.0, 20.0)
)

process.mipVariable = cms.PSet(
    XRangeFit = cms.double(180.0),
    ResidualWidth = cms.double(0.23),
    endcapEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    YRangeFit = cms.double(7.0),
    barrelEcalRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    ComponentName = cms.string('mipVariable'),
    HaloDiscThreshold = cms.double(70.0)
)

process.noPrediscriminants = cms.PSet(
    BooleanOperator = cms.string('and')
)

process.options = cms.untracked.PSet(
    Rethrow = cms.untracked.vstring('ProductNotFound')
)

process.pfElecMva = cms.PSet(
    MVACut = cms.double(-1.0)
)

process.ptSeedParameterization = cms.PSet(
    SMB_21 = cms.vdouble(0.918425, -0.141199, 0.0, 0.254515, -0.111848, 
        0.0),
    SMB_20 = cms.vdouble(0.861314, -0.16233, 0.0, 0.248879, -0.113879, 
        0.0),
    SMB_22 = cms.vdouble(1.308565, -0.701634, 0.0, -0.302861, 0.675785, 
        0.0),
    OL_2213 = cms.vdouble(0.563218, -0.493991, 0.0, 0.943776, -0.591751, 
        0.0),
    SME_11 = cms.vdouble(2.39479, -0.888663, 0.0, -4.604546, 3.623464, 
        0.0),
    SME_13 = cms.vdouble(0.398851, 0.028176, 0.0, 0.567015, 2.623232, 
        0.0),
    SMB_31 = cms.vdouble(0.398661, -0.024853, 0.0, 0.863324, -0.413048, 
        0.0),
    SME_32 = cms.vdouble(-0.021912, -0.008995, 0.0, -49.779764, 30.780972, 
        0.0),
    SME_31 = cms.vdouble(-0.588188, 0.316961, 0.0, -95.261732, 45.444051, 
        0.0),
    OL_1213 = cms.vdouble(0.960544, -0.75644, 0.0, 0.1636, 0.114178, 
        0.0),
    DT_13 = cms.vdouble(0.298842, 0.076531, -0.14293, 0.219923, -0.145026, 
        0.155638),
    DT_12 = cms.vdouble(0.176182, 0.058535, -0.090549, 0.202363, -0.203126, 
        0.222219),
    DT_14 = cms.vdouble(0.388423, 0.068698, -0.145925, 0.159515, 0.124299, 
        -0.133269),
    OL_1232 = cms.vdouble(0.162626, 0.000843, 0.0, 0.396271, 0.002791, 
        0.0),
    CSC_23 = cms.vdouble(-0.095236, 0.122061, -0.029852, -11.396689, 15.933598, 
        -4.267065),
    CSC_24 = cms.vdouble(-0.049769, 0.063087, -0.011029, -13.765978, 16.296143, 
        -4.241835),
    CSC_03 = cms.vdouble(0.498992, -0.086235, -0.025772, 2.761006, -2.667607, 
        0.72802),
    CSC_01 = cms.vdouble(0.155906, -0.000406, 0.0, 0.194022, -0.010181, 
        0.0),
    SMB_32 = cms.vdouble(0.421649, -0.111654, 0.0, -0.044613, 1.134858, 
        0.0),
    SMB_30 = cms.vdouble(0.399628, 0.014922, 0.0, 0.665622, 0.358439, 
        0.0),
    OL_2222 = cms.vdouble(0.087587, 0.005729, 0.0, 0.535169, -0.087675, 
        0.0),
    SMB_10 = cms.vdouble(1.160532, 0.148991, 0.0, 0.182785, -0.093776, 
        0.0),
    SMB_11 = cms.vdouble(1.289468, -0.139653, 0.0, 0.137191, 0.01217, 
        0.0),
    SMB_12 = cms.vdouble(1.923091, -0.913204, 0.0, 0.161556, 0.020215, 
        0.0),
    DT_23 = cms.vdouble(0.120647, 0.034743, -0.070855, 0.302427, -0.21417, 
        0.261012),
    DT_24 = cms.vdouble(0.189527, 0.037328, -0.088523, 0.251936, 0.032411, 
        0.010984),
    SME_21 = cms.vdouble(0.64895, -0.148762, 0.0, -5.07676, 6.284227, 
        0.0),
    SME_22 = cms.vdouble(-0.624708, 0.641043, 0.0, 32.581295, -19.604264, 
        0.0),
    CSC_34 = cms.vdouble(0.144321, -0.142283, 0.035636, 190.260708, -180.888643, 
        43.430395),
    CSC_02 = cms.vdouble(0.600235, -0.205683, 0.001113, 0.655625, -0.682129, 
        0.253916),
    SME_42 = cms.vdouble(-0.021912, -0.008995, 0.0, -49.779764, 30.780972, 
        0.0),
    SME_41 = cms.vdouble(-0.187116, 0.076415, 0.0, -58.552583, 27.933864, 
        0.0),
    SME_12 = cms.vdouble(-0.277294, 0.7616, 0.0, -0.243326, 1.446792, 
        0.0),
    DT_34 = cms.vdouble(0.049146, -0.003494, -0.010099, 0.672095, 0.36459, 
        -0.304346),
    CSC_14 = cms.vdouble(0.952517, -0.532733, 0.084601, 1.615881, -1.630744, 
        0.514139),
    OL_1222 = cms.vdouble(0.215915, 0.002556, 0.0, 0.313596, -0.021465, 
        0.0),
    CSC_13 = cms.vdouble(1.22495, -1.792358, 0.711378, 5.271848, -6.280625, 
        2.0142),
    CSC_12 = cms.vdouble(-0.363549, 0.569552, -0.173186, 7.777069, -10.203618, 
        3.478874)
)

process.rct_calibration = cms.PSet(
    HoverE_high_Lindsey = cms.vdouble(1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1, 
        1, 1, 1),
    hcal_high_calib_Lindsey = cms.vdouble(0, 0, 1, 0, 0, 
        1, 0, 0, 1, 0, 
        0, 1, 0, 0, 1, 
        0, 0, 1, 0, 0, 
        1, 0, 0, 1, 0, 
        0, 1, 0, 0, 1, 
        0, 0, 1, 0, 0, 
        1, 0, 0, 1, 0, 
        0, 1, 0, 0, 1, 
        0, 0, 1, 0, 0, 
        1, 0, 0, 1, 0, 
        0, 1, 0, 0, 1, 
        0, 0, 1, 0, 0, 
        1, 0, 0, 1, 0, 
        0, 1, 0, 0, 1, 
        0, 0, 1, 0, 0, 
        1, 0, 0, 1),
    cross_terms_Lindsey = cms.vdouble(0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0, 0, 0, 
        0, 0, 0),
    ecal_calib_Lindsey = cms.vdouble(0, 0, 1, 0, 0, 
        1, 0, 0, 1, 0, 
        0, 1, 0, 0, 1, 
        0, 0, 1, 0, 0, 
        1, 0, 0, 1, 0, 
        0, 1, 0, 0, 1, 
        0, 0, 1, 0, 0, 
        1, 0, 0, 1, 0, 
        0, 1, 0, 0, 1, 
        0, 0, 1, 0, 0, 
        1, 0, 0, 1, 0, 
        0, 1, 0, 0, 1, 
        0, 0, 1, 0, 0, 
        1, 0, 0, 1, 0, 
        0, 1, 0, 0, 1, 
        0, 0, 1, 0, 0, 
        1, 0, 0, 1),
    HoverE_low_Lindsey = cms.vdouble(1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1, 
        1, 1, 1, 1, 1, 
        1, 1, 1),
    hcal_calib_Lindsey = cms.vdouble(0, 0, 1, 0, 0, 
        1, 0, 0, 1, 0, 
        0, 1, 0, 0, 1, 
        0, 0, 1, 0, 0, 
        1, 0, 0, 1, 0, 
        0, 1, 0, 0, 1, 
        0, 0, 1, 0, 0, 
        1, 0, 0, 1, 0, 
        0, 1, 0, 0, 1, 
        0, 0, 1, 0, 0, 
        1, 0, 0, 1, 0, 
        0, 1, 0, 0, 1, 
        0, 0, 1, 0, 0, 
        1, 0, 0, 1, 0, 
        0, 1, 0, 0, 1, 
        0, 0, 1, 0, 0, 
        1, 0, 0, 1)
)

process.requireDecayMode = cms.PSet(
    BooleanOperator = cms.string('and'),
    decayMode = cms.PSet(
        cut = cms.double(0.5),
        Producer = cms.InputTag("hpsPFTauDiscriminationByDecayModeFinding")
    )
)

process.requireLeadPion = cms.PSet(
    BooleanOperator = cms.string('and'),
    leadPion = cms.PSet(
        cut = cms.double(0.5),
        Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
    )
)

process.requireLeadTrack = cms.PSet(
    BooleanOperator = cms.string('and'),
    leadTrack = cms.PSet(
        cut = cms.double(0.5),
        Producer = cms.InputTag("pfRecoTauDiscriminationByLeadingTrackFinding")
    )
)

process.requireLeadTrackCalo = cms.PSet(
    BooleanOperator = cms.string('and'),
    leadTrack = cms.PSet(
        cut = cms.double(0.5),
        Producer = cms.InputTag("caloRecoTauDiscriminationByLeadingTrackFinding")
    )
)

process.shrinkingConeLeadTrackFinding = cms.PSet(
    BooleanOperator = cms.string('and'),
    leadTrack = cms.PSet(
        cut = cms.double(0.5),
        Producer = cms.InputTag("shrinkingConePFTauDiscriminationByLeadingTrackFinding")
    )
)

process.standardDecayModeParams = cms.PSet(
    mergeByBestMatch = cms.bool(True),
    refitTracks = cms.bool(False),
    maxNbrOfIterations = cms.int32(10),
    mergeLowPtPhotonsFirst = cms.bool(True),
    setMergedPi0Mass = cms.bool(True),
    setChargedPionMass = cms.bool(True),
    filterPhotons = cms.bool(True),
    minPtFractionPiZeroes = cms.double(0.15),
    maxPhotonsToMerge = cms.uint32(2),
    filterTwoProngs = cms.bool(True),
    maxPiZeroMass = cms.double(0.2),
    minPtFractionForSecondProng = cms.double(0.1),
    maxDistance = cms.double(0.01),
    setPi0Mass = cms.bool(True),
    minPtFractionSinglePhotons = cms.double(0.1)
)

process.tautagInfoModifer = cms.PSet(
    pfTauTagInfoSrc = cms.InputTag("pfRecoTauTagInfoProducer"),
    name = cms.string('TTIworkaround'),
    plugin = cms.string('RecoTauTagInfoWorkaroundModifer')
)

process.tcTauAlgoParameters = cms.PSet(
    tkminTrackerHitsn = cms.int32(5),
    PVProducer = cms.InputTag("offlinePrimaryVertices"),
    EtCaloOverTrackMin = cms.double(-0.9),
    EERecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
    tkmaxChi2 = cms.double(100.0),
    EtHcalOverTrackMin = cms.double(-0.3),
    CaloRecoTauProducer = cms.InputTag("JPTCaloRecoTauProducer"),
    EBRecHitCollection = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
    tkminPixelHitsn = cms.int32(0),
    MatchingConeSize = cms.double(0.1),
    TrackCollection = cms.InputTag("generalTracks"),
    HBHERecHitCollection = cms.InputTag("hbhereco"),
    EtCaloOverTrackMax = cms.double(0.0),
    TrackAssociatorParameters = cms.PSet(
        muonMaxDistanceSigmaX = cms.double(0.0),
        muonMaxDistanceSigmaY = cms.double(0.0),
        CSCSegmentCollectionLabel = cms.InputTag("cscSegments"),
        dRHcal = cms.double(9999.0),
        dRPreshowerPreselection = cms.double(0.2),
        CaloTowerCollectionLabel = cms.InputTag("towerMaker"),
        useEcal = cms.bool(True),
        dREcal = cms.double(9999.0),
        dREcalPreselection = cms.double(0.05),
        HORecHitCollectionLabel = cms.InputTag("horeco"),
        dRMuon = cms.double(9999.0),
        propagateAllDirections = cms.bool(True),
        muonMaxDistanceX = cms.double(5.0),
        muonMaxDistanceY = cms.double(5.0),
        useHO = cms.bool(True),
        trajectoryUncertaintyTolerance = cms.double(-1.0),
        usePreshower = cms.bool(False),
        DTRecSegment4DCollectionLabel = cms.InputTag("dt4DSegments"),
        EERecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEE"),
        dRHcalPreselection = cms.double(0.2),
        useMuon = cms.bool(True),
        useCalo = cms.bool(False),
        accountForTrajectoryChangeCalo = cms.bool(False),
        EBRecHitCollectionLabel = cms.InputTag("ecalRecHit","EcalRecHitsEB"),
        dRMuonPreselection = cms.double(0.2),
        truthMatch = cms.bool(False),
        HBHERecHitCollectionLabel = cms.InputTag("hbhereco"),
        useHcal = cms.bool(True)
    ),
    SignalConeSize = cms.double(0.2),
    EcalConeSize = cms.double(0.5),
    Track_minPt = cms.double(1.0),
    EtHcalOverTrackMax = cms.double(1.0),
    HFRecHitCollection = cms.InputTag("hfreco"),
    DropRejectedJets = cms.untracked.bool(False),
    HORecHitCollection = cms.InputTag("horeco"),
    DropCaloJets = cms.untracked.bool(False),
    tkmaxipt = cms.double(0.1)
)

process.tightSoftPFElectronCleanerBarrelCuts = cms.PSet(
    BarreldRGsfTrackElectronCuts = cms.vdouble(0.0, 0.006),
    BarrelEemPinRatioCuts = cms.vdouble(-0.9, 0.065),
    BarrelMVACuts = cms.vdouble(0.58, 1.0),
    BarrelPtCuts = cms.vdouble(2.0, 9999.0)
)

process.tightSoftPFElectronCleanerForwardCuts = cms.PSet(
    ForwarddRGsfTrackElectronCuts = cms.vdouble(0.0, 0.01),
    ForwardPtCuts = cms.vdouble(2.0, 9999.0),
    ForwardMVACuts = cms.vdouble(0.6, 1.0),
    ForwardInverseFBremCuts = cms.vdouble(1.0, 15.0)
)

process.trackPseudoSelectionBlock = cms.PSet(
    trackPseudoSelection = cms.PSet(
        b_pT = cms.double(0.3684),
        a_dR = cms.double(-0.001053),
        min_pT = cms.double(120),
        max_pT = cms.double(500),
        min_pT_dRcut = cms.double(0.5),
        max_pT_trackPTcut = cms.double(3),
        max_pT_dRcut = cms.double(0.1),
        b_dR = cms.double(0.6263),
        a_pT = cms.double(0.005263),
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        useVariableJTA = cms.bool(False),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(2.0),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    )
)

process.trackSelectionBlock = cms.PSet(
    trackSelection = cms.PSet(
        b_pT = cms.double(0.3684),
        a_dR = cms.double(-0.001053),
        min_pT = cms.double(120),
        max_pT = cms.double(500),
        min_pT_dRcut = cms.double(0.5),
        max_pT_trackPTcut = cms.double(3),
        max_pT_dRcut = cms.double(0.1),
        b_dR = cms.double(0.6263),
        a_pT = cms.double(0.005263),
        totalHitsMin = cms.uint32(0),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(0),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.07),
        useVariableJTA = cms.bool(False),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(5),
        ptMin = cms.double(0.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    )
)

process.trackWithVertexSelectorParams = cms.PSet(
    normalizedChi2 = cms.double(999999.0),
    d0Max = cms.double(999.0),
    numberOfValidHits = cms.uint32(0),
    vtxFallback = cms.bool(True),
    copyExtras = cms.untracked.bool(False),
    etaMax = cms.double(5.0),
    nVertices = cms.uint32(0),
    copyTrajectories = cms.untracked.bool(False),
    zetaVtx = cms.double(1.0),
    numberOfLostHits = cms.uint32(999),
    etaMin = cms.double(0.0),
    vertexTag = cms.InputTag("offlinePrimaryVertices"),
    ptErrorCut = cms.double(0.2),
    ptMin = cms.double(0.3),
    numberOfValidPixelHits = cms.uint32(0),
    rhoVtx = cms.double(0.2),
    dzMax = cms.double(999.0),
    src = cms.InputTag("generalTracks"),
    ptMax = cms.double(500.0),
    quality = cms.string('highPurity'),
    useVtx = cms.bool(True)
)

process.variableJTAPars = cms.PSet(
    b_pT = cms.double(0.3684),
    a_dR = cms.double(-0.001053),
    min_pT = cms.double(120),
    max_pT = cms.double(500),
    min_pT_dRcut = cms.double(0.5),
    max_pT_trackPTcut = cms.double(3),
    max_pT_dRcut = cms.double(0.1),
    b_dR = cms.double(0.6263),
    a_pT = cms.double(0.005263)
)

process.vertexCutsBlock = cms.PSet(
    vertexCuts = cms.PSet(
        distSig3dMax = cms.double(99999.9),
        fracPV = cms.double(0.65),
        distVal2dMax = cms.double(2.5),
        useTrackWeights = cms.bool(True),
        maxDeltaRToJetAxis = cms.double(0.5),
        v0Filter = cms.PSet(
            k0sMassWindow = cms.double(0.05)
        ),
        distSig2dMin = cms.double(3.0),
        multiplicityMin = cms.uint32(2),
        massMax = cms.double(6.5),
        distSig2dMax = cms.double(99999.9),
        distVal3dMax = cms.double(99999.9),
        minimumTrackWeight = cms.double(0.5),
        distVal3dMin = cms.double(-99999.9),
        distVal2dMin = cms.double(0.01),
        distSig3dMin = cms.double(-99999.9)
    )
)

process.vertexRecoBlock = cms.PSet(
    vertexReco = cms.PSet(
        seccut = cms.double(6.0),
        primcut = cms.double(1.8),
        smoothing = cms.bool(False),
        weightthreshold = cms.double(0.001),
        minweight = cms.double(0.5),
        finder = cms.string('avr')
    )
)

process.vertexSelectionBlock = cms.PSet(
    vertexSelection = cms.PSet(
        sortCriterium = cms.string('dist3dError')
    )
)

process.vertexTrackSelectionBlock = cms.PSet(
    trackSelection = cms.PSet(
        b_pT = cms.double(0.3684),
        a_dR = cms.double(-0.001053),
        min_pT = cms.double(120),
        max_pT = cms.double(500),
        min_pT_dRcut = cms.double(0.5),
        max_pT_trackPTcut = cms.double(3),
        max_pT_dRcut = cms.double(0.1),
        b_dR = cms.double(0.6263),
        a_pT = cms.double(0.005263),
        totalHitsMin = cms.uint32(8),
        jetDeltaRMax = cms.double(0.3),
        qualityClass = cms.string('highPurity'),
        pixelHitsMin = cms.uint32(2),
        sip3dSigMin = cms.double(-99999.9),
        sip3dSigMax = cms.double(99999.9),
        maxDistToAxis = cms.double(0.2),
        useVariableJTA = cms.bool(False),
        sip2dValMax = cms.double(99999.9),
        maxDecayLen = cms.double(99999.9),
        ptMin = cms.double(1.0),
        sip2dSigMax = cms.double(99999.9),
        sip2dSigMin = cms.double(-99999.9),
        sip3dValMax = cms.double(99999.9),
        sip3dValMin = cms.double(-99999.9),
        sip2dValMin = cms.double(-99999.9),
        normChi2Max = cms.double(99999.9)
    )
)

process.MultiNetIso = cms.VPSet(cms.PSet(
    applyIsolation = cms.bool(True),
    cut = cms.double(-10.0),
    computerName = cms.string('OneProngNoPiZeroIso'),
    decayModeIndices = cms.vint32(0)
), 
    cms.PSet(
        applyIsolation = cms.bool(True),
        cut = cms.double(-10.0),
        computerName = cms.string('OneProngOnePiZeroIso'),
        decayModeIndices = cms.vint32(1)
    ), 
    cms.PSet(
        applyIsolation = cms.bool(True),
        cut = cms.double(-10.0),
        computerName = cms.string('OneProngTwoPiZeroIso'),
        decayModeIndices = cms.vint32(2)
    ), 
    cms.PSet(
        applyIsolation = cms.bool(True),
        cut = cms.double(-10.0),
        computerName = cms.string('ThreeProngNoPiZeroIso'),
        decayModeIndices = cms.vint32(10)
    ), 
    cms.PSet(
        applyIsolation = cms.bool(True),
        cut = cms.double(-10.0),
        computerName = cms.string('ThreeProngOnePiZeroIso'),
        decayModeIndices = cms.vint32(11)
    ))

process.SingleNetBasedTauID = cms.VPSet(cms.PSet(
    applyIsolation = cms.bool(False),
    cut = cms.double(-10.0),
    computerName = cms.string('SingleNet'),
    decayModeIndices = cms.vint32(0, 1, 2, 10, 11)
))

process.TaNC = cms.VPSet(cms.PSet(
    applyIsolation = cms.bool(False),
    cut = cms.double(-10.0),
    computerName = cms.string('OneProngNoPiZero'),
    decayModeIndices = cms.vint32(0)
), 
    cms.PSet(
        applyIsolation = cms.bool(False),
        cut = cms.double(-10.0),
        computerName = cms.string('OneProngOnePiZero'),
        decayModeIndices = cms.vint32(1)
    ), 
    cms.PSet(
        applyIsolation = cms.bool(False),
        cut = cms.double(-10.0),
        computerName = cms.string('OneProngTwoPiZero'),
        decayModeIndices = cms.vint32(2)
    ), 
    cms.PSet(
        applyIsolation = cms.bool(False),
        cut = cms.double(-10.0),
        computerName = cms.string('ThreeProngNoPiZero'),
        decayModeIndices = cms.vint32(10)
    ), 
    cms.PSet(
        applyIsolation = cms.bool(False),
        cut = cms.double(-10.0),
        computerName = cms.string('ThreeProngOnePiZero'),
        decayModeIndices = cms.vint32(11)
    ))

process.transforms = cms.VPSet(cms.PSet(
    nPiZeros = cms.uint32(0),
    transform = cms.PSet(
        max = cms.double(1.99833333333),
        transform = cms.vdouble( (0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 0.243539974508, 
            0.243539974508, 0.243539974508, 0.243539974508, 0.243693947972, 0.2446621342, 
            0.25648929965, 0.2608766459, 0.265139843949, 0.268288096025, 0.271490633611, 
            0.274812027295, 0.278726505561, 0.283196361675, 0.287921047203, 0.293485065795, 
            0.299327353484, 0.305468394708, 0.310410038477, 0.315654364298, 0.320865024837, 
            0.324875648584, 0.328691660974, 0.332598633349, 0.336484807993, 0.339893814351, 
            0.343528868912, 0.346311138119, 0.348525259682, 0.350638868762, 0.352500481165, 
            0.354385202603, 0.356405103778, 0.358448162743, 0.359626155068, 0.361359527277, 
            0.362911630832, 0.364767207965, 0.365568276809, 0.367161876825, 0.368245783665, 
            0.369700987138, 0.370891835827, 0.371335926598, 0.372724067775, 0.374122626292, 
            0.374872824273, 0.376287585272, 0.377808481377, 0.379437962659, 0.380385427158, 
            0.381454465894, 0.382529530437, 0.383308773065, 0.383900643462, 0.384488881534, 
            0.385284008411, 0.385778244795, 0.386880706208, 0.387787417873, 0.389206336729, 
            0.390430843456, 0.391560096158, 0.392490239284, 0.393218300975, 0.394889524946, 
            0.396474094424, 0.397328157396, 0.398823062781, 0.400437280424, 0.401846875958, 
            0.402719262685, 0.403705236447, 0.40437725886, 0.405483096559, 0.40715324019, 
            0.408161946716, 0.408949958358, 0.410194428622, 0.411674966358, 0.412726139917, 
            0.413994836217, 0.414922434459, 0.415970963664, 0.417494895799, 0.418345516985, 
            0.419769194149, 0.42120259427, 0.423008169722, 0.424220511323, 0.425684525769, 
            0.426912279039, 0.428023327968, 0.429389155258, 0.430889124801, 0.432147128025, 
            0.433793555744, 0.435196517338, 0.436351162787, 0.437253465009, 0.438419065687, 
            0.439590897333, 0.440949213705, 0.441921470289, 0.442848592497, 0.44396524306, 
            0.445223842049, 0.446977728682, 0.448745488265, 0.451078381688, 0.451907557714, 
            0.452739787751, 0.453638395261, 0.45475822595, 0.456165813144, 0.457223834211, 
            0.457934807034, 0.45922014571, 0.461017229233, 0.461451032994, 0.463048655665, 
            0.464804181316, 0.466425147476, 0.467542494191, 0.468517661795, 0.470468799941, 
            0.47198076935, 0.472892624736, 0.474420238705, 0.476266453893, 0.477505267649, 
            0.479532143347, 0.481200116592, 0.481613637289, 0.483360304775, 0.485061449421, 
            0.487101659613, 0.488019909526, 0.488999144832, 0.490200759674, 0.491190516798, 
            0.493849514855, 0.495306102206, 0.495928489713, 0.4964353883, 0.498082556741, 
            0.49979254034, 0.500775976586, 0.502679733683, 0.504598020717, 0.505078487853, 
            0.506619141507, 0.508171974823, 0.509336469886, 0.510953930915, 0.512581697566, 
            0.513998315702, 0.515647034962, 0.515939613111, 0.517975069449, 0.519430445753, 
            0.519957296262, 0.521273324958, 0.522406663349, 0.523925469498, 0.524625850033, 
            0.525907581275, 0.527065315655, 0.52822815856, 0.528783474767, 0.529145626115, 
            0.529453767868, 0.530435650231, 0.532014259582, 0.532782125184, 0.534528955521, 
            0.535733634238, 0.539584530704, 0.541410067901, 0.543682312792, 0.545138243861, 
            0.546811742597, 0.548048893429, 0.548459504636, 0.550158093752, 0.551205716597, 
            0.552261157841, 0.553773021814, 0.554620522074, 0.557022425024, 0.558787346691, 
            0.55989408991, 0.562351160997, 0.564603650808, 0.567330572538, 0.568251047692, 
            0.570322191691, 0.570800554836, 0.573840553165, 0.575722428922, 0.578806943369, 
            0.580018988744, 0.581943439091, 0.583637839285, 0.583719886077, 0.585230062162, 
            0.586459819001, 0.58819018682, 0.589432428675, 0.590707557501, 0.59199058109, 
            0.593311935901, 0.596143502405, 0.598713047084, 0.59985869618, 0.60146038335, 
            0.603073645068, 0.60364159568, 0.605493798425, 0.607716165748, 0.611539567166, 
            0.61344596304, 0.614868728468, 0.616356298487, 0.617243661796, 0.618356139972, 
            0.620433033442, 0.623603658141, 0.625027738979, 0.626745245057, 0.630061473707, 
            0.634451273629, 0.636224368987, 0.638386932974, 0.639666729708, 0.641472541416, 
            0.643376129813, 0.645998175052, 0.648651724655, 0.650614385321, 0.651964427491, 
            0.654372246094, 0.656912558238, 0.657658356547, 0.658734274882, 0.661006291486, 
            0.663094362812, 0.664860224717, 0.667639986138, 0.669224738703, 0.670609710516, 
            0.672008536945, 0.674322956904, 0.676181757848, 0.680504320591, 0.681701882298, 
            0.683847428048, 0.687028204213, 0.690096183579, 0.692936565842, 0.698333032093, 
            0.702469873766, 0.704533440299, 0.706621657637, 0.710308262591, 0.713270705866, 
            0.714865826284, 0.719086552707, 0.722147885763, 0.725885046087, 0.729450681758, 
            0.732859861331, 0.739185288999, 0.743172463789, 0.74657896386, 0.751327840506, 
            0.754658774214, 0.758047388164, 0.762059448212, 0.769914558551, 0.775838239214, 
            0.780728907111, 0.786952215918, 0.793694146175, 0.796885300439, 0.802863959078, 
            0.813001141474, 0.820597251397, 0.829350775725, 0.837460143471, 0.84199323298, 
            0.847433416989, 0.854638027367, 0.860714284529, 0.869959964541, 0.876007819869, 
            0.884455823419, 0.896538436371, 0.904016005807, 0.910382232961, 0.916770946986, 
            0.93386870405, 0.943467586229, 0.95165443966, 0.971789456433, 0.970755563959, 
            0.9679163435, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0, 
            1.0, 1.0, 1.0, 1.0, 1.0 ) ),
        min = cms.double(-0.998333333333)
    ),
    nCharged = cms.uint32(3)
), 
    cms.PSet(
        nPiZeros = cms.uint32(1),
        transform = cms.PSet(
            max = cms.double(1.99833333333),
            transform = cms.vdouble( (0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 0.725479663285, 
                0.725479663285, 0.725479663285, 0.725625489751, 0.725917318629, 0.727526582607, 
                0.745748231906, 0.750169168536, 0.757185219071, 0.764249672036, 0.767603981959, 
                0.772574492642, 0.775097031572, 0.777704615235, 0.779407980465, 0.781767581973, 
                0.784842584326, 0.786420654919, 0.787883166617, 0.790123535551, 0.79208138528, 
                0.79327247227, 0.795907708578, 0.798503646112, 0.800206834461, 0.802663946447, 
                0.8031582666, 0.80490222571, 0.806889568691, 0.809394028316, 0.811861583702, 
                0.813019057268, 0.81342095915, 0.814698723372, 0.816279445985, 0.818232037783, 
                0.819367026875, 0.819759858707, 0.821328989638, 0.822878675172, 0.82364763472, 
                0.825358996088, 0.828499118125, 0.829830087025, 0.831236000117, 0.832703495507, 
                0.833414247004, 0.834436344112, 0.834946785624, 0.835869791486, 0.836486520822, 
                0.837364626557, 0.838193318858, 0.839702591039, 0.841531457051, 0.842218371935, 
                0.843640339114, 0.844222988069, 0.845392038566, 0.846778761898, 0.84769605779, 
                0.848073950379, 0.848849957765, 0.849494110293, 0.8500905241, 0.851335675181, 
                0.853500950651, 0.853839833615, 0.854227213103, 0.854567621296, 0.854984559013, 
                0.855203285083, 0.856470785047, 0.857475859603, 0.85892685241, 0.859008202829, 
                0.859451257957, 0.860468389831, 0.861489507276, 0.861351261404, 0.861705874851, 
                0.861659795003, 0.861659795003, 0.86179137032, 0.862147375366, 0.862550177315, 
                0.863312092458, 0.863805642705, 0.864438066642, 0.864754370118, 0.865480701328, 
                0.866346092335, 0.867168965701, 0.867397571488, 0.868313201223, 0.868771741382, 
                0.869186401202, 0.86983185136, 0.869929474522, 0.870346507695, 0.870951429469, 
                0.870863388987, 0.871514279263, 0.872166654676, 0.872355339191, 0.872776974093, 
                0.873155878735, 0.873579101025, 0.874003066865, 0.873916467734, 0.874211597253, 
                0.874402872188, 0.87510742975, 0.87525648792, 0.87525648792, 0.875448860228, 
                0.875598481234, 0.875512416378, 0.87617785231, 0.87617785231, 0.876371452215, 
                0.877233539228, 0.877818409805, 0.87840545558, 0.87840545558, 0.878601622981, 
                0.878601622981, 0.879472984901, 0.879712328244, 0.87982581203, 0.879981638026, 
                0.880179766123, 0.880378141371, 0.880534852587, 0.880691869776, 0.8811323429, 
                0.881090533252, 0.881531917098, 0.881732079801, 0.8822162463, 0.882902187113, 
                0.882979722574, 0.88403281278, 0.885010261835, 0.884928594333, 0.885132644083, 
                0.885050953876, 0.88525535544, 0.886362380543, 0.886487219509, 0.886652934413, 
                0.887232935079, 0.887728512003, 0.888561331939, 0.889019284728, 0.889438266521, 
                0.890358658388, 0.890120720891, 0.890292192785, 0.890675834925, 0.890556765164, 
                0.890981544778, 0.891699669632, 0.891660238395, 0.891969519877, 0.892319678993, 
                0.892161931402, 0.892513711208, 0.892729546909, 0.893162065429, 0.893339503795, 
                0.893339503795, 0.893656248099, 0.894427465173, 0.894606969217, 0.894825762437, 
                0.894928163898, 0.895703822513, 0.89622167567, 0.896663385868, 0.897404545302, 
                0.89769650475, 0.899189293203, 0.899525558799, 0.900803884235, 0.901822547362, 
                0.901939302648, 0.902926505697, 0.903082359676, 0.904038745128, 0.90469561985, 
                0.904927332682, 0.905283513893, 0.906828000044, 0.907062493553, 0.908109372415, 
                0.908783021349, 0.90898498498, 0.910379224289, 0.911372920866, 0.911751863015, 
                0.912477297669, 0.913239550237, 0.91300238707, 0.913422855139, 0.915063352192, 
                0.916893920936, 0.916979020829, 0.91791358353, 0.918350995783, 0.918790342789, 
                0.919328152961, 0.919993298628, 0.920982245955, 0.922524618114, 0.923591109364, 
                0.924018850534, 0.924248923821, 0.924479515826, 0.925498182241, 0.926493584801, 
                0.927436921962, 0.927911825271, 0.928716526512, 0.929225746944, 0.929920622352, 
                0.931640820211, 0.931772433588, 0.932293506679, 0.932760264784, 0.93386870405, 
                0.934480569506, 0.934731886916, 0.935797384751, 0.936588472051, 0.936817507478, 
                0.937277790773, 0.938339506605, 0.938808219887, 0.93993649209, 0.94020045716, 
                0.940781492864, 0.941047196853, 0.942510417566, 0.942629939, 0.942750378489, 
                0.943616386541, 0.944163684906, 0.945338814696, 0.945845741457, 0.946028661789, 
                0.946308362468, 0.946541150838, 0.946751152357, 0.947576555912, 0.948029352938, 
                0.94826905955, 0.948081416726, 0.949376743021, 0.94926144862, 0.949775296374, 
                0.949706301122, 0.951268968863, 0.953037066674, 0.95357532021, 0.953770570793, 
                0.953640586734, 0.953509869657, 0.954300159882, 0.955476996866, 0.956207587781, 
                0.956355833165, 0.956846568485, 0.957770053042, 0.958723171834, 0.958928454571, 
                0.959445187694, 0.959807967592, 0.959442259047, 0.960697132989, 0.961203278228, 
                0.963193467582, 0.963932365293, 0.964461162833, 0.964482886627, 0.96526433234, 
                0.966030150632, 0.966856588211, 0.969491617691, 0.970743493871, 0.972389419268, 
                0.973307337131, 0.975623617612, 0.976087161844, 0.975647899082, 0.976736074007, 
                0.979440008803, 0.981271208497, 0.982207028661, 0.984863078211, 0.986956530647, 
                0.990258251858, 0.990208776979, 0.990702226892, 0.993228159625, 0.99534336087, 
                0.996696237239, 0.995185049087, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0 ) ),
            min = cms.double(-0.998333333333)
        ),
        nCharged = cms.uint32(1)
    ), 
    cms.PSet(
        nPiZeros = cms.uint32(0),
        transform = cms.PSet(
            max = cms.double(1.99833333333),
            transform = cms.vdouble( (0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 0.785563102399, 
                0.785563102399, 0.786753288885, 0.788132324416, 0.79656141615, 0.810183644995, 
                0.858360829913, 0.862298212616, 0.867110980413, 0.871372861265, 0.875682014578, 
                0.880242297589, 0.883696978098, 0.885512278829, 0.887768921813, 0.889264020585, 
                0.89119925019, 0.892452552697, 0.893185095837, 0.893419577074, 0.894898998675, 
                0.895774783109, 0.896260903725, 0.896505707407, 0.898082672851, 0.898779137453, 
                0.89979939771, 0.900120276805, 0.900442301311, 0.900314253861, 0.90063761708, 
                0.903107169678, 0.903707364412, 0.904624297652, 0.90437518453, 0.904187494019, 
                0.904648539996, 0.905849328721, 0.90625146477, 0.906593041173, 0.906284313013, 
                0.906627709554, 0.906627709554, 0.907095652088, 0.906972372385, 0.907318308525, 
                0.907603995571, 0.907357055463, 0.907233089763, 0.907994846936, 0.908883949265, 
                0.908883949265, 0.909836831321, 0.909836831321, 0.909776114594, 0.911030037809, 
                0.911509901723, 0.911871023987, 0.911811279009, 0.911751452972, 0.911691545709, 
                0.911511334909, 0.911451101085, 0.912784331406, 0.9125455069, 0.9125455069, 
                0.91297278083, 0.912853317543, 0.912673506387, 0.913592984461, 0.915007651179, 
                0.915441697726, 0.915324604996, 0.915207187526, 0.915148356591, 0.91552593882, 
                0.915467174967, 0.9154083293, 0.915290391839, 0.915231299701, 0.915728896806, 
                0.915728896806, 0.915552071941, 0.916492320764, 0.917377950283, 0.917822427143, 
                0.918268017622, 0.91871472591, 0.919668295227, 0.919611512782, 0.919554650007, 
                0.919440682785, 0.919269125195, 0.921306876156, 0.921306876156, 0.921082297245, 
                0.920969526416, 0.921426208902, 0.921939970027, 0.921939970027, 0.922343069964, 
                0.923319759486, 0.923727168952, 0.923727168952, 0.92460140151, 0.924492316338, 
                0.924959238052, 0.926474177051, 0.926474177051, 0.926420752856, 0.926313671218, 
                0.926785714713, 0.926785714713, 0.926785714713, 0.926732331515, 0.926732331515, 
                0.926571713811, 0.927521701059, 0.927468561656, 0.927998554333, 0.927945695605, 
                0.929008220067, 0.928746371941, 0.928693770351, 0.928641091039, 0.929607013105, 
                0.929554832769, 0.930039996532, 0.93101417799, 0.931554211882, 0.932636161324, 
                0.932585903271, 0.932585903271, 0.93357188521, 0.933522156167, 0.933967924145, 
                0.933769185329, 0.934766776762, 0.935267583538, 0.935169629185, 0.935672412756, 
                0.936176553451, 0.936176553451, 0.93779194569, 0.937554472402, 0.937458974653, 
                0.937411116161, 0.937970225775, 0.938435668089, 0.938341043455, 0.938341043455, 
                0.938903099624, 0.93885608225, 0.938808992455, 0.938714594933, 0.939278948765, 
                0.940409694612, 0.940363611919, 0.940363611919, 0.940884673949, 0.940838860114, 
                0.940700991551, 0.941179107659, 0.941750185868, 0.941750185868, 0.942276966885, 
                0.943290568826, 0.943822114749, 0.944267645451, 0.944223792272, 0.944223792272, 
                0.944223792272, 0.944223792272, 0.944135878551, 0.944091817682, 0.943959217069, 
                0.944948988041, 0.944817531021, 0.945185418124, 0.945774534438, 0.946869842865, 
                0.94678443912, 0.947292782482, 0.947803406812, 0.948955745704, 0.949513262437, 
                0.949431324505, 0.949349120177, 0.949787213059, 0.950350748429, 0.951522477849, 
                0.952051228023, 0.95197239226, 0.951813940452, 0.951734321829, 0.952189098377, 
                0.952726227521, 0.952647494583, 0.953226869405, 0.953148724357, 0.95303101596, 
                0.953497250008, 0.954122169792, 0.954006075021, 0.954594998037, 0.955778170341, 
                0.955740668477, 0.957457733339, 0.958697023242, 0.958590781777, 0.958519649968, 
                0.959665182275, 0.960242079268, 0.960242079268, 0.960855701368, 0.960787753107, 
                0.961370655681, 0.961269567079, 0.961823203605, 0.963730727425, 0.963634885553, 
                0.963570709071, 0.964138473298, 0.964106695414, 0.96404297039, 0.963914839098, 
                0.963882663464, 0.96452094996, 0.964361812095, 0.96497328025, 0.965587812399, 
                0.966174859102, 0.966052013818, 0.966021162949, 0.968018795469, 0.96867865254, 
                0.968592547647, 0.96914294659, 0.969057430126, 0.969000155331, 0.970289180287, 
                0.971618144708, 0.971511684075, 0.972907637123, 0.972856607143, 0.972753968298, 
                0.972676478315, 0.973344727784, 0.973217439385, 0.973917083716, 0.973842007934, 
                0.973791716846, 0.974496912029, 0.974447701286, 0.974373528048, 0.974273957942, 
                0.974198771106, 0.974791150217, 0.975488253999, 0.976165676348, 0.977513433798, 
                0.977332925695, 0.978053351441, 0.978734902423, 0.97864854949, 0.979275680612, 
                0.979190505138, 0.979039751165, 0.978974471583, 0.978886796984, 0.980438334358, 
                0.981887328142, 0.982567303114, 0.983312443593, 0.983168209088, 0.983021459539, 
                0.98366063828, 0.983606342672, 0.983441268961, 0.983291720735, 0.985747459607, 
                0.985615866821, 0.988157949486, 0.988031989052, 0.987786602856, 0.988507380959, 
                0.988364321833, 0.988127868612, 0.987928555371, 0.987641272072, 0.987408197679, 
                0.98704162283, 0.986691071046, 0.986360943929, 0.987048151948, 0.989952686544, 
                0.991766844123, 0.992193166195, 0.99456966538, 0.995655052048, 0.994746673755, 
                0.993062299865, 0.995491593707, 0.993997811711, 0.991951166261, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0 ) ),
            min = cms.double(-0.998333333333)
        ),
        nCharged = cms.uint32(1)
    ), 
    cms.PSet(
        nPiZeros = cms.uint32(2),
        transform = cms.PSet(
            max = cms.double(1.99833333333),
            transform = cms.vdouble( (0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 0.320694347277, 
                0.320694347277, 0.320694347277, 0.320785409267, 0.320785409267, 0.320785409267, 
                0.320967688479, 0.32115017496, 0.32115017496, 0.32115017496, 0.32115017496, 
                0.321332869066, 0.321607300294, 0.321790515012, 0.322065728828, 0.322709728783, 
                0.337811096719, 0.33917314626, 0.341489359417, 0.343051156809, 0.344690580804, 
                0.34605531485, 0.347729452006, 0.349352972192, 0.351698761571, 0.354076266303, 
                0.356364861761, 0.357459291064, 0.358806090169, 0.360659074159, 0.361655179522, 
                0.363285639001, 0.363823848893, 0.365224296488, 0.366635567078, 0.368317558281, 
                0.36949108301, 0.370409007364, 0.370997606343, 0.372726361337, 0.373488515297, 
                0.374412657806, 0.375752608537, 0.377534910678, 0.378625338634, 0.379181030815, 
                0.379877944035, 0.382266731549, 0.382549741971, 0.383828491978, 0.38525242259, 
                0.386835650852, 0.38785063627, 0.389317222671, 0.390498501728, 0.392134514369, 
                0.392433445129, 0.393938724972, 0.395003106909, 0.395165758646, 0.395929379967, 
                0.396695958257, 0.397011143016, 0.398247378442, 0.399356983741, 0.399994683207, 
                0.401254354869, 0.40236309389, 0.403477977186, 0.404278112546, 0.405403648355, 
                0.406718341929, 0.408044942586, 0.409053791836, 0.409879342767, 0.410568240656, 
                0.411067477386, 0.412572498902, 0.413612340683, 0.414628216181, 0.41718987191, 
                0.417878334739, 0.41856907358, 0.419300644011, 0.420520753157, 0.420777117228, 
                0.422716149289, 0.423248081689, 0.424315972822, 0.425568676714, 0.426697968924, 
                0.427784748237, 0.428512348538, 0.429242428143, 0.430526071506, 0.4311350135, 
                0.432803583714, 0.433609675616, 0.434608917639, 0.436308891919, 0.436878509184, 
                0.437640316502, 0.438596319943, 0.440520911858, 0.441683795845, 0.443048277506, 
                0.444696219849, 0.446478472767, 0.44715804854, 0.448645092811, 0.450058431683, 
                0.450666877959, 0.450755388115, 0.451660727674, 0.452685605028, 0.453508861839, 
                0.455164391331, 0.456611329026, 0.456920461171, 0.457863702358, 0.45902581005, 
                0.459451411686, 0.460410936031, 0.461808077134, 0.4630001435, 0.46452516501, 
                0.465632370863, 0.466972634942, 0.467639712811, 0.468206417853, 0.469000443277, 
                0.470125946746, 0.471938031657, 0.473437184975, 0.474815974144, 0.475643583896, 
                0.477037107394, 0.478345116523, 0.479756398109, 0.482127131145, 0.483321305722, 
                0.484827612962, 0.485378450947, 0.486839313932, 0.488800865348, 0.488631796262, 
                0.489784626283, 0.49019813266, 0.490696455307, 0.492699918902, 0.493707798202, 
                0.495481544763, 0.497780890453, 0.499067549901, 0.499842743245, 0.501067711008, 
                0.501110885208, 0.503739653301, 0.504533670387, 0.507669169039, 0.508207246665, 
                0.510099534144, 0.511125093239, 0.513041788431, 0.514972912765, 0.517927881794, 
                0.519848789077, 0.52116702462, 0.522598588906, 0.524038039421, 0.524905522273, 
                0.525729939569, 0.527349110611, 0.528189103375, 0.529884063982, 0.531038635091, 
                0.531258876588, 0.533372518417, 0.532652261497, 0.533222445036, 0.533832435241, 
                0.534714171593, 0.536561182549, 0.536184284139, 0.538295230995, 0.539204274194, 
                0.539743792118, 0.542257448251, 0.543191981222, 0.54415669717, 0.545124845911, 
                0.546421082543, 0.548704392123, 0.551006864138, 0.551639517385, 0.554308295208, 
                0.554286639155, 0.555277851271, 0.557294734318, 0.558661984326, 0.560735788966, 
                0.561777981725, 0.56352691872, 0.56493793563, 0.567793486879, 0.568888208725, 
                0.57034433091, 0.570356276084, 0.572191934216, 0.573659294894, 0.574044772549, 
                0.575543527534, 0.577054482298, 0.578553389267, 0.580816407199, 0.582777514902, 
                0.58546601664, 0.587013469943, 0.586699955875, 0.587164603914, 0.589909772096, 
                0.590347109603, 0.591182964289, 0.593622213241, 0.595632610766, 0.596088895792, 
                0.596547219627, 0.597007595967, 0.59905000376, 0.59875479532, 0.600402032492, 
                0.601476624751, 0.602375325225, 0.604611692334, 0.606308877758, 0.609454442616, 
                0.612487831768, 0.615198564485, 0.616345932738, 0.617679752716, 0.620364786891, 
                0.621560433387, 0.622923085077, 0.622771613804, 0.627021967049, 0.629464905691, 
                0.630636176618, 0.632414811477, 0.635412621765, 0.636860801036, 0.638359784998, 
                0.642296739762, 0.64372019874, 0.646732193739, 0.649419880322, 0.653004922396, 
                0.654536589972, 0.657493324695, 0.65872664624, 0.662116021475, 0.666837437051, 
                0.668332370106, 0.670194812833, 0.671514734427, 0.671514734427, 0.672844093862, 
                0.672352092845, 0.678607302272, 0.681605563269, 0.681020472505, 0.682082800049, 
                0.684848783291, 0.686959317553, 0.690918830645, 0.691984674993, 0.694695530605, 
                0.697455651971, 0.700496795416, 0.703736816672, 0.704917801757, 0.706220722464, 
                0.707858889942, 0.71018130526, 0.714321429016, 0.720425948473, 0.724503155871, 
                0.727977004139, 0.730714468803, 0.735012362904, 0.739735756402, 0.750660954162, 
                0.757799352464, 0.760515374245, 0.768004247792, 0.77935327172, 0.784646260495, 
                0.789164336822, 0.791123170072, 0.795276817521, 0.804299018936, 0.819103217408, 
                0.822961151625, 0.833298258018, 0.842807182616, 0.85334688934, 0.86724344838, 
                0.872176831791, 0.87195156781, 0.87843961359, 0.891494313173, 0.912879175226, 
                0.924218217451, 0.937234161591, 0.94206607914, 0.958884557005, 0.959595443343, 
                0.93904371889, 0.927733482302, 0.93386870405, 0.916051159827, 0.943467586229, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0, 
                1.0, 1.0, 1.0, 1.0, 1.0 ) ),
            min = cms.double(-0.998333333333)
        ),
        nCharged = cms.uint32(1)
    ))

